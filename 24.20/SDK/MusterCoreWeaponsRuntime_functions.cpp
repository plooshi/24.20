#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MusterCoreWeaponsRuntime

#include "Basic.hpp"

#include "MusterCoreWeaponsRuntime_classes.hpp"
#include "MusterCoreWeaponsRuntime_parameters.hpp"


namespace SDK
{

// Function MusterCoreWeaponsRuntime.FortMusterExplosiveARProjectile.OnRep_HitLocation
// (Final, Native, Protected)

void AFortMusterExplosiveARProjectile::OnRep_HitLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMusterExplosiveARProjectile", "OnRep_HitLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MusterCoreWeaponsRuntime.FortMusterExplosiveARProjectile.SetHitLocation
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewHitLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortMusterExplosiveARProjectile::SetHitLocation(const struct FVector& NewHitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMusterExplosiveARProjectile", "SetHitLocation");

	Params::FortMusterExplosiveARProjectile_SetHitLocation Parms{};

	Parms.NewHitLocation = std::move(NewHitLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MusterCoreWeaponsRuntime.FortMusterExplosiveARProjectile.SetHitPlayer
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bWasHit                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortMusterExplosiveARProjectile::SetHitPlayer(bool bWasHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMusterExplosiveARProjectile", "SetHitPlayer");

	Params::FortMusterExplosiveARProjectile_SetHitPlayer Parms{};

	Parms.bWasHit = bWasHit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MusterCoreWeaponsRuntime.FortMusterExplosiveARProjectile.SetHitRotation
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         NewHitRotation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AFortMusterExplosiveARProjectile::SetHitRotation(const struct FRotator& NewHitRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMusterExplosiveARProjectile", "SetHitRotation");

	Params::FortMusterExplosiveARProjectile_SetHitRotation Parms{};

	Parms.NewHitRotation = std::move(NewHitRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MusterCoreWeaponsRuntime.FortExCaliberProjectile.BP_OnProjectileStopped
// (Event, Protected, BlueprintEvent)

void AFortExCaliberProjectile::BP_OnProjectileStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExCaliberProjectile", "BP_OnProjectileStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MusterCoreWeaponsRuntime.FortExCaliberProjectile.OnAttachedActorDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortExCaliberProjectile::OnAttachedActorDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExCaliberProjectile", "OnAttachedActorDestroyed");

	Params::FortExCaliberProjectile_OnAttachedActorDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MusterCoreWeaponsRuntime.FortExCaliberProjectile.OnAttachedBuildingDestroyed
// (Final, Native, Protected, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              FHitComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortExCaliberProjectile::OnAttachedBuildingDestroyed(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExCaliberProjectile", "OnAttachedBuildingDestroyed");

	Params::FortExCaliberProjectile_OnAttachedBuildingDestroyed Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MusterCoreWeaponsRuntime.FortExCaliberProjectile.OnRep_bSimulationRunning
// (Final, Native, Protected)

void AFortExCaliberProjectile::OnRep_bSimulationRunning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExCaliberProjectile", "OnRep_bSimulationRunning");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MusterCoreWeaponsRuntime.FortExCaliberProjectile.PlayPreExplosionEfffects
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void AFortExCaliberProjectile::PlayPreExplosionEfffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExCaliberProjectile", "PlayPreExplosionEfffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MusterCoreWeaponsRuntime.FortExCaliberProjectile.RestartSimulating
// (Final, Native, Protected, BlueprintCallable)

void AFortExCaliberProjectile::RestartSimulating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExCaliberProjectile", "RestartSimulating");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MusterCoreWeaponsRuntime.FortExCaliberProjectile.SetFuseColorBasedOnTeam
// (Event, Protected, BlueprintEvent)

void AFortExCaliberProjectile::SetFuseColorBasedOnTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExCaliberProjectile", "SetFuseColorBasedOnTeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MusterCoreWeaponsRuntime.FortExCaliberProjectile.SetupProjectileHitAudio
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          ProjectileImpactLocation                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           HitActor                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortExCaliberProjectile::SetupProjectileHitAudio(const struct FVector& ProjectileImpactLocation, const class AActor* HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExCaliberProjectile", "SetupProjectileHitAudio");

	Params::FortExCaliberProjectile_SetupProjectileHitAudio Parms{};

	Parms.ProjectileImpactLocation = std::move(ProjectileImpactLocation);
	Parms.HitActor = HitActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MusterCoreWeaponsRuntime.FortExCaliberProjectile.SetupSwordRevealEffects
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*             ProjectileMesh                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SwordRevealAlpha                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ColorChangeAlpha                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HDRMultiplierAlpha                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortExCaliberProjectile::SetupSwordRevealEffects(class UStaticMeshComponent* ProjectileMesh, float SwordRevealAlpha, float ColorChangeAlpha, float HDRMultiplierAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExCaliberProjectile", "SetupSwordRevealEffects");

	Params::FortExCaliberProjectile_SetupSwordRevealEffects Parms{};

	Parms.ProjectileMesh = ProjectileMesh;
	Parms.SwordRevealAlpha = SwordRevealAlpha;
	Parms.ColorChangeAlpha = ColorChangeAlpha;
	Parms.HDRMultiplierAlpha = HDRMultiplierAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MusterCoreWeaponsRuntime.FortExCaliberProjectile.TriggerExplosion
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void AFortExCaliberProjectile::TriggerExplosion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExCaliberProjectile", "TriggerExplosion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MusterCoreWeaponsRuntime.FortExCaliberProjectile.UnblockPawnCollision
// (Event, Protected, BlueprintEvent)

void AFortExCaliberProjectile::UnblockPawnCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortExCaliberProjectile", "UnblockPawnCollision");

	UObject::ProcessEvent(Func, nullptr);
}

}

