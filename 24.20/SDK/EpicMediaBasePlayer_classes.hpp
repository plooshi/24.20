#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EpicMediaBasePlayer

#include "Basic.hpp"

#include "EpicMediaBasePlayer_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "EpicStreamMediaSource_structs.hpp"


namespace SDK
{

// Class EpicMediaBasePlayer.EpicBaseStreamingVideo
// 0x00B8 (0x00E0 - 0x0028)
class UEpicBaseStreamingVideo : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EBaseMediaTerminalErrorReason Reason)> VideoOnTerminalError;                              // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              VideoOnSuccess;                                    // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnResumedEvent;                                    // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class UEpicStreamMediaSource*                 MediaSource;                                       // 0x0060(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMediaPlayer*                           MediaPlayer;                                       // 0x0068(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntPoint                              VideoSize;                                         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_78[0x50];                                      // 0x0078(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundSubmixBase*                       DefaultSubmix;                                     // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundSubmixBase*                       LicensedSubmix;                                    // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMediaSoundComponent*                   MediaSoundComponent;                               // 0x00D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UMediaPlayer* GetMediaPlayer();
	struct FMediaPlayerOptions GetMediaPlayerOptions();
	class UEpicStreamMediaSource* GetMediaSource();
	void HandleLicensedAudioTreatmentChanged(EUCPTypes UCPType);
	void HandleMediaClosed();
	void HandleMediaOpenedFailed(const class FString& FailedUrl);
	void HandleMediaPlayerPlaybackResumed();
	bool Init(class UMediaTexture* InVideoTexture, class UMediaPlayer* InMediaPlayer, class UEpicStreamMediaSource* InMediaSource, bool InCDNFailover);
	void OnFailedURL(const class FString& URL);
	void OnSuccessfulURL(const class FString& URL);
	bool Open(const struct FMediaPlayerOptions& InMediaOptions);
	void Release();
	void RetryOnError(bool bFromPlayer);
	void SetSoundSubmixes(class UMediaSoundComponent* InSoundComponent, class USoundSubmixBase* InDefault, class USoundSubmixBase* InLicensed);
	void SetVideoSize(const int32 Width, const int32 Height);
	void Start(const class FString& InVUID, class UMediaTexture* InVideoTexture);
	void Stop(bool bRelease);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EpicBaseStreamingVideo">();
	}
	static class UEpicBaseStreamingVideo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEpicBaseStreamingVideo>();
	}
};
static_assert(alignof(UEpicBaseStreamingVideo) == 0x000008, "Wrong alignment on UEpicBaseStreamingVideo");
static_assert(sizeof(UEpicBaseStreamingVideo) == 0x0000E0, "Wrong size on UEpicBaseStreamingVideo");
static_assert(offsetof(UEpicBaseStreamingVideo, VideoOnTerminalError) == 0x000030, "Member 'UEpicBaseStreamingVideo::VideoOnTerminalError' has a wrong offset!");
static_assert(offsetof(UEpicBaseStreamingVideo, VideoOnSuccess) == 0x000040, "Member 'UEpicBaseStreamingVideo::VideoOnSuccess' has a wrong offset!");
static_assert(offsetof(UEpicBaseStreamingVideo, OnResumedEvent) == 0x000050, "Member 'UEpicBaseStreamingVideo::OnResumedEvent' has a wrong offset!");
static_assert(offsetof(UEpicBaseStreamingVideo, MediaSource) == 0x000060, "Member 'UEpicBaseStreamingVideo::MediaSource' has a wrong offset!");
static_assert(offsetof(UEpicBaseStreamingVideo, MediaPlayer) == 0x000068, "Member 'UEpicBaseStreamingVideo::MediaPlayer' has a wrong offset!");
static_assert(offsetof(UEpicBaseStreamingVideo, VideoSize) == 0x000070, "Member 'UEpicBaseStreamingVideo::VideoSize' has a wrong offset!");
static_assert(offsetof(UEpicBaseStreamingVideo, DefaultSubmix) == 0x0000C8, "Member 'UEpicBaseStreamingVideo::DefaultSubmix' has a wrong offset!");
static_assert(offsetof(UEpicBaseStreamingVideo, LicensedSubmix) == 0x0000D0, "Member 'UEpicBaseStreamingVideo::LicensedSubmix' has a wrong offset!");
static_assert(offsetof(UEpicBaseStreamingVideo, MediaSoundComponent) == 0x0000D8, "Member 'UEpicBaseStreamingVideo::MediaSoundComponent' has a wrong offset!");

}

