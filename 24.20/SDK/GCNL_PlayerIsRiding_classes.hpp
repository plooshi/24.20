#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GCNL_PlayerIsRiding

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GCNL_PlayerIsRiding.GCNL_PlayerIsRiding_C
// 0x00D0 (0x0A30 - 0x0960)
class AGCNL_PlayerIsRiding_C final : public AFortGameplayCueNotify_Loop
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0960(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USoundBase*                             RidingSoundLoop;                                   // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        RidingSoundLoopComp;                               // 0x0970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           VelocityTimerHandle;                               // 0x0978(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Player;                                            // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortTeamAffiliation                          TeamAffiliation;                                   // 0x0990(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_991[0x7];                                      // 0x0991(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Previous;                                          // 0x0998(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Enemy_RidingSoundLoop;                             // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawnAthena*                  As_Fort_Player_Pawn_Athena;                        // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        JumpParamTarget;                                   // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JumpValue;                                         // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsFalling;                                        // 0x09D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanResetJump;                                     // 0x09D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D2[0x6];                                      // 0x09D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPawnMovementComponent*                 CreatureMovementComponent;                         // 0x09D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           JumpResetTimerHandle;                              // 0x09E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        JumpPitchInterpSpeed;                              // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   RidingCurveTable;                                  // 0x09F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BoarSprintSpeed;                                   // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentVelocity;                                   // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxNormalRunSpeed;                                 // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSprinting;                                        // 0x0A18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A19[0x7];                                      // 0x0A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxSpeed;                                          // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeedClamped;                                   // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CalculateVelocityParam();
	void ExecuteUbergraph_GCNL_PlayerIsRiding(int32 EntryPoint);
	void OnJumpApex();
	void OnLoopingStartGeneric(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, const TArray<class UFXSystemComponent*>& ParticleComponents, const TArray<class UAudioComponent*>& AudioComponents);
	void OnRemovalGeneric(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, const TArray<class UFXSystemComponent*>& ParticleComponents, const TArray<class UAudioComponent*>& AudioComponents, class ULegacyCameraShake* BurstCameraShakeInstance, class ADecalActor* BurstDecalInstance);
	void PlayerRidingDCNLEnded();
	void PlayerRidingGCNLStarted();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetUpRidableAudioEvents();
	void StartLoopingAudio();
	bool WhileActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GCNL_PlayerIsRiding_C">();
	}
	static class AGCNL_PlayerIsRiding_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGCNL_PlayerIsRiding_C>();
	}
};
static_assert(alignof(AGCNL_PlayerIsRiding_C) == 0x000008, "Wrong alignment on AGCNL_PlayerIsRiding_C");
static_assert(sizeof(AGCNL_PlayerIsRiding_C) == 0x000A30, "Wrong size on AGCNL_PlayerIsRiding_C");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, UberGraphFrame) == 0x000960, "Member 'AGCNL_PlayerIsRiding_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, RidingSoundLoop) == 0x000968, "Member 'AGCNL_PlayerIsRiding_C::RidingSoundLoop' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, RidingSoundLoopComp) == 0x000970, "Member 'AGCNL_PlayerIsRiding_C::RidingSoundLoopComp' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, VelocityTimerHandle) == 0x000978, "Member 'AGCNL_PlayerIsRiding_C::VelocityTimerHandle' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, Player) == 0x000980, "Member 'AGCNL_PlayerIsRiding_C::Player' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, Speed) == 0x000988, "Member 'AGCNL_PlayerIsRiding_C::Speed' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, TeamAffiliation) == 0x000990, "Member 'AGCNL_PlayerIsRiding_C::TeamAffiliation' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, Previous) == 0x000998, "Member 'AGCNL_PlayerIsRiding_C::Previous' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, Enemy_RidingSoundLoop) == 0x0009B0, "Member 'AGCNL_PlayerIsRiding_C::Enemy_RidingSoundLoop' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, As_Fort_Player_Pawn_Athena) == 0x0009B8, "Member 'AGCNL_PlayerIsRiding_C::As_Fort_Player_Pawn_Athena' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, JumpParamTarget) == 0x0009C0, "Member 'AGCNL_PlayerIsRiding_C::JumpParamTarget' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, JumpValue) == 0x0009C8, "Member 'AGCNL_PlayerIsRiding_C::JumpValue' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, bIsFalling) == 0x0009D0, "Member 'AGCNL_PlayerIsRiding_C::bIsFalling' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, bCanResetJump) == 0x0009D1, "Member 'AGCNL_PlayerIsRiding_C::bCanResetJump' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, CreatureMovementComponent) == 0x0009D8, "Member 'AGCNL_PlayerIsRiding_C::CreatureMovementComponent' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, JumpResetTimerHandle) == 0x0009E0, "Member 'AGCNL_PlayerIsRiding_C::JumpResetTimerHandle' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, JumpPitchInterpSpeed) == 0x0009E8, "Member 'AGCNL_PlayerIsRiding_C::JumpPitchInterpSpeed' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, RidingCurveTable) == 0x0009F0, "Member 'AGCNL_PlayerIsRiding_C::RidingCurveTable' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, BoarSprintSpeed) == 0x000A00, "Member 'AGCNL_PlayerIsRiding_C::BoarSprintSpeed' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, CurrentVelocity) == 0x000A08, "Member 'AGCNL_PlayerIsRiding_C::CurrentVelocity' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, MaxNormalRunSpeed) == 0x000A10, "Member 'AGCNL_PlayerIsRiding_C::MaxNormalRunSpeed' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, bSprinting) == 0x000A18, "Member 'AGCNL_PlayerIsRiding_C::bSprinting' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, MaxSpeed) == 0x000A20, "Member 'AGCNL_PlayerIsRiding_C::MaxSpeed' has a wrong offset!");
static_assert(offsetof(AGCNL_PlayerIsRiding_C, MaxSpeedClamped) == 0x000A28, "Member 'AGCNL_PlayerIsRiding_C::MaxSpeedClamped' has a wrong offset!");

}

