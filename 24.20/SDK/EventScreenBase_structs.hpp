#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EventScreenBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum EventScreenBase.EEventScreenView
// NumValues: 0x0007
enum class EEventScreenView : uint8
{
	None                                     = 0,
	LandingPage                              = 1,
	RewardPreview                            = 2,
	MoreInfo                                 = 3,
	PurchaseReward                           = 4,
	LoadError                                = 5,
	EEventScreenView_MAX                     = 6,
};

// ScriptStruct EventScreenBase.DoubleWidthItem
// 0x0050 (0x0050 - 0x0000)
struct FDoubleWidthItem final
{
public:
	TSoftObjectPtr<class UFortItemDefinition>     ItemDefinition;                                    // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UTexture2D>              CustomItemTexture;                                 // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDoubleWidthItem) == 0x000008, "Wrong alignment on FDoubleWidthItem");
static_assert(sizeof(FDoubleWidthItem) == 0x000050, "Wrong size on FDoubleWidthItem");
static_assert(offsetof(FDoubleWidthItem, ItemDefinition) == 0x000000, "Member 'FDoubleWidthItem::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FDoubleWidthItem, CustomItemTexture) == 0x000028, "Member 'FDoubleWidthItem::CustomItemTexture' has a wrong offset!");

// ScriptStruct EventScreenBase.EventScreenTrackData
// 0x0020 (0x0020 - 0x0000)
struct FEventScreenTrackData final
{
public:
	struct FLinearColor                           TrackColorPrimary;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TrackColorSecondary;                               // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventScreenTrackData) == 0x000004, "Wrong alignment on FEventScreenTrackData");
static_assert(sizeof(FEventScreenTrackData) == 0x000020, "Wrong size on FEventScreenTrackData");
static_assert(offsetof(FEventScreenTrackData, TrackColorPrimary) == 0x000000, "Member 'FEventScreenTrackData::TrackColorPrimary' has a wrong offset!");
static_assert(offsetof(FEventScreenTrackData, TrackColorSecondary) == 0x000010, "Member 'FEventScreenTrackData::TrackColorSecondary' has a wrong offset!");

// ScriptStruct EventScreenBase.EventScreenCMSResourceGroupOverride
// 0x0018 (0x0018 - 0x0000)
struct FEventScreenCMSResourceGroupOverride final
{
public:
	int32                                         ResourceValue;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 KeyArtOverrideURL;                                 // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventScreenCMSResourceGroupOverride) == 0x000008, "Wrong alignment on FEventScreenCMSResourceGroupOverride");
static_assert(sizeof(FEventScreenCMSResourceGroupOverride) == 0x000018, "Wrong size on FEventScreenCMSResourceGroupOverride");
static_assert(offsetof(FEventScreenCMSResourceGroupOverride, ResourceValue) == 0x000000, "Member 'FEventScreenCMSResourceGroupOverride::ResourceValue' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSResourceGroupOverride, KeyArtOverrideURL) == 0x000008, "Member 'FEventScreenCMSResourceGroupOverride::KeyArtOverrideURL' has a wrong offset!");

// ScriptStruct EventScreenBase.EventScreenCMSData
// 0x01B8 (0x01B8 - 0x0000)
struct FEventScreenCMSData final
{
public:
	class FString                                 EventCMSId;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   EventName;                                         // 0x0010(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   EventDescription;                                  // 0x0028(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   ResourceHeader;                                    // 0x0040(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   StarterHeader;                                     // 0x0058(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   CompletionHeader;                                  // 0x0070(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   EventCTA;                                          // 0x0088(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   EventCTACompleted;                                 // 0x00A0(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   HeaderCTA;                                         // 0x00B8(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   ItemShopCallout;                                   // 0x00D0(0x0018)(NativeAccessSpecifierPublic)
	class FString                                 CTAIconURL;                                        // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyArtURL;                                         // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MoreInfoHeader;                                    // 0x0108(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   MoreInfoSubHeader;                                 // 0x0120(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   MoreInfoBody;                                      // 0x0138(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   MoreInfoLegal;                                     // 0x0150(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   PurchaseLegal;                                     // 0x0168(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   RewardTrackLegal;                                  // 0x0180(0x0018)(NativeAccessSpecifierPublic)
	class FString                                 ItemShopOfferId;                                   // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEventScreenCMSResourceGroupOverride> ResourceGroupOverrides;                            // 0x01A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventScreenCMSData) == 0x000008, "Wrong alignment on FEventScreenCMSData");
static_assert(sizeof(FEventScreenCMSData) == 0x0001B8, "Wrong size on FEventScreenCMSData");
static_assert(offsetof(FEventScreenCMSData, EventCMSId) == 0x000000, "Member 'FEventScreenCMSData::EventCMSId' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, EventName) == 0x000010, "Member 'FEventScreenCMSData::EventName' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, EventDescription) == 0x000028, "Member 'FEventScreenCMSData::EventDescription' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, ResourceHeader) == 0x000040, "Member 'FEventScreenCMSData::ResourceHeader' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, StarterHeader) == 0x000058, "Member 'FEventScreenCMSData::StarterHeader' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, CompletionHeader) == 0x000070, "Member 'FEventScreenCMSData::CompletionHeader' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, EventCTA) == 0x000088, "Member 'FEventScreenCMSData::EventCTA' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, EventCTACompleted) == 0x0000A0, "Member 'FEventScreenCMSData::EventCTACompleted' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, HeaderCTA) == 0x0000B8, "Member 'FEventScreenCMSData::HeaderCTA' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, ItemShopCallout) == 0x0000D0, "Member 'FEventScreenCMSData::ItemShopCallout' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, CTAIconURL) == 0x0000E8, "Member 'FEventScreenCMSData::CTAIconURL' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, KeyArtURL) == 0x0000F8, "Member 'FEventScreenCMSData::KeyArtURL' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, MoreInfoHeader) == 0x000108, "Member 'FEventScreenCMSData::MoreInfoHeader' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, MoreInfoSubHeader) == 0x000120, "Member 'FEventScreenCMSData::MoreInfoSubHeader' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, MoreInfoBody) == 0x000138, "Member 'FEventScreenCMSData::MoreInfoBody' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, MoreInfoLegal) == 0x000150, "Member 'FEventScreenCMSData::MoreInfoLegal' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, PurchaseLegal) == 0x000168, "Member 'FEventScreenCMSData::PurchaseLegal' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, RewardTrackLegal) == 0x000180, "Member 'FEventScreenCMSData::RewardTrackLegal' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, ItemShopOfferId) == 0x000198, "Member 'FEventScreenCMSData::ItemShopOfferId' has a wrong offset!");
static_assert(offsetof(FEventScreenCMSData, ResourceGroupOverrides) == 0x0001A8, "Member 'FEventScreenCMSData::ResourceGroupOverrides' has a wrong offset!");

// ScriptStruct EventScreenBase.EventScreenCMSGroup
// 0x0010 (0x0010 - 0x0000)
struct FEventScreenCMSGroup final
{
public:
	TArray<struct FEventScreenCMSData>            EventScreens;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventScreenCMSGroup) == 0x000008, "Wrong alignment on FEventScreenCMSGroup");
static_assert(sizeof(FEventScreenCMSGroup) == 0x000010, "Wrong size on FEventScreenCMSGroup");
static_assert(offsetof(FEventScreenCMSGroup, EventScreens) == 0x000000, "Member 'FEventScreenCMSGroup::EventScreens' has a wrong offset!");

}

