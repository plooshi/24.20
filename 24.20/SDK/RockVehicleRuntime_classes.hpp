#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RockVehicleRuntime

#include "Basic.hpp"

#include "VehicleAudioRuntime_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "RockVehicleRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SrirachaRanch_classes.hpp"


namespace SDK
{

// Class RockVehicleRuntime.RockVehicle_InteractionOverrideComponent
// 0x0000 (0x00A0 - 0x00A0)
class URockVehicle_InteractionOverrideComponent final : public UFortVehicleInteractionOverrideComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicle_InteractionOverrideComponent">();
	}
	static class URockVehicle_InteractionOverrideComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicle_InteractionOverrideComponent>();
	}
};
static_assert(alignof(URockVehicle_InteractionOverrideComponent) == 0x000008, "Wrong alignment on URockVehicle_InteractionOverrideComponent");
static_assert(sizeof(URockVehicle_InteractionOverrideComponent) == 0x0000A0, "Wrong size on URockVehicle_InteractionOverrideComponent");

// Class RockVehicleRuntime.FortCheatManager_RockVehicle
// 0x0000 (0x0028 - 0x0028)
class UFortCheatManager_RockVehicle final : public UChildCheatManager
{
public:
	void RockVehicleSetBalboaVelocity(float X, float Y, float Z);
	void RockVehicleSetLocation(float X, float Y, float Z);
	void RockVehicleSetRotation(float Pitch, float Yaw, float Roll);
	void RockVehicleSetVelocity(float X, float Y, float Z);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatManager_RockVehicle">();
	}
	static class UFortCheatManager_RockVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatManager_RockVehicle>();
	}
};
static_assert(alignof(UFortCheatManager_RockVehicle) == 0x000008, "Wrong alignment on UFortCheatManager_RockVehicle");
static_assert(sizeof(UFortCheatManager_RockVehicle) == 0x000028, "Wrong size on UFortCheatManager_RockVehicle");

// Class RockVehicleRuntime.RockVehicle
// 0x0240 (0x1CF0 - 0x1AB0)
class ARockVehicle final : public AFortAthenaSKVehicle
{
public:
	float                                         InputSwivelPitch;                                  // 0x1AB0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputSwivelYaw;                                    // 0x1AB4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bInputReverseCamera : 1;                           // 0x1AB8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasDoubleJumped : 1;                              // 0x1AB8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasDodged : 1;                                    // 0x1AB8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bFreeLookCamera;                                   // 0x1AB9(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ABA[0x6];                                     // 0x1ABA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bFreeCam)> OnFreeCamToggled;                                  // 0x1AC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AD0[0x1];                                     // 0x1AD0(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRockRuntimeConfigOverrides            RockRuntimeConfigs;                                // 0x1AD1(0x0004)(Net, Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AD5[0x1B];                                    // 0x1AD5(0x001B)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class FName Socket, float ImpactSpeed, struct FHitResult& OutHit)> OnSpringImpact;                                    // 0x1AF0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B00[0x78];                                    // 0x1B00(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	class URockVehicleAnalyticsComponent*         RockAnalyticsComp;                                 // 0x1B78(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class URockVehicleAbility*>            VehicleAbilities;                                  // 0x1B80(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           VehicleAbilityTickOrder;                           // 0x1B90(0x0010)(Edit, ZeroConstructor, Config, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class AFortVehicleAudioController*            CachedVehicleAudioController;                      // 0x1BA0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URockVehicleAbility_Supersonic*         SupersonicAbility;                                 // 0x1BA8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URockVehicleAnimInstance*               RockAnimInstance;                                  // 0x1BB0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFortAthenaVehicleInputState           PendingDriverInputState;                           // 0x1BB8(0x0040)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAthenaVehicleInputState           PrevDriverInputState;                              // 0x1BF8(0x0040)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                EnterExitImpulse;                                  // 0x1C38(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C50[0xA0];                                    // 0x1C50(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_FreeLookCamera();
	void ServerSetLegacyDamageValues(bool bDamageFriendlyVehicles, bool bDamageOtherVehicles, bool bDamageOwnVehicle, bool bDamageAllowedFromOtherVehicle);
	void ServerToggleFreeCam();

	const struct FRockRuntimeConfigOverrides GetCurrentRockRuntimeConfigOverrides() const;
	struct FFortAthenaVehicleInputState GetDriverInput() const;
	float GetThrottleState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicle">();
	}
	static class ARockVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARockVehicle>();
	}
};
static_assert(alignof(ARockVehicle) == 0x000010, "Wrong alignment on ARockVehicle");
static_assert(sizeof(ARockVehicle) == 0x001CF0, "Wrong size on ARockVehicle");
static_assert(offsetof(ARockVehicle, InputSwivelPitch) == 0x001AB0, "Member 'ARockVehicle::InputSwivelPitch' has a wrong offset!");
static_assert(offsetof(ARockVehicle, InputSwivelYaw) == 0x001AB4, "Member 'ARockVehicle::InputSwivelYaw' has a wrong offset!");
static_assert(offsetof(ARockVehicle, bFreeLookCamera) == 0x001AB9, "Member 'ARockVehicle::bFreeLookCamera' has a wrong offset!");
static_assert(offsetof(ARockVehicle, OnFreeCamToggled) == 0x001AC0, "Member 'ARockVehicle::OnFreeCamToggled' has a wrong offset!");
static_assert(offsetof(ARockVehicle, RockRuntimeConfigs) == 0x001AD1, "Member 'ARockVehicle::RockRuntimeConfigs' has a wrong offset!");
static_assert(offsetof(ARockVehicle, OnSpringImpact) == 0x001AF0, "Member 'ARockVehicle::OnSpringImpact' has a wrong offset!");
static_assert(offsetof(ARockVehicle, RockAnalyticsComp) == 0x001B78, "Member 'ARockVehicle::RockAnalyticsComp' has a wrong offset!");
static_assert(offsetof(ARockVehicle, VehicleAbilities) == 0x001B80, "Member 'ARockVehicle::VehicleAbilities' has a wrong offset!");
static_assert(offsetof(ARockVehicle, VehicleAbilityTickOrder) == 0x001B90, "Member 'ARockVehicle::VehicleAbilityTickOrder' has a wrong offset!");
static_assert(offsetof(ARockVehicle, CachedVehicleAudioController) == 0x001BA0, "Member 'ARockVehicle::CachedVehicleAudioController' has a wrong offset!");
static_assert(offsetof(ARockVehicle, SupersonicAbility) == 0x001BA8, "Member 'ARockVehicle::SupersonicAbility' has a wrong offset!");
static_assert(offsetof(ARockVehicle, RockAnimInstance) == 0x001BB0, "Member 'ARockVehicle::RockAnimInstance' has a wrong offset!");
static_assert(offsetof(ARockVehicle, PendingDriverInputState) == 0x001BB8, "Member 'ARockVehicle::PendingDriverInputState' has a wrong offset!");
static_assert(offsetof(ARockVehicle, PrevDriverInputState) == 0x001BF8, "Member 'ARockVehicle::PrevDriverInputState' has a wrong offset!");
static_assert(offsetof(ARockVehicle, EnterExitImpulse) == 0x001C38, "Member 'ARockVehicle::EnterExitImpulse' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleAbility
// 0x0010 (0x00B0 - 0x00A0)
class URockVehicleAbility : public UActorComponent
{
public:
	class ARockVehicle*                           Vehicle;                                           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ActiveSeconds;                                     // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LastDeactivationTimeSeconds;                       // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	float GetActiveSeconds() const;
	float GetInactiveSeconds() const;
	class ARockVehicle* GetVehicle() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleAbility">();
	}
	static class URockVehicleAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleAbility>();
	}
};
static_assert(alignof(URockVehicleAbility) == 0x000008, "Wrong alignment on URockVehicleAbility");
static_assert(sizeof(URockVehicleAbility) == 0x0000B0, "Wrong size on URockVehicleAbility");
static_assert(offsetof(URockVehicleAbility, Vehicle) == 0x0000A0, "Member 'URockVehicleAbility::Vehicle' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility, ActiveSeconds) == 0x0000A8, "Member 'URockVehicleAbility::ActiveSeconds' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility, LastDeactivationTimeSeconds) == 0x0000AC, "Member 'URockVehicleAbility::LastDeactivationTimeSeconds' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleAbility_Physics
// 0x0058 (0x0108 - 0x00B0)
class URockVehicleAbility_Physics : public URockVehicleAbility
{
public:
	bool                                          bShouldStayActive;                                 // 0x00B0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAthenaVehicleInputState           InputState;                                        // 0x00B8(0x0040)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleAbility_Physics">();
	}
	static class URockVehicleAbility_Physics* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleAbility_Physics>();
	}
};
static_assert(alignof(URockVehicleAbility_Physics) == 0x000008, "Wrong alignment on URockVehicleAbility_Physics");
static_assert(sizeof(URockVehicleAbility_Physics) == 0x000108, "Wrong size on URockVehicleAbility_Physics");
static_assert(offsetof(URockVehicleAbility_Physics, bShouldStayActive) == 0x0000B0, "Member 'URockVehicleAbility_Physics::bShouldStayActive' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Physics, InputState) == 0x0000B8, "Member 'URockVehicleAbility_Physics::InputState' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleAbility_AirControl
// 0x0060 (0x0168 - 0x0108)
class URockVehicleAbility_AirControl final : public URockVehicleAbility_Physics
{
public:
	uint8                                         Pad_108[0x18];                                     // 0x0108(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TorqueAccel;                                       // 0x0120(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TorqueDamping;                                     // 0x0138(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableForDodgeTime;                               // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnyWheelsOnGround;                                // 0x0154(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDodgeActive;                                      // 0x0155(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoUprightActive;                                // 0x0156(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_157[0x1];                                      // 0x0157(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class URockVehicleAbility_Dodge*              DodgeAbility;                                      // 0x0158(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URockVehicleAbility_AutoUpright*        AutoUprightAbility;                                // 0x0160(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleAbility_AirControl">();
	}
	static class URockVehicleAbility_AirControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleAbility_AirControl>();
	}
};
static_assert(alignof(URockVehicleAbility_AirControl) == 0x000008, "Wrong alignment on URockVehicleAbility_AirControl");
static_assert(sizeof(URockVehicleAbility_AirControl) == 0x000168, "Wrong size on URockVehicleAbility_AirControl");
static_assert(offsetof(URockVehicleAbility_AirControl, TorqueAccel) == 0x000120, "Member 'URockVehicleAbility_AirControl::TorqueAccel' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AirControl, TorqueDamping) == 0x000138, "Member 'URockVehicleAbility_AirControl::TorqueDamping' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AirControl, DisableForDodgeTime) == 0x000150, "Member 'URockVehicleAbility_AirControl::DisableForDodgeTime' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AirControl, bAnyWheelsOnGround) == 0x000154, "Member 'URockVehicleAbility_AirControl::bAnyWheelsOnGround' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AirControl, bDodgeActive) == 0x000155, "Member 'URockVehicleAbility_AirControl::bDodgeActive' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AirControl, bAutoUprightActive) == 0x000156, "Member 'URockVehicleAbility_AirControl::bAutoUprightActive' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AirControl, DodgeAbility) == 0x000158, "Member 'URockVehicleAbility_AirControl::DodgeAbility' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AirControl, AutoUprightAbility) == 0x000160, "Member 'URockVehicleAbility_AirControl::AutoUprightAbility' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleAbility_AutoUpright
// 0x0108 (0x0210 - 0x0108)
class URockVehicleAbility_AutoUpright final : public URockVehicleAbility_Physics
{
public:
	uint8                                         Pad_108[0x18];                                     // 0x0108(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRockScalableFloat                     RollTorque;                                        // 0x0120(0x0030)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FRockScalableFloat                     PitchTorque;                                       // 0x0150(0x0030)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FRockScalableFloat                     PushForce;                                         // 0x0180(0x0030)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FRockScalableFloat                     MinActiveSeconds;                                  // 0x01B0(0x0030)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class URockVehicleAbility_Dodge*              DodgeAbility;                                      // 0x01E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastWorldContactFrame;                             // 0x01E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastContactNormal;                                 // 0x01F0(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWheelsOnGround;                                   // 0x0208(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAnyWheelsOnGround;                                // 0x0209(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDodgeActive;                                      // 0x020A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBodyContact;                                      // 0x020B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeSinceLastBodyContact;                          // 0x020C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleAbility_AutoUpright">();
	}
	static class URockVehicleAbility_AutoUpright* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleAbility_AutoUpright>();
	}
};
static_assert(alignof(URockVehicleAbility_AutoUpright) == 0x000008, "Wrong alignment on URockVehicleAbility_AutoUpright");
static_assert(sizeof(URockVehicleAbility_AutoUpright) == 0x000210, "Wrong size on URockVehicleAbility_AutoUpright");
static_assert(offsetof(URockVehicleAbility_AutoUpright, RollTorque) == 0x000120, "Member 'URockVehicleAbility_AutoUpright::RollTorque' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AutoUpright, PitchTorque) == 0x000150, "Member 'URockVehicleAbility_AutoUpright::PitchTorque' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AutoUpright, PushForce) == 0x000180, "Member 'URockVehicleAbility_AutoUpright::PushForce' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AutoUpright, MinActiveSeconds) == 0x0001B0, "Member 'URockVehicleAbility_AutoUpright::MinActiveSeconds' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AutoUpright, DodgeAbility) == 0x0001E0, "Member 'URockVehicleAbility_AutoUpright::DodgeAbility' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AutoUpright, LastWorldContactFrame) == 0x0001E8, "Member 'URockVehicleAbility_AutoUpright::LastWorldContactFrame' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AutoUpright, LastContactNormal) == 0x0001F0, "Member 'URockVehicleAbility_AutoUpright::LastContactNormal' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AutoUpright, bWheelsOnGround) == 0x000208, "Member 'URockVehicleAbility_AutoUpright::bWheelsOnGround' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AutoUpright, bAnyWheelsOnGround) == 0x000209, "Member 'URockVehicleAbility_AutoUpright::bAnyWheelsOnGround' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AutoUpright, bDodgeActive) == 0x00020A, "Member 'URockVehicleAbility_AutoUpright::bDodgeActive' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AutoUpright, bBodyContact) == 0x00020B, "Member 'URockVehicleAbility_AutoUpright::bBodyContact' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_AutoUpright, TimeSinceLastBodyContact) == 0x00020C, "Member 'URockVehicleAbility_AutoUpright::TimeSinceLastBodyContact' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleAbility_Boost
// 0x0068 (0x0170 - 0x0108)
class URockVehicleAbility_Boost final : public URockVehicleAbility_Physics
{
public:
	uint8                                         Pad_108[0x18];                                     // 0x0108(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRockScalableFloat                     BoostAccel;                                        // 0x0120(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBoostFailed;                                     // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class URockVehicleBoostTank*                  BoostTank;                                         // 0x0160(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasBoost;                                         // 0x0168(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleAbility_Boost">();
	}
	static class URockVehicleAbility_Boost* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleAbility_Boost>();
	}
};
static_assert(alignof(URockVehicleAbility_Boost) == 0x000008, "Wrong alignment on URockVehicleAbility_Boost");
static_assert(sizeof(URockVehicleAbility_Boost) == 0x000170, "Wrong size on URockVehicleAbility_Boost");
static_assert(offsetof(URockVehicleAbility_Boost, BoostAccel) == 0x000120, "Member 'URockVehicleAbility_Boost::BoostAccel' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Boost, OnBoostFailed) == 0x000150, "Member 'URockVehicleAbility_Boost::OnBoostFailed' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Boost, BoostTank) == 0x000160, "Member 'URockVehicleAbility_Boost::BoostTank' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Boost, bHasBoost) == 0x000168, "Member 'URockVehicleAbility_Boost::bHasBoost' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleBoostTank
// 0x0088 (0x0128 - 0x00A0)
class URockVehicleBoostTank final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(float DeltaSeconds)> OnSecondsChanged;                                  // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     StartSeconds;                                      // 0x00B0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     MaxSeconds;                                        // 0x00E0(0x0030)(Edit, BlueprintVisible, Net, NativeAccessSpecifierPublic)
	ERockBoostLogic                               BoostLogic;                                        // 0x0110(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoostRechargeRate;                                 // 0x0114(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostRechargeDelay;                                // 0x0118(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsRemaining;                                  // 0x011C(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GiveBoost(float Seconds);
	void OnRep_SecondsRemaining(float PrevValue);

	float GetMaxBoostInSeconds() const;
	float GetPercentRemaining() const;
	bool HasBoost() const;
	bool IsBoostFull() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleBoostTank">();
	}
	static class URockVehicleBoostTank* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleBoostTank>();
	}
};
static_assert(alignof(URockVehicleBoostTank) == 0x000008, "Wrong alignment on URockVehicleBoostTank");
static_assert(sizeof(URockVehicleBoostTank) == 0x000128, "Wrong size on URockVehicleBoostTank");
static_assert(offsetof(URockVehicleBoostTank, OnSecondsChanged) == 0x0000A0, "Member 'URockVehicleBoostTank::OnSecondsChanged' has a wrong offset!");
static_assert(offsetof(URockVehicleBoostTank, StartSeconds) == 0x0000B0, "Member 'URockVehicleBoostTank::StartSeconds' has a wrong offset!");
static_assert(offsetof(URockVehicleBoostTank, MaxSeconds) == 0x0000E0, "Member 'URockVehicleBoostTank::MaxSeconds' has a wrong offset!");
static_assert(offsetof(URockVehicleBoostTank, BoostLogic) == 0x000110, "Member 'URockVehicleBoostTank::BoostLogic' has a wrong offset!");
static_assert(offsetof(URockVehicleBoostTank, BoostRechargeRate) == 0x000114, "Member 'URockVehicleBoostTank::BoostRechargeRate' has a wrong offset!");
static_assert(offsetof(URockVehicleBoostTank, BoostRechargeDelay) == 0x000118, "Member 'URockVehicleBoostTank::BoostRechargeDelay' has a wrong offset!");
static_assert(offsetof(URockVehicleBoostTank, SecondsRemaining) == 0x00011C, "Member 'URockVehicleBoostTank::SecondsRemaining' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleAbility_Dodge
// 0x0330 (0x0438 - 0x0108)
class URockVehicleAbility_Dodge final : public URockVehicleAbility_Physics
{
public:
	uint8                                         Pad_108[0x18];                                     // 0x0108(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRockDodgeImpulse                      ForwardImpulse;                                    // 0x0120(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockDodgeImpulse                      BackwardImpulse;                                   // 0x0180(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockDodgeImpulse                      SideImpulse;                                       // 0x01E0(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     MinTimeAfterJump;                                  // 0x0240(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     MinTorqueTime;                                     // 0x0270(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     MaxTorqueTime;                                     // 0x02A0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     ForwardTorque;                                     // 0x02D0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     SideTorque;                                        // 0x0300(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     ZLiftTime;                                         // 0x0330(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     ZLiftAccel;                                        // 0x0360(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     ZDampingTime;                                      // 0x0390(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     ZDamping;                                          // 0x03C0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     InputThreshold;                                    // 0x03F0(0x0030)(NativeAccessSpecifierPublic)
	struct FVector2D                              DodgeInput;                                        // 0x0420(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWheelsOnGround;                                   // 0x0430(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleAbility_Dodge">();
	}
	static class URockVehicleAbility_Dodge* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleAbility_Dodge>();
	}
};
static_assert(alignof(URockVehicleAbility_Dodge) == 0x000008, "Wrong alignment on URockVehicleAbility_Dodge");
static_assert(sizeof(URockVehicleAbility_Dodge) == 0x000438, "Wrong size on URockVehicleAbility_Dodge");
static_assert(offsetof(URockVehicleAbility_Dodge, ForwardImpulse) == 0x000120, "Member 'URockVehicleAbility_Dodge::ForwardImpulse' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Dodge, BackwardImpulse) == 0x000180, "Member 'URockVehicleAbility_Dodge::BackwardImpulse' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Dodge, SideImpulse) == 0x0001E0, "Member 'URockVehicleAbility_Dodge::SideImpulse' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Dodge, MinTimeAfterJump) == 0x000240, "Member 'URockVehicleAbility_Dodge::MinTimeAfterJump' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Dodge, MinTorqueTime) == 0x000270, "Member 'URockVehicleAbility_Dodge::MinTorqueTime' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Dodge, MaxTorqueTime) == 0x0002A0, "Member 'URockVehicleAbility_Dodge::MaxTorqueTime' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Dodge, ForwardTorque) == 0x0002D0, "Member 'URockVehicleAbility_Dodge::ForwardTorque' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Dodge, SideTorque) == 0x000300, "Member 'URockVehicleAbility_Dodge::SideTorque' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Dodge, ZLiftTime) == 0x000330, "Member 'URockVehicleAbility_Dodge::ZLiftTime' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Dodge, ZLiftAccel) == 0x000360, "Member 'URockVehicleAbility_Dodge::ZLiftAccel' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Dodge, ZDampingTime) == 0x000390, "Member 'URockVehicleAbility_Dodge::ZDampingTime' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Dodge, ZDamping) == 0x0003C0, "Member 'URockVehicleAbility_Dodge::ZDamping' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Dodge, InputThreshold) == 0x0003F0, "Member 'URockVehicleAbility_Dodge::InputThreshold' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Dodge, DodgeInput) == 0x000420, "Member 'URockVehicleAbility_Dodge::DodgeInput' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Dodge, bWheelsOnGround) == 0x000430, "Member 'URockVehicleAbility_Dodge::bWheelsOnGround' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleAbility_DoubleJump
// 0x0050 (0x0158 - 0x0108)
class URockVehicleAbility_DoubleJump final : public URockVehicleAbility_Physics
{
public:
	uint8                                         Pad_108[0x18];                                     // 0x0108(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRockScalableFloat                     JumpVelocity;                                      // 0x0120(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class URockVehicleAbility_Jump*               JumpAbility;                                       // 0x0150(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleAbility_DoubleJump">();
	}
	static class URockVehicleAbility_DoubleJump* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleAbility_DoubleJump>();
	}
};
static_assert(alignof(URockVehicleAbility_DoubleJump) == 0x000008, "Wrong alignment on URockVehicleAbility_DoubleJump");
static_assert(sizeof(URockVehicleAbility_DoubleJump) == 0x000158, "Wrong size on URockVehicleAbility_DoubleJump");
static_assert(offsetof(URockVehicleAbility_DoubleJump, JumpVelocity) == 0x000120, "Member 'URockVehicleAbility_DoubleJump::JumpVelocity' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_DoubleJump, JumpAbility) == 0x000150, "Member 'URockVehicleAbility_DoubleJump::JumpAbility' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleAbility_Flip
// 0x00E8 (0x01F0 - 0x0108)
class URockVehicleAbility_Flip final : public URockVehicleAbility_Physics
{
public:
	uint8                                         Pad_108[0x18];                                     // 0x0108(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRockScalableFloat                     Impulse;                                           // 0x0120(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     Torque;                                            // 0x0150(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     Duration;                                          // 0x0180(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     ContactNormalThresholdDegrees;                     // 0x01B0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bWheelsOnGround;                                   // 0x01E0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0xF];                                      // 0x01E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleAbility_Flip">();
	}
	static class URockVehicleAbility_Flip* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleAbility_Flip>();
	}
};
static_assert(alignof(URockVehicleAbility_Flip) == 0x000008, "Wrong alignment on URockVehicleAbility_Flip");
static_assert(sizeof(URockVehicleAbility_Flip) == 0x0001F0, "Wrong size on URockVehicleAbility_Flip");
static_assert(offsetof(URockVehicleAbility_Flip, Impulse) == 0x000120, "Member 'URockVehicleAbility_Flip::Impulse' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Flip, Torque) == 0x000150, "Member 'URockVehicleAbility_Flip::Torque' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Flip, Duration) == 0x000180, "Member 'URockVehicleAbility_Flip::Duration' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Flip, ContactNormalThresholdDegrees) == 0x0001B0, "Member 'URockVehicleAbility_Flip::ContactNormalThresholdDegrees' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Flip, bWheelsOnGround) == 0x0001E0, "Member 'URockVehicleAbility_Flip::bWheelsOnGround' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleAbility_GroundTrails
// 0x0058 (0x0108 - 0x00B0)
class URockVehicleAbility_GroundTrails final : public URockVehicleAbility
{
public:
	struct FGroundTrailsMap                       GroundTrailsMap;                                   // 0x00B0(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           GroundTrailSockets;                                // 0x00C8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         HandbrakeSystem;                                   // 0x00D8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UNiagaraComponent*>              GroundTrailComponents;                             // 0x00E0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UNiagaraComponent*>              HandbrakeComponents;                               // 0x00F0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_100[0x8];                                      // 0x0100(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSurfaceChanged(EPhysicalSurface NewSurface);
	void SetEnabled(bool bValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleAbility_GroundTrails">();
	}
	static class URockVehicleAbility_GroundTrails* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleAbility_GroundTrails>();
	}
};
static_assert(alignof(URockVehicleAbility_GroundTrails) == 0x000008, "Wrong alignment on URockVehicleAbility_GroundTrails");
static_assert(sizeof(URockVehicleAbility_GroundTrails) == 0x000108, "Wrong size on URockVehicleAbility_GroundTrails");
static_assert(offsetof(URockVehicleAbility_GroundTrails, GroundTrailsMap) == 0x0000B0, "Member 'URockVehicleAbility_GroundTrails::GroundTrailsMap' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_GroundTrails, GroundTrailSockets) == 0x0000C8, "Member 'URockVehicleAbility_GroundTrails::GroundTrailSockets' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_GroundTrails, HandbrakeSystem) == 0x0000D8, "Member 'URockVehicleAbility_GroundTrails::HandbrakeSystem' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_GroundTrails, GroundTrailComponents) == 0x0000E0, "Member 'URockVehicleAbility_GroundTrails::GroundTrailComponents' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_GroundTrails, HandbrakeComponents) == 0x0000F0, "Member 'URockVehicleAbility_GroundTrails::HandbrakeComponents' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleAbility_Jump
// 0x00D8 (0x01E0 - 0x0108)
class URockVehicleAbility_Jump final : public URockVehicleAbility_Physics
{
public:
	uint8                                         Pad_108[0x18];                                     // 0x0108(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRockScalableFloat                     JumpVelocity;                                      // 0x0120(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     JumpAccel;                                         // 0x0150(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     MinJumpSeconds;                                    // 0x0180(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     MaxJumpSeconds;                                    // 0x01B0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleAbility_Jump">();
	}
	static class URockVehicleAbility_Jump* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleAbility_Jump>();
	}
};
static_assert(alignof(URockVehicleAbility_Jump) == 0x000008, "Wrong alignment on URockVehicleAbility_Jump");
static_assert(sizeof(URockVehicleAbility_Jump) == 0x0001E0, "Wrong size on URockVehicleAbility_Jump");
static_assert(offsetof(URockVehicleAbility_Jump, JumpVelocity) == 0x000120, "Member 'URockVehicleAbility_Jump::JumpVelocity' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Jump, JumpAccel) == 0x000150, "Member 'URockVehicleAbility_Jump::JumpAccel' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Jump, MinJumpSeconds) == 0x000180, "Member 'URockVehicleAbility_Jump::MinJumpSeconds' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Jump, MaxJumpSeconds) == 0x0001B0, "Member 'URockVehicleAbility_Jump::MaxJumpSeconds' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleAbility_StickyWheels
// 0x0098 (0x01A0 - 0x0108)
class URockVehicleAbility_StickyWheels final : public URockVehicleAbility_Physics
{
public:
	uint8                                         Pad_108[0x18];                                     // 0x0108(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRockScalableFloat                     StickyForceScaleGround;                            // 0x0120(0x0030)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FRockScalableFloat                     StickyForceScaleWall;                              // 0x0150(0x0030)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FVector                                ContactNormal;                                     // 0x0180(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Scale;                                             // 0x0198(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAnyWheelsOnGround;                                // 0x019C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleAbility_StickyWheels">();
	}
	static class URockVehicleAbility_StickyWheels* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleAbility_StickyWheels>();
	}
};
static_assert(alignof(URockVehicleAbility_StickyWheels) == 0x000008, "Wrong alignment on URockVehicleAbility_StickyWheels");
static_assert(sizeof(URockVehicleAbility_StickyWheels) == 0x0001A0, "Wrong size on URockVehicleAbility_StickyWheels");
static_assert(offsetof(URockVehicleAbility_StickyWheels, StickyForceScaleGround) == 0x000120, "Member 'URockVehicleAbility_StickyWheels::StickyForceScaleGround' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_StickyWheels, StickyForceScaleWall) == 0x000150, "Member 'URockVehicleAbility_StickyWheels::StickyForceScaleWall' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_StickyWheels, ContactNormal) == 0x000180, "Member 'URockVehicleAbility_StickyWheels::ContactNormal' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_StickyWheels, Scale) == 0x000198, "Member 'URockVehicleAbility_StickyWheels::Scale' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_StickyWheels, bAnyWheelsOnGround) == 0x00019C, "Member 'URockVehicleAbility_StickyWheels::bAnyWheelsOnGround' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleAbility_Supersonic
// 0x00C8 (0x0178 - 0x00B0)
class URockVehicleAbility_Supersonic final : public URockVehicleAbility
{
public:
	TMulticastInlineDelegate<void()>              OnTrailsActivate;                                  // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnTrailsDeactivate;                                // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     TurnOffTime;                                       // 0x00D0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FRockScalableFloat                     TurnOnTime;                                        // 0x0100(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseTurnOnTimeRequirement;                         // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRockScalableFloat                     TurnOffSpeedBuffer;                                // 0x0138(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         TimeBelowSupersonic;                               // 0x0168(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WorldTimeSupersonicExceeded;                       // 0x016C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_170[0x8];                                      // 0x0170(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleAbility_Supersonic">();
	}
	static class URockVehicleAbility_Supersonic* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleAbility_Supersonic>();
	}
};
static_assert(alignof(URockVehicleAbility_Supersonic) == 0x000008, "Wrong alignment on URockVehicleAbility_Supersonic");
static_assert(sizeof(URockVehicleAbility_Supersonic) == 0x000178, "Wrong size on URockVehicleAbility_Supersonic");
static_assert(offsetof(URockVehicleAbility_Supersonic, OnTrailsActivate) == 0x0000B0, "Member 'URockVehicleAbility_Supersonic::OnTrailsActivate' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Supersonic, OnTrailsDeactivate) == 0x0000C0, "Member 'URockVehicleAbility_Supersonic::OnTrailsDeactivate' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Supersonic, TurnOffTime) == 0x0000D0, "Member 'URockVehicleAbility_Supersonic::TurnOffTime' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Supersonic, TurnOnTime) == 0x000100, "Member 'URockVehicleAbility_Supersonic::TurnOnTime' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Supersonic, bUseTurnOnTimeRequirement) == 0x000130, "Member 'URockVehicleAbility_Supersonic::bUseTurnOnTimeRequirement' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Supersonic, TurnOffSpeedBuffer) == 0x000138, "Member 'URockVehicleAbility_Supersonic::TurnOffSpeedBuffer' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Supersonic, TimeBelowSupersonic) == 0x000168, "Member 'URockVehicleAbility_Supersonic::TimeBelowSupersonic' has a wrong offset!");
static_assert(offsetof(URockVehicleAbility_Supersonic, WorldTimeSupersonicExceeded) == 0x00016C, "Member 'URockVehicleAbility_Supersonic::WorldTimeSupersonicExceeded' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleAnalyticsComponent
// 0x0038 (0x00D8 - 0x00A0)
class URockVehicleAnalyticsComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRockVehicleAnalyticsSession           CurrentSession;                                    // 0x00A8(0x0028)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	class ARockVehicle*                           Vehicle;                                           // 0x00D0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnDodged(class UActorComponent* InComp, bool bInReset);
	void OnDoubleJumped(class UActorComponent* InComp, bool bInReset);
	void OnJumped(class UActorComponent* InComp, bool bInReset);
	void OnPawnEnteredSeat(const TScriptInterface<class IFortVehicleInterface>& InVehicle, class AFortPawn* InPlayerPawn, int32 InSeatIndex);
	void OnPawnExitedSeat(const TScriptInterface<class IFortVehicleInterface>& InVehicle, class AFortPawn* InPlayerPawn, int32 InSeatIndex);
	void OnSupersonicEnd(class UActorComponent* InComp);
	void OnSupersonicStart(class UActorComponent* InComp, bool bInReset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleAnalyticsComponent">();
	}
	static class URockVehicleAnalyticsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleAnalyticsComponent>();
	}
};
static_assert(alignof(URockVehicleAnalyticsComponent) == 0x000008, "Wrong alignment on URockVehicleAnalyticsComponent");
static_assert(sizeof(URockVehicleAnalyticsComponent) == 0x0000D8, "Wrong size on URockVehicleAnalyticsComponent");
static_assert(offsetof(URockVehicleAnalyticsComponent, CurrentSession) == 0x0000A8, "Member 'URockVehicleAnalyticsComponent::CurrentSession' has a wrong offset!");
static_assert(offsetof(URockVehicleAnalyticsComponent, Vehicle) == 0x0000D0, "Member 'URockVehicleAnalyticsComponent::Vehicle' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleAnimInstance
// 0x0180 (0x0770 - 0x05F0)
class URockVehicleAnimInstance final : public UFortVehicleAnimInstance
{
public:
	struct FBouncyChassisState                    BouncyChassis;                                     // 0x05F0(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRockVehicleWheelAnimInfo              WheelInfoFR;                                       // 0x05FC(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRockVehicleWheelAnimInfo              WheelInfoFL;                                       // 0x0610(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRockVehicleWheelAnimInfo              WheelInfoBR;                                       // 0x0624(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRockVehicleWheelAnimInfo              WheelInfoBL;                                       // 0x0638(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WheelLerpSpeed;                                    // 0x064C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_650[0x120];                                    // 0x0650(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleAnimInstance">();
	}
	static class URockVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleAnimInstance>();
	}
};
static_assert(alignof(URockVehicleAnimInstance) == 0x000010, "Wrong alignment on URockVehicleAnimInstance");
static_assert(sizeof(URockVehicleAnimInstance) == 0x000770, "Wrong size on URockVehicleAnimInstance");
static_assert(offsetof(URockVehicleAnimInstance, BouncyChassis) == 0x0005F0, "Member 'URockVehicleAnimInstance::BouncyChassis' has a wrong offset!");
static_assert(offsetof(URockVehicleAnimInstance, WheelInfoFR) == 0x0005FC, "Member 'URockVehicleAnimInstance::WheelInfoFR' has a wrong offset!");
static_assert(offsetof(URockVehicleAnimInstance, WheelInfoFL) == 0x000610, "Member 'URockVehicleAnimInstance::WheelInfoFL' has a wrong offset!");
static_assert(offsetof(URockVehicleAnimInstance, WheelInfoBR) == 0x000624, "Member 'URockVehicleAnimInstance::WheelInfoBR' has a wrong offset!");
static_assert(offsetof(URockVehicleAnimInstance, WheelInfoBL) == 0x000638, "Member 'URockVehicleAnimInstance::WheelInfoBL' has a wrong offset!");
static_assert(offsetof(URockVehicleAnimInstance, WheelLerpSpeed) == 0x00064C, "Member 'URockVehicleAnimInstance::WheelLerpSpeed' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleAudioController
// 0x00F0 (0x03D8 - 0x02E8)
class ARockVehicleAudioController final : public AFortVehicleAudioController
{
public:
	struct FRuntimeFloatCurve                     SideSpeedToSkidVolume;                             // 0x02E8(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         SurfaceTypeInterpSpeed;                            // 0x0370(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        TireSurfaceComponent;                              // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        AirLoopComponent;                                  // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        SuperSonicComponent;                               // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWater;                                          // 0x0390(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioMotorModelComponent*              MotorModel;                                        // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ARockVehicle*                           CachedVehicle;                                     // 0x03A0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A8[0x30];                                     // 0x03A8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInAirUpdated(const bool bNewInAir);
	void SetBoosting(const bool bNewBoosting);
	void SetSurfaceTypeParam(const float NewSurfaceParam);

	class UAudioMotorModelComponent* GetMotorSimComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleAudioController">();
	}
	static class ARockVehicleAudioController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARockVehicleAudioController>();
	}
};
static_assert(alignof(ARockVehicleAudioController) == 0x000008, "Wrong alignment on ARockVehicleAudioController");
static_assert(sizeof(ARockVehicleAudioController) == 0x0003D8, "Wrong size on ARockVehicleAudioController");
static_assert(offsetof(ARockVehicleAudioController, SideSpeedToSkidVolume) == 0x0002E8, "Member 'ARockVehicleAudioController::SideSpeedToSkidVolume' has a wrong offset!");
static_assert(offsetof(ARockVehicleAudioController, SurfaceTypeInterpSpeed) == 0x000370, "Member 'ARockVehicleAudioController::SurfaceTypeInterpSpeed' has a wrong offset!");
static_assert(offsetof(ARockVehicleAudioController, TireSurfaceComponent) == 0x000378, "Member 'ARockVehicleAudioController::TireSurfaceComponent' has a wrong offset!");
static_assert(offsetof(ARockVehicleAudioController, AirLoopComponent) == 0x000380, "Member 'ARockVehicleAudioController::AirLoopComponent' has a wrong offset!");
static_assert(offsetof(ARockVehicleAudioController, SuperSonicComponent) == 0x000388, "Member 'ARockVehicleAudioController::SuperSonicComponent' has a wrong offset!");
static_assert(offsetof(ARockVehicleAudioController, bInWater) == 0x000390, "Member 'ARockVehicleAudioController::bInWater' has a wrong offset!");
static_assert(offsetof(ARockVehicleAudioController, MotorModel) == 0x000398, "Member 'ARockVehicleAudioController::MotorModel' has a wrong offset!");
static_assert(offsetof(ARockVehicleAudioController, CachedVehicle) == 0x0003A0, "Member 'ARockVehicleAudioController::CachedVehicle' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleCameraMode
// 0x0200 (0x1D30 - 0x1B30)
class URockVehicleCameraMode final : public UFortCameraMode_AthenaVehicle
{
public:
	float                                         SwivelPitchMax;                                    // 0x1B30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwivelYawMax;                                      // 0x1B34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundNormalInterpRate;                            // 0x1B38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundNormalAirInterpRate;                         // 0x1B3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundYawRate;                                     // 0x1B40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallYawRate;                                       // 0x1B44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpToGroundTime;                                // 0x1B48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpToAirTime;                                   // 0x1B4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageVelocityInterpRate;                         // 0x1B50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B54[0x4];                                     // 0x1B54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     AirRotationInterpRateForSpeed;                     // 0x1B58(0x0088)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	float                                         FocusOffsetInterpRate;                             // 0x1BE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceSpeedScale;                                // 0x1BE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceOffsetMin;                                 // 0x1BE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceOffsetMax;                                 // 0x1BEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceInterpRate;                                // 0x1BF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeedFOVOffset;                                 // 0x1BF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SupersonicFOVOffset;                               // 0x1BF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOVInterpRate;                                     // 0x1BFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRockCameraSettings                    CameraSettings;                                    // 0x1C00(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1C[0x4];                                     // 0x1C1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARockVehicle*                           VehicleTarget;                                     // 0x1C20(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URockVehicleAbility_Jump*               JumpAbility;                                       // 0x1C28(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C30[0x100];                                   // 0x1C30(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleCameraMode">();
	}
	static class URockVehicleCameraMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleCameraMode>();
	}
};
static_assert(alignof(URockVehicleCameraMode) == 0x000010, "Wrong alignment on URockVehicleCameraMode");
static_assert(sizeof(URockVehicleCameraMode) == 0x001D30, "Wrong size on URockVehicleCameraMode");
static_assert(offsetof(URockVehicleCameraMode, SwivelPitchMax) == 0x001B30, "Member 'URockVehicleCameraMode::SwivelPitchMax' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, SwivelYawMax) == 0x001B34, "Member 'URockVehicleCameraMode::SwivelYawMax' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, GroundNormalInterpRate) == 0x001B38, "Member 'URockVehicleCameraMode::GroundNormalInterpRate' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, GroundNormalAirInterpRate) == 0x001B3C, "Member 'URockVehicleCameraMode::GroundNormalAirInterpRate' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, GroundYawRate) == 0x001B40, "Member 'URockVehicleCameraMode::GroundYawRate' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, WallYawRate) == 0x001B44, "Member 'URockVehicleCameraMode::WallYawRate' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, InterpToGroundTime) == 0x001B48, "Member 'URockVehicleCameraMode::InterpToGroundTime' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, InterpToAirTime) == 0x001B4C, "Member 'URockVehicleCameraMode::InterpToAirTime' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, AverageVelocityInterpRate) == 0x001B50, "Member 'URockVehicleCameraMode::AverageVelocityInterpRate' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, AirRotationInterpRateForSpeed) == 0x001B58, "Member 'URockVehicleCameraMode::AirRotationInterpRateForSpeed' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, FocusOffsetInterpRate) == 0x001BE0, "Member 'URockVehicleCameraMode::FocusOffsetInterpRate' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, DistanceSpeedScale) == 0x001BE4, "Member 'URockVehicleCameraMode::DistanceSpeedScale' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, DistanceOffsetMin) == 0x001BE8, "Member 'URockVehicleCameraMode::DistanceOffsetMin' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, DistanceOffsetMax) == 0x001BEC, "Member 'URockVehicleCameraMode::DistanceOffsetMax' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, DistanceInterpRate) == 0x001BF0, "Member 'URockVehicleCameraMode::DistanceInterpRate' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, MaxSpeedFOVOffset) == 0x001BF4, "Member 'URockVehicleCameraMode::MaxSpeedFOVOffset' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, SupersonicFOVOffset) == 0x001BF8, "Member 'URockVehicleCameraMode::SupersonicFOVOffset' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, FOVInterpRate) == 0x001BFC, "Member 'URockVehicleCameraMode::FOVInterpRate' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, CameraSettings) == 0x001C00, "Member 'URockVehicleCameraMode::CameraSettings' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, VehicleTarget) == 0x001C20, "Member 'URockVehicleCameraMode::VehicleTarget' has a wrong offset!");
static_assert(offsetof(URockVehicleCameraMode, JumpAbility) == 0x001C28, "Member 'URockVehicleCameraMode::JumpAbility' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleConfigs
// 0x0608 (0x0EB0 - 0x08A8)
class URockVehicleConfigs final : public UFortPhysicsVehicleConfigs
{
public:
	struct FRockVehicleAxleConfig                 FrontAxle;                                         // 0x08A8(0x0034)(Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FRockVehicleAxleConfig                 BackAxle;                                          // 0x08DC(0x0034)(Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FRockVehicleDriveConfig                Drive;                                             // 0x0910(0x0510)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FRockVehicleDemoConfig                 DemolitionConfiguration;                           // 0x0E20(0x0028)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     MaxLinearSpeed;                                    // 0x0E48(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     SupersonicSpeed;                                   // 0x0E78(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MaxAngularSpeed;                                   // 0x0EA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafeBuildingLandingDegrees;                        // 0x0EAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleConfigs">();
	}
	static class URockVehicleConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleConfigs>();
	}
};
static_assert(alignof(URockVehicleConfigs) == 0x000008, "Wrong alignment on URockVehicleConfigs");
static_assert(sizeof(URockVehicleConfigs) == 0x000EB0, "Wrong size on URockVehicleConfigs");
static_assert(offsetof(URockVehicleConfigs, FrontAxle) == 0x0008A8, "Member 'URockVehicleConfigs::FrontAxle' has a wrong offset!");
static_assert(offsetof(URockVehicleConfigs, BackAxle) == 0x0008DC, "Member 'URockVehicleConfigs::BackAxle' has a wrong offset!");
static_assert(offsetof(URockVehicleConfigs, Drive) == 0x000910, "Member 'URockVehicleConfigs::Drive' has a wrong offset!");
static_assert(offsetof(URockVehicleConfigs, DemolitionConfiguration) == 0x000E20, "Member 'URockVehicleConfigs::DemolitionConfiguration' has a wrong offset!");
static_assert(offsetof(URockVehicleConfigs, MaxLinearSpeed) == 0x000E48, "Member 'URockVehicleConfigs::MaxLinearSpeed' has a wrong offset!");
static_assert(offsetof(URockVehicleConfigs, SupersonicSpeed) == 0x000E78, "Member 'URockVehicleConfigs::SupersonicSpeed' has a wrong offset!");
static_assert(offsetof(URockVehicleConfigs, MaxAngularSpeed) == 0x000EA8, "Member 'URockVehicleConfigs::MaxAngularSpeed' has a wrong offset!");
static_assert(offsetof(URockVehicleConfigs, SafeBuildingLandingDegrees) == 0x000EAC, "Member 'URockVehicleConfigs::SafeBuildingLandingDegrees' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleManager
// 0x0020 (0x02A8 - 0x0288)
class ARockVehicleManager final : public AActor
{
public:
	uint8                                         Pad_288[0x10];                                     // 0x0288(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARockVehicle*>                   RockVehicles;                                      // 0x0298(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleManager">();
	}
	static class ARockVehicleManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARockVehicleManager>();
	}
};
static_assert(alignof(ARockVehicleManager) == 0x000008, "Wrong alignment on ARockVehicleManager");
static_assert(sizeof(ARockVehicleManager) == 0x0002A8, "Wrong size on ARockVehicleManager");
static_assert(offsetof(ARockVehicleManager, RockVehicles) == 0x000298, "Member 'ARockVehicleManager::RockVehicles' has a wrong offset!");

// Class RockVehicleRuntime.RockVehicleWorldSubsystem
// 0x0008 (0x0038 - 0x0030)
class URockVehicleWorldSubsystem final : public UWorldSubsystem
{
public:
	class ARockVehicleManager*                    VehicleManager;                                    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RockVehicleWorldSubsystem">();
	}
	static class URockVehicleWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<URockVehicleWorldSubsystem>();
	}
};
static_assert(alignof(URockVehicleWorldSubsystem) == 0x000008, "Wrong alignment on URockVehicleWorldSubsystem");
static_assert(sizeof(URockVehicleWorldSubsystem) == 0x000038, "Wrong size on URockVehicleWorldSubsystem");
static_assert(offsetof(URockVehicleWorldSubsystem, VehicleManager) == 0x000030, "Member 'URockVehicleWorldSubsystem::VehicleManager' has a wrong offset!");

// Class RockVehicleRuntime.StreamingRadioPlayerComponent_Rock
// 0x0000 (0x0450 - 0x0450)
class UStreamingRadioPlayerComponent_Rock : public UStreamingRadioPlayerComponent
{
public:
	void VehicleExploded(const class AController* LastDamageInstigator, class AFortAthenaVehicle* Vehicle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StreamingRadioPlayerComponent_Rock">();
	}
	static class UStreamingRadioPlayerComponent_Rock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStreamingRadioPlayerComponent_Rock>();
	}
};
static_assert(alignof(UStreamingRadioPlayerComponent_Rock) == 0x000008, "Wrong alignment on UStreamingRadioPlayerComponent_Rock");
static_assert(sizeof(UStreamingRadioPlayerComponent_Rock) == 0x000450, "Wrong size on UStreamingRadioPlayerComponent_Rock");

}

