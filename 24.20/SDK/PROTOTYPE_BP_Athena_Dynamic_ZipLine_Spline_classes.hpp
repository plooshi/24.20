#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline.PROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C
// 0x0140 (0x0E80 - 0x0D40)
class APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C final : public AFortAthenaSplineZipline
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D40(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMesh*                            SplineStaticMesh;                                  // 0x0D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        TangentSmoothStrength;                             // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoSmoothTangents;                                // 0x0D58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplineMeshAxis                               ForwardMeshAxis;                                   // 0x0D59(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D5A[0x6];                                      // 0x0D5A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MotorOffset;                                       // 0x0D60(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 PoleA;                                             // 0x0D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class AActor*                                 PoleB;                                             // 0x0D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                PoleASocketLocation;                               // 0x0D88(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PoleBSocketLocation;                               // 0x0DA0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LowerPointID;                                      // 0x0DB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HigherPointID;                                     // 0x0DBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HigherEndLocation;                                 // 0x0DC0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LowerEndLocation;                                  // 0x0DD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AutoLinearFactorLow;                               // 0x0DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        AutoLinearFactorHigh;                              // 0x0DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        AutoSplineTangentLengthCoef;                       // 0x0E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        AutoSplineTangentHorizCoef;                        // 0x0E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        AutoSplineTangentVertCoef;                         // 0x0E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Auto_Set_Spline_Ends;                              // 0x0E18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Auto_Set_Spline_Mids;                              // 0x0E19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_E1A[0x6];                                      // 0x0E1A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       SplineMaterials;                                   // 0x0E20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  BlockInteractTags;                                 // 0x0E30(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        TilingDivisor;                                     // 0x0E50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USplineMeshComponent*>           SplineMeshComponents;                              // 0x0E58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class AFortPlayerPawn*>                PlayerPawnArray;                                   // 0x0E68(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Debug;                                             // 0x0E78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddPlayerToZipliningArray(const class AFortPlayerPawn*& NewItem);
	void AddSplineMeshSegment(class USplineMeshComponent** SplineMeshSegment);
	void AutoSmoothTanget(const struct FVector& Tangent, const struct FVector& PointA, const struct FVector& PointB, struct FVector* SmoothedTangent);
	void Calc_Auto_Location_At_Alpha(double InAlpha, bool DrawDebug, struct FVector* PointLocation);
	void CalculatePositionOfPoles();
	void ExecuteUbergraph_PROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline(int32 EntryPoint);
	void GetAutoHorizAndVertVectors(const struct FVector& highVector, const struct FVector& LowVector, struct FVector* VertVec, struct FVector* HorizVec);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnZipliningStarted(class AFortPlayerPawn* InteractingPawn, class UPrimitiveComponent* InteractComponent);
	void OnZipliningStopped(class AFortPlayerPawn* InteractingPawn, class UPrimitiveComponent* InteractComponent, float ZiplineUsageDuration);
	void ReceiveBeginPlay();
	void RemovePlayerFromZipliningArray(const class AFortPlayerPawn*& Item);
	void SetCableTilingBySplineLength(class UMeshComponent* Target);
	void SetSplinePositionAndTangent(bool SetPosition, bool SetTangent, int32 ID);
	void UserConstructionScript();
	void WaitThenSetDynamicSpline();

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C">();
	}
	static class APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C>();
	}
};
static_assert(alignof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C) == 0x000008, "Wrong alignment on APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C");
static_assert(sizeof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C) == 0x000E80, "Wrong size on APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, UberGraphFrame) == 0x000D40, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, SplineStaticMesh) == 0x000D48, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::SplineStaticMesh' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, TangentSmoothStrength) == 0x000D50, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::TangentSmoothStrength' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, AutoSmoothTangents) == 0x000D58, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::AutoSmoothTangents' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, ForwardMeshAxis) == 0x000D59, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::ForwardMeshAxis' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, MotorOffset) == 0x000D60, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::MotorOffset' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, PoleA) == 0x000D78, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::PoleA' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, PoleB) == 0x000D80, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::PoleB' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, PoleASocketLocation) == 0x000D88, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::PoleASocketLocation' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, PoleBSocketLocation) == 0x000DA0, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::PoleBSocketLocation' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, LowerPointID) == 0x000DB8, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::LowerPointID' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, HigherPointID) == 0x000DBC, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::HigherPointID' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, HigherEndLocation) == 0x000DC0, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::HigherEndLocation' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, LowerEndLocation) == 0x000DD8, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::LowerEndLocation' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, AutoLinearFactorLow) == 0x000DF0, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::AutoLinearFactorLow' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, AutoLinearFactorHigh) == 0x000DF8, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::AutoLinearFactorHigh' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, AutoSplineTangentLengthCoef) == 0x000E00, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::AutoSplineTangentLengthCoef' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, AutoSplineTangentHorizCoef) == 0x000E08, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::AutoSplineTangentHorizCoef' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, AutoSplineTangentVertCoef) == 0x000E10, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::AutoSplineTangentVertCoef' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, Auto_Set_Spline_Ends) == 0x000E18, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::Auto_Set_Spline_Ends' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, Auto_Set_Spline_Mids) == 0x000E19, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::Auto_Set_Spline_Mids' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, SplineMaterials) == 0x000E20, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::SplineMaterials' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, BlockInteractTags) == 0x000E30, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::BlockInteractTags' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, TilingDivisor) == 0x000E50, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::TilingDivisor' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, SplineMeshComponents) == 0x000E58, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::SplineMeshComponents' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, PlayerPawnArray) == 0x000E68, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::PlayerPawnArray' has a wrong offset!");
static_assert(offsetof(APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C, Debug) == 0x000E78, "Member 'APROTOTYPE_BP_Athena_Dynamic_ZipLine_Spline_C::Debug' has a wrong offset!");

}

