#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DaySequence

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum DaySequence.EDayNightCycleMode
// NumValues: 0x0006
enum class EDayNightCycleMode : uint8
{
	Default                                  = 0,
	FixedTime                                = 1,
	StartAtSpecifiedTime                     = 2,
	RandomFixedTime                          = 3,
	RandomStartTime                          = 4,
	EDayNightCycleMode_MAX                   = 5,
};

// ScriptStruct DaySequence.DaySequenceAssetData
// 0x0010 (0x0010 - 0x0000)
struct FDaySequenceAssetData final
{
public:
	class UDaySequence*                           Sequence;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bias;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMuted;                                            // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDaySequenceAssetData) == 0x000008, "Wrong alignment on FDaySequenceAssetData");
static_assert(sizeof(FDaySequenceAssetData) == 0x000010, "Wrong size on FDaySequenceAssetData");
static_assert(offsetof(FDaySequenceAssetData, Sequence) == 0x000000, "Member 'FDaySequenceAssetData::Sequence' has a wrong offset!");
static_assert(offsetof(FDaySequenceAssetData, Bias) == 0x000008, "Member 'FDaySequenceAssetData::Bias' has a wrong offset!");
static_assert(offsetof(FDaySequenceAssetData, bMuted) == 0x00000C, "Member 'FDaySequenceAssetData::bMuted' has a wrong offset!");

// ScriptStruct DaySequence.DaySequenceBindingReference
// 0x0038 (0x0038 - 0x0000)
struct FDaySequenceBindingReference final
{
public:
	TSoftObjectPtr<class UObject>                 ExternalObjectPath;                                // 0x0000(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ObjectPath;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDaySequenceBindingReference) == 0x000008, "Wrong alignment on FDaySequenceBindingReference");
static_assert(sizeof(FDaySequenceBindingReference) == 0x000038, "Wrong size on FDaySequenceBindingReference");
static_assert(offsetof(FDaySequenceBindingReference, ExternalObjectPath) == 0x000000, "Member 'FDaySequenceBindingReference::ExternalObjectPath' has a wrong offset!");
static_assert(offsetof(FDaySequenceBindingReference, ObjectPath) == 0x000028, "Member 'FDaySequenceBindingReference::ObjectPath' has a wrong offset!");

// ScriptStruct DaySequence.DaySequenceBindingReferenceArray
// 0x0010 (0x0010 - 0x0000)
struct FDaySequenceBindingReferenceArray final
{
public:
	TArray<struct FDaySequenceBindingReference>   References;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDaySequenceBindingReferenceArray) == 0x000008, "Wrong alignment on FDaySequenceBindingReferenceArray");
static_assert(sizeof(FDaySequenceBindingReferenceArray) == 0x000010, "Wrong size on FDaySequenceBindingReferenceArray");
static_assert(offsetof(FDaySequenceBindingReferenceArray, References) == 0x000000, "Member 'FDaySequenceBindingReferenceArray::References' has a wrong offset!");

// ScriptStruct DaySequence.DaySequenceBindingReferences
// 0x00A0 (0x00A0 - 0x0000)
struct FDaySequenceBindingReferences final
{
public:
	TMap<struct FGuid, struct FDaySequenceBindingReferenceArray> BindingIdToReferences;                             // 0x0000(0x0050)(NativeAccessSpecifierPrivate)
	TSet<struct FGuid>                            AnimSequenceInstances;                             // 0x0050(0x0050)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDaySequenceBindingReferences) == 0x000008, "Wrong alignment on FDaySequenceBindingReferences");
static_assert(sizeof(FDaySequenceBindingReferences) == 0x0000A0, "Wrong size on FDaySequenceBindingReferences");
static_assert(offsetof(FDaySequenceBindingReferences, BindingIdToReferences) == 0x000000, "Member 'FDaySequenceBindingReferences::BindingIdToReferences' has a wrong offset!");
static_assert(offsetof(FDaySequenceBindingReferences, AnimSequenceInstances) == 0x000050, "Member 'FDaySequenceBindingReferences::AnimSequenceInstances' has a wrong offset!");

}

