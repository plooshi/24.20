#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TankRuntime

#include "Basic.hpp"

#include "TankRuntime_structs.hpp"
#include "VehicleAudioRuntime_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class TankRuntime.FortTankVehicleConfigs
// 0x0058 (0x09D0 - 0x0978)
class UFortTankVehicleConfigs final : public UFortTreadVehicleConfigs
{
public:
	TArray<struct FTankWeaponAimingData>          TankWeaponAimingData;                              // 0x0978(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   SecondInteractText;                                // 0x0988(0x0018)(Edit, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	ETInteractionType                             SecondInteractType;                                // 0x09A0(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9A1[0x7];                                      // 0x09A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         SecondInteractDuration;                            // 0x09A8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTankVehicleConfigs">();
	}
	static class UFortTankVehicleConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTankVehicleConfigs>();
	}
};
static_assert(alignof(UFortTankVehicleConfigs) == 0x000008, "Wrong alignment on UFortTankVehicleConfigs");
static_assert(sizeof(UFortTankVehicleConfigs) == 0x0009D0, "Wrong size on UFortTankVehicleConfigs");
static_assert(offsetof(UFortTankVehicleConfigs, TankWeaponAimingData) == 0x000978, "Member 'UFortTankVehicleConfigs::TankWeaponAimingData' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleConfigs, SecondInteractText) == 0x000988, "Member 'UFortTankVehicleConfigs::SecondInteractText' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleConfigs, SecondInteractType) == 0x0009A0, "Member 'UFortTankVehicleConfigs::SecondInteractType' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleConfigs, SecondInteractDuration) == 0x0009A8, "Member 'UFortTankVehicleConfigs::SecondInteractDuration' has a wrong offset!");

// Class TankRuntime.FortTankAnimFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UFortTankAnimFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTankAnimFunctionLibrary">();
	}
	static class UFortTankAnimFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTankAnimFunctionLibrary>();
	}
};
static_assert(alignof(UFortTankAnimFunctionLibrary) == 0x000008, "Wrong alignment on UFortTankAnimFunctionLibrary");
static_assert(sizeof(UFortTankAnimFunctionLibrary) == 0x000028, "Wrong size on UFortTankAnimFunctionLibrary");

// Class TankRuntime.FortTankVehicle
// 0x0190 (0x1BF0 - 0x1A60)
class AFortTankVehicle final : public AFortTreadVehicle
{
public:
	uint8                                         Pad_1A60[0x70];                                    // 0x1A60(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnTankRepairedDelegate;                            // 0x1AD0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class FName                                   BarrelSocketName;                                  // 0x1AE0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1AE4[0x4];                                     // 0x1AE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      BarrelCollision;                                   // 0x1AE8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   UnderVehicleCollision;                             // 0x1AF0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FServerSocketTransformOverride> SocketOverrideArray;                               // 0x1AF8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FTransform>          SocketTransformOverrideMap;                        // 0x1B08(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 CachedSkeletalMeshComponent;                       // 0x1B58(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortVehicleAudioController*            CachedVehicleAudioController;                      // 0x1B60(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVisibilityBasedAnimTickOption                DefaultServerVisibilityBasedAnimTickOption;        // 0x1B68(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DefaultServerSkeletalMeshTickEnabled;              // 0x1B69(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B6A[0x2];                                     // 0x1B6A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   YawPivotSocketName;                                // 0x1B6C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PitchPivotSocketName;                              // 0x1B70(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B74[0x4];                                     // 0x1B74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULegacyCameraShake*                     DriverCameraShakeInstance;                         // 0x1B78(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULegacyCameraShake*                     AcceleratingCameraShakeInstance;                   // 0x1B80(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B88[0x8];                                     // 0x1B88(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CachedNiagaraComponentRoadAndExhaust;              // 0x1B90(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustNiagaraComponentName;                // 0x1B98(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustPeelOutLeftName;                     // 0x1BA8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustPeelOutRightName;                    // 0x1BAC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustVehicleSpeedName;                    // 0x1BB0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustSlideDirectionName;                  // 0x1BB4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustMinSpeedForDust;                     // 0x1BB8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustColorLerpName;                   // 0x1BBC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustDustColorLerpOffRoad;                // 0x1BC0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustDustColorLerpOnRoad;                 // 0x1BC4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustAlphaMultiplierName;             // 0x1BC8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustDustAlphaMultiplierOffRoad;          // 0x1BCC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustDustAlphaMultiplierOnRoad;           // 0x1BD0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustFrontLeftName;                   // 0x1BD4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustFrontRightName;                  // 0x1BD8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustMiddleLeftName;                  // 0x1BDC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustMiddleRightName;                 // 0x1BE0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustRearLeftName;                    // 0x1BE4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustRearRightName;                   // 0x1BE8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustIsOnDirtName;                        // 0x1BEC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTankVehicle">();
	}
	static class AFortTankVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortTankVehicle>();
	}
};
static_assert(alignof(AFortTankVehicle) == 0x000010, "Wrong alignment on AFortTankVehicle");
static_assert(sizeof(AFortTankVehicle) == 0x001BF0, "Wrong size on AFortTankVehicle");
static_assert(offsetof(AFortTankVehicle, OnTankRepairedDelegate) == 0x001AD0, "Member 'AFortTankVehicle::OnTankRepairedDelegate' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, BarrelSocketName) == 0x001AE0, "Member 'AFortTankVehicle::BarrelSocketName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, BarrelCollision) == 0x001AE8, "Member 'AFortTankVehicle::BarrelCollision' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, UnderVehicleCollision) == 0x001AF0, "Member 'AFortTankVehicle::UnderVehicleCollision' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, SocketOverrideArray) == 0x001AF8, "Member 'AFortTankVehicle::SocketOverrideArray' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, SocketTransformOverrideMap) == 0x001B08, "Member 'AFortTankVehicle::SocketTransformOverrideMap' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, CachedSkeletalMeshComponent) == 0x001B58, "Member 'AFortTankVehicle::CachedSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, CachedVehicleAudioController) == 0x001B60, "Member 'AFortTankVehicle::CachedVehicleAudioController' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, DefaultServerVisibilityBasedAnimTickOption) == 0x001B68, "Member 'AFortTankVehicle::DefaultServerVisibilityBasedAnimTickOption' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, DefaultServerSkeletalMeshTickEnabled) == 0x001B69, "Member 'AFortTankVehicle::DefaultServerSkeletalMeshTickEnabled' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, YawPivotSocketName) == 0x001B6C, "Member 'AFortTankVehicle::YawPivotSocketName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, PitchPivotSocketName) == 0x001B70, "Member 'AFortTankVehicle::PitchPivotSocketName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, DriverCameraShakeInstance) == 0x001B78, "Member 'AFortTankVehicle::DriverCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, AcceleratingCameraShakeInstance) == 0x001B80, "Member 'AFortTankVehicle::AcceleratingCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, CachedNiagaraComponentRoadAndExhaust) == 0x001B90, "Member 'AFortTankVehicle::CachedNiagaraComponentRoadAndExhaust' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustNiagaraComponentName) == 0x001B98, "Member 'AFortTankVehicle::RoadAndExhaustNiagaraComponentName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustPeelOutLeftName) == 0x001BA8, "Member 'AFortTankVehicle::RoadAndExhaustPeelOutLeftName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustPeelOutRightName) == 0x001BAC, "Member 'AFortTankVehicle::RoadAndExhaustPeelOutRightName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustVehicleSpeedName) == 0x001BB0, "Member 'AFortTankVehicle::RoadAndExhaustVehicleSpeedName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustSlideDirectionName) == 0x001BB4, "Member 'AFortTankVehicle::RoadAndExhaustSlideDirectionName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustMinSpeedForDust) == 0x001BB8, "Member 'AFortTankVehicle::RoadAndExhaustMinSpeedForDust' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustColorLerpName) == 0x001BBC, "Member 'AFortTankVehicle::RoadAndExhaustDustColorLerpName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustColorLerpOffRoad) == 0x001BC0, "Member 'AFortTankVehicle::RoadAndExhaustDustColorLerpOffRoad' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustColorLerpOnRoad) == 0x001BC4, "Member 'AFortTankVehicle::RoadAndExhaustDustColorLerpOnRoad' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustAlphaMultiplierName) == 0x001BC8, "Member 'AFortTankVehicle::RoadAndExhaustDustAlphaMultiplierName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustAlphaMultiplierOffRoad) == 0x001BCC, "Member 'AFortTankVehicle::RoadAndExhaustDustAlphaMultiplierOffRoad' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustAlphaMultiplierOnRoad) == 0x001BD0, "Member 'AFortTankVehicle::RoadAndExhaustDustAlphaMultiplierOnRoad' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustFrontLeftName) == 0x001BD4, "Member 'AFortTankVehicle::RoadAndExhaustDustFrontLeftName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustFrontRightName) == 0x001BD8, "Member 'AFortTankVehicle::RoadAndExhaustDustFrontRightName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustMiddleLeftName) == 0x001BDC, "Member 'AFortTankVehicle::RoadAndExhaustDustMiddleLeftName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustMiddleRightName) == 0x001BE0, "Member 'AFortTankVehicle::RoadAndExhaustDustMiddleRightName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustRearLeftName) == 0x001BE4, "Member 'AFortTankVehicle::RoadAndExhaustDustRearLeftName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustRearRightName) == 0x001BE8, "Member 'AFortTankVehicle::RoadAndExhaustDustRearRightName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustIsOnDirtName) == 0x001BEC, "Member 'AFortTankVehicle::RoadAndExhaustIsOnDirtName' has a wrong offset!");

// Class TankRuntime.FortTankVehicleAnimInstance
// 0x0120 (0x07E0 - 0x06C0)
class UFortTankVehicleAnimInstance final : public UFortTreadVehicleAnimInstance
{
public:
	class AFortTankVehicle*                       TankVehicle;                                       // 0x06C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               CurrentAimRotation;                                // 0x06C8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               CurrentTurretAimRotation;                          // 0x06E0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               SmoothedTurretDeltaRotation;                       // 0x06F8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         InterpolationRate;                                 // 0x0710(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEngineOverheated;                                 // 0x0714(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasPassenger;                                     // 0x0715(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFired;                                          // 0x0716(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsReady;                                          // 0x0717(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDriverCoverOnCooldown;                            // 0x0718(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_719[0x3];                                      // 0x0719(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeftTreadPower;                                    // 0x071C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RightTreadPower;                                   // 0x0720(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurretYawAlpha;                                    // 0x0724(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurretYawAlphaSmoothingRate;                       // 0x0728(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CannonYaw;                                         // 0x072C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CannonPitch;                                       // 0x0730(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurretYaw;                                         // 0x0734(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurretPitch;                                       // 0x0738(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           MIDTreadPositionColor;                             // 0x073C(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDTreadDamageLeft;                                // 0x074C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDTreadDamageRight;                               // 0x0750(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDExhaustShakeSpeed;                              // 0x0754(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDExhaustShakeAmp;                                // 0x0758(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDEngineBoostGlow;                                // 0x075C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDEngineHealthRatio;                              // 0x0760(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_764[0x4];                                      // 0x0764(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EVehicleSeats, struct FTankAnimAimingData> AimingData;                                        // 0x0768(0x0050)(Transient, NativeAccessSpecifierPrivate)
	struct FRotator                               PreviousTurretAimRotation;                         // 0x07B8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7D0[0x10];                                     // 0x07D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateMIDEngineProperties(const float DeltaSeconds, const float EngineHealthRatio);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTankVehicleAnimInstance">();
	}
	static class UFortTankVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTankVehicleAnimInstance>();
	}
};
static_assert(alignof(UFortTankVehicleAnimInstance) == 0x000010, "Wrong alignment on UFortTankVehicleAnimInstance");
static_assert(sizeof(UFortTankVehicleAnimInstance) == 0x0007E0, "Wrong size on UFortTankVehicleAnimInstance");
static_assert(offsetof(UFortTankVehicleAnimInstance, TankVehicle) == 0x0006C0, "Member 'UFortTankVehicleAnimInstance::TankVehicle' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, CurrentAimRotation) == 0x0006C8, "Member 'UFortTankVehicleAnimInstance::CurrentAimRotation' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, CurrentTurretAimRotation) == 0x0006E0, "Member 'UFortTankVehicleAnimInstance::CurrentTurretAimRotation' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, SmoothedTurretDeltaRotation) == 0x0006F8, "Member 'UFortTankVehicleAnimInstance::SmoothedTurretDeltaRotation' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, InterpolationRate) == 0x000710, "Member 'UFortTankVehicleAnimInstance::InterpolationRate' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, bEngineOverheated) == 0x000714, "Member 'UFortTankVehicleAnimInstance::bEngineOverheated' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, bHasPassenger) == 0x000715, "Member 'UFortTankVehicleAnimInstance::bHasPassenger' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, bIsFired) == 0x000716, "Member 'UFortTankVehicleAnimInstance::bIsFired' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, bIsReady) == 0x000717, "Member 'UFortTankVehicleAnimInstance::bIsReady' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, bDriverCoverOnCooldown) == 0x000718, "Member 'UFortTankVehicleAnimInstance::bDriverCoverOnCooldown' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, LeftTreadPower) == 0x00071C, "Member 'UFortTankVehicleAnimInstance::LeftTreadPower' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, RightTreadPower) == 0x000720, "Member 'UFortTankVehicleAnimInstance::RightTreadPower' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, TurretYawAlpha) == 0x000724, "Member 'UFortTankVehicleAnimInstance::TurretYawAlpha' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, TurretYawAlphaSmoothingRate) == 0x000728, "Member 'UFortTankVehicleAnimInstance::TurretYawAlphaSmoothingRate' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, CannonYaw) == 0x00072C, "Member 'UFortTankVehicleAnimInstance::CannonYaw' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, CannonPitch) == 0x000730, "Member 'UFortTankVehicleAnimInstance::CannonPitch' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, TurretYaw) == 0x000734, "Member 'UFortTankVehicleAnimInstance::TurretYaw' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, TurretPitch) == 0x000738, "Member 'UFortTankVehicleAnimInstance::TurretPitch' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDTreadPositionColor) == 0x00073C, "Member 'UFortTankVehicleAnimInstance::MIDTreadPositionColor' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDTreadDamageLeft) == 0x00074C, "Member 'UFortTankVehicleAnimInstance::MIDTreadDamageLeft' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDTreadDamageRight) == 0x000750, "Member 'UFortTankVehicleAnimInstance::MIDTreadDamageRight' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDExhaustShakeSpeed) == 0x000754, "Member 'UFortTankVehicleAnimInstance::MIDExhaustShakeSpeed' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDExhaustShakeAmp) == 0x000758, "Member 'UFortTankVehicleAnimInstance::MIDExhaustShakeAmp' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDEngineBoostGlow) == 0x00075C, "Member 'UFortTankVehicleAnimInstance::MIDEngineBoostGlow' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDEngineHealthRatio) == 0x000760, "Member 'UFortTankVehicleAnimInstance::MIDEngineHealthRatio' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, AimingData) == 0x000768, "Member 'UFortTankVehicleAnimInstance::AimingData' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, PreviousTurretAimRotation) == 0x0007B8, "Member 'UFortTankVehicleAnimInstance::PreviousTurretAimRotation' has a wrong offset!");

// Class TankRuntime.FortTankVehicleAudioController
// 0x0400 (0x06E8 - 0x02E8)
class AFortTankVehicleAudioController final : public AFortVehicleAudioController
{
public:
	struct FFortAudioFloatParameter               SpeedParam;                                        // 0x02E8(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               TurnPowerParam;                                    // 0x0320(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               OutOfFuelParam;                                    // 0x0358(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               IdleParam;                                         // 0x0390(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               TurningParam;                                      // 0x03C8(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               ForwardParam;                                      // 0x0400(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               ReverseParam;                                      // 0x0438(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               SurfaceParam;                                      // 0x0470(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               IsInWaterParam;                                    // 0x04A8(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               IsInAirParam;                                      // 0x04E0(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               BoostParam;                                        // 0x0518(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               CannonHorizontalMovementParam;                     // 0x0550(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               CannonVerticalMovementParam;                       // 0x0588(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               TurretHorizontalMovementParam;                     // 0x05C0(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               TurretVerticalMovementParam;                       // 0x05F8(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FTankAudioUpdateContext                Context;                                           // 0x0630(0x00B8)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void PlayAccelOneShot();
	void PlayDecelOneShot();
	void PlayTurningOneShot();

	class AFortTankVehicle* GetTankVehicleActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTankVehicleAudioController">();
	}
	static class AFortTankVehicleAudioController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortTankVehicleAudioController>();
	}
};
static_assert(alignof(AFortTankVehicleAudioController) == 0x000008, "Wrong alignment on AFortTankVehicleAudioController");
static_assert(sizeof(AFortTankVehicleAudioController) == 0x0006E8, "Wrong size on AFortTankVehicleAudioController");
static_assert(offsetof(AFortTankVehicleAudioController, SpeedParam) == 0x0002E8, "Member 'AFortTankVehicleAudioController::SpeedParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, TurnPowerParam) == 0x000320, "Member 'AFortTankVehicleAudioController::TurnPowerParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, OutOfFuelParam) == 0x000358, "Member 'AFortTankVehicleAudioController::OutOfFuelParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, IdleParam) == 0x000390, "Member 'AFortTankVehicleAudioController::IdleParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, TurningParam) == 0x0003C8, "Member 'AFortTankVehicleAudioController::TurningParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, ForwardParam) == 0x000400, "Member 'AFortTankVehicleAudioController::ForwardParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, ReverseParam) == 0x000438, "Member 'AFortTankVehicleAudioController::ReverseParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, SurfaceParam) == 0x000470, "Member 'AFortTankVehicleAudioController::SurfaceParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, IsInWaterParam) == 0x0004A8, "Member 'AFortTankVehicleAudioController::IsInWaterParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, IsInAirParam) == 0x0004E0, "Member 'AFortTankVehicleAudioController::IsInAirParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, BoostParam) == 0x000518, "Member 'AFortTankVehicleAudioController::BoostParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, CannonHorizontalMovementParam) == 0x000550, "Member 'AFortTankVehicleAudioController::CannonHorizontalMovementParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, CannonVerticalMovementParam) == 0x000588, "Member 'AFortTankVehicleAudioController::CannonVerticalMovementParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, TurretHorizontalMovementParam) == 0x0005C0, "Member 'AFortTankVehicleAudioController::TurretHorizontalMovementParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, TurretVerticalMovementParam) == 0x0005F8, "Member 'AFortTankVehicleAudioController::TurretVerticalMovementParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, Context) == 0x000630, "Member 'AFortTankVehicleAudioController::Context' has a wrong offset!");

}

