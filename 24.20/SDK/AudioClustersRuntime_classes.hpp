#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioClustersRuntime

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class AudioClustersRuntime.AudioClusterConfig
// 0x0008 (0x0030 - 0x0028)
class UAudioClusterConfig final : public UObject
{
public:
	class UAudioClusterBehavior*                  Behavior;                                          // 0x0028(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioClusterConfig">();
	}
	static class UAudioClusterConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioClusterConfig>();
	}
};
static_assert(alignof(UAudioClusterConfig) == 0x000008, "Wrong alignment on UAudioClusterConfig");
static_assert(sizeof(UAudioClusterConfig) == 0x000030, "Wrong size on UAudioClusterConfig");
static_assert(offsetof(UAudioClusterConfig, Behavior) == 0x000028, "Member 'UAudioClusterConfig::Behavior' has a wrong offset!");

// Class AudioClustersRuntime.AudioClusterConfigMap
// 0x0050 (0x0078 - 0x0028)
class UAudioClusterConfigMap final : public UObject
{
public:
	TMap<struct FGameplayTag, class UAudioClusterConfig*> TagConfigMap;                                      // 0x0028(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioClusterConfigMap">();
	}
	static class UAudioClusterConfigMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioClusterConfigMap>();
	}
};
static_assert(alignof(UAudioClusterConfigMap) == 0x000008, "Wrong alignment on UAudioClusterConfigMap");
static_assert(sizeof(UAudioClusterConfigMap) == 0x000078, "Wrong size on UAudioClusterConfigMap");
static_assert(offsetof(UAudioClusterConfigMap, TagConfigMap) == 0x000028, "Member 'UAudioClusterConfigMap::TagConfigMap' has a wrong offset!");

// Class AudioClustersRuntime.AudioClusterBehavior
// 0x0008 (0x0030 - 0x0028)
class UAudioClusterBehavior : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActorAdded(class AActor* Actor);
	void OnActorRemoved(class AActor* Actor);
	void OnPositionUpdated(const struct FVector& Position);
	void OnSizeUpdated(int32 Size);
	void OnStart();
	void OnStop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioClusterBehavior">();
	}
	static class UAudioClusterBehavior* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioClusterBehavior>();
	}
};
static_assert(alignof(UAudioClusterBehavior) == 0x000008, "Wrong alignment on UAudioClusterBehavior");
static_assert(sizeof(UAudioClusterBehavior) == 0x000030, "Wrong size on UAudioClusterBehavior");

// Class AudioClustersRuntime.AudioClustersSubsystem
// 0x0008 (0x0038 - 0x0030)
class UAudioClustersSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddConfigMap(class UAudioClusterConfigMap* Map);
	bool Register(const struct FAudioClusterActorInfo& ActorInfo);
	bool RegisterOneShot(const struct FAudioClusterOneShotInfo& OneShotInfo);
	bool RemoveConfigMap(class UAudioClusterConfigMap* Map);
	void SetListenerPosition(const struct FVector& InListenerPosition);
	bool SetParam(const struct FGameplayTag& tag, double Value);
	bool Unregister(const struct FAudioClusterActorInfo& ActorInfo);
	void UpdateClusters(float DeltaTimeSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioClustersSubsystem">();
	}
	static class UAudioClustersSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioClustersSubsystem>();
	}
};
static_assert(alignof(UAudioClustersSubsystem) == 0x000008, "Wrong alignment on UAudioClustersSubsystem");
static_assert(sizeof(UAudioClustersSubsystem) == 0x000038, "Wrong size on UAudioClustersSubsystem");

}

