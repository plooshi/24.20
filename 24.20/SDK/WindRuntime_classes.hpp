#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WindRuntime

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "FieldSystemEngine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "WindRuntime_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class WindRuntime.FortPlayerWindTunnelAnimInstance
// 0x0010 (0x15B0 - 0x15A0)
class UFortPlayerWindTunnelAnimInstance final : public UFortPlayerAnimInstanceProxy
{
public:
	uint8                                         bApplyWindSlideAdditive : 1;                       // 0x15A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15A1[0xF];                                     // 0x15A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerWindTunnelAnimInstance">();
	}
	static class UFortPlayerWindTunnelAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerWindTunnelAnimInstance>();
	}
};
static_assert(alignof(UFortPlayerWindTunnelAnimInstance) == 0x000010, "Wrong alignment on UFortPlayerWindTunnelAnimInstance");
static_assert(sizeof(UFortPlayerWindTunnelAnimInstance) == 0x0015B0, "Wrong size on UFortPlayerWindTunnelAnimInstance");

// Class WindRuntime.WindCheatManager
// 0x0018 (0x0040 - 0x0028)
class UWindCheatManager final : public UChildCheatManager
{
public:
	TSubclassOf<class UGameplayEffect>            InflateEffectClass;                                // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            DeflateEffectClass;                                // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MinBalloonsOnPlayer;                               // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxBalloonsOnPlayer;                               // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void InflateBalloonOnSelf(int32 NumBalloons) const;
	void ReleaseBalloonOnSelf(int32 NumBalloons) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WindCheatManager">();
	}
	static class UWindCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWindCheatManager>();
	}
};
static_assert(alignof(UWindCheatManager) == 0x000008, "Wrong alignment on UWindCheatManager");
static_assert(sizeof(UWindCheatManager) == 0x000040, "Wrong size on UWindCheatManager");
static_assert(offsetof(UWindCheatManager, InflateEffectClass) == 0x000028, "Member 'UWindCheatManager::InflateEffectClass' has a wrong offset!");
static_assert(offsetof(UWindCheatManager, DeflateEffectClass) == 0x000030, "Member 'UWindCheatManager::DeflateEffectClass' has a wrong offset!");
static_assert(offsetof(UWindCheatManager, MinBalloonsOnPlayer) == 0x000038, "Member 'UWindCheatManager::MinBalloonsOnPlayer' has a wrong offset!");
static_assert(offsetof(UWindCheatManager, MaxBalloonsOnPlayer) == 0x00003C, "Member 'UWindCheatManager::MaxBalloonsOnPlayer' has a wrong offset!");

// Class WindRuntime.WindField
// 0x0108 (0x0398 - 0x0290)
class AWindField : public AFieldSystemActor
{
public:
	float                                         StartTime;                                         // 0x0290(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopTime;                                          // 0x0294(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncomingDuration;                                  // 0x0298(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutgoingDuration;                                  // 0x029C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrengthMultiplier;                                // 0x02A0(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActive;                                         // 0x02A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5[0xF3];                                     // 0x02A5(0x00F3)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCollider(class UShapeComponent* ShapeComponent);
	void AddIgnoredActor(class AActor* Actor);
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void RemoveCollider(class UShapeComponent* ShapeComponent);
	void RemoveIgnoredActor(class AActor* Actor);
	void SetActive(bool bInIsActive);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WindField">();
	}
	static class AWindField* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWindField>();
	}
};
static_assert(alignof(AWindField) == 0x000008, "Wrong alignment on AWindField");
static_assert(sizeof(AWindField) == 0x000398, "Wrong size on AWindField");
static_assert(offsetof(AWindField, StartTime) == 0x000290, "Member 'AWindField::StartTime' has a wrong offset!");
static_assert(offsetof(AWindField, StopTime) == 0x000294, "Member 'AWindField::StopTime' has a wrong offset!");
static_assert(offsetof(AWindField, IncomingDuration) == 0x000298, "Member 'AWindField::IncomingDuration' has a wrong offset!");
static_assert(offsetof(AWindField, OutgoingDuration) == 0x00029C, "Member 'AWindField::OutgoingDuration' has a wrong offset!");
static_assert(offsetof(AWindField, StrengthMultiplier) == 0x0002A0, "Member 'AWindField::StrengthMultiplier' has a wrong offset!");
static_assert(offsetof(AWindField, bIsActive) == 0x0002A4, "Member 'AWindField::bIsActive' has a wrong offset!");

// Class WindRuntime.LinearWindField
// 0x0090 (0x0428 - 0x0398)
class ALinearWindField final : public AWindField
{
public:
	struct FVector                                Direction;                                         // 0x0398(0x0018)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FieldStrength;                                     // 0x03B0(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ForceStrength;                                     // 0x03B4(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PawnForceName;                                     // 0x03B8(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PawnForceStrength;                                 // 0x03BC(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URadialVector*                          RadialVector;                                      // 0x03C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URadialFalloff*                         RadialFalloff;                                     // 0x03C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOperatorField*                         OperatorField;                                     // 0x03D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D8[0x50];                                     // 0x03D8(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LinearWindField">();
	}
	static class ALinearWindField* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALinearWindField>();
	}
};
static_assert(alignof(ALinearWindField) == 0x000008, "Wrong alignment on ALinearWindField");
static_assert(sizeof(ALinearWindField) == 0x000428, "Wrong size on ALinearWindField");
static_assert(offsetof(ALinearWindField, Direction) == 0x000398, "Member 'ALinearWindField::Direction' has a wrong offset!");
static_assert(offsetof(ALinearWindField, FieldStrength) == 0x0003B0, "Member 'ALinearWindField::FieldStrength' has a wrong offset!");
static_assert(offsetof(ALinearWindField, ForceStrength) == 0x0003B4, "Member 'ALinearWindField::ForceStrength' has a wrong offset!");
static_assert(offsetof(ALinearWindField, PawnForceName) == 0x0003B8, "Member 'ALinearWindField::PawnForceName' has a wrong offset!");
static_assert(offsetof(ALinearWindField, PawnForceStrength) == 0x0003BC, "Member 'ALinearWindField::PawnForceStrength' has a wrong offset!");
static_assert(offsetof(ALinearWindField, RadialVector) == 0x0003C0, "Member 'ALinearWindField::RadialVector' has a wrong offset!");
static_assert(offsetof(ALinearWindField, RadialFalloff) == 0x0003C8, "Member 'ALinearWindField::RadialFalloff' has a wrong offset!");
static_assert(offsetof(ALinearWindField, OperatorField) == 0x0003D0, "Member 'ALinearWindField::OperatorField' has a wrong offset!");

// Class WindRuntime.RadialWindField
// 0x0150 (0x04E8 - 0x0398)
class ARadialWindField final : public AWindField
{
public:
	struct FScalableFloat                         FieldRadius;                                       // 0x0398(0x0028)(Edit, Transient, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         FieldStrength;                                     // 0x03C0(0x0028)(Edit, Transient, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ForceRadius;                                       // 0x03E8(0x0028)(Edit, Transient, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ForceStrength;                                     // 0x0410(0x0028)(Edit, Transient, Protected, NativeAccessSpecifierProtected)
	class UCurveFloat*                            ForceStrengthDistanceFalloff;                      // 0x0438(0x0008)(Edit, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PawnForceName;                                     // 0x0440(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         PawnForceStrength;                                 // 0x0448(0x0028)(Edit, Transient, Protected, NativeAccessSpecifierProtected)
	class UCurveFloat*                            PawnForceStrengthDistanceFalloff;                  // 0x0470(0x0008)(Edit, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPawnForceIsPush;                                  // 0x0478(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URadialVector*                          RadialVector;                                      // 0x0480(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URadialFalloff*                         RadialFalloff;                                     // 0x0488(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOperatorField*                         OperatorField;                                     // 0x0490(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_498[0x50];                                     // 0x0498(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RadialWindField">();
	}
	static class ARadialWindField* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARadialWindField>();
	}
};
static_assert(alignof(ARadialWindField) == 0x000008, "Wrong alignment on ARadialWindField");
static_assert(sizeof(ARadialWindField) == 0x0004E8, "Wrong size on ARadialWindField");
static_assert(offsetof(ARadialWindField, FieldRadius) == 0x000398, "Member 'ARadialWindField::FieldRadius' has a wrong offset!");
static_assert(offsetof(ARadialWindField, FieldStrength) == 0x0003C0, "Member 'ARadialWindField::FieldStrength' has a wrong offset!");
static_assert(offsetof(ARadialWindField, ForceRadius) == 0x0003E8, "Member 'ARadialWindField::ForceRadius' has a wrong offset!");
static_assert(offsetof(ARadialWindField, ForceStrength) == 0x000410, "Member 'ARadialWindField::ForceStrength' has a wrong offset!");
static_assert(offsetof(ARadialWindField, ForceStrengthDistanceFalloff) == 0x000438, "Member 'ARadialWindField::ForceStrengthDistanceFalloff' has a wrong offset!");
static_assert(offsetof(ARadialWindField, PawnForceName) == 0x000440, "Member 'ARadialWindField::PawnForceName' has a wrong offset!");
static_assert(offsetof(ARadialWindField, PawnForceStrength) == 0x000448, "Member 'ARadialWindField::PawnForceStrength' has a wrong offset!");
static_assert(offsetof(ARadialWindField, PawnForceStrengthDistanceFalloff) == 0x000470, "Member 'ARadialWindField::PawnForceStrengthDistanceFalloff' has a wrong offset!");
static_assert(offsetof(ARadialWindField, bPawnForceIsPush) == 0x000478, "Member 'ARadialWindField::bPawnForceIsPush' has a wrong offset!");
static_assert(offsetof(ARadialWindField, RadialVector) == 0x000480, "Member 'ARadialWindField::RadialVector' has a wrong offset!");
static_assert(offsetof(ARadialWindField, RadialFalloff) == 0x000488, "Member 'ARadialWindField::RadialFalloff' has a wrong offset!");
static_assert(offsetof(ARadialWindField, OperatorField) == 0x000490, "Member 'ARadialWindField::OperatorField' has a wrong offset!");

// Class WindRuntime.WindSplineComponent
// 0x0DD0 (0x1440 - 0x0670)
class UWindSplineComponent final : public USplineComponent
{
public:
	uint8                                         Pad_668[0x20];                                     // 0x0668(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         DisableSafeZonePhaseIndex;                         // 0x0688(0x0028)(Edit, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            StaticMesh;                                        // 0x06B0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            StartStaticMesh;                                   // 0x06B8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            EndStaticMesh;                                     // 0x06C0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESplineMeshAxis                               MeshForwardAxis;                                   // 0x06C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C9[0x7];                                      // 0x06C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MeshRollVariance;                                  // 0x06D0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	class FName                                   ActiveSectionStartMaterialParamName;               // 0x06F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActiveSectionEndMaterialParamName;                 // 0x06FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TargetingRefreshRate;                              // 0x0700(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TargetingRadius;                                   // 0x0728(0x0028)(Edit, NativeAccessSpecifierPrivate)
	TArray<EObjectTypeQuery>                      TargetObjectTypes;                                 // 0x0750(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FGameplayTagQuery                      TargetTagQuery;                                    // 0x0760(0x0048)(Edit, NativeAccessSpecifierPrivate)
	struct FGameplayTagQuery                      BlockageTagQuery;                                  // 0x07A8(0x0048)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         BlockageSubdivisions;                              // 0x07F0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	TArray<struct FWindSplineTargetEffects>       TargetEffects;                                     // 0x0818(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<EFortPhysicsObjectType, struct FScalableFloat> ObjectTypeToMaxTargetCount;                        // 0x0828(0x0050)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxTargetCountReachedExpelDuration;                // 0x0878(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         SkydivingLandingAngle;                             // 0x08A0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         RampUpSpeed;                                       // 0x08C8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         RampDownSpeed;                                     // 0x08F0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ForwardForceFallOffStartDistance;                  // 0x0918(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ForwardForceMagnitude;                             // 0x0940(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ReverseForceMagnitude;                             // 0x0968(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ForwardForceDistanceFallOffExponent;               // 0x0990(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         InwardForceInnerRadius;                            // 0x09B8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         InwardForceOuterRadiusAcceleration;                // 0x09E0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         InwardForceInnerRadiusDeceleration;                // 0x0A08(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         InwardForceInnerRadiusSpeedThreshold;              // 0x0A30(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         InwardForceOuterRadiusSpeedThreshold;              // 0x0A58(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         InwardForceMaxReductionFromSteering;               // 0x0A80(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         InwardForceMaxMultiplierWhenSteering;              // 0x0AA8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         InwardForceMaxSteerAngle;                          // 0x0AD0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         InwardForceLowVelocityThreshold;                   // 0x0AF8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         InwardForceLowVelocityMinValue;                    // 0x0B20(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         InwardForceSteeringReduceAccelerationPower;        // 0x0B48(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         InwardForceSteeringReduceDecelerationPower;        // 0x0B70(0x0028)(Edit, NativeAccessSpecifierPrivate)
	TMap<EFortPhysicsSimSize, struct FWindSplineForceModifiers> SizeForceModifiers;                                // 0x0B98(0x0050)(Edit, NativeAccessSpecifierPrivate)
	TMap<EFortPhysicsObjectType, struct FWindSplineForceModifiers> ObjectTypeForceModifiers;                          // 0x0BE8(0x0050)(Edit, NativeAccessSpecifierPrivate)
	TArray<struct FWindSplineTagBasedForceModifiers> QueryBasedForceModifiers;                          // 0x0C38(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FGameplayTagQuery                      PawnSkydivingTimeLimitQuery;                       // 0x0C48(0x0048)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         PawnSkydivingTimeLimit;                            // 0x0C90(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         PawnSkydivingMinDistanceAboveGround;               // 0x0CB8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         AutoWakeUpPhysicsObjects;                          // 0x0CE0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         FieldMagnitudeBase;                                // 0x0D08(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         FieldMinMagnitudeAfterFalloff;                     // 0x0D30(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         FieldMaxMagnitudeAfterFalloff;                     // 0x0D58(0x0028)(Edit, NativeAccessSpecifierPrivate)
	TSubclassOf<class UAnimInstance>              PlayerWindAnimationLayer;                          // 0x0D80(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              OnWindSplineDisabled;                              // 0x0D88(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              OnWindSplineEnabled;                               // 0x0D98(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	struct FWindSplineTargetData                  TargetData;                                        // 0x0DA8(0x01B8)(Net, Transient, RepNotify, NativeAccessSpecifierPrivate)
	struct FWindSplineBlockageArray               Blockages;                                         // 0x0F60(0x0118)(Net, Transient, RepNotify, NativeAccessSpecifierPrivate)
	class UFieldSystemComponent*                  FieldSystemComponent;                              // 0x1078(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUniformVector*                         UniformVector;                                     // 0x1080(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxFalloff*                            BoxFalloff;                                        // 0x1088(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOperatorField*                         BoxOperatorField;                                  // 0x1090(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FWindSplineMeshData>            MeshDataArray;                                     // 0x1098(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UFXSystemComponent*>             FXComponents;                                      // 0x10A8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10B8[0x388];                                   // 0x10B8(0x0388)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Disable();
	void Enable();
	void HandleSafeZoneUpdated();
	void OnRep_Blockages();
	void OnRep_TargetData();

	void GetClosestActiveLocations(const struct FVector& InTargetLocation, bool* bIsClosestPointActive, struct FVector* ClosestPointOnSpline, TArray<struct FVector>* ClosestActiveLocations) const;
	float GetTargetingRadius() const;
	void GetWindDataAtLocation(const struct FVector& InTargetLocation, struct FVector* OutDirection, float* OutAttenuation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WindSplineComponent">();
	}
	static class UWindSplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWindSplineComponent>();
	}
};
static_assert(alignof(UWindSplineComponent) == 0x000010, "Wrong alignment on UWindSplineComponent");
static_assert(sizeof(UWindSplineComponent) == 0x001440, "Wrong size on UWindSplineComponent");
static_assert(offsetof(UWindSplineComponent, DisableSafeZonePhaseIndex) == 0x000688, "Member 'UWindSplineComponent::DisableSafeZonePhaseIndex' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, StaticMesh) == 0x0006B0, "Member 'UWindSplineComponent::StaticMesh' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, StartStaticMesh) == 0x0006B8, "Member 'UWindSplineComponent::StartStaticMesh' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, EndStaticMesh) == 0x0006C0, "Member 'UWindSplineComponent::EndStaticMesh' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, MeshForwardAxis) == 0x0006C8, "Member 'UWindSplineComponent::MeshForwardAxis' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, MeshRollVariance) == 0x0006D0, "Member 'UWindSplineComponent::MeshRollVariance' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, ActiveSectionStartMaterialParamName) == 0x0006F8, "Member 'UWindSplineComponent::ActiveSectionStartMaterialParamName' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, ActiveSectionEndMaterialParamName) == 0x0006FC, "Member 'UWindSplineComponent::ActiveSectionEndMaterialParamName' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, TargetingRefreshRate) == 0x000700, "Member 'UWindSplineComponent::TargetingRefreshRate' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, TargetingRadius) == 0x000728, "Member 'UWindSplineComponent::TargetingRadius' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, TargetObjectTypes) == 0x000750, "Member 'UWindSplineComponent::TargetObjectTypes' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, TargetTagQuery) == 0x000760, "Member 'UWindSplineComponent::TargetTagQuery' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, BlockageTagQuery) == 0x0007A8, "Member 'UWindSplineComponent::BlockageTagQuery' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, BlockageSubdivisions) == 0x0007F0, "Member 'UWindSplineComponent::BlockageSubdivisions' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, TargetEffects) == 0x000818, "Member 'UWindSplineComponent::TargetEffects' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, ObjectTypeToMaxTargetCount) == 0x000828, "Member 'UWindSplineComponent::ObjectTypeToMaxTargetCount' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, MaxTargetCountReachedExpelDuration) == 0x000878, "Member 'UWindSplineComponent::MaxTargetCountReachedExpelDuration' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, SkydivingLandingAngle) == 0x0008A0, "Member 'UWindSplineComponent::SkydivingLandingAngle' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, RampUpSpeed) == 0x0008C8, "Member 'UWindSplineComponent::RampUpSpeed' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, RampDownSpeed) == 0x0008F0, "Member 'UWindSplineComponent::RampDownSpeed' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, ForwardForceFallOffStartDistance) == 0x000918, "Member 'UWindSplineComponent::ForwardForceFallOffStartDistance' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, ForwardForceMagnitude) == 0x000940, "Member 'UWindSplineComponent::ForwardForceMagnitude' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, ReverseForceMagnitude) == 0x000968, "Member 'UWindSplineComponent::ReverseForceMagnitude' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, ForwardForceDistanceFallOffExponent) == 0x000990, "Member 'UWindSplineComponent::ForwardForceDistanceFallOffExponent' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, InwardForceInnerRadius) == 0x0009B8, "Member 'UWindSplineComponent::InwardForceInnerRadius' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, InwardForceOuterRadiusAcceleration) == 0x0009E0, "Member 'UWindSplineComponent::InwardForceOuterRadiusAcceleration' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, InwardForceInnerRadiusDeceleration) == 0x000A08, "Member 'UWindSplineComponent::InwardForceInnerRadiusDeceleration' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, InwardForceInnerRadiusSpeedThreshold) == 0x000A30, "Member 'UWindSplineComponent::InwardForceInnerRadiusSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, InwardForceOuterRadiusSpeedThreshold) == 0x000A58, "Member 'UWindSplineComponent::InwardForceOuterRadiusSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, InwardForceMaxReductionFromSteering) == 0x000A80, "Member 'UWindSplineComponent::InwardForceMaxReductionFromSteering' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, InwardForceMaxMultiplierWhenSteering) == 0x000AA8, "Member 'UWindSplineComponent::InwardForceMaxMultiplierWhenSteering' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, InwardForceMaxSteerAngle) == 0x000AD0, "Member 'UWindSplineComponent::InwardForceMaxSteerAngle' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, InwardForceLowVelocityThreshold) == 0x000AF8, "Member 'UWindSplineComponent::InwardForceLowVelocityThreshold' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, InwardForceLowVelocityMinValue) == 0x000B20, "Member 'UWindSplineComponent::InwardForceLowVelocityMinValue' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, InwardForceSteeringReduceAccelerationPower) == 0x000B48, "Member 'UWindSplineComponent::InwardForceSteeringReduceAccelerationPower' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, InwardForceSteeringReduceDecelerationPower) == 0x000B70, "Member 'UWindSplineComponent::InwardForceSteeringReduceDecelerationPower' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, SizeForceModifiers) == 0x000B98, "Member 'UWindSplineComponent::SizeForceModifiers' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, ObjectTypeForceModifiers) == 0x000BE8, "Member 'UWindSplineComponent::ObjectTypeForceModifiers' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, QueryBasedForceModifiers) == 0x000C38, "Member 'UWindSplineComponent::QueryBasedForceModifiers' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, PawnSkydivingTimeLimitQuery) == 0x000C48, "Member 'UWindSplineComponent::PawnSkydivingTimeLimitQuery' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, PawnSkydivingTimeLimit) == 0x000C90, "Member 'UWindSplineComponent::PawnSkydivingTimeLimit' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, PawnSkydivingMinDistanceAboveGround) == 0x000CB8, "Member 'UWindSplineComponent::PawnSkydivingMinDistanceAboveGround' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, AutoWakeUpPhysicsObjects) == 0x000CE0, "Member 'UWindSplineComponent::AutoWakeUpPhysicsObjects' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, FieldMagnitudeBase) == 0x000D08, "Member 'UWindSplineComponent::FieldMagnitudeBase' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, FieldMinMagnitudeAfterFalloff) == 0x000D30, "Member 'UWindSplineComponent::FieldMinMagnitudeAfterFalloff' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, FieldMaxMagnitudeAfterFalloff) == 0x000D58, "Member 'UWindSplineComponent::FieldMaxMagnitudeAfterFalloff' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, PlayerWindAnimationLayer) == 0x000D80, "Member 'UWindSplineComponent::PlayerWindAnimationLayer' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, OnWindSplineDisabled) == 0x000D88, "Member 'UWindSplineComponent::OnWindSplineDisabled' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, OnWindSplineEnabled) == 0x000D98, "Member 'UWindSplineComponent::OnWindSplineEnabled' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, TargetData) == 0x000DA8, "Member 'UWindSplineComponent::TargetData' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, Blockages) == 0x000F60, "Member 'UWindSplineComponent::Blockages' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, FieldSystemComponent) == 0x001078, "Member 'UWindSplineComponent::FieldSystemComponent' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, UniformVector) == 0x001080, "Member 'UWindSplineComponent::UniformVector' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, BoxFalloff) == 0x001088, "Member 'UWindSplineComponent::BoxFalloff' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, BoxOperatorField) == 0x001090, "Member 'UWindSplineComponent::BoxOperatorField' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, MeshDataArray) == 0x001098, "Member 'UWindSplineComponent::MeshDataArray' has a wrong offset!");
static_assert(offsetof(UWindSplineComponent, FXComponents) == 0x0010A8, "Member 'UWindSplineComponent::FXComponents' has a wrong offset!");

}

