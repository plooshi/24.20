#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayDebugger

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "GameplayDebugger_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class GameplayDebugger.GameplayDebuggerCategoryReplicator
// 0x00B8 (0x0340 - 0x0288)
class AGameplayDebuggerCategoryReplicator final : public AActor
{
public:
	class APlayerController*                      OwnerPC;                                           // 0x0288(0x0008)(Net, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsEnabled;                                        // 0x0290(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayDebuggerNetPack               ReplicatedData;                                    // 0x0298(0x0018)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct FGameplayDebuggerDebugActor            DebugActor;                                        // 0x02B0(0x0010)(Net, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayDebuggerVisLogSync            VisLogSync;                                        // 0x02C0(0x0010)(Net, Protected, NativeAccessSpecifierProtected)
	class UGameplayDebuggerRenderingComponent*    RenderingComp;                                     // 0x02D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D8[0x68];                                     // 0x02D8(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientDataPackPacket(const struct FGameplayDebuggerDataPackRPCParams& Params_0);
	void OnRep_ReplicatedData();
	void ServerResetViewPoint();
	void ServerSendCategoryInputEvent(int32 CategoryId, int32 HandlerId);
	void ServerSendExtensionInputEvent(int32 ExtensionId, int32 HandlerId);
	void ServerSetCategoryEnabled(int32 CategoryId, bool bEnable);
	void ServerSetDebugActor(class AActor* Actor, bool bSelectInEditor);
	void ServerSetEnabled(bool bEnable);
	void ServerSetViewPoint(const struct FVector& InViewLocation, const struct FVector& InViewDirection);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayDebuggerCategoryReplicator">();
	}
	static class AGameplayDebuggerCategoryReplicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayDebuggerCategoryReplicator>();
	}
};
static_assert(alignof(AGameplayDebuggerCategoryReplicator) == 0x000008, "Wrong alignment on AGameplayDebuggerCategoryReplicator");
static_assert(sizeof(AGameplayDebuggerCategoryReplicator) == 0x000340, "Wrong size on AGameplayDebuggerCategoryReplicator");
static_assert(offsetof(AGameplayDebuggerCategoryReplicator, OwnerPC) == 0x000288, "Member 'AGameplayDebuggerCategoryReplicator::OwnerPC' has a wrong offset!");
static_assert(offsetof(AGameplayDebuggerCategoryReplicator, bIsEnabled) == 0x000290, "Member 'AGameplayDebuggerCategoryReplicator::bIsEnabled' has a wrong offset!");
static_assert(offsetof(AGameplayDebuggerCategoryReplicator, ReplicatedData) == 0x000298, "Member 'AGameplayDebuggerCategoryReplicator::ReplicatedData' has a wrong offset!");
static_assert(offsetof(AGameplayDebuggerCategoryReplicator, DebugActor) == 0x0002B0, "Member 'AGameplayDebuggerCategoryReplicator::DebugActor' has a wrong offset!");
static_assert(offsetof(AGameplayDebuggerCategoryReplicator, VisLogSync) == 0x0002C0, "Member 'AGameplayDebuggerCategoryReplicator::VisLogSync' has a wrong offset!");
static_assert(offsetof(AGameplayDebuggerCategoryReplicator, RenderingComp) == 0x0002D0, "Member 'AGameplayDebuggerCategoryReplicator::RenderingComp' has a wrong offset!");

// Class GameplayDebugger.GameplayDebuggerConfig
// 0x0230 (0x0258 - 0x0028)
class UGameplayDebuggerConfig final : public UObject
{
public:
	struct FKey                                   ActivationKey;                                     // 0x0028(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   CategoryRowNextKey;                                // 0x0040(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   CategoryRowPrevKey;                                // 0x0058(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   CategorySlot0;                                     // 0x0070(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   CategorySlot1;                                     // 0x0088(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   CategorySlot2;                                     // 0x00A0(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   CategorySlot3;                                     // 0x00B8(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   CategorySlot4;                                     // 0x00D0(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   CategorySlot5;                                     // 0x00E8(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   CategorySlot6;                                     // 0x0100(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   CategorySlot7;                                     // 0x0118(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   CategorySlot8;                                     // 0x0130(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   CategorySlot9;                                     // 0x0148(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugCanvasPaddingLeft;                            // 0x0160(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugCanvasPaddingRight;                           // 0x0164(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugCanvasPaddingTop;                             // 0x0168(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugCanvasPaddingBottom;                          // 0x016C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugCanvasEnableTextShadow;                      // 0x0170(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayDebuggerCategoryConfig> Categories;                                        // 0x0178(0x0010)(Edit, EditFixedSize, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FGameplayDebuggerExtensionConfig> Extensions;                                        // 0x0188(0x0010)(Edit, EditFixedSize, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                         Pad_198[0xC0];                                     // 0x0198(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayDebuggerConfig">();
	}
	static class UGameplayDebuggerConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayDebuggerConfig>();
	}
};
static_assert(alignof(UGameplayDebuggerConfig) == 0x000008, "Wrong alignment on UGameplayDebuggerConfig");
static_assert(sizeof(UGameplayDebuggerConfig) == 0x000258, "Wrong size on UGameplayDebuggerConfig");
static_assert(offsetof(UGameplayDebuggerConfig, ActivationKey) == 0x000028, "Member 'UGameplayDebuggerConfig::ActivationKey' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, CategoryRowNextKey) == 0x000040, "Member 'UGameplayDebuggerConfig::CategoryRowNextKey' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, CategoryRowPrevKey) == 0x000058, "Member 'UGameplayDebuggerConfig::CategoryRowPrevKey' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, CategorySlot0) == 0x000070, "Member 'UGameplayDebuggerConfig::CategorySlot0' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, CategorySlot1) == 0x000088, "Member 'UGameplayDebuggerConfig::CategorySlot1' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, CategorySlot2) == 0x0000A0, "Member 'UGameplayDebuggerConfig::CategorySlot2' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, CategorySlot3) == 0x0000B8, "Member 'UGameplayDebuggerConfig::CategorySlot3' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, CategorySlot4) == 0x0000D0, "Member 'UGameplayDebuggerConfig::CategorySlot4' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, CategorySlot5) == 0x0000E8, "Member 'UGameplayDebuggerConfig::CategorySlot5' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, CategorySlot6) == 0x000100, "Member 'UGameplayDebuggerConfig::CategorySlot6' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, CategorySlot7) == 0x000118, "Member 'UGameplayDebuggerConfig::CategorySlot7' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, CategorySlot8) == 0x000130, "Member 'UGameplayDebuggerConfig::CategorySlot8' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, CategorySlot9) == 0x000148, "Member 'UGameplayDebuggerConfig::CategorySlot9' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, DebugCanvasPaddingLeft) == 0x000160, "Member 'UGameplayDebuggerConfig::DebugCanvasPaddingLeft' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, DebugCanvasPaddingRight) == 0x000164, "Member 'UGameplayDebuggerConfig::DebugCanvasPaddingRight' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, DebugCanvasPaddingTop) == 0x000168, "Member 'UGameplayDebuggerConfig::DebugCanvasPaddingTop' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, DebugCanvasPaddingBottom) == 0x00016C, "Member 'UGameplayDebuggerConfig::DebugCanvasPaddingBottom' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, bDebugCanvasEnableTextShadow) == 0x000170, "Member 'UGameplayDebuggerConfig::bDebugCanvasEnableTextShadow' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, Categories) == 0x000178, "Member 'UGameplayDebuggerConfig::Categories' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerConfig, Extensions) == 0x000188, "Member 'UGameplayDebuggerConfig::Extensions' has a wrong offset!");

// Class GameplayDebugger.GameplayDebuggerUserSettings
// 0x0010 (0x0040 - 0x0030)
class UGameplayDebuggerUserSettings final : public UDeveloperSettings
{
public:
	uint8                                         bEnableGameplayDebuggerInEditor : 1;               // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxViewDistance;                                   // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxViewAngle;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayDebuggerUserSettings">();
	}
	static class UGameplayDebuggerUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayDebuggerUserSettings>();
	}
};
static_assert(alignof(UGameplayDebuggerUserSettings) == 0x000008, "Wrong alignment on UGameplayDebuggerUserSettings");
static_assert(sizeof(UGameplayDebuggerUserSettings) == 0x000040, "Wrong size on UGameplayDebuggerUserSettings");
static_assert(offsetof(UGameplayDebuggerUserSettings, MaxViewDistance) == 0x000034, "Member 'UGameplayDebuggerUserSettings::MaxViewDistance' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerUserSettings, MaxViewAngle) == 0x000038, "Member 'UGameplayDebuggerUserSettings::MaxViewAngle' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerUserSettings, FontSize) == 0x00003C, "Member 'UGameplayDebuggerUserSettings::FontSize' has a wrong offset!");

// Class GameplayDebugger.GameplayDebuggerLocalController
// 0x0060 (0x0088 - 0x0028)
class UGameplayDebuggerLocalController final : public UObject
{
public:
	class AGameplayDebuggerCategoryReplicator*    CachedReplicator;                                  // 0x0028(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AGameplayDebuggerPlayerManager*         CachedPlayerManager;                               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 DebugActorCandidate;                               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFont*                                  HUDFont;                                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x40];                                      // 0x0048(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayDebuggerLocalController">();
	}
	static class UGameplayDebuggerLocalController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayDebuggerLocalController>();
	}
};
static_assert(alignof(UGameplayDebuggerLocalController) == 0x000008, "Wrong alignment on UGameplayDebuggerLocalController");
static_assert(sizeof(UGameplayDebuggerLocalController) == 0x000088, "Wrong size on UGameplayDebuggerLocalController");
static_assert(offsetof(UGameplayDebuggerLocalController, CachedReplicator) == 0x000028, "Member 'UGameplayDebuggerLocalController::CachedReplicator' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerLocalController, CachedPlayerManager) == 0x000030, "Member 'UGameplayDebuggerLocalController::CachedPlayerManager' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerLocalController, DebugActorCandidate) == 0x000038, "Member 'UGameplayDebuggerLocalController::DebugActorCandidate' has a wrong offset!");
static_assert(offsetof(UGameplayDebuggerLocalController, HUDFont) == 0x000040, "Member 'UGameplayDebuggerLocalController::HUDFont' has a wrong offset!");

// Class GameplayDebugger.GameplayDebuggerPlayerManager
// 0x0030 (0x02B8 - 0x0288)
class AGameplayDebuggerPlayerManager final : public AActor
{
public:
	uint8                                         Pad_288[0x8];                                      // 0x0288(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayDebuggerPlayerData>    PlayerData;                                        // 0x0290(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class AGameplayDebuggerCategoryReplicator*> PendingRegistrations;                              // 0x02A0(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B0[0x8];                                      // 0x02B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayDebuggerPlayerManager">();
	}
	static class AGameplayDebuggerPlayerManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayDebuggerPlayerManager>();
	}
};
static_assert(alignof(AGameplayDebuggerPlayerManager) == 0x000008, "Wrong alignment on AGameplayDebuggerPlayerManager");
static_assert(sizeof(AGameplayDebuggerPlayerManager) == 0x0002B8, "Wrong size on AGameplayDebuggerPlayerManager");
static_assert(offsetof(AGameplayDebuggerPlayerManager, PlayerData) == 0x000290, "Member 'AGameplayDebuggerPlayerManager::PlayerData' has a wrong offset!");
static_assert(offsetof(AGameplayDebuggerPlayerManager, PendingRegistrations) == 0x0002A0, "Member 'AGameplayDebuggerPlayerManager::PendingRegistrations' has a wrong offset!");

// Class GameplayDebugger.GameplayDebuggerRenderingComponent
// 0x0060 (0x0620 - 0x05C0)
class UGameplayDebuggerRenderingComponent final : public UDebugDrawComponent
{
public:
	uint8                                         Pad_5B8[0x68];                                     // 0x05B8(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayDebuggerRenderingComponent">();
	}
	static class UGameplayDebuggerRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayDebuggerRenderingComponent>();
	}
};
static_assert(alignof(UGameplayDebuggerRenderingComponent) == 0x000010, "Wrong alignment on UGameplayDebuggerRenderingComponent");
static_assert(sizeof(UGameplayDebuggerRenderingComponent) == 0x000620, "Wrong size on UGameplayDebuggerRenderingComponent");

}

