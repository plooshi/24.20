#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Chooser

#include "Basic.hpp"

#include "StructUtils_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum Chooser.EBoolColumnCellValue
// NumValues: 0x0004
enum class EBoolColumnCellValue : uint8
{
	MatchFalse                               = 0,
	MatchTrue                                = 1,
	MatchAny                                 = 2,
	EBoolColumnCellValue_MAX                 = 3,
};

// ScriptStruct Chooser.ChooserParameterBase
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FChooserParameterBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChooserParameterBase) == 0x000008, "Wrong alignment on FChooserParameterBase");
static_assert(sizeof(FChooserParameterBase) == 0x000008, "Wrong size on FChooserParameterBase");

// ScriptStruct Chooser.ChooserParameterBoolBase
// 0x0000 (0x0008 - 0x0008)
struct FChooserParameterBoolBase : public FChooserParameterBase
{
};
static_assert(alignof(FChooserParameterBoolBase) == 0x000008, "Wrong alignment on FChooserParameterBoolBase");
static_assert(sizeof(FChooserParameterBoolBase) == 0x000008, "Wrong size on FChooserParameterBoolBase");

// ScriptStruct Chooser.ChooserPropertyBinding
// 0x0010 (0x0010 - 0x0000)
struct FChooserPropertyBinding
{
public:
	TArray<class FName>                           PropertyBindingChain;                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChooserPropertyBinding) == 0x000008, "Wrong alignment on FChooserPropertyBinding");
static_assert(sizeof(FChooserPropertyBinding) == 0x000010, "Wrong size on FChooserPropertyBinding");
static_assert(offsetof(FChooserPropertyBinding, PropertyBindingChain) == 0x000000, "Member 'FChooserPropertyBinding::PropertyBindingChain' has a wrong offset!");

// ScriptStruct Chooser.BoolContextProperty
// 0x0020 (0x0028 - 0x0008)
struct FBoolContextProperty final : public FChooserParameterBoolBase
{
public:
	TArray<class FName>                           PropertyBindingChain;                              // 0x0008(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	struct FChooserPropertyBinding                Binding;                                           // 0x0018(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoolContextProperty) == 0x000008, "Wrong alignment on FBoolContextProperty");
static_assert(sizeof(FBoolContextProperty) == 0x000028, "Wrong size on FBoolContextProperty");
static_assert(offsetof(FBoolContextProperty, PropertyBindingChain) == 0x000008, "Member 'FBoolContextProperty::PropertyBindingChain' has a wrong offset!");
static_assert(offsetof(FBoolContextProperty, Binding) == 0x000018, "Member 'FBoolContextProperty::Binding' has a wrong offset!");

// ScriptStruct Chooser.ChooserColumnBase
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FChooserColumnBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChooserColumnBase) == 0x000008, "Wrong alignment on FChooserColumnBase");
static_assert(sizeof(FChooserColumnBase) == 0x000008, "Wrong size on FChooserColumnBase");

// ScriptStruct Chooser.BoolColumn
// 0x0020 (0x0028 - 0x0008)
struct FBoolColumn final : public FChooserColumnBase
{
public:
	struct FInstancedStruct                       InputValue;                                        // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<EBoolColumnCellValue>                  RowValuesWithAny;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoolColumn) == 0x000008, "Wrong alignment on FBoolColumn");
static_assert(sizeof(FBoolColumn) == 0x000028, "Wrong size on FBoolColumn");
static_assert(offsetof(FBoolColumn, InputValue) == 0x000008, "Member 'FBoolColumn::InputValue' has a wrong offset!");
static_assert(offsetof(FBoolColumn, RowValuesWithAny) == 0x000018, "Member 'FBoolColumn::RowValuesWithAny' has a wrong offset!");

// ScriptStruct Chooser.ChooserEnumPropertyBinding
// 0x0000 (0x0010 - 0x0010)
struct FChooserEnumPropertyBinding final : public FChooserPropertyBinding
{
};
static_assert(alignof(FChooserEnumPropertyBinding) == 0x000008, "Wrong alignment on FChooserEnumPropertyBinding");
static_assert(sizeof(FChooserEnumPropertyBinding) == 0x000010, "Wrong size on FChooserEnumPropertyBinding");

// ScriptStruct Chooser.ChooserParameterEnumBase
// 0x0000 (0x0008 - 0x0008)
struct FChooserParameterEnumBase : public FChooserParameterBase
{
};
static_assert(alignof(FChooserParameterEnumBase) == 0x000008, "Wrong alignment on FChooserParameterEnumBase");
static_assert(sizeof(FChooserParameterEnumBase) == 0x000008, "Wrong size on FChooserParameterEnumBase");

// ScriptStruct Chooser.EnumContextProperty
// 0x0020 (0x0028 - 0x0008)
struct FEnumContextProperty final : public FChooserParameterEnumBase
{
public:
	TArray<class FName>                           PropertyBindingChain;                              // 0x0008(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	struct FChooserEnumPropertyBinding            Binding;                                           // 0x0018(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnumContextProperty) == 0x000008, "Wrong alignment on FEnumContextProperty");
static_assert(sizeof(FEnumContextProperty) == 0x000028, "Wrong size on FEnumContextProperty");
static_assert(offsetof(FEnumContextProperty, PropertyBindingChain) == 0x000008, "Member 'FEnumContextProperty::PropertyBindingChain' has a wrong offset!");
static_assert(offsetof(FEnumContextProperty, Binding) == 0x000018, "Member 'FEnumContextProperty::Binding' has a wrong offset!");

// ScriptStruct Chooser.ChooserEnumRowData
// 0x0002 (0x0002 - 0x0000)
struct FChooserEnumRowData final
{
public:
	bool                                          CompareNotEqual;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChooserEnumRowData) == 0x000001, "Wrong alignment on FChooserEnumRowData");
static_assert(sizeof(FChooserEnumRowData) == 0x000002, "Wrong size on FChooserEnumRowData");
static_assert(offsetof(FChooserEnumRowData, CompareNotEqual) == 0x000000, "Member 'FChooserEnumRowData::CompareNotEqual' has a wrong offset!");
static_assert(offsetof(FChooserEnumRowData, Value) == 0x000001, "Member 'FChooserEnumRowData::Value' has a wrong offset!");

// ScriptStruct Chooser.EnumColumn
// 0x0020 (0x0028 - 0x0008)
struct FEnumColumn final : public FChooserColumnBase
{
public:
	struct FInstancedStruct                       InputValue;                                        // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FChooserEnumRowData>            RowValues;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnumColumn) == 0x000008, "Wrong alignment on FEnumColumn");
static_assert(sizeof(FEnumColumn) == 0x000028, "Wrong size on FEnumColumn");
static_assert(offsetof(FEnumColumn, InputValue) == 0x000008, "Member 'FEnumColumn::InputValue' has a wrong offset!");
static_assert(offsetof(FEnumColumn, RowValues) == 0x000018, "Member 'FEnumColumn::RowValues' has a wrong offset!");

// ScriptStruct Chooser.ChooserParameterFloatBase
// 0x0000 (0x0008 - 0x0008)
struct FChooserParameterFloatBase : public FChooserParameterBase
{
};
static_assert(alignof(FChooserParameterFloatBase) == 0x000008, "Wrong alignment on FChooserParameterFloatBase");
static_assert(sizeof(FChooserParameterFloatBase) == 0x000008, "Wrong size on FChooserParameterFloatBase");

// ScriptStruct Chooser.FloatContextProperty
// 0x0020 (0x0028 - 0x0008)
struct FFloatContextProperty final : public FChooserParameterFloatBase
{
public:
	TArray<class FName>                           PropertyBindingChain;                              // 0x0008(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	struct FChooserPropertyBinding                Binding;                                           // 0x0018(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatContextProperty) == 0x000008, "Wrong alignment on FFloatContextProperty");
static_assert(sizeof(FFloatContextProperty) == 0x000028, "Wrong size on FFloatContextProperty");
static_assert(offsetof(FFloatContextProperty, PropertyBindingChain) == 0x000008, "Member 'FFloatContextProperty::PropertyBindingChain' has a wrong offset!");
static_assert(offsetof(FFloatContextProperty, Binding) == 0x000018, "Member 'FFloatContextProperty::Binding' has a wrong offset!");

// ScriptStruct Chooser.ChooserFloatRangeRowData
// 0x0008 (0x0008 - 0x0000)
struct FChooserFloatRangeRowData final
{
public:
	float                                         min_0;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         max_0;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChooserFloatRangeRowData) == 0x000004, "Wrong alignment on FChooserFloatRangeRowData");
static_assert(sizeof(FChooserFloatRangeRowData) == 0x000008, "Wrong size on FChooserFloatRangeRowData");
static_assert(offsetof(FChooserFloatRangeRowData, min_0) == 0x000000, "Member 'FChooserFloatRangeRowData::min_0' has a wrong offset!");
static_assert(offsetof(FChooserFloatRangeRowData, max_0) == 0x000004, "Member 'FChooserFloatRangeRowData::max_0' has a wrong offset!");

// ScriptStruct Chooser.FloatRangeColumn
// 0x0020 (0x0028 - 0x0008)
struct FFloatRangeColumn final : public FChooserColumnBase
{
public:
	struct FInstancedStruct                       InputValue;                                        // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FChooserFloatRangeRowData>      RowValues;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatRangeColumn) == 0x000008, "Wrong alignment on FFloatRangeColumn");
static_assert(sizeof(FFloatRangeColumn) == 0x000028, "Wrong size on FFloatRangeColumn");
static_assert(offsetof(FFloatRangeColumn, InputValue) == 0x000008, "Member 'FFloatRangeColumn::InputValue' has a wrong offset!");
static_assert(offsetof(FFloatRangeColumn, RowValues) == 0x000018, "Member 'FFloatRangeColumn::RowValues' has a wrong offset!");

// ScriptStruct Chooser.ChooserParameterGameplayTagBase
// 0x0000 (0x0008 - 0x0008)
struct FChooserParameterGameplayTagBase : public FChooserParameterBase
{
};
static_assert(alignof(FChooserParameterGameplayTagBase) == 0x000008, "Wrong alignment on FChooserParameterGameplayTagBase");
static_assert(sizeof(FChooserParameterGameplayTagBase) == 0x000008, "Wrong size on FChooserParameterGameplayTagBase");

// ScriptStruct Chooser.GameplayTagContextProperty
// 0x0020 (0x0028 - 0x0008)
struct FGameplayTagContextProperty final : public FChooserParameterGameplayTagBase
{
public:
	TArray<class FName>                           PropertyBindingChain;                              // 0x0008(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	struct FChooserPropertyBinding                Binding;                                           // 0x0018(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayTagContextProperty) == 0x000008, "Wrong alignment on FGameplayTagContextProperty");
static_assert(sizeof(FGameplayTagContextProperty) == 0x000028, "Wrong size on FGameplayTagContextProperty");
static_assert(offsetof(FGameplayTagContextProperty, PropertyBindingChain) == 0x000008, "Member 'FGameplayTagContextProperty::PropertyBindingChain' has a wrong offset!");
static_assert(offsetof(FGameplayTagContextProperty, Binding) == 0x000018, "Member 'FGameplayTagContextProperty::Binding' has a wrong offset!");

// ScriptStruct Chooser.GameplayTagColumn
// 0x0028 (0x0030 - 0x0008)
struct FGameplayTagColumn final : public FChooserColumnBase
{
public:
	struct FInstancedStruct                       InputValue;                                        // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	EGameplayContainerMatchType                   TagMatchType;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTagContainer>          RowValues;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayTagColumn) == 0x000008, "Wrong alignment on FGameplayTagColumn");
static_assert(sizeof(FGameplayTagColumn) == 0x000030, "Wrong size on FGameplayTagColumn");
static_assert(offsetof(FGameplayTagColumn, InputValue) == 0x000008, "Member 'FGameplayTagColumn::InputValue' has a wrong offset!");
static_assert(offsetof(FGameplayTagColumn, TagMatchType) == 0x000018, "Member 'FGameplayTagColumn::TagMatchType' has a wrong offset!");
static_assert(offsetof(FGameplayTagColumn, RowValues) == 0x000020, "Member 'FGameplayTagColumn::RowValues' has a wrong offset!");

// ScriptStruct Chooser.ObjectChooserBase
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FObjectChooserBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FObjectChooserBase) == 0x000008, "Wrong alignment on FObjectChooserBase");
static_assert(sizeof(FObjectChooserBase) == 0x000008, "Wrong size on FObjectChooserBase");

// ScriptStruct Chooser.AssetChooser
// 0x0008 (0x0010 - 0x0008)
struct FAssetChooser final : public FObjectChooserBase
{
public:
	class UObject*                                Asset;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssetChooser) == 0x000008, "Wrong alignment on FAssetChooser");
static_assert(sizeof(FAssetChooser) == 0x000010, "Wrong size on FAssetChooser");
static_assert(offsetof(FAssetChooser, Asset) == 0x000008, "Member 'FAssetChooser::Asset' has a wrong offset!");

// ScriptStruct Chooser.ClassChooser
// 0x0008 (0x0010 - 0x0008)
struct FClassChooser final : public FObjectChooserBase
{
public:
	TSubclassOf<class UObject>                    Class;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClassChooser) == 0x000008, "Wrong alignment on FClassChooser");
static_assert(sizeof(FClassChooser) == 0x000010, "Wrong size on FClassChooser");
static_assert(offsetof(FClassChooser, Class) == 0x000008, "Member 'FClassChooser::Class' has a wrong offset!");

// ScriptStruct Chooser.OutputBoolColumn
// 0x0020 (0x0028 - 0x0008)
struct FOutputBoolColumn final : public FChooserColumnBase
{
public:
	struct FInstancedStruct                       InputValue;                                        // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<bool>                                  RowValues;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutputBoolColumn) == 0x000008, "Wrong alignment on FOutputBoolColumn");
static_assert(sizeof(FOutputBoolColumn) == 0x000028, "Wrong size on FOutputBoolColumn");
static_assert(offsetof(FOutputBoolColumn, InputValue) == 0x000008, "Member 'FOutputBoolColumn::InputValue' has a wrong offset!");
static_assert(offsetof(FOutputBoolColumn, RowValues) == 0x000018, "Member 'FOutputBoolColumn::RowValues' has a wrong offset!");

// ScriptStruct Chooser.EvaluateChooser
// 0x0008 (0x0010 - 0x0008)
struct FEvaluateChooser final : public FObjectChooserBase
{
public:
	class UChooserTable*                          Chooser;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvaluateChooser) == 0x000008, "Wrong alignment on FEvaluateChooser");
static_assert(sizeof(FEvaluateChooser) == 0x000010, "Wrong size on FEvaluateChooser");
static_assert(offsetof(FEvaluateChooser, Chooser) == 0x000008, "Member 'FEvaluateChooser::Chooser' has a wrong offset!");

}

