#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnergyRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "ModularGameplay_classes.hpp"
#include "EnergyRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class EnergyRuntime.FortComponent_Energy
// 0x0248 (0x02E8 - 0x00A0)
class UFortComponent_Energy : public UPawnComponent
{
public:
	struct FGameplayTagQuery                      RechargeDisabledQuery;                             // 0x00A0(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x10];                                      // 0x00E8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      EnergyUseDisabledQuery;                            // 0x00F8(0x0048)(NativeAccessSpecifierPrivate)
	struct FTimerHandle                           BeginRechargeTimerHandle;                          // 0x0140(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  EnergyTypeIdentifierTagContainer;                  // 0x0148(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         CurrentEnergy;                                     // 0x0168(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NetEnergyDeltaPerSecond;                           // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_170[0x8];                                      // 0x0170(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxEnergy;                                         // 0x0178(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinEnergyForUsing;                                 // 0x01A0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         RechargeAmountPerSecond;                           // 0x01C8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         RechargeDelayInSeconds;                            // 0x01F0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         RechargePercentageLimit;                           // 0x0218(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FEnergyChannelingData>          ActiveEnergyChannels;                              // 0x0240(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEnergyChannelingData>          NewActiveEnergyChannels;                           // 0x0250(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEnergyRegenOverrideData>       EnergyRegenOverrides;                              // 0x0260(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UFortComponent_Energy* EnergyComponent, float PreviousValue)> OnCurrentEnergyChanged;                            // 0x0270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UFortComponent_Energy* EnergyComponent)> OnEnergyCompletelyDrained;                         // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UFortComponent_Energy* EnergyComponent)> OnEnergyRechargeBegun;                             // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UFortComponent_Energy* EnergyComponent)> OnEnergyRechargeInterrupted;                       // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UFortComponent_Energy* EnergyComponent)> OnEnergyRechargeComplete;                          // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UFortComponent_Energy* EnergyComponent)> OnEnergyReachedMax;                                // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UFortComponent_Energy* EnergyComponent)> OnEnergyReachedMinForUsing;                        // 0x02D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         bRechargingEnabled : 1;                            // 0x02E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bIsRecharging : 1;                                 // 0x02E0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bIsUsingEnergy : 1;                                // 0x02E0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddEnergy(float* OutAmountOfEnergyAdded, float AmountOfEnergyToAdd, class UObject* OptionalEnergySource, bool bBroadcastEnergyPercentChanged);
	void ApplyRegenDataOverride(const struct FGameplayTag& RegenOverrideIdentifier, const float NewRechargeAmountPerSecond, const float NewRechargeDelayInSeconds, const float NewRechargePercentageLimit);
	void HandleControllerChanged(class APawn* Pawn, class AController* OldController, class AController* NewController);
	void OnMutatorUpdated();
	void OnPlayerStatePawnSet(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn);
	void RegisterMutatorUpdatedDelegate(class APawn* AffectedPawn);
	bool RemoveRegenDataOverride(const struct FGameplayTag& RegenOverrideIdentifier);
	bool SetAllEnergyUsageFree(bool bShouldEnergyUsageBeFree);
	bool StartAddingEnergy(float EnergyToAddPerSecond, const struct FGameplayTag& EnergySourceIdentifier, class UObject* OptionalEnergySource);
	bool StartUsingEnergy(float EnergyToUseToStart, float EnergyToUsePerSecond, const struct FGameplayTag& EnergyUseIdentifier, class UObject* OptionalEnergyUser);
	bool StopAddingEnergy(const struct FGameplayTag& EnergyUseIdentifier, class UObject* OptionalEnergySource);
	bool StopUsingEnergy(const struct FGameplayTag& EnergyUseIdentifier, class UObject* OptionalEnergyUser);
	bool UseEnergy(float* OutAmountOfEnergyUsed, float AmountOfEnergyToUse, bool bUseEnergyEvenOnFailure, class UObject* OptionalEnergyUser, bool bBroadcastEnergyPercentChanged);

	float GetCurrentEnergyPercentage() const;
	bool HasSufficientEnergy(float EnergyAmountToTest) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortComponent_Energy">();
	}
	static class UFortComponent_Energy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortComponent_Energy>();
	}
};
static_assert(alignof(UFortComponent_Energy) == 0x000008, "Wrong alignment on UFortComponent_Energy");
static_assert(sizeof(UFortComponent_Energy) == 0x0002E8, "Wrong size on UFortComponent_Energy");
static_assert(offsetof(UFortComponent_Energy, RechargeDisabledQuery) == 0x0000A0, "Member 'UFortComponent_Energy::RechargeDisabledQuery' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, EnergyUseDisabledQuery) == 0x0000F8, "Member 'UFortComponent_Energy::EnergyUseDisabledQuery' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, BeginRechargeTimerHandle) == 0x000140, "Member 'UFortComponent_Energy::BeginRechargeTimerHandle' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, EnergyTypeIdentifierTagContainer) == 0x000148, "Member 'UFortComponent_Energy::EnergyTypeIdentifierTagContainer' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, CurrentEnergy) == 0x000168, "Member 'UFortComponent_Energy::CurrentEnergy' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, NetEnergyDeltaPerSecond) == 0x00016C, "Member 'UFortComponent_Energy::NetEnergyDeltaPerSecond' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, MaxEnergy) == 0x000178, "Member 'UFortComponent_Energy::MaxEnergy' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, MinEnergyForUsing) == 0x0001A0, "Member 'UFortComponent_Energy::MinEnergyForUsing' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, RechargeAmountPerSecond) == 0x0001C8, "Member 'UFortComponent_Energy::RechargeAmountPerSecond' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, RechargeDelayInSeconds) == 0x0001F0, "Member 'UFortComponent_Energy::RechargeDelayInSeconds' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, RechargePercentageLimit) == 0x000218, "Member 'UFortComponent_Energy::RechargePercentageLimit' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, ActiveEnergyChannels) == 0x000240, "Member 'UFortComponent_Energy::ActiveEnergyChannels' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, NewActiveEnergyChannels) == 0x000250, "Member 'UFortComponent_Energy::NewActiveEnergyChannels' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, EnergyRegenOverrides) == 0x000260, "Member 'UFortComponent_Energy::EnergyRegenOverrides' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, OnCurrentEnergyChanged) == 0x000270, "Member 'UFortComponent_Energy::OnCurrentEnergyChanged' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, OnEnergyCompletelyDrained) == 0x000280, "Member 'UFortComponent_Energy::OnEnergyCompletelyDrained' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, OnEnergyRechargeBegun) == 0x000290, "Member 'UFortComponent_Energy::OnEnergyRechargeBegun' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, OnEnergyRechargeInterrupted) == 0x0002A0, "Member 'UFortComponent_Energy::OnEnergyRechargeInterrupted' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, OnEnergyRechargeComplete) == 0x0002B0, "Member 'UFortComponent_Energy::OnEnergyRechargeComplete' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, OnEnergyReachedMax) == 0x0002C0, "Member 'UFortComponent_Energy::OnEnergyReachedMax' has a wrong offset!");
static_assert(offsetof(UFortComponent_Energy, OnEnergyReachedMinForUsing) == 0x0002D0, "Member 'UFortComponent_Energy::OnEnergyReachedMinForUsing' has a wrong offset!");

}

