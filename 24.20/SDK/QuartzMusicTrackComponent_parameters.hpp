#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuartzMusicTrackComponent

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function QuartzMusicTrackComponent.QuartzMusicTrackComponent_C.SetTrackParameter
// 0x0030 (0x0030 - 0x0000)
struct QuartzMusicTrackComponent_C_SetTrackParameter final
{
public:
	int32                                         ParameterIndex;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InFloat;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_GetAudioComponent_AudioComponent;         // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IAudioParameterControllerInterface> CallFunc_SetFloatParameter_self_CastInput;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFloatParameter_InFloat_ImplicitCast;   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuartzMusicTrackComponent_C_SetTrackParameter) == 0x000008, "Wrong alignment on QuartzMusicTrackComponent_C_SetTrackParameter");
static_assert(sizeof(QuartzMusicTrackComponent_C_SetTrackParameter) == 0x000030, "Wrong size on QuartzMusicTrackComponent_C_SetTrackParameter");
static_assert(offsetof(QuartzMusicTrackComponent_C_SetTrackParameter, ParameterIndex) == 0x000000, "Member 'QuartzMusicTrackComponent_C_SetTrackParameter::ParameterIndex' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_SetTrackParameter, InFloat) == 0x000008, "Member 'QuartzMusicTrackComponent_C_SetTrackParameter::InFloat' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_SetTrackParameter, CallFunc_GetAudioComponent_AudioComponent) == 0x000010, "Member 'QuartzMusicTrackComponent_C_SetTrackParameter::CallFunc_GetAudioComponent_AudioComponent' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_SetTrackParameter, CallFunc_SetFloatParameter_self_CastInput) == 0x000018, "Member 'QuartzMusicTrackComponent_C_SetTrackParameter::CallFunc_SetFloatParameter_self_CastInput' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_SetTrackParameter, CallFunc_SetFloatParameter_InFloat_ImplicitCast) == 0x000028, "Member 'QuartzMusicTrackComponent_C_SetTrackParameter::CallFunc_SetFloatParameter_InFloat_ImplicitCast' has a wrong offset!");

// Function QuartzMusicTrackComponent.QuartzMusicTrackComponent_C.SetStemVolume
// 0x0010 (0x0010 - 0x0000)
struct QuartzMusicTrackComponent_C_SetStemVolume final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Value;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuartzMusicTrackComponent_C_SetStemVolume) == 0x000008, "Wrong alignment on QuartzMusicTrackComponent_C_SetStemVolume");
static_assert(sizeof(QuartzMusicTrackComponent_C_SetStemVolume) == 0x000010, "Wrong size on QuartzMusicTrackComponent_C_SetStemVolume");
static_assert(offsetof(QuartzMusicTrackComponent_C_SetStemVolume, Index_0) == 0x000000, "Member 'QuartzMusicTrackComponent_C_SetStemVolume::Index_0' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_SetStemVolume, Value) == 0x000008, "Member 'QuartzMusicTrackComponent_C_SetStemVolume::Value' has a wrong offset!");

// Function QuartzMusicTrackComponent.QuartzMusicTrackComponent_C.SetDebugEnabled
// 0x0001 (0x0001 - 0x0000)
struct QuartzMusicTrackComponent_C_SetDebugEnabled final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuartzMusicTrackComponent_C_SetDebugEnabled) == 0x000001, "Wrong alignment on QuartzMusicTrackComponent_C_SetDebugEnabled");
static_assert(sizeof(QuartzMusicTrackComponent_C_SetDebugEnabled) == 0x000001, "Wrong size on QuartzMusicTrackComponent_C_SetDebugEnabled");
static_assert(offsetof(QuartzMusicTrackComponent_C_SetDebugEnabled, Debug) == 0x000000, "Member 'QuartzMusicTrackComponent_C_SetDebugEnabled::Debug' has a wrong offset!");

// Function QuartzMusicTrackComponent.QuartzMusicTrackComponent_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct QuartzMusicTrackComponent_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuartzMusicTrackComponent_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on QuartzMusicTrackComponent_C_ReceiveEndPlay");
static_assert(sizeof(QuartzMusicTrackComponent_C_ReceiveEndPlay) == 0x000001, "Wrong size on QuartzMusicTrackComponent_C_ReceiveEndPlay");
static_assert(offsetof(QuartzMusicTrackComponent_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'QuartzMusicTrackComponent_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function QuartzMusicTrackComponent.QuartzMusicTrackComponent_C.QueueTrackStop
// 0x0018 (0x0018 - 0x0000)
struct QuartzMusicTrackComponent_C_QueueTrackStop final
{
public:
	class UMusicEventSubsystem*                   CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_GetAudioComponent_AudioComponent;         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFortAudioAnalysisSubsystem*            CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuartzMusicTrackComponent_C_QueueTrackStop) == 0x000008, "Wrong alignment on QuartzMusicTrackComponent_C_QueueTrackStop");
static_assert(sizeof(QuartzMusicTrackComponent_C_QueueTrackStop) == 0x000018, "Wrong size on QuartzMusicTrackComponent_C_QueueTrackStop");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStop, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000000, "Member 'QuartzMusicTrackComponent_C_QueueTrackStop::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStop, CallFunc_GetAudioComponent_AudioComponent) == 0x000008, "Member 'QuartzMusicTrackComponent_C_QueueTrackStop::CallFunc_GetAudioComponent_AudioComponent' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStop, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000010, "Member 'QuartzMusicTrackComponent_C_QueueTrackStop::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");

// Function QuartzMusicTrackComponent.QuartzMusicTrackComponent_C.QueueTrackStart
// 0x0110 (0x0110 - 0x0000)
struct QuartzMusicTrackComponent_C_QueueTrackStart final
{
public:
	class USoundBase*                             CallFunc_GetTrackSound_Sound;                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             CallFunc_GetTrackSound_Sound_1;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             CallFunc_GetTrackSound_Sound_2;                    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_CreateSound2D_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UQuartzSubsystem*                       CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_GetAudioComponent_AudioComponent;         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue;           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuartzQuantizationBoundary            Temp_struct_Variable;                              // 0x0058(0x0020)(ConstParm)
	TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> Temp_delegate_Variable;                            // 0x0078(0x000C)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortGameStateAthena*                   CallFunc_GetGameStateAthena_ReturnValue;           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_GetAthenaPlaylistContextTags_ReturnValue; // 0x0098(0x0020)()
	bool                                          CallFunc_HasAnyTags_ReturnValue;                   // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMusicEventSubsystem*                   CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> K2Node_CreateDelegate_OutputDelegate;              // 0x00CC(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName ClockName, EQuartzCommandQuantization QuantizationType, int32 NumBars, int32 Beat, float BeatFraction)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x00D8(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     CallFunc_SubscribeToAllQuantizationEvents_ClockHandle; // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UQuartzClockHandle*                     CallFunc_SetBeatsPerMinute_ClockHandle;            // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFortAudioAnalysisSubsystem*            CallFunc_GetWorldSubsystem_ReturnValue_1;          // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UQuartzClockHandle*                     CallFunc_CreateNewClock_ReturnValue;               // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayQuantized_InFadeInDuration_ImplicitCast; // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetBeatsPerMinute_BeatsPerMinute_ImplicitCast; // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuartzMusicTrackComponent_C_QueueTrackStart) == 0x000008, "Wrong alignment on QuartzMusicTrackComponent_C_QueueTrackStart");
static_assert(sizeof(QuartzMusicTrackComponent_C_QueueTrackStart) == 0x000110, "Wrong size on QuartzMusicTrackComponent_C_QueueTrackStart");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_GetTrackSound_Sound) == 0x000000, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_GetTrackSound_Sound' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_GetTrackSound_Sound_1) == 0x000008, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_GetTrackSound_Sound_1' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_GetDisplayName_ReturnValue) == 0x000018, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_Conv_StringToName_ReturnValue) == 0x000028, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_GetTrackSound_Sound_2) == 0x000030, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_GetTrackSound_Sound_2' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_CreateSound2D_ReturnValue) == 0x000038, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_CreateSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000040, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_GetAudioComponent_AudioComponent) == 0x000048, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_GetAudioComponent_AudioComponent' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_IsGameplayTagValid_ReturnValue) == 0x000050, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_IsGameplayTagValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_IsValid_ReturnValue_1) == 0x000051, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, Temp_struct_Variable) == 0x000058, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, Temp_delegate_Variable) == 0x000078, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_IsValid_ReturnValue_2) == 0x000084, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_GetGameStateAthena_ReturnValue) == 0x000088, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_GetGameStateAthena_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_IsValid_ReturnValue_3) == 0x000090, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_IsValid_ReturnValue_4) == 0x000091, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_GetAthenaPlaylistContextTags_ReturnValue) == 0x000098, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_GetAthenaPlaylistContextTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_HasAnyTags_ReturnValue) == 0x0000B8, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_HasAnyTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x0000C0, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_Not_PreBool_ReturnValue) == 0x0000C8, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, K2Node_CreateDelegate_OutputDelegate) == 0x0000CC, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000D8, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_SubscribeToAllQuantizationEvents_ClockHandle) == 0x0000E8, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_SubscribeToAllQuantizationEvents_ClockHandle' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_SetBeatsPerMinute_ClockHandle) == 0x0000F0, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_SetBeatsPerMinute_ClockHandle' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_GetWorldSubsystem_ReturnValue_1) == 0x0000F8, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_GetWorldSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_CreateNewClock_ReturnValue) == 0x000100, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_CreateNewClock_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_PlayQuantized_InFadeInDuration_ImplicitCast) == 0x000108, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_PlayQuantized_InFadeInDuration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_QueueTrackStart, CallFunc_SetBeatsPerMinute_BeatsPerMinute_ImplicitCast) == 0x00010C, "Member 'QuartzMusicTrackComponent_C_QueueTrackStart::CallFunc_SetBeatsPerMinute_BeatsPerMinute_ImplicitCast' has a wrong offset!");

// Function QuartzMusicTrackComponent.QuartzMusicTrackComponent_C.OnQuartzQuantizationEvent
// 0x0028 (0x0028 - 0x0000)
struct QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent final
{
public:
	class FName                                   ClockName_0;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuartzCommandQuantization                    QuantizationType;                                  // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumBars;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Beat;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeatFraction;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     CallFunc_PauseClock_ClockHandle;                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FadeOut_FadeOutDuration_ImplicitCast;     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent) == 0x000008, "Wrong alignment on QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent");
static_assert(sizeof(QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent) == 0x000028, "Wrong size on QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent");
static_assert(offsetof(QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent, ClockName_0) == 0x000000, "Member 'QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent::ClockName_0' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent, QuantizationType) == 0x000004, "Member 'QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent::QuantizationType' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent, NumBars) == 0x000008, "Member 'QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent::NumBars' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent, Beat) == 0x00000C, "Member 'QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent::Beat' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent, BeatFraction) == 0x000010, "Member 'QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent::BeatFraction' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent, K2Node_SwitchEnum_CmpSuccess) == 0x000014, "Member 'QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent, CallFunc_IsValid_ReturnValue) == 0x000015, "Member 'QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent, CallFunc_PauseClock_ClockHandle) == 0x000018, "Member 'QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent::CallFunc_PauseClock_ClockHandle' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000020, "Member 'QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent, CallFunc_FadeOut_FadeOutDuration_ImplicitCast) == 0x000024, "Member 'QuartzMusicTrackComponent_C_OnQuartzQuantizationEvent::CallFunc_FadeOut_FadeOutDuration_ImplicitCast' has a wrong offset!");

// Function QuartzMusicTrackComponent.QuartzMusicTrackComponent_C.OnQuartzClockDelegate
// 0x0018 (0x0018 - 0x0000)
struct QuartzMusicTrackComponent_C_OnQuartzClockDelegate final
{
public:
	EQuartzCommandDelegateSubType                 EventType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name_0;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     CallFunc_ResumeClock_ClockHandle;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuartzMusicTrackComponent_C_OnQuartzClockDelegate) == 0x000008, "Wrong alignment on QuartzMusicTrackComponent_C_OnQuartzClockDelegate");
static_assert(sizeof(QuartzMusicTrackComponent_C_OnQuartzClockDelegate) == 0x000018, "Wrong size on QuartzMusicTrackComponent_C_OnQuartzClockDelegate");
static_assert(offsetof(QuartzMusicTrackComponent_C_OnQuartzClockDelegate, EventType) == 0x000000, "Member 'QuartzMusicTrackComponent_C_OnQuartzClockDelegate::EventType' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_OnQuartzClockDelegate, Name_0) == 0x000004, "Member 'QuartzMusicTrackComponent_C_OnQuartzClockDelegate::Name_0' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_OnQuartzClockDelegate, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'QuartzMusicTrackComponent_C_OnQuartzClockDelegate::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_OnQuartzClockDelegate, CallFunc_ResumeClock_ClockHandle) == 0x000010, "Member 'QuartzMusicTrackComponent_C_OnQuartzClockDelegate::CallFunc_ResumeClock_ClockHandle' has a wrong offset!");

// Function QuartzMusicTrackComponent.QuartzMusicTrackComponent_C.GetTrackSound
// 0x0010 (0x0010 - 0x0000)
struct QuartzMusicTrackComponent_C_GetTrackSound final
{
public:
	class USoundBase*                             sound;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuartzMusicTrackComponent_C_GetTrackSound) == 0x000008, "Wrong alignment on QuartzMusicTrackComponent_C_GetTrackSound");
static_assert(sizeof(QuartzMusicTrackComponent_C_GetTrackSound) == 0x000010, "Wrong size on QuartzMusicTrackComponent_C_GetTrackSound");
static_assert(offsetof(QuartzMusicTrackComponent_C_GetTrackSound, sound) == 0x000000, "Member 'QuartzMusicTrackComponent_C_GetTrackSound::sound' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_GetTrackSound, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'QuartzMusicTrackComponent_C_GetTrackSound::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function QuartzMusicTrackComponent.QuartzMusicTrackComponent_C.GetTrackPriority
// 0x0008 (0x0008 - 0x0000)
struct QuartzMusicTrackComponent_C_GetTrackPriority final
{
public:
	double                                        Priority;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuartzMusicTrackComponent_C_GetTrackPriority) == 0x000008, "Wrong alignment on QuartzMusicTrackComponent_C_GetTrackPriority");
static_assert(sizeof(QuartzMusicTrackComponent_C_GetTrackPriority) == 0x000008, "Wrong size on QuartzMusicTrackComponent_C_GetTrackPriority");
static_assert(offsetof(QuartzMusicTrackComponent_C_GetTrackPriority, Priority) == 0x000000, "Member 'QuartzMusicTrackComponent_C_GetTrackPriority::Priority' has a wrong offset!");

// Function QuartzMusicTrackComponent.QuartzMusicTrackComponent_C.GetPlayState
// 0x0003 (0x0003 - 0x0000)
struct QuartzMusicTrackComponent_C_GetPlayState final
{
public:
	EAudioComponentPlayState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAudioComponentPlayState                      CallFunc_GetPlayState_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuartzMusicTrackComponent_C_GetPlayState) == 0x000001, "Wrong alignment on QuartzMusicTrackComponent_C_GetPlayState");
static_assert(sizeof(QuartzMusicTrackComponent_C_GetPlayState) == 0x000003, "Wrong size on QuartzMusicTrackComponent_C_GetPlayState");
static_assert(offsetof(QuartzMusicTrackComponent_C_GetPlayState, ReturnValue) == 0x000000, "Member 'QuartzMusicTrackComponent_C_GetPlayState::ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_GetPlayState, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'QuartzMusicTrackComponent_C_GetPlayState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_GetPlayState, CallFunc_GetPlayState_ReturnValue) == 0x000002, "Member 'QuartzMusicTrackComponent_C_GetPlayState::CallFunc_GetPlayState_ReturnValue' has a wrong offset!");

// Function QuartzMusicTrackComponent.QuartzMusicTrackComponent_C.GetIsPlaying
// 0x0003 (0x0003 - 0x0000)
struct QuartzMusicTrackComponent_C_GetIsPlaying final
{
public:
	bool                                          Is_Playing;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuartzMusicTrackComponent_C_GetIsPlaying) == 0x000001, "Wrong alignment on QuartzMusicTrackComponent_C_GetIsPlaying");
static_assert(sizeof(QuartzMusicTrackComponent_C_GetIsPlaying) == 0x000003, "Wrong size on QuartzMusicTrackComponent_C_GetIsPlaying");
static_assert(offsetof(QuartzMusicTrackComponent_C_GetIsPlaying, Is_Playing) == 0x000000, "Member 'QuartzMusicTrackComponent_C_GetIsPlaying::Is_Playing' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_GetIsPlaying, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'QuartzMusicTrackComponent_C_GetIsPlaying::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_GetIsPlaying, CallFunc_IsPlaying_ReturnValue) == 0x000002, "Member 'QuartzMusicTrackComponent_C_GetIsPlaying::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");

// Function QuartzMusicTrackComponent.QuartzMusicTrackComponent_C.GetClockHandle
// 0x0008 (0x0008 - 0x0000)
struct QuartzMusicTrackComponent_C_GetClockHandle final
{
public:
	class UQuartzClockHandle*                     Clock_Handle;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuartzMusicTrackComponent_C_GetClockHandle) == 0x000008, "Wrong alignment on QuartzMusicTrackComponent_C_GetClockHandle");
static_assert(sizeof(QuartzMusicTrackComponent_C_GetClockHandle) == 0x000008, "Wrong size on QuartzMusicTrackComponent_C_GetClockHandle");
static_assert(offsetof(QuartzMusicTrackComponent_C_GetClockHandle, Clock_Handle) == 0x000000, "Member 'QuartzMusicTrackComponent_C_GetClockHandle::Clock_Handle' has a wrong offset!");

// Function QuartzMusicTrackComponent.QuartzMusicTrackComponent_C.GetAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct QuartzMusicTrackComponent_C_GetAudioComponent final
{
public:
	class UAudioComponent*                        AudioComponent_0;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuartzMusicTrackComponent_C_GetAudioComponent) == 0x000008, "Wrong alignment on QuartzMusicTrackComponent_C_GetAudioComponent");
static_assert(sizeof(QuartzMusicTrackComponent_C_GetAudioComponent) == 0x000008, "Wrong size on QuartzMusicTrackComponent_C_GetAudioComponent");
static_assert(offsetof(QuartzMusicTrackComponent_C_GetAudioComponent, AudioComponent_0) == 0x000000, "Member 'QuartzMusicTrackComponent_C_GetAudioComponent::AudioComponent_0' has a wrong offset!");

// Function QuartzMusicTrackComponent.QuartzMusicTrackComponent_C.ExecuteUbergraph_QuartzMusicTrackComponent
// 0x0050 (0x0050 - 0x0000)
struct QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Index;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_Value;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Debug;                          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IAudioParameterControllerInterface> CallFunc_SetFloatParameter_self_CastInput;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_QuartzMusicController_C*            K2Node_DynamicCast_AsBP_Quartz_Music_Controller;   // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetFloatParameter_InFloat_ImplicitCast;   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FadeOut_FadeOutDuration_ImplicitCast;     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent) == 0x000008, "Wrong alignment on QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent");
static_assert(sizeof(QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent) == 0x000050, "Wrong size on QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent");
static_assert(offsetof(QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent, EntryPoint) == 0x000000, "Member 'QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent, K2Node_CustomEvent_Index) == 0x000004, "Member 'QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent::K2Node_CustomEvent_Index' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent, K2Node_CustomEvent_Value) == 0x000008, "Member 'QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent::K2Node_CustomEvent_Value' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent, K2Node_CustomEvent_Debug) == 0x000012, "Member 'QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent::K2Node_CustomEvent_Debug' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent, CallFunc_SetFloatParameter_self_CastInput) == 0x000018, "Member 'QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent::CallFunc_SetFloatParameter_self_CastInput' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent, K2Node_Event_EndPlayReason) == 0x000030, "Member 'QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent, K2Node_DynamicCast_AsBP_Quartz_Music_Controller) == 0x000038, "Member 'QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent::K2Node_DynamicCast_AsBP_Quartz_Music_Controller' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent, CallFunc_SetFloatParameter_InFloat_ImplicitCast) == 0x000044, "Member 'QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent::CallFunc_SetFloatParameter_InFloat_ImplicitCast' has a wrong offset!");
static_assert(offsetof(QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent, CallFunc_FadeOut_FadeOutDuration_ImplicitCast) == 0x000048, "Member 'QuartzMusicTrackComponent_C_ExecuteUbergraph_QuartzMusicTrackComponent::CallFunc_FadeOut_FadeOutDuration_ImplicitCast' has a wrong offset!");

}

