#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DanceVolume

#include "Basic.hpp"

#include "DanceVolume_classes.hpp"
#include "DanceVolume_parameters.hpp"


namespace SDK
{

// Function DanceVolume.DanceSynchronizerComponent.CalculateDanceMontagePlayRate
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   CurrentTempo                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Montage                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDanceBeatInfo                   DanceBeatInfo                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDanceSynchronizerComponent::CalculateDanceMontagePlayRate(const float CurrentTempo, const class UAnimMontage* Montage, const struct FDanceBeatInfo& DanceBeatInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DanceSynchronizerComponent", "CalculateDanceMontagePlayRate");

	Params::DanceSynchronizerComponent_CalculateDanceMontagePlayRate Parms{};

	Parms.CurrentTempo = CurrentTempo;
	Parms.Montage = Montage;
	Parms.DanceBeatInfo = std::move(DanceBeatInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DanceVolume.DanceSynchronizerComponent.GetOwnerFortPlayerPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AFortPlayerPawn*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AFortPlayerPawn* UDanceSynchronizerComponent::GetOwnerFortPlayerPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DanceSynchronizerComponent", "GetOwnerFortPlayerPawn");

	Params::DanceSynchronizerComponent_GetOwnerFortPlayerPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DanceVolume.DanceSynchronizerComponent.GetOwnerSkeletalMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* UDanceSynchronizerComponent::GetOwnerSkeletalMeshComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DanceSynchronizerComponent", "GetOwnerSkeletalMeshComponent");

	Params::DanceSynchronizerComponent_GetOwnerSkeletalMeshComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DanceVolume.DanceSynchronizerComponent.IsTempoSyncEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDanceSynchronizerComponent::IsTempoSyncEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DanceSynchronizerComponent", "IsTempoSyncEnabled");

	Params::DanceSynchronizerComponent_IsTempoSyncEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DanceVolume.DanceSynchronizerComponent.OnRep_SyncMode
// (Final, Native, Private)

void UDanceSynchronizerComponent::OnRep_SyncMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DanceSynchronizerComponent", "OnRep_SyncMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DanceVolume.DanceSynchronizerComponent.SetBeatSyncMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EDanceBeatSyncMode                      NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDanceSynchronizerComponent::SetBeatSyncMode(EDanceBeatSyncMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DanceSynchronizerComponent", "SetBeatSyncMode");

	Params::DanceSynchronizerComponent_SetBeatSyncMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DanceVolume.DanceSynchronizerComponent.SetDanceBeatInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDanceBeatInfo                   NewDanceBeatInfo                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDanceSynchronizerComponent::SetDanceBeatInfo(const struct FDanceBeatInfo& NewDanceBeatInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DanceSynchronizerComponent", "SetDanceBeatInfo");

	Params::DanceSynchronizerComponent_SetDanceBeatInfo Parms{};

	Parms.NewDanceBeatInfo = std::move(NewDanceBeatInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DanceVolume.DanceSynchronizerComponent.SetTempo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newTempo                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDanceSynchronizerComponent::SetTempo(float newTempo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DanceSynchronizerComponent", "SetTempo");

	Params::DanceSynchronizerComponent_SetTempo Parms{};

	Parms.newTempo = newTempo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DanceVolume.DanceSynchronizerComponent.StopOwnerEmoteAudio
// (Final, Native, Public, BlueprintCallable)

void UDanceSynchronizerComponent::StopOwnerEmoteAudio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DanceSynchronizerComponent", "StopOwnerEmoteAudio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DanceVolume.DanceVolumeLibrary.ForceStopMontage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AFortPawn*                        FortPawn                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDanceVolumeLibrary::ForceStopMontage(const class AFortPawn* FortPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DanceVolumeLibrary", "ForceStopMontage");

	Params::DanceVolumeLibrary_ForceStopMontage Parms{};

	Parms.FortPawn = FortPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DanceVolume.DanceVolumeLibrary.GetLastEmoteExecuted
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortItemDefinition*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortItemDefinition* UDanceVolumeLibrary::GetLastEmoteExecuted(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DanceVolumeLibrary", "GetLastEmoteExecuted");

	Params::DanceVolumeLibrary_GetLastEmoteExecuted Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

