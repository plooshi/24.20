#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CreativeEditCameraModeRuntime

#include "Basic.hpp"


namespace SDK::Params
{

// Function CreativeEditCameraModeRuntime.FortCreativeEditCameraController.HandleWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct FortCreativeEditCameraController_HandleWeaponEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeEditCameraController_HandleWeaponEquipped) == 0x000008, "Wrong alignment on FortCreativeEditCameraController_HandleWeaponEquipped");
static_assert(sizeof(FortCreativeEditCameraController_HandleWeaponEquipped) == 0x000010, "Wrong size on FortCreativeEditCameraController_HandleWeaponEquipped");
static_assert(offsetof(FortCreativeEditCameraController_HandleWeaponEquipped, NewWeapon) == 0x000000, "Member 'FortCreativeEditCameraController_HandleWeaponEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(FortCreativeEditCameraController_HandleWeaponEquipped, PrevWeapon) == 0x000008, "Member 'FortCreativeEditCameraController_HandleWeaponEquipped::PrevWeapon' has a wrong offset!");

// Function CreativeEditCameraModeRuntime.FortCreativeEditCameraController.OnCreativeEditModeChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeEditCameraController_OnCreativeEditModeChanged final
{
public:
	bool                                          bIsCreativeEditModeEnabled;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeEditCameraController_OnCreativeEditModeChanged) == 0x000001, "Wrong alignment on FortCreativeEditCameraController_OnCreativeEditModeChanged");
static_assert(sizeof(FortCreativeEditCameraController_OnCreativeEditModeChanged) == 0x000001, "Wrong size on FortCreativeEditCameraController_OnCreativeEditModeChanged");
static_assert(offsetof(FortCreativeEditCameraController_OnCreativeEditModeChanged, bIsCreativeEditModeEnabled) == 0x000000, "Member 'FortCreativeEditCameraController_OnCreativeEditModeChanged::bIsCreativeEditModeEnabled' has a wrong offset!");

// Function CreativeEditCameraModeRuntime.FortCreativeEditCameraController.OnWantsToImmersiveEditChanged
// 0x0010 (0x0010 - 0x0000)
struct FortCreativeEditCameraController_OnWantsToImmersiveEditChanged final
{
public:
	class UFortCreativeOption*                    CreativeOption;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IndexValue;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCreativeEditCameraController_OnWantsToImmersiveEditChanged) == 0x000008, "Wrong alignment on FortCreativeEditCameraController_OnWantsToImmersiveEditChanged");
static_assert(sizeof(FortCreativeEditCameraController_OnWantsToImmersiveEditChanged) == 0x000010, "Wrong size on FortCreativeEditCameraController_OnWantsToImmersiveEditChanged");
static_assert(offsetof(FortCreativeEditCameraController_OnWantsToImmersiveEditChanged, CreativeOption) == 0x000000, "Member 'FortCreativeEditCameraController_OnWantsToImmersiveEditChanged::CreativeOption' has a wrong offset!");
static_assert(offsetof(FortCreativeEditCameraController_OnWantsToImmersiveEditChanged, IndexValue) == 0x000008, "Member 'FortCreativeEditCameraController_OnWantsToImmersiveEditChanged::IndexValue' has a wrong offset!");

// Function CreativeEditCameraModeRuntime.FortCreativeEditCameraController.ServerSetImmersiveEdit
// 0x0002 (0x0002 - 0x0000)
struct FortCreativeEditCameraController_ServerSetImmersiveEdit final
{
public:
	bool                                          bWantsToImmersiveEdit;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCreativeEditModeEnabled;                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeEditCameraController_ServerSetImmersiveEdit) == 0x000001, "Wrong alignment on FortCreativeEditCameraController_ServerSetImmersiveEdit");
static_assert(sizeof(FortCreativeEditCameraController_ServerSetImmersiveEdit) == 0x000002, "Wrong size on FortCreativeEditCameraController_ServerSetImmersiveEdit");
static_assert(offsetof(FortCreativeEditCameraController_ServerSetImmersiveEdit, bWantsToImmersiveEdit) == 0x000000, "Member 'FortCreativeEditCameraController_ServerSetImmersiveEdit::bWantsToImmersiveEdit' has a wrong offset!");
static_assert(offsetof(FortCreativeEditCameraController_ServerSetImmersiveEdit, bIsCreativeEditModeEnabled) == 0x000001, "Member 'FortCreativeEditCameraController_ServerSetImmersiveEdit::bIsCreativeEditModeEnabled' has a wrong offset!");

}

