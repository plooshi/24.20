#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HmxAudio

#include "Basic.hpp"

#include "HmxAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "HmxCore_structs.hpp"


namespace SDK::Params
{

// Function HmxAudio.MusicAssetBase.GetLengthMs
// 0x0004 (0x0004 - 0x0000)
struct MusicAssetBase_GetLengthMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicAssetBase_GetLengthMs) == 0x000004, "Wrong alignment on MusicAssetBase_GetLengthMs");
static_assert(sizeof(MusicAssetBase_GetLengthMs) == 0x000004, "Wrong size on MusicAssetBase_GetLengthMs");
static_assert(offsetof(MusicAssetBase_GetLengthMs, ReturnValue) == 0x000000, "Member 'MusicAssetBase_GetLengthMs::ReturnValue' has a wrong offset!");

// Function HmxAudio.BTDecorator_StopAfterSpan.OnNextBeat
// 0x0008 (0x0008 - 0x0000)
struct BTDecorator_StopAfterSpan_OnNextBeat final
{
public:
	int32                                         beatNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         beatInBar;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTDecorator_StopAfterSpan_OnNextBeat) == 0x000004, "Wrong alignment on BTDecorator_StopAfterSpan_OnNextBeat");
static_assert(sizeof(BTDecorator_StopAfterSpan_OnNextBeat) == 0x000008, "Wrong size on BTDecorator_StopAfterSpan_OnNextBeat");
static_assert(offsetof(BTDecorator_StopAfterSpan_OnNextBeat, beatNumber) == 0x000000, "Member 'BTDecorator_StopAfterSpan_OnNextBeat::beatNumber' has a wrong offset!");
static_assert(offsetof(BTDecorator_StopAfterSpan_OnNextBeat, beatInBar) == 0x000004, "Member 'BTDecorator_StopAfterSpan_OnNextBeat::beatInBar' has a wrong offset!");

// Function HmxAudio.BTDecorator_StopAfterSpan.OnNextMeasure
// 0x0004 (0x0004 - 0x0000)
struct BTDecorator_StopAfterSpan_OnNextMeasure final
{
public:
	int32                                         measureNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTDecorator_StopAfterSpan_OnNextMeasure) == 0x000004, "Wrong alignment on BTDecorator_StopAfterSpan_OnNextMeasure");
static_assert(sizeof(BTDecorator_StopAfterSpan_OnNextMeasure) == 0x000004, "Wrong size on BTDecorator_StopAfterSpan_OnNextMeasure");
static_assert(offsetof(BTDecorator_StopAfterSpan_OnNextMeasure, measureNumber) == 0x000000, "Member 'BTDecorator_StopAfterSpan_OnNextMeasure::measureNumber' has a wrong offset!");

// Function HmxAudio.BTDecorator_StopAtMidiMsg.OnNoteOffMessage
// 0x0018 (0x0018 - 0x0000)
struct BTDecorator_StopAtMidiMsg_OnNoteOffMessage final
{
public:
	class FString                                 CursorName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Note;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTDecorator_StopAtMidiMsg_OnNoteOffMessage) == 0x000008, "Wrong alignment on BTDecorator_StopAtMidiMsg_OnNoteOffMessage");
static_assert(sizeof(BTDecorator_StopAtMidiMsg_OnNoteOffMessage) == 0x000018, "Wrong size on BTDecorator_StopAtMidiMsg_OnNoteOffMessage");
static_assert(offsetof(BTDecorator_StopAtMidiMsg_OnNoteOffMessage, CursorName) == 0x000000, "Member 'BTDecorator_StopAtMidiMsg_OnNoteOffMessage::CursorName' has a wrong offset!");
static_assert(offsetof(BTDecorator_StopAtMidiMsg_OnNoteOffMessage, Channel) == 0x000010, "Member 'BTDecorator_StopAtMidiMsg_OnNoteOffMessage::Channel' has a wrong offset!");
static_assert(offsetof(BTDecorator_StopAtMidiMsg_OnNoteOffMessage, Note) == 0x000014, "Member 'BTDecorator_StopAtMidiMsg_OnNoteOffMessage::Note' has a wrong offset!");

// Function HmxAudio.BTDecorator_StopAtMidiMsg.OnNoteOnMessage
// 0x0020 (0x0020 - 0x0000)
struct BTDecorator_StopAtMidiMsg_OnNoteOnMessage final
{
public:
	class FString                                 CursorName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Note;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Velocity;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BTDecorator_StopAtMidiMsg_OnNoteOnMessage) == 0x000008, "Wrong alignment on BTDecorator_StopAtMidiMsg_OnNoteOnMessage");
static_assert(sizeof(BTDecorator_StopAtMidiMsg_OnNoteOnMessage) == 0x000020, "Wrong size on BTDecorator_StopAtMidiMsg_OnNoteOnMessage");
static_assert(offsetof(BTDecorator_StopAtMidiMsg_OnNoteOnMessage, CursorName) == 0x000000, "Member 'BTDecorator_StopAtMidiMsg_OnNoteOnMessage::CursorName' has a wrong offset!");
static_assert(offsetof(BTDecorator_StopAtMidiMsg_OnNoteOnMessage, Channel) == 0x000010, "Member 'BTDecorator_StopAtMidiMsg_OnNoteOnMessage::Channel' has a wrong offset!");
static_assert(offsetof(BTDecorator_StopAtMidiMsg_OnNoteOnMessage, Note) == 0x000014, "Member 'BTDecorator_StopAtMidiMsg_OnNoteOnMessage::Note' has a wrong offset!");
static_assert(offsetof(BTDecorator_StopAtMidiMsg_OnNoteOnMessage, Velocity) == 0x000018, "Member 'BTDecorator_StopAtMidiMsg_OnNoteOnMessage::Velocity' has a wrong offset!");

// Function HmxAudio.BTDecorator_StopAtMidiMsg.OnTextMessage
// 0x0020 (0x0020 - 0x0000)
struct BTDecorator_StopAtMidiMsg_OnTextMessage final
{
public:
	class FString                                 CursorName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTDecorator_StopAtMidiMsg_OnTextMessage) == 0x000008, "Wrong alignment on BTDecorator_StopAtMidiMsg_OnTextMessage");
static_assert(sizeof(BTDecorator_StopAtMidiMsg_OnTextMessage) == 0x000020, "Wrong size on BTDecorator_StopAtMidiMsg_OnTextMessage");
static_assert(offsetof(BTDecorator_StopAtMidiMsg_OnTextMessage, CursorName) == 0x000000, "Member 'BTDecorator_StopAtMidiMsg_OnTextMessage::CursorName' has a wrong offset!");
static_assert(offsetof(BTDecorator_StopAtMidiMsg_OnTextMessage, Text) == 0x000010, "Member 'BTDecorator_StopAtMidiMsg_OnTextMessage::Text' has a wrong offset!");

// Function HmxAudio.BTDecorator_StopAtNext.OnNextBeat
// 0x0008 (0x0008 - 0x0000)
struct BTDecorator_StopAtNext_OnNextBeat final
{
public:
	int32                                         beatNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         beatInBar;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTDecorator_StopAtNext_OnNextBeat) == 0x000004, "Wrong alignment on BTDecorator_StopAtNext_OnNextBeat");
static_assert(sizeof(BTDecorator_StopAtNext_OnNextBeat) == 0x000008, "Wrong size on BTDecorator_StopAtNext_OnNextBeat");
static_assert(offsetof(BTDecorator_StopAtNext_OnNextBeat, beatNumber) == 0x000000, "Member 'BTDecorator_StopAtNext_OnNextBeat::beatNumber' has a wrong offset!");
static_assert(offsetof(BTDecorator_StopAtNext_OnNextBeat, beatInBar) == 0x000004, "Member 'BTDecorator_StopAtNext_OnNextBeat::beatInBar' has a wrong offset!");

// Function HmxAudio.BTDecorator_StopAtNext.OnNextMeasure
// 0x0004 (0x0004 - 0x0000)
struct BTDecorator_StopAtNext_OnNextMeasure final
{
public:
	int32                                         measureNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTDecorator_StopAtNext_OnNextMeasure) == 0x000004, "Wrong alignment on BTDecorator_StopAtNext_OnNextMeasure");
static_assert(sizeof(BTDecorator_StopAtNext_OnNextMeasure) == 0x000004, "Wrong size on BTDecorator_StopAtNext_OnNextMeasure");
static_assert(offsetof(BTDecorator_StopAtNext_OnNextMeasure, measureNumber) == 0x000000, "Member 'BTDecorator_StopAtNext_OnNextMeasure::measureNumber' has a wrong offset!");

// Function HmxAudio.BTTask_WaitForMidiMsg.OnNoteOffMessage
// 0x0018 (0x0018 - 0x0000)
struct BTTask_WaitForMidiMsg_OnNoteOffMessage final
{
public:
	class FString                                 CursorName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Note;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_WaitForMidiMsg_OnNoteOffMessage) == 0x000008, "Wrong alignment on BTTask_WaitForMidiMsg_OnNoteOffMessage");
static_assert(sizeof(BTTask_WaitForMidiMsg_OnNoteOffMessage) == 0x000018, "Wrong size on BTTask_WaitForMidiMsg_OnNoteOffMessage");
static_assert(offsetof(BTTask_WaitForMidiMsg_OnNoteOffMessage, CursorName) == 0x000000, "Member 'BTTask_WaitForMidiMsg_OnNoteOffMessage::CursorName' has a wrong offset!");
static_assert(offsetof(BTTask_WaitForMidiMsg_OnNoteOffMessage, Channel) == 0x000010, "Member 'BTTask_WaitForMidiMsg_OnNoteOffMessage::Channel' has a wrong offset!");
static_assert(offsetof(BTTask_WaitForMidiMsg_OnNoteOffMessage, Note) == 0x000014, "Member 'BTTask_WaitForMidiMsg_OnNoteOffMessage::Note' has a wrong offset!");

// Function HmxAudio.BTTask_WaitForMidiMsg.OnNoteOnMessage
// 0x0020 (0x0020 - 0x0000)
struct BTTask_WaitForMidiMsg_OnNoteOnMessage final
{
public:
	class FString                                 CursorName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Note;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Velocity;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BTTask_WaitForMidiMsg_OnNoteOnMessage) == 0x000008, "Wrong alignment on BTTask_WaitForMidiMsg_OnNoteOnMessage");
static_assert(sizeof(BTTask_WaitForMidiMsg_OnNoteOnMessage) == 0x000020, "Wrong size on BTTask_WaitForMidiMsg_OnNoteOnMessage");
static_assert(offsetof(BTTask_WaitForMidiMsg_OnNoteOnMessage, CursorName) == 0x000000, "Member 'BTTask_WaitForMidiMsg_OnNoteOnMessage::CursorName' has a wrong offset!");
static_assert(offsetof(BTTask_WaitForMidiMsg_OnNoteOnMessage, Channel) == 0x000010, "Member 'BTTask_WaitForMidiMsg_OnNoteOnMessage::Channel' has a wrong offset!");
static_assert(offsetof(BTTask_WaitForMidiMsg_OnNoteOnMessage, Note) == 0x000014, "Member 'BTTask_WaitForMidiMsg_OnNoteOnMessage::Note' has a wrong offset!");
static_assert(offsetof(BTTask_WaitForMidiMsg_OnNoteOnMessage, Velocity) == 0x000018, "Member 'BTTask_WaitForMidiMsg_OnNoteOnMessage::Velocity' has a wrong offset!");

// Function HmxAudio.BTTask_WaitForMidiMsg.OnTextMessage
// 0x0020 (0x0020 - 0x0000)
struct BTTask_WaitForMidiMsg_OnTextMessage final
{
public:
	class FString                                 CursorName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_WaitForMidiMsg_OnTextMessage) == 0x000008, "Wrong alignment on BTTask_WaitForMidiMsg_OnTextMessage");
static_assert(sizeof(BTTask_WaitForMidiMsg_OnTextMessage) == 0x000020, "Wrong size on BTTask_WaitForMidiMsg_OnTextMessage");
static_assert(offsetof(BTTask_WaitForMidiMsg_OnTextMessage, CursorName) == 0x000000, "Member 'BTTask_WaitForMidiMsg_OnTextMessage::CursorName' has a wrong offset!");
static_assert(offsetof(BTTask_WaitForMidiMsg_OnTextMessage, Text) == 0x000010, "Member 'BTTask_WaitForMidiMsg_OnTextMessage::Text' has a wrong offset!");

// Function HmxAudio.BTTask_WaitForNext.OnNextBeat
// 0x0008 (0x0008 - 0x0000)
struct BTTask_WaitForNext_OnNextBeat final
{
public:
	int32                                         beatNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         beatInBar;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_WaitForNext_OnNextBeat) == 0x000004, "Wrong alignment on BTTask_WaitForNext_OnNextBeat");
static_assert(sizeof(BTTask_WaitForNext_OnNextBeat) == 0x000008, "Wrong size on BTTask_WaitForNext_OnNextBeat");
static_assert(offsetof(BTTask_WaitForNext_OnNextBeat, beatNumber) == 0x000000, "Member 'BTTask_WaitForNext_OnNextBeat::beatNumber' has a wrong offset!");
static_assert(offsetof(BTTask_WaitForNext_OnNextBeat, beatInBar) == 0x000004, "Member 'BTTask_WaitForNext_OnNextBeat::beatInBar' has a wrong offset!");

// Function HmxAudio.BTTask_WaitForNext.OnNextMeasure
// 0x0004 (0x0004 - 0x0000)
struct BTTask_WaitForNext_OnNextMeasure final
{
public:
	int32                                         measureNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_WaitForNext_OnNextMeasure) == 0x000004, "Wrong alignment on BTTask_WaitForNext_OnNextMeasure");
static_assert(sizeof(BTTask_WaitForNext_OnNextMeasure) == 0x000004, "Wrong size on BTTask_WaitForNext_OnNextMeasure");
static_assert(offsetof(BTTask_WaitForNext_OnNextMeasure, measureNumber) == 0x000000, "Member 'BTTask_WaitForNext_OnNextMeasure::measureNumber' has a wrong offset!");

// Function HmxAudio.BTTask_WaitForSpan.OnNextBeat
// 0x0008 (0x0008 - 0x0000)
struct BTTask_WaitForSpan_OnNextBeat final
{
public:
	int32                                         beatNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         beatInBar;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_WaitForSpan_OnNextBeat) == 0x000004, "Wrong alignment on BTTask_WaitForSpan_OnNextBeat");
static_assert(sizeof(BTTask_WaitForSpan_OnNextBeat) == 0x000008, "Wrong size on BTTask_WaitForSpan_OnNextBeat");
static_assert(offsetof(BTTask_WaitForSpan_OnNextBeat, beatNumber) == 0x000000, "Member 'BTTask_WaitForSpan_OnNextBeat::beatNumber' has a wrong offset!");
static_assert(offsetof(BTTask_WaitForSpan_OnNextBeat, beatInBar) == 0x000004, "Member 'BTTask_WaitForSpan_OnNextBeat::beatInBar' has a wrong offset!");

// Function HmxAudio.BTTask_WaitForSpan.OnNextMeasure
// 0x0004 (0x0004 - 0x0000)
struct BTTask_WaitForSpan_OnNextMeasure final
{
public:
	int32                                         measureNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_WaitForSpan_OnNextMeasure) == 0x000004, "Wrong alignment on BTTask_WaitForSpan_OnNextMeasure");
static_assert(sizeof(BTTask_WaitForSpan_OnNextMeasure) == 0x000004, "Wrong size on BTTask_WaitForSpan_OnNextMeasure");
static_assert(offsetof(BTTask_WaitForSpan_OnNextMeasure, measureNumber) == 0x000000, "Member 'BTTask_WaitForSpan_OnNextMeasure::measureNumber' has a wrong offset!");

// Function HmxAudio.HmxAudioBlueprintUtil.FrequencyToMidiNote
// 0x0008 (0x0008 - 0x0000)
struct HmxAudioBlueprintUtil_FrequencyToMidiNote final
{
public:
	float                                         freq;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HmxAudioBlueprintUtil_FrequencyToMidiNote) == 0x000004, "Wrong alignment on HmxAudioBlueprintUtil_FrequencyToMidiNote");
static_assert(sizeof(HmxAudioBlueprintUtil_FrequencyToMidiNote) == 0x000008, "Wrong size on HmxAudioBlueprintUtil_FrequencyToMidiNote");
static_assert(offsetof(HmxAudioBlueprintUtil_FrequencyToMidiNote, freq) == 0x000000, "Member 'HmxAudioBlueprintUtil_FrequencyToMidiNote::freq' has a wrong offset!");
static_assert(offsetof(HmxAudioBlueprintUtil_FrequencyToMidiNote, ReturnValue) == 0x000004, "Member 'HmxAudioBlueprintUtil_FrequencyToMidiNote::ReturnValue' has a wrong offset!");

// Function HmxAudio.HmxAudioBlueprintUtil.GetAudioLatencyMs
// 0x0010 (0x0010 - 0x0000)
struct HmxAudioBlueprintUtil_GetAudioLatencyMs final
{
public:
	class UObject*                                worldContextObj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HmxAudioBlueprintUtil_GetAudioLatencyMs) == 0x000008, "Wrong alignment on HmxAudioBlueprintUtil_GetAudioLatencyMs");
static_assert(sizeof(HmxAudioBlueprintUtil_GetAudioLatencyMs) == 0x000010, "Wrong size on HmxAudioBlueprintUtil_GetAudioLatencyMs");
static_assert(offsetof(HmxAudioBlueprintUtil_GetAudioLatencyMs, worldContextObj) == 0x000000, "Member 'HmxAudioBlueprintUtil_GetAudioLatencyMs::worldContextObj' has a wrong offset!");
static_assert(offsetof(HmxAudioBlueprintUtil_GetAudioLatencyMs, ReturnValue) == 0x000008, "Member 'HmxAudioBlueprintUtil_GetAudioLatencyMs::ReturnValue' has a wrong offset!");

// Function HmxAudio.HmxAudioBlueprintUtil.GetNoteNameFromNoteNumber
// 0x0018 (0x0018 - 0x0000)
struct HmxAudioBlueprintUtil_GetNoteNameFromNoteNumber final
{
public:
	int32                                         midiNoteNumber;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HmxAudioBlueprintUtil_GetNoteNameFromNoteNumber) == 0x000008, "Wrong alignment on HmxAudioBlueprintUtil_GetNoteNameFromNoteNumber");
static_assert(sizeof(HmxAudioBlueprintUtil_GetNoteNameFromNoteNumber) == 0x000018, "Wrong size on HmxAudioBlueprintUtil_GetNoteNameFromNoteNumber");
static_assert(offsetof(HmxAudioBlueprintUtil_GetNoteNameFromNoteNumber, midiNoteNumber) == 0x000000, "Member 'HmxAudioBlueprintUtil_GetNoteNameFromNoteNumber::midiNoteNumber' has a wrong offset!");
static_assert(offsetof(HmxAudioBlueprintUtil_GetNoteNameFromNoteNumber, ReturnValue) == 0x000008, "Member 'HmxAudioBlueprintUtil_GetNoteNameFromNoteNumber::ReturnValue' has a wrong offset!");

// Function HmxAudio.HmxAudioBlueprintUtil.GetNoteNumberFromNoteName
// 0x0018 (0x0018 - 0x0000)
struct HmxAudioBlueprintUtil_GetNoteNumberFromNoteName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HmxAudioBlueprintUtil_GetNoteNumberFromNoteName) == 0x000008, "Wrong alignment on HmxAudioBlueprintUtil_GetNoteNumberFromNoteName");
static_assert(sizeof(HmxAudioBlueprintUtil_GetNoteNumberFromNoteName) == 0x000018, "Wrong size on HmxAudioBlueprintUtil_GetNoteNumberFromNoteName");
static_assert(offsetof(HmxAudioBlueprintUtil_GetNoteNumberFromNoteName, Name_0) == 0x000000, "Member 'HmxAudioBlueprintUtil_GetNoteNumberFromNoteName::Name_0' has a wrong offset!");
static_assert(offsetof(HmxAudioBlueprintUtil_GetNoteNumberFromNoteName, ReturnValue) == 0x000010, "Member 'HmxAudioBlueprintUtil_GetNoteNumberFromNoteName::ReturnValue' has a wrong offset!");

// Function HmxAudio.HmxAudioBlueprintUtil.GetNoteOctaveFromNoteNumber
// 0x0008 (0x0008 - 0x0000)
struct HmxAudioBlueprintUtil_GetNoteOctaveFromNoteNumber final
{
public:
	int32                                         midiNoteNumber;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HmxAudioBlueprintUtil_GetNoteOctaveFromNoteNumber) == 0x000004, "Wrong alignment on HmxAudioBlueprintUtil_GetNoteOctaveFromNoteNumber");
static_assert(sizeof(HmxAudioBlueprintUtil_GetNoteOctaveFromNoteNumber) == 0x000008, "Wrong size on HmxAudioBlueprintUtil_GetNoteOctaveFromNoteNumber");
static_assert(offsetof(HmxAudioBlueprintUtil_GetNoteOctaveFromNoteNumber, midiNoteNumber) == 0x000000, "Member 'HmxAudioBlueprintUtil_GetNoteOctaveFromNoteNumber::midiNoteNumber' has a wrong offset!");
static_assert(offsetof(HmxAudioBlueprintUtil_GetNoteOctaveFromNoteNumber, ReturnValue) == 0x000004, "Member 'HmxAudioBlueprintUtil_GetNoteOctaveFromNoteNumber::ReturnValue' has a wrong offset!");

// Function HmxAudio.HmxAudioBlueprintUtil.GetVideoLatencyMs
// 0x0010 (0x0010 - 0x0000)
struct HmxAudioBlueprintUtil_GetVideoLatencyMs final
{
public:
	class UObject*                                worldContextObj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HmxAudioBlueprintUtil_GetVideoLatencyMs) == 0x000008, "Wrong alignment on HmxAudioBlueprintUtil_GetVideoLatencyMs");
static_assert(sizeof(HmxAudioBlueprintUtil_GetVideoLatencyMs) == 0x000010, "Wrong size on HmxAudioBlueprintUtil_GetVideoLatencyMs");
static_assert(offsetof(HmxAudioBlueprintUtil_GetVideoLatencyMs, worldContextObj) == 0x000000, "Member 'HmxAudioBlueprintUtil_GetVideoLatencyMs::worldContextObj' has a wrong offset!");
static_assert(offsetof(HmxAudioBlueprintUtil_GetVideoLatencyMs, ReturnValue) == 0x000008, "Member 'HmxAudioBlueprintUtil_GetVideoLatencyMs::ReturnValue' has a wrong offset!");

// Function HmxAudio.HmxAudioBlueprintUtil.SetAudioLatencyMs
// 0x0010 (0x0010 - 0x0000)
struct HmxAudioBlueprintUtil_SetAudioLatencyMs final
{
public:
	class UObject*                                worldContextObj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAudioLatencyMs;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HmxAudioBlueprintUtil_SetAudioLatencyMs) == 0x000008, "Wrong alignment on HmxAudioBlueprintUtil_SetAudioLatencyMs");
static_assert(sizeof(HmxAudioBlueprintUtil_SetAudioLatencyMs) == 0x000010, "Wrong size on HmxAudioBlueprintUtil_SetAudioLatencyMs");
static_assert(offsetof(HmxAudioBlueprintUtil_SetAudioLatencyMs, worldContextObj) == 0x000000, "Member 'HmxAudioBlueprintUtil_SetAudioLatencyMs::worldContextObj' has a wrong offset!");
static_assert(offsetof(HmxAudioBlueprintUtil_SetAudioLatencyMs, InAudioLatencyMs) == 0x000008, "Member 'HmxAudioBlueprintUtil_SetAudioLatencyMs::InAudioLatencyMs' has a wrong offset!");

// Function HmxAudio.HmxAudioBlueprintUtil.SetVideoLatencyMs
// 0x0010 (0x0010 - 0x0000)
struct HmxAudioBlueprintUtil_SetVideoLatencyMs final
{
public:
	class UObject*                                worldContextObj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InVideoLatencyMs;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HmxAudioBlueprintUtil_SetVideoLatencyMs) == 0x000008, "Wrong alignment on HmxAudioBlueprintUtil_SetVideoLatencyMs");
static_assert(sizeof(HmxAudioBlueprintUtil_SetVideoLatencyMs) == 0x000010, "Wrong size on HmxAudioBlueprintUtil_SetVideoLatencyMs");
static_assert(offsetof(HmxAudioBlueprintUtil_SetVideoLatencyMs, worldContextObj) == 0x000000, "Member 'HmxAudioBlueprintUtil_SetVideoLatencyMs::worldContextObj' has a wrong offset!");
static_assert(offsetof(HmxAudioBlueprintUtil_SetVideoLatencyMs, InVideoLatencyMs) == 0x000008, "Member 'HmxAudioBlueprintUtil_SetVideoLatencyMs::InVideoLatencyMs' has a wrong offset!");

// Function HmxAudio.MidiNoteFunctionLibrary.ByteToMidiNote
// 0x0002 (0x0002 - 0x0000)
struct MidiNoteFunctionLibrary_ByteToMidiNote final
{
public:
	uint8                                         InByte;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMidiNote                              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_ByteToMidiNote) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_ByteToMidiNote");
static_assert(sizeof(MidiNoteFunctionLibrary_ByteToMidiNote) == 0x000002, "Wrong size on MidiNoteFunctionLibrary_ByteToMidiNote");
static_assert(offsetof(MidiNoteFunctionLibrary_ByteToMidiNote, InByte) == 0x000000, "Member 'MidiNoteFunctionLibrary_ByteToMidiNote::InByte' has a wrong offset!");
static_assert(offsetof(MidiNoteFunctionLibrary_ByteToMidiNote, ReturnValue) == 0x000001, "Member 'MidiNoteFunctionLibrary_ByteToMidiNote::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiNoteFunctionLibrary.GetMaxMidiNote
// 0x0001 (0x0001 - 0x0000)
struct MidiNoteFunctionLibrary_GetMaxMidiNote final
{
public:
	struct FMidiNote                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_GetMaxMidiNote) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_GetMaxMidiNote");
static_assert(sizeof(MidiNoteFunctionLibrary_GetMaxMidiNote) == 0x000001, "Wrong size on MidiNoteFunctionLibrary_GetMaxMidiNote");
static_assert(offsetof(MidiNoteFunctionLibrary_GetMaxMidiNote, ReturnValue) == 0x000000, "Member 'MidiNoteFunctionLibrary_GetMaxMidiNote::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiNoteFunctionLibrary.GetMaxNoteNumber
// 0x0001 (0x0001 - 0x0000)
struct MidiNoteFunctionLibrary_GetMaxNoteNumber final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_GetMaxNoteNumber) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_GetMaxNoteNumber");
static_assert(sizeof(MidiNoteFunctionLibrary_GetMaxNoteNumber) == 0x000001, "Wrong size on MidiNoteFunctionLibrary_GetMaxNoteNumber");
static_assert(offsetof(MidiNoteFunctionLibrary_GetMaxNoteNumber, ReturnValue) == 0x000000, "Member 'MidiNoteFunctionLibrary_GetMaxNoteNumber::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiNoteFunctionLibrary.GetMaxNoteVelocity
// 0x0001 (0x0001 - 0x0000)
struct MidiNoteFunctionLibrary_GetMaxNoteVelocity final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_GetMaxNoteVelocity) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_GetMaxNoteVelocity");
static_assert(sizeof(MidiNoteFunctionLibrary_GetMaxNoteVelocity) == 0x000001, "Wrong size on MidiNoteFunctionLibrary_GetMaxNoteVelocity");
static_assert(offsetof(MidiNoteFunctionLibrary_GetMaxNoteVelocity, ReturnValue) == 0x000000, "Member 'MidiNoteFunctionLibrary_GetMaxNoteVelocity::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiNoteFunctionLibrary.GetMaxNumNotes
// 0x0004 (0x0004 - 0x0000)
struct MidiNoteFunctionLibrary_GetMaxNumNotes final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_GetMaxNumNotes) == 0x000004, "Wrong alignment on MidiNoteFunctionLibrary_GetMaxNumNotes");
static_assert(sizeof(MidiNoteFunctionLibrary_GetMaxNumNotes) == 0x000004, "Wrong size on MidiNoteFunctionLibrary_GetMaxNumNotes");
static_assert(offsetof(MidiNoteFunctionLibrary_GetMaxNumNotes, ReturnValue) == 0x000000, "Member 'MidiNoteFunctionLibrary_GetMaxNumNotes::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiNoteFunctionLibrary.GetMinMidiNote
// 0x0001 (0x0001 - 0x0000)
struct MidiNoteFunctionLibrary_GetMinMidiNote final
{
public:
	struct FMidiNote                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_GetMinMidiNote) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_GetMinMidiNote");
static_assert(sizeof(MidiNoteFunctionLibrary_GetMinMidiNote) == 0x000001, "Wrong size on MidiNoteFunctionLibrary_GetMinMidiNote");
static_assert(offsetof(MidiNoteFunctionLibrary_GetMinMidiNote, ReturnValue) == 0x000000, "Member 'MidiNoteFunctionLibrary_GetMinMidiNote::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiNoteFunctionLibrary.GetMinNoteNumber
// 0x0001 (0x0001 - 0x0000)
struct MidiNoteFunctionLibrary_GetMinNoteNumber final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_GetMinNoteNumber) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_GetMinNoteNumber");
static_assert(sizeof(MidiNoteFunctionLibrary_GetMinNoteNumber) == 0x000001, "Wrong size on MidiNoteFunctionLibrary_GetMinNoteNumber");
static_assert(offsetof(MidiNoteFunctionLibrary_GetMinNoteNumber, ReturnValue) == 0x000000, "Member 'MidiNoteFunctionLibrary_GetMinNoteNumber::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiNoteFunctionLibrary.GetMinNoteVelocity
// 0x0001 (0x0001 - 0x0000)
struct MidiNoteFunctionLibrary_GetMinNoteVelocity final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_GetMinNoteVelocity) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_GetMinNoteVelocity");
static_assert(sizeof(MidiNoteFunctionLibrary_GetMinNoteVelocity) == 0x000001, "Wrong size on MidiNoteFunctionLibrary_GetMinNoteVelocity");
static_assert(offsetof(MidiNoteFunctionLibrary_GetMinNoteVelocity, ReturnValue) == 0x000000, "Member 'MidiNoteFunctionLibrary_GetMinNoteVelocity::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiNoteFunctionLibrary.IntToMidiNote
// 0x0008 (0x0008 - 0x0000)
struct MidiNoteFunctionLibrary_IntToMidiNote final
{
public:
	int32                                         inInt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMidiNote                              ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiNoteFunctionLibrary_IntToMidiNote) == 0x000004, "Wrong alignment on MidiNoteFunctionLibrary_IntToMidiNote");
static_assert(sizeof(MidiNoteFunctionLibrary_IntToMidiNote) == 0x000008, "Wrong size on MidiNoteFunctionLibrary_IntToMidiNote");
static_assert(offsetof(MidiNoteFunctionLibrary_IntToMidiNote, inInt) == 0x000000, "Member 'MidiNoteFunctionLibrary_IntToMidiNote::inInt' has a wrong offset!");
static_assert(offsetof(MidiNoteFunctionLibrary_IntToMidiNote, ReturnValue) == 0x000004, "Member 'MidiNoteFunctionLibrary_IntToMidiNote::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiNoteFunctionLibrary.MakeLiteralMidiNote
// 0x0002 (0x0002 - 0x0000)
struct MidiNoteFunctionLibrary_MakeLiteralMidiNote final
{
public:
	struct FMidiNote                              Value;                                             // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMidiNote                              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_MakeLiteralMidiNote) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_MakeLiteralMidiNote");
static_assert(sizeof(MidiNoteFunctionLibrary_MakeLiteralMidiNote) == 0x000002, "Wrong size on MidiNoteFunctionLibrary_MakeLiteralMidiNote");
static_assert(offsetof(MidiNoteFunctionLibrary_MakeLiteralMidiNote, Value) == 0x000000, "Member 'MidiNoteFunctionLibrary_MakeLiteralMidiNote::Value' has a wrong offset!");
static_assert(offsetof(MidiNoteFunctionLibrary_MakeLiteralMidiNote, ReturnValue) == 0x000001, "Member 'MidiNoteFunctionLibrary_MakeLiteralMidiNote::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiNoteFunctionLibrary.MidiNoteToByte
// 0x0002 (0x0002 - 0x0000)
struct MidiNoteFunctionLibrary_MidiNoteToByte final
{
public:
	struct FMidiNote                              InMidiNote;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_MidiNoteToByte) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_MidiNoteToByte");
static_assert(sizeof(MidiNoteFunctionLibrary_MidiNoteToByte) == 0x000002, "Wrong size on MidiNoteFunctionLibrary_MidiNoteToByte");
static_assert(offsetof(MidiNoteFunctionLibrary_MidiNoteToByte, InMidiNote) == 0x000000, "Member 'MidiNoteFunctionLibrary_MidiNoteToByte::InMidiNote' has a wrong offset!");
static_assert(offsetof(MidiNoteFunctionLibrary_MidiNoteToByte, ReturnValue) == 0x000001, "Member 'MidiNoteFunctionLibrary_MidiNoteToByte::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiNoteFunctionLibrary.MidiNoteToInt
// 0x0008 (0x0008 - 0x0000)
struct MidiNoteFunctionLibrary_MidiNoteToInt final
{
public:
	struct FMidiNote                              InMidiNote;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_MidiNoteToInt) == 0x000004, "Wrong alignment on MidiNoteFunctionLibrary_MidiNoteToInt");
static_assert(sizeof(MidiNoteFunctionLibrary_MidiNoteToInt) == 0x000008, "Wrong size on MidiNoteFunctionLibrary_MidiNoteToInt");
static_assert(offsetof(MidiNoteFunctionLibrary_MidiNoteToInt, InMidiNote) == 0x000000, "Member 'MidiNoteFunctionLibrary_MidiNoteToInt::InMidiNote' has a wrong offset!");
static_assert(offsetof(MidiNoteFunctionLibrary_MidiNoteToInt, ReturnValue) == 0x000004, "Member 'MidiNoteFunctionLibrary_MidiNoteToInt::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicalTickFunctionLibrary.BeatToTick
// 0x0008 (0x0008 - 0x0000)
struct MusicalTickFunctionLibrary_BeatToTick final
{
public:
	float                                         inBeat;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTickFunctionLibrary_BeatToTick) == 0x000004, "Wrong alignment on MusicalTickFunctionLibrary_BeatToTick");
static_assert(sizeof(MusicalTickFunctionLibrary_BeatToTick) == 0x000008, "Wrong size on MusicalTickFunctionLibrary_BeatToTick");
static_assert(offsetof(MusicalTickFunctionLibrary_BeatToTick, inBeat) == 0x000000, "Member 'MusicalTickFunctionLibrary_BeatToTick::inBeat' has a wrong offset!");
static_assert(offsetof(MusicalTickFunctionLibrary_BeatToTick, ReturnValue) == 0x000004, "Member 'MusicalTickFunctionLibrary_BeatToTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicalTickFunctionLibrary.GetBeatsPerTick
// 0x0004 (0x0004 - 0x0000)
struct MusicalTickFunctionLibrary_GetBeatsPerTick final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTickFunctionLibrary_GetBeatsPerTick) == 0x000004, "Wrong alignment on MusicalTickFunctionLibrary_GetBeatsPerTick");
static_assert(sizeof(MusicalTickFunctionLibrary_GetBeatsPerTick) == 0x000004, "Wrong size on MusicalTickFunctionLibrary_GetBeatsPerTick");
static_assert(offsetof(MusicalTickFunctionLibrary_GetBeatsPerTick, ReturnValue) == 0x000000, "Member 'MusicalTickFunctionLibrary_GetBeatsPerTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicalTickFunctionLibrary.GetTicksPerBeat
// 0x0004 (0x0004 - 0x0000)
struct MusicalTickFunctionLibrary_GetTicksPerBeat final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTickFunctionLibrary_GetTicksPerBeat) == 0x000004, "Wrong alignment on MusicalTickFunctionLibrary_GetTicksPerBeat");
static_assert(sizeof(MusicalTickFunctionLibrary_GetTicksPerBeat) == 0x000004, "Wrong size on MusicalTickFunctionLibrary_GetTicksPerBeat");
static_assert(offsetof(MusicalTickFunctionLibrary_GetTicksPerBeat, ReturnValue) == 0x000000, "Member 'MusicalTickFunctionLibrary_GetTicksPerBeat::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicalTickFunctionLibrary.GetTicksPerBeatInt
// 0x0004 (0x0004 - 0x0000)
struct MusicalTickFunctionLibrary_GetTicksPerBeatInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTickFunctionLibrary_GetTicksPerBeatInt) == 0x000004, "Wrong alignment on MusicalTickFunctionLibrary_GetTicksPerBeatInt");
static_assert(sizeof(MusicalTickFunctionLibrary_GetTicksPerBeatInt) == 0x000004, "Wrong size on MusicalTickFunctionLibrary_GetTicksPerBeatInt");
static_assert(offsetof(MusicalTickFunctionLibrary_GetTicksPerBeatInt, ReturnValue) == 0x000000, "Member 'MusicalTickFunctionLibrary_GetTicksPerBeatInt::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicalTickFunctionLibrary.TickToBeat
// 0x0008 (0x0008 - 0x0000)
struct MusicalTickFunctionLibrary_TickToBeat final
{
public:
	float                                         inTick;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTickFunctionLibrary_TickToBeat) == 0x000004, "Wrong alignment on MusicalTickFunctionLibrary_TickToBeat");
static_assert(sizeof(MusicalTickFunctionLibrary_TickToBeat) == 0x000008, "Wrong size on MusicalTickFunctionLibrary_TickToBeat");
static_assert(offsetof(MusicalTickFunctionLibrary_TickToBeat, inTick) == 0x000000, "Member 'MusicalTickFunctionLibrary_TickToBeat::inTick' has a wrong offset!");
static_assert(offsetof(MusicalTickFunctionLibrary_TickToBeat, ReturnValue) == 0x000004, "Member 'MusicalTickFunctionLibrary_TickToBeat::ReturnValue' has a wrong offset!");

// Function HmxAudio.TickSpanFuncitonLibrary.ClampTickSpan
// 0x0018 (0x0018 - 0x0000)
struct TickSpanFuncitonLibrary_ClampTickSpan final
{
public:
	struct FTickSpan                              Target;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTickSpan                              clampSpan;                                         // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTickSpan                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickSpanFuncitonLibrary_ClampTickSpan) == 0x000004, "Wrong alignment on TickSpanFuncitonLibrary_ClampTickSpan");
static_assert(sizeof(TickSpanFuncitonLibrary_ClampTickSpan) == 0x000018, "Wrong size on TickSpanFuncitonLibrary_ClampTickSpan");
static_assert(offsetof(TickSpanFuncitonLibrary_ClampTickSpan, Target) == 0x000000, "Member 'TickSpanFuncitonLibrary_ClampTickSpan::Target' has a wrong offset!");
static_assert(offsetof(TickSpanFuncitonLibrary_ClampTickSpan, clampSpan) == 0x000008, "Member 'TickSpanFuncitonLibrary_ClampTickSpan::clampSpan' has a wrong offset!");
static_assert(offsetof(TickSpanFuncitonLibrary_ClampTickSpan, ReturnValue) == 0x000010, "Member 'TickSpanFuncitonLibrary_ClampTickSpan::ReturnValue' has a wrong offset!");

// Function HmxAudio.TickSpanFuncitonLibrary.ClampTickSpanByRef
// 0x0018 (0x0018 - 0x0000)
struct TickSpanFuncitonLibrary_ClampTickSpanByRef final
{
public:
	struct FTickSpan                              Target;                                            // 0x0000(0x0008)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTickSpan                              clampSpan;                                         // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTickSpan                              Result;                                            // 0x0010(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickSpanFuncitonLibrary_ClampTickSpanByRef) == 0x000004, "Wrong alignment on TickSpanFuncitonLibrary_ClampTickSpanByRef");
static_assert(sizeof(TickSpanFuncitonLibrary_ClampTickSpanByRef) == 0x000018, "Wrong size on TickSpanFuncitonLibrary_ClampTickSpanByRef");
static_assert(offsetof(TickSpanFuncitonLibrary_ClampTickSpanByRef, Target) == 0x000000, "Member 'TickSpanFuncitonLibrary_ClampTickSpanByRef::Target' has a wrong offset!");
static_assert(offsetof(TickSpanFuncitonLibrary_ClampTickSpanByRef, clampSpan) == 0x000008, "Member 'TickSpanFuncitonLibrary_ClampTickSpanByRef::clampSpan' has a wrong offset!");
static_assert(offsetof(TickSpanFuncitonLibrary_ClampTickSpanByRef, Result) == 0x000010, "Member 'TickSpanFuncitonLibrary_ClampTickSpanByRef::Result' has a wrong offset!");

// Function HmxAudio.TickSpanFuncitonLibrary.GetEndBeat
// 0x000C (0x000C - 0x0000)
struct TickSpanFuncitonLibrary_GetEndBeat final
{
public:
	struct FTickSpan                              Target;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickSpanFuncitonLibrary_GetEndBeat) == 0x000004, "Wrong alignment on TickSpanFuncitonLibrary_GetEndBeat");
static_assert(sizeof(TickSpanFuncitonLibrary_GetEndBeat) == 0x00000C, "Wrong size on TickSpanFuncitonLibrary_GetEndBeat");
static_assert(offsetof(TickSpanFuncitonLibrary_GetEndBeat, Target) == 0x000000, "Member 'TickSpanFuncitonLibrary_GetEndBeat::Target' has a wrong offset!");
static_assert(offsetof(TickSpanFuncitonLibrary_GetEndBeat, ReturnValue) == 0x000008, "Member 'TickSpanFuncitonLibrary_GetEndBeat::ReturnValue' has a wrong offset!");

// Function HmxAudio.TickSpanFuncitonLibrary.GetEndTick
// 0x000C (0x000C - 0x0000)
struct TickSpanFuncitonLibrary_GetEndTick final
{
public:
	struct FTickSpan                              Target;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickSpanFuncitonLibrary_GetEndTick) == 0x000004, "Wrong alignment on TickSpanFuncitonLibrary_GetEndTick");
static_assert(sizeof(TickSpanFuncitonLibrary_GetEndTick) == 0x00000C, "Wrong size on TickSpanFuncitonLibrary_GetEndTick");
static_assert(offsetof(TickSpanFuncitonLibrary_GetEndTick, Target) == 0x000000, "Member 'TickSpanFuncitonLibrary_GetEndTick::Target' has a wrong offset!");
static_assert(offsetof(TickSpanFuncitonLibrary_GetEndTick, ReturnValue) == 0x000008, "Member 'TickSpanFuncitonLibrary_GetEndTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.TickSpanFuncitonLibrary.GetLengthBeats
// 0x000C (0x000C - 0x0000)
struct TickSpanFuncitonLibrary_GetLengthBeats final
{
public:
	struct FTickSpan                              Target;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickSpanFuncitonLibrary_GetLengthBeats) == 0x000004, "Wrong alignment on TickSpanFuncitonLibrary_GetLengthBeats");
static_assert(sizeof(TickSpanFuncitonLibrary_GetLengthBeats) == 0x00000C, "Wrong size on TickSpanFuncitonLibrary_GetLengthBeats");
static_assert(offsetof(TickSpanFuncitonLibrary_GetLengthBeats, Target) == 0x000000, "Member 'TickSpanFuncitonLibrary_GetLengthBeats::Target' has a wrong offset!");
static_assert(offsetof(TickSpanFuncitonLibrary_GetLengthBeats, ReturnValue) == 0x000008, "Member 'TickSpanFuncitonLibrary_GetLengthBeats::ReturnValue' has a wrong offset!");

// Function HmxAudio.TickSpanFuncitonLibrary.GetLengthTicks
// 0x000C (0x000C - 0x0000)
struct TickSpanFuncitonLibrary_GetLengthTicks final
{
public:
	struct FTickSpan                              Target;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickSpanFuncitonLibrary_GetLengthTicks) == 0x000004, "Wrong alignment on TickSpanFuncitonLibrary_GetLengthTicks");
static_assert(sizeof(TickSpanFuncitonLibrary_GetLengthTicks) == 0x00000C, "Wrong size on TickSpanFuncitonLibrary_GetLengthTicks");
static_assert(offsetof(TickSpanFuncitonLibrary_GetLengthTicks, Target) == 0x000000, "Member 'TickSpanFuncitonLibrary_GetLengthTicks::Target' has a wrong offset!");
static_assert(offsetof(TickSpanFuncitonLibrary_GetLengthTicks, ReturnValue) == 0x000008, "Member 'TickSpanFuncitonLibrary_GetLengthTicks::ReturnValue' has a wrong offset!");

// Function HmxAudio.TickSpanFuncitonLibrary.GetOffsetBeat
// 0x000C (0x000C - 0x0000)
struct TickSpanFuncitonLibrary_GetOffsetBeat final
{
public:
	struct FTickSpan                              Target;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickSpanFuncitonLibrary_GetOffsetBeat) == 0x000004, "Wrong alignment on TickSpanFuncitonLibrary_GetOffsetBeat");
static_assert(sizeof(TickSpanFuncitonLibrary_GetOffsetBeat) == 0x00000C, "Wrong size on TickSpanFuncitonLibrary_GetOffsetBeat");
static_assert(offsetof(TickSpanFuncitonLibrary_GetOffsetBeat, Target) == 0x000000, "Member 'TickSpanFuncitonLibrary_GetOffsetBeat::Target' has a wrong offset!");
static_assert(offsetof(TickSpanFuncitonLibrary_GetOffsetBeat, ReturnValue) == 0x000008, "Member 'TickSpanFuncitonLibrary_GetOffsetBeat::ReturnValue' has a wrong offset!");

// Function HmxAudio.TickSpanFuncitonLibrary.GetOffsetTick
// 0x000C (0x000C - 0x0000)
struct TickSpanFuncitonLibrary_GetOffsetTick final
{
public:
	struct FTickSpan                              Target;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickSpanFuncitonLibrary_GetOffsetTick) == 0x000004, "Wrong alignment on TickSpanFuncitonLibrary_GetOffsetTick");
static_assert(sizeof(TickSpanFuncitonLibrary_GetOffsetTick) == 0x00000C, "Wrong size on TickSpanFuncitonLibrary_GetOffsetTick");
static_assert(offsetof(TickSpanFuncitonLibrary_GetOffsetTick, Target) == 0x000000, "Member 'TickSpanFuncitonLibrary_GetOffsetTick::Target' has a wrong offset!");
static_assert(offsetof(TickSpanFuncitonLibrary_GetOffsetTick, ReturnValue) == 0x000008, "Member 'TickSpanFuncitonLibrary_GetOffsetTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.TickSpanFuncitonLibrary.MakeTickSpan
// 0x0010 (0x0010 - 0x0000)
struct TickSpanFuncitonLibrary_MakeTickSpan final
{
public:
	int32                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTickSpan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickSpanFuncitonLibrary_MakeTickSpan) == 0x000004, "Wrong alignment on TickSpanFuncitonLibrary_MakeTickSpan");
static_assert(sizeof(TickSpanFuncitonLibrary_MakeTickSpan) == 0x000010, "Wrong size on TickSpanFuncitonLibrary_MakeTickSpan");
static_assert(offsetof(TickSpanFuncitonLibrary_MakeTickSpan, Offset) == 0x000000, "Member 'TickSpanFuncitonLibrary_MakeTickSpan::Offset' has a wrong offset!");
static_assert(offsetof(TickSpanFuncitonLibrary_MakeTickSpan, Length) == 0x000004, "Member 'TickSpanFuncitonLibrary_MakeTickSpan::Length' has a wrong offset!");
static_assert(offsetof(TickSpanFuncitonLibrary_MakeTickSpan, ReturnValue) == 0x000008, "Member 'TickSpanFuncitonLibrary_MakeTickSpan::ReturnValue' has a wrong offset!");

// Function HmxAudio.TickSpanFuncitonLibrary.MakeTickSpanFromBeats
// 0x0010 (0x0010 - 0x0000)
struct TickSpanFuncitonLibrary_MakeTickSpanFromBeats final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTickSpan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickSpanFuncitonLibrary_MakeTickSpanFromBeats) == 0x000004, "Wrong alignment on TickSpanFuncitonLibrary_MakeTickSpanFromBeats");
static_assert(sizeof(TickSpanFuncitonLibrary_MakeTickSpanFromBeats) == 0x000010, "Wrong size on TickSpanFuncitonLibrary_MakeTickSpanFromBeats");
static_assert(offsetof(TickSpanFuncitonLibrary_MakeTickSpanFromBeats, Offset) == 0x000000, "Member 'TickSpanFuncitonLibrary_MakeTickSpanFromBeats::Offset' has a wrong offset!");
static_assert(offsetof(TickSpanFuncitonLibrary_MakeTickSpanFromBeats, Length) == 0x000004, "Member 'TickSpanFuncitonLibrary_MakeTickSpanFromBeats::Length' has a wrong offset!");
static_assert(offsetof(TickSpanFuncitonLibrary_MakeTickSpanFromBeats, ReturnValue) == 0x000008, "Member 'TickSpanFuncitonLibrary_MakeTickSpanFromBeats::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicSequence.AppendTimeSlot
// 0x0020 (0x0020 - 0x0000)
struct MidiMusicSequence_AppendTimeSlot final
{
public:
	struct FMidiMusicTimeSlotArgs                 args;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UMidiMusicTimeSlot*                     ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicSequence_AppendTimeSlot) == 0x000008, "Wrong alignment on MidiMusicSequence_AppendTimeSlot");
static_assert(sizeof(MidiMusicSequence_AppendTimeSlot) == 0x000020, "Wrong size on MidiMusicSequence_AppendTimeSlot");
static_assert(offsetof(MidiMusicSequence_AppendTimeSlot, args) == 0x000000, "Member 'MidiMusicSequence_AppendTimeSlot::args' has a wrong offset!");
static_assert(offsetof(MidiMusicSequence_AppendTimeSlot, ReturnValue) == 0x000018, "Member 'MidiMusicSequence_AppendTimeSlot::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicSequence.InsertTimeSlot
// 0x0020 (0x0020 - 0x0000)
struct MidiMusicSequence_InsertTimeSlot final
{
public:
	struct FMidiMusicTimeSlotArgs                 args;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UMidiMusicTimeSlot*                     ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicSequence_InsertTimeSlot) == 0x000008, "Wrong alignment on MidiMusicSequence_InsertTimeSlot");
static_assert(sizeof(MidiMusicSequence_InsertTimeSlot) == 0x000020, "Wrong size on MidiMusicSequence_InsertTimeSlot");
static_assert(offsetof(MidiMusicSequence_InsertTimeSlot, args) == 0x000000, "Member 'MidiMusicSequence_InsertTimeSlot::args' has a wrong offset!");
static_assert(offsetof(MidiMusicSequence_InsertTimeSlot, ReturnValue) == 0x000018, "Member 'MidiMusicSequence_InsertTimeSlot::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicSequence.FindTimeSlotAt
// 0x0010 (0x0010 - 0x0000)
struct MidiMusicSequence_FindTimeSlotAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMidiMusicTimeSlot*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicSequence_FindTimeSlotAt) == 0x000008, "Wrong alignment on MidiMusicSequence_FindTimeSlotAt");
static_assert(sizeof(MidiMusicSequence_FindTimeSlotAt) == 0x000010, "Wrong size on MidiMusicSequence_FindTimeSlotAt");
static_assert(offsetof(MidiMusicSequence_FindTimeSlotAt, Index_0) == 0x000000, "Member 'MidiMusicSequence_FindTimeSlotAt::Index_0' has a wrong offset!");
static_assert(offsetof(MidiMusicSequence_FindTimeSlotAt, ReturnValue) == 0x000008, "Member 'MidiMusicSequence_FindTimeSlotAt::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicSequence.FindTimeSlotAtTick
// 0x0010 (0x0010 - 0x0000)
struct MidiMusicSequence_FindTimeSlotAtTick final
{
public:
	int32                                         Tick;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMidiMusicTimeSlot*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicSequence_FindTimeSlotAtTick) == 0x000008, "Wrong alignment on MidiMusicSequence_FindTimeSlotAtTick");
static_assert(sizeof(MidiMusicSequence_FindTimeSlotAtTick) == 0x000010, "Wrong size on MidiMusicSequence_FindTimeSlotAtTick");
static_assert(offsetof(MidiMusicSequence_FindTimeSlotAtTick, Tick) == 0x000000, "Member 'MidiMusicSequence_FindTimeSlotAtTick::Tick' has a wrong offset!");
static_assert(offsetof(MidiMusicSequence_FindTimeSlotAtTick, ReturnValue) == 0x000008, "Member 'MidiMusicSequence_FindTimeSlotAtTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicSequence.GetLastTimeSlot
// 0x0008 (0x0008 - 0x0000)
struct MidiMusicSequence_GetLastTimeSlot final
{
public:
	class UMidiMusicTimeSlot*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicSequence_GetLastTimeSlot) == 0x000008, "Wrong alignment on MidiMusicSequence_GetLastTimeSlot");
static_assert(sizeof(MidiMusicSequence_GetLastTimeSlot) == 0x000008, "Wrong size on MidiMusicSequence_GetLastTimeSlot");
static_assert(offsetof(MidiMusicSequence_GetLastTimeSlot, ReturnValue) == 0x000000, "Member 'MidiMusicSequence_GetLastTimeSlot::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.SetCurrentPage
// 0x0004 (0x0004 - 0x0000)
struct MidiMusicTimeSlot_SetCurrentPage final
{
public:
	int32                                         inCurrentPage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_SetCurrentPage) == 0x000004, "Wrong alignment on MidiMusicTimeSlot_SetCurrentPage");
static_assert(sizeof(MidiMusicTimeSlot_SetCurrentPage) == 0x000004, "Wrong size on MidiMusicTimeSlot_SetCurrentPage");
static_assert(offsetof(MidiMusicTimeSlot_SetCurrentPage, inCurrentPage) == 0x000000, "Member 'MidiMusicTimeSlot_SetCurrentPage::inCurrentPage' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct MidiMusicTimeSlot_SetEnabled final
{
public:
	bool                                          InEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_SetEnabled) == 0x000001, "Wrong alignment on MidiMusicTimeSlot_SetEnabled");
static_assert(sizeof(MidiMusicTimeSlot_SetEnabled) == 0x000001, "Wrong size on MidiMusicTimeSlot_SetEnabled");
static_assert(offsetof(MidiMusicTimeSlot_SetEnabled, InEnabled) == 0x000000, "Member 'MidiMusicTimeSlot_SetEnabled::InEnabled' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.SetLengthTick
// 0x0004 (0x0004 - 0x0000)
struct MidiMusicTimeSlot_SetLengthTick final
{
public:
	int32                                         inLength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_SetLengthTick) == 0x000004, "Wrong alignment on MidiMusicTimeSlot_SetLengthTick");
static_assert(sizeof(MidiMusicTimeSlot_SetLengthTick) == 0x000004, "Wrong size on MidiMusicTimeSlot_SetLengthTick");
static_assert(offsetof(MidiMusicTimeSlot_SetLengthTick, inLength) == 0x000000, "Member 'MidiMusicTimeSlot_SetLengthTick::inLength' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.SetMidiMusicItem
// 0x0010 (0x0010 - 0x0000)
struct MidiMusicTimeSlot_SetMidiMusicItem final
{
public:
	TScriptInterface<class IMidiMusicInterface>   inMidiMusicItem;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_SetMidiMusicItem) == 0x000008, "Wrong alignment on MidiMusicTimeSlot_SetMidiMusicItem");
static_assert(sizeof(MidiMusicTimeSlot_SetMidiMusicItem) == 0x000010, "Wrong size on MidiMusicTimeSlot_SetMidiMusicItem");
static_assert(offsetof(MidiMusicTimeSlot_SetMidiMusicItem, inMidiMusicItem) == 0x000000, "Member 'MidiMusicTimeSlot_SetMidiMusicItem::inMidiMusicItem' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.SetNumPages
// 0x0004 (0x0004 - 0x0000)
struct MidiMusicTimeSlot_SetNumPages final
{
public:
	int32                                         inNumPages;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_SetNumPages) == 0x000004, "Wrong alignment on MidiMusicTimeSlot_SetNumPages");
static_assert(sizeof(MidiMusicTimeSlot_SetNumPages) == 0x000004, "Wrong size on MidiMusicTimeSlot_SetNumPages");
static_assert(offsetof(MidiMusicTimeSlot_SetNumPages, inNumPages) == 0x000000, "Member 'MidiMusicTimeSlot_SetNumPages::inNumPages' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.SetOffsetTick
// 0x0004 (0x0004 - 0x0000)
struct MidiMusicTimeSlot_SetOffsetTick final
{
public:
	int32                                         InOffset;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_SetOffsetTick) == 0x000004, "Wrong alignment on MidiMusicTimeSlot_SetOffsetTick");
static_assert(sizeof(MidiMusicTimeSlot_SetOffsetTick) == 0x000004, "Wrong size on MidiMusicTimeSlot_SetOffsetTick");
static_assert(offsetof(MidiMusicTimeSlot_SetOffsetTick, InOffset) == 0x000000, "Member 'MidiMusicTimeSlot_SetOffsetTick::InOffset' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.SetPages
// 0x0010 (0x0010 - 0x0000)
struct MidiMusicTimeSlot_SetPages final
{
public:
	TArray<bool>                                  inPages;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_SetPages) == 0x000008, "Wrong alignment on MidiMusicTimeSlot_SetPages");
static_assert(sizeof(MidiMusicTimeSlot_SetPages) == 0x000010, "Wrong size on MidiMusicTimeSlot_SetPages");
static_assert(offsetof(MidiMusicTimeSlot_SetPages, inPages) == 0x000000, "Member 'MidiMusicTimeSlot_SetPages::inPages' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.SetTickSpan
// 0x0008 (0x0008 - 0x0000)
struct MidiMusicTimeSlot_SetTickSpan final
{
public:
	struct FTickSpan                              inTickSpan;                                        // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_SetTickSpan) == 0x000004, "Wrong alignment on MidiMusicTimeSlot_SetTickSpan");
static_assert(sizeof(MidiMusicTimeSlot_SetTickSpan) == 0x000008, "Wrong size on MidiMusicTimeSlot_SetTickSpan");
static_assert(offsetof(MidiMusicTimeSlot_SetTickSpan, inTickSpan) == 0x000000, "Member 'MidiMusicTimeSlot_SetTickSpan::inTickSpan' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.GetCurrentPage
// 0x0004 (0x0004 - 0x0000)
struct MidiMusicTimeSlot_GetCurrentPage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_GetCurrentPage) == 0x000004, "Wrong alignment on MidiMusicTimeSlot_GetCurrentPage");
static_assert(sizeof(MidiMusicTimeSlot_GetCurrentPage) == 0x000004, "Wrong size on MidiMusicTimeSlot_GetCurrentPage");
static_assert(offsetof(MidiMusicTimeSlot_GetCurrentPage, ReturnValue) == 0x000000, "Member 'MidiMusicTimeSlot_GetCurrentPage::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.GetEnabled
// 0x0001 (0x0001 - 0x0000)
struct MidiMusicTimeSlot_GetEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_GetEnabled) == 0x000001, "Wrong alignment on MidiMusicTimeSlot_GetEnabled");
static_assert(sizeof(MidiMusicTimeSlot_GetEnabled) == 0x000001, "Wrong size on MidiMusicTimeSlot_GetEnabled");
static_assert(offsetof(MidiMusicTimeSlot_GetEnabled, ReturnValue) == 0x000000, "Member 'MidiMusicTimeSlot_GetEnabled::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.GetEndBeat
// 0x0004 (0x0004 - 0x0000)
struct MidiMusicTimeSlot_GetEndBeat final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_GetEndBeat) == 0x000004, "Wrong alignment on MidiMusicTimeSlot_GetEndBeat");
static_assert(sizeof(MidiMusicTimeSlot_GetEndBeat) == 0x000004, "Wrong size on MidiMusicTimeSlot_GetEndBeat");
static_assert(offsetof(MidiMusicTimeSlot_GetEndBeat, ReturnValue) == 0x000000, "Member 'MidiMusicTimeSlot_GetEndBeat::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.GetEndTick
// 0x0004 (0x0004 - 0x0000)
struct MidiMusicTimeSlot_GetEndTick final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_GetEndTick) == 0x000004, "Wrong alignment on MidiMusicTimeSlot_GetEndTick");
static_assert(sizeof(MidiMusicTimeSlot_GetEndTick) == 0x000004, "Wrong size on MidiMusicTimeSlot_GetEndTick");
static_assert(offsetof(MidiMusicTimeSlot_GetEndTick, ReturnValue) == 0x000000, "Member 'MidiMusicTimeSlot_GetEndTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.GetIndexInSequence
// 0x0004 (0x0004 - 0x0000)
struct MidiMusicTimeSlot_GetIndexInSequence final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_GetIndexInSequence) == 0x000004, "Wrong alignment on MidiMusicTimeSlot_GetIndexInSequence");
static_assert(sizeof(MidiMusicTimeSlot_GetIndexInSequence) == 0x000004, "Wrong size on MidiMusicTimeSlot_GetIndexInSequence");
static_assert(offsetof(MidiMusicTimeSlot_GetIndexInSequence, ReturnValue) == 0x000000, "Member 'MidiMusicTimeSlot_GetIndexInSequence::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.GetLengthBeats
// 0x0004 (0x0004 - 0x0000)
struct MidiMusicTimeSlot_GetLengthBeats final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_GetLengthBeats) == 0x000004, "Wrong alignment on MidiMusicTimeSlot_GetLengthBeats");
static_assert(sizeof(MidiMusicTimeSlot_GetLengthBeats) == 0x000004, "Wrong size on MidiMusicTimeSlot_GetLengthBeats");
static_assert(offsetof(MidiMusicTimeSlot_GetLengthBeats, ReturnValue) == 0x000000, "Member 'MidiMusicTimeSlot_GetLengthBeats::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.GetLengthTick
// 0x0004 (0x0004 - 0x0000)
struct MidiMusicTimeSlot_GetLengthTick final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_GetLengthTick) == 0x000004, "Wrong alignment on MidiMusicTimeSlot_GetLengthTick");
static_assert(sizeof(MidiMusicTimeSlot_GetLengthTick) == 0x000004, "Wrong size on MidiMusicTimeSlot_GetLengthTick");
static_assert(offsetof(MidiMusicTimeSlot_GetLengthTick, ReturnValue) == 0x000000, "Member 'MidiMusicTimeSlot_GetLengthTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.GetMidiMusicItem
// 0x0010 (0x0010 - 0x0000)
struct MidiMusicTimeSlot_GetMidiMusicItem final
{
public:
	TScriptInterface<class IMidiMusicInterface>   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_GetMidiMusicItem) == 0x000008, "Wrong alignment on MidiMusicTimeSlot_GetMidiMusicItem");
static_assert(sizeof(MidiMusicTimeSlot_GetMidiMusicItem) == 0x000010, "Wrong size on MidiMusicTimeSlot_GetMidiMusicItem");
static_assert(offsetof(MidiMusicTimeSlot_GetMidiMusicItem, ReturnValue) == 0x000000, "Member 'MidiMusicTimeSlot_GetMidiMusicItem::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.GetNumPages
// 0x0004 (0x0004 - 0x0000)
struct MidiMusicTimeSlot_GetNumPages final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_GetNumPages) == 0x000004, "Wrong alignment on MidiMusicTimeSlot_GetNumPages");
static_assert(sizeof(MidiMusicTimeSlot_GetNumPages) == 0x000004, "Wrong size on MidiMusicTimeSlot_GetNumPages");
static_assert(offsetof(MidiMusicTimeSlot_GetNumPages, ReturnValue) == 0x000000, "Member 'MidiMusicTimeSlot_GetNumPages::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.GetOffsetBeat
// 0x0004 (0x0004 - 0x0000)
struct MidiMusicTimeSlot_GetOffsetBeat final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_GetOffsetBeat) == 0x000004, "Wrong alignment on MidiMusicTimeSlot_GetOffsetBeat");
static_assert(sizeof(MidiMusicTimeSlot_GetOffsetBeat) == 0x000004, "Wrong size on MidiMusicTimeSlot_GetOffsetBeat");
static_assert(offsetof(MidiMusicTimeSlot_GetOffsetBeat, ReturnValue) == 0x000000, "Member 'MidiMusicTimeSlot_GetOffsetBeat::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.GetOffsetTick
// 0x0004 (0x0004 - 0x0000)
struct MidiMusicTimeSlot_GetOffsetTick final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_GetOffsetTick) == 0x000004, "Wrong alignment on MidiMusicTimeSlot_GetOffsetTick");
static_assert(sizeof(MidiMusicTimeSlot_GetOffsetTick) == 0x000004, "Wrong size on MidiMusicTimeSlot_GetOffsetTick");
static_assert(offsetof(MidiMusicTimeSlot_GetOffsetTick, ReturnValue) == 0x000000, "Member 'MidiMusicTimeSlot_GetOffsetTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.GetPages
// 0x0010 (0x0010 - 0x0000)
struct MidiMusicTimeSlot_GetPages final
{
public:
	TArray<bool>                                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_GetPages) == 0x000008, "Wrong alignment on MidiMusicTimeSlot_GetPages");
static_assert(sizeof(MidiMusicTimeSlot_GetPages) == 0x000010, "Wrong size on MidiMusicTimeSlot_GetPages");
static_assert(offsetof(MidiMusicTimeSlot_GetPages, ReturnValue) == 0x000000, "Member 'MidiMusicTimeSlot_GetPages::ReturnValue' has a wrong offset!");

// Function HmxAudio.MidiMusicTimeSlot.GetTickSpan
// 0x0008 (0x0008 - 0x0000)
struct MidiMusicTimeSlot_GetTickSpan final
{
public:
	struct FTickSpan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMusicTimeSlot_GetTickSpan) == 0x000004, "Wrong alignment on MidiMusicTimeSlot_GetTickSpan");
static_assert(sizeof(MidiMusicTimeSlot_GetTickSpan) == 0x000008, "Wrong size on MidiMusicTimeSlot_GetTickSpan");
static_assert(offsetof(MidiMusicTimeSlot_GetTickSpan, ReturnValue) == 0x000000, "Member 'MidiMusicTimeSlot_GetTickSpan::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicalGridEvent.Cancel
// 0x0001 (0x0001 - 0x0000)
struct MusicalGridEvent_Cancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalGridEvent_Cancel) == 0x000001, "Wrong alignment on MusicalGridEvent_Cancel");
static_assert(sizeof(MusicalGridEvent_Cancel) == 0x000001, "Wrong size on MusicalGridEvent_Cancel");
static_assert(offsetof(MusicalGridEvent_Cancel, ReturnValue) == 0x000000, "Member 'MusicalGridEvent_Cancel::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicalGridEvent.GetProgress
// 0x0004 (0x0004 - 0x0000)
struct MusicalGridEvent_GetProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalGridEvent_GetProgress) == 0x000004, "Wrong alignment on MusicalGridEvent_GetProgress");
static_assert(sizeof(MusicalGridEvent_GetProgress) == 0x000004, "Wrong size on MusicalGridEvent_GetProgress");
static_assert(offsetof(MusicalGridEvent_GetProgress, ReturnValue) == 0x000000, "Member 'MusicalGridEvent_GetProgress::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.AppendGridSquares
// 0x0008 (0x0008 - 0x0000)
struct StepSequencerTrack_AppendGridSquares final
{
public:
	int32                                         appendSquares;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          copyStates;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          copyMusicItems;                                    // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StepSequencerTrack_AppendGridSquares) == 0x000004, "Wrong alignment on StepSequencerTrack_AppendGridSquares");
static_assert(sizeof(StepSequencerTrack_AppendGridSquares) == 0x000008, "Wrong size on StepSequencerTrack_AppendGridSquares");
static_assert(offsetof(StepSequencerTrack_AppendGridSquares, appendSquares) == 0x000000, "Member 'StepSequencerTrack_AppendGridSquares::appendSquares' has a wrong offset!");
static_assert(offsetof(StepSequencerTrack_AppendGridSquares, copyStates) == 0x000004, "Member 'StepSequencerTrack_AppendGridSquares::copyStates' has a wrong offset!");
static_assert(offsetof(StepSequencerTrack_AppendGridSquares, copyMusicItems) == 0x000005, "Member 'StepSequencerTrack_AppendGridSquares::copyMusicItems' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.InitGridSquares
// 0x000C (0x000C - 0x0000)
struct StepSequencerTrack_InitGridSquares final
{
public:
	int32                                         inGridSquareNum;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         inMaxGridSquares;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         inGridSquareBeats;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_InitGridSquares) == 0x000004, "Wrong alignment on StepSequencerTrack_InitGridSquares");
static_assert(sizeof(StepSequencerTrack_InitGridSquares) == 0x00000C, "Wrong size on StepSequencerTrack_InitGridSquares");
static_assert(offsetof(StepSequencerTrack_InitGridSquares, inGridSquareNum) == 0x000000, "Member 'StepSequencerTrack_InitGridSquares::inGridSquareNum' has a wrong offset!");
static_assert(offsetof(StepSequencerTrack_InitGridSquares, inMaxGridSquares) == 0x000004, "Member 'StepSequencerTrack_InitGridSquares::inMaxGridSquares' has a wrong offset!");
static_assert(offsetof(StepSequencerTrack_InitGridSquares, inGridSquareBeats) == 0x000008, "Member 'StepSequencerTrack_InitGridSquares::inGridSquareBeats' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.OnTimeSlotEnabledChanged
// 0x0008 (0x0008 - 0x0000)
struct StepSequencerTrack_OnTimeSlotEnabledChanged final
{
public:
	class UMidiMusicTimeSlot*                     timeSlot;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_OnTimeSlotEnabledChanged) == 0x000008, "Wrong alignment on StepSequencerTrack_OnTimeSlotEnabledChanged");
static_assert(sizeof(StepSequencerTrack_OnTimeSlotEnabledChanged) == 0x000008, "Wrong size on StepSequencerTrack_OnTimeSlotEnabledChanged");
static_assert(offsetof(StepSequencerTrack_OnTimeSlotEnabledChanged, timeSlot) == 0x000000, "Member 'StepSequencerTrack_OnTimeSlotEnabledChanged::timeSlot' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.OnTimeSlotMusicItemChanged
// 0x0008 (0x0008 - 0x0000)
struct StepSequencerTrack_OnTimeSlotMusicItemChanged final
{
public:
	class UMidiMusicTimeSlot*                     timeSlot;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_OnTimeSlotMusicItemChanged) == 0x000008, "Wrong alignment on StepSequencerTrack_OnTimeSlotMusicItemChanged");
static_assert(sizeof(StepSequencerTrack_OnTimeSlotMusicItemChanged) == 0x000008, "Wrong size on StepSequencerTrack_OnTimeSlotMusicItemChanged");
static_assert(offsetof(StepSequencerTrack_OnTimeSlotMusicItemChanged, timeSlot) == 0x000000, "Member 'StepSequencerTrack_OnTimeSlotMusicItemChanged::timeSlot' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.OnTimeSlotTimeSpanChanged
// 0x0008 (0x0008 - 0x0000)
struct StepSequencerTrack_OnTimeSlotTimeSpanChanged final
{
public:
	class UMidiMusicTimeSlot*                     timeSlot;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_OnTimeSlotTimeSpanChanged) == 0x000008, "Wrong alignment on StepSequencerTrack_OnTimeSlotTimeSpanChanged");
static_assert(sizeof(StepSequencerTrack_OnTimeSlotTimeSpanChanged) == 0x000008, "Wrong size on StepSequencerTrack_OnTimeSlotTimeSpanChanged");
static_assert(offsetof(StepSequencerTrack_OnTimeSlotTimeSpanChanged, timeSlot) == 0x000000, "Member 'StepSequencerTrack_OnTimeSlotTimeSpanChanged::timeSlot' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.PopGridSquares
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerTrack_PopGridSquares final
{
public:
	int32                                         popSquares;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_PopGridSquares) == 0x000004, "Wrong alignment on StepSequencerTrack_PopGridSquares");
static_assert(sizeof(StepSequencerTrack_PopGridSquares) == 0x000004, "Wrong size on StepSequencerTrack_PopGridSquares");
static_assert(offsetof(StepSequencerTrack_PopGridSquares, popSquares) == 0x000000, "Member 'StepSequencerTrack_PopGridSquares::popSquares' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.SetCurrentPage
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerTrack_SetCurrentPage final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_SetCurrentPage) == 0x000004, "Wrong alignment on StepSequencerTrack_SetCurrentPage");
static_assert(sizeof(StepSequencerTrack_SetCurrentPage) == 0x000004, "Wrong size on StepSequencerTrack_SetCurrentPage");
static_assert(offsetof(StepSequencerTrack_SetCurrentPage, Page) == 0x000000, "Member 'StepSequencerTrack_SetCurrentPage::Page' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.SetGridSquareBeats
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerTrack_SetGridSquareBeats final
{
public:
	float                                         inGridSquareBeats;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_SetGridSquareBeats) == 0x000004, "Wrong alignment on StepSequencerTrack_SetGridSquareBeats");
static_assert(sizeof(StepSequencerTrack_SetGridSquareBeats) == 0x000004, "Wrong size on StepSequencerTrack_SetGridSquareBeats");
static_assert(offsetof(StepSequencerTrack_SetGridSquareBeats, inGridSquareBeats) == 0x000000, "Member 'StepSequencerTrack_SetGridSquareBeats::inGridSquareBeats' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.SetGridSquareState
// 0x0008 (0x0008 - 0x0000)
struct StepSequencerTrack_SetGridSquareState final
{
public:
	int32                                         gridSquareIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isOn;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StepSequencerTrack_SetGridSquareState) == 0x000004, "Wrong alignment on StepSequencerTrack_SetGridSquareState");
static_assert(sizeof(StepSequencerTrack_SetGridSquareState) == 0x000008, "Wrong size on StepSequencerTrack_SetGridSquareState");
static_assert(offsetof(StepSequencerTrack_SetGridSquareState, gridSquareIndex) == 0x000000, "Member 'StepSequencerTrack_SetGridSquareState::gridSquareIndex' has a wrong offset!");
static_assert(offsetof(StepSequencerTrack_SetGridSquareState, isOn) == 0x000004, "Member 'StepSequencerTrack_SetGridSquareState::isOn' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.SetGridSquareStateOnPage
// 0x000C (0x000C - 0x0000)
struct StepSequencerTrack_SetGridSquareStateOnPage final
{
public:
	int32                                         gridSquareIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isOn;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StepSequencerTrack_SetGridSquareStateOnPage) == 0x000004, "Wrong alignment on StepSequencerTrack_SetGridSquareStateOnPage");
static_assert(sizeof(StepSequencerTrack_SetGridSquareStateOnPage) == 0x00000C, "Wrong size on StepSequencerTrack_SetGridSquareStateOnPage");
static_assert(offsetof(StepSequencerTrack_SetGridSquareStateOnPage, gridSquareIndex) == 0x000000, "Member 'StepSequencerTrack_SetGridSquareStateOnPage::gridSquareIndex' has a wrong offset!");
static_assert(offsetof(StepSequencerTrack_SetGridSquareStateOnPage, PageIndex) == 0x000004, "Member 'StepSequencerTrack_SetGridSquareStateOnPage::PageIndex' has a wrong offset!");
static_assert(offsetof(StepSequencerTrack_SetGridSquareStateOnPage, isOn) == 0x000008, "Member 'StepSequencerTrack_SetGridSquareStateOnPage::isOn' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.SetMusicItemAtGridSquare
// 0x0018 (0x0018 - 0x0000)
struct StepSequencerTrack_SetMusicItemAtGridSquare final
{
public:
	int32                                         gridSquareIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMidiMusicInterface>   MusicItem;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_SetMusicItemAtGridSquare) == 0x000008, "Wrong alignment on StepSequencerTrack_SetMusicItemAtGridSquare");
static_assert(sizeof(StepSequencerTrack_SetMusicItemAtGridSquare) == 0x000018, "Wrong size on StepSequencerTrack_SetMusicItemAtGridSquare");
static_assert(offsetof(StepSequencerTrack_SetMusicItemAtGridSquare, gridSquareIndex) == 0x000000, "Member 'StepSequencerTrack_SetMusicItemAtGridSquare::gridSquareIndex' has a wrong offset!");
static_assert(offsetof(StepSequencerTrack_SetMusicItemAtGridSquare, MusicItem) == 0x000008, "Member 'StepSequencerTrack_SetMusicItemAtGridSquare::MusicItem' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.SetMusicItemForWholeTrack
// 0x0010 (0x0010 - 0x0000)
struct StepSequencerTrack_SetMusicItemForWholeTrack final
{
public:
	TScriptInterface<class IMidiMusicInterface>   MusicItem;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_SetMusicItemForWholeTrack) == 0x000008, "Wrong alignment on StepSequencerTrack_SetMusicItemForWholeTrack");
static_assert(sizeof(StepSequencerTrack_SetMusicItemForWholeTrack) == 0x000010, "Wrong size on StepSequencerTrack_SetMusicItemForWholeTrack");
static_assert(offsetof(StepSequencerTrack_SetMusicItemForWholeTrack, MusicItem) == 0x000000, "Member 'StepSequencerTrack_SetMusicItemForWholeTrack::MusicItem' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.SetMusicItemsInTrack
// 0x0010 (0x0010 - 0x0000)
struct StepSequencerTrack_SetMusicItemsInTrack final
{
public:
	TArray<TScriptInterface<class IMidiMusicInterface>> musicItems;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_SetMusicItemsInTrack) == 0x000008, "Wrong alignment on StepSequencerTrack_SetMusicItemsInTrack");
static_assert(sizeof(StepSequencerTrack_SetMusicItemsInTrack) == 0x000010, "Wrong size on StepSequencerTrack_SetMusicItemsInTrack");
static_assert(offsetof(StepSequencerTrack_SetMusicItemsInTrack, musicItems) == 0x000000, "Member 'StepSequencerTrack_SetMusicItemsInTrack::musicItems' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.SetNumPages
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerTrack_SetNumPages final
{
public:
	int32                                         inNumPages;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_SetNumPages) == 0x000004, "Wrong alignment on StepSequencerTrack_SetNumPages");
static_assert(sizeof(StepSequencerTrack_SetNumPages) == 0x000004, "Wrong size on StepSequencerTrack_SetNumPages");
static_assert(offsetof(StepSequencerTrack_SetNumPages, inNumPages) == 0x000000, "Member 'StepSequencerTrack_SetNumPages::inNumPages' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.ToggleGridSquareState
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerTrack_ToggleGridSquareState final
{
public:
	int32                                         gridSquareIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_ToggleGridSquareState) == 0x000004, "Wrong alignment on StepSequencerTrack_ToggleGridSquareState");
static_assert(sizeof(StepSequencerTrack_ToggleGridSquareState) == 0x000004, "Wrong size on StepSequencerTrack_ToggleGridSquareState");
static_assert(offsetof(StepSequencerTrack_ToggleGridSquareState, gridSquareIndex) == 0x000000, "Member 'StepSequencerTrack_ToggleGridSquareState::gridSquareIndex' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.FindGridSquareAtIndex
// 0x0010 (0x0010 - 0x0000)
struct StepSequencerTrack_FindGridSquareAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMidiMusicTimeSlot*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_FindGridSquareAtIndex) == 0x000008, "Wrong alignment on StepSequencerTrack_FindGridSquareAtIndex");
static_assert(sizeof(StepSequencerTrack_FindGridSquareAtIndex) == 0x000010, "Wrong size on StepSequencerTrack_FindGridSquareAtIndex");
static_assert(offsetof(StepSequencerTrack_FindGridSquareAtIndex, Index_0) == 0x000000, "Member 'StepSequencerTrack_FindGridSquareAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(StepSequencerTrack_FindGridSquareAtIndex, ReturnValue) == 0x000008, "Member 'StepSequencerTrack_FindGridSquareAtIndex::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.FindGridSquareAtTick
// 0x0010 (0x0010 - 0x0000)
struct StepSequencerTrack_FindGridSquareAtTick final
{
public:
	int32                                         Tick;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMidiMusicTimeSlot*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_FindGridSquareAtTick) == 0x000008, "Wrong alignment on StepSequencerTrack_FindGridSquareAtTick");
static_assert(sizeof(StepSequencerTrack_FindGridSquareAtTick) == 0x000010, "Wrong size on StepSequencerTrack_FindGridSquareAtTick");
static_assert(offsetof(StepSequencerTrack_FindGridSquareAtTick, Tick) == 0x000000, "Member 'StepSequencerTrack_FindGridSquareAtTick::Tick' has a wrong offset!");
static_assert(offsetof(StepSequencerTrack_FindGridSquareAtTick, ReturnValue) == 0x000008, "Member 'StepSequencerTrack_FindGridSquareAtTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.GetEndTick
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerTrack_GetEndTick final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_GetEndTick) == 0x000004, "Wrong alignment on StepSequencerTrack_GetEndTick");
static_assert(sizeof(StepSequencerTrack_GetEndTick) == 0x000004, "Wrong size on StepSequencerTrack_GetEndTick");
static_assert(offsetof(StepSequencerTrack_GetEndTick, ReturnValue) == 0x000000, "Member 'StepSequencerTrack_GetEndTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.GetGridSquareBeats
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerTrack_GetGridSquareBeats final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_GetGridSquareBeats) == 0x000004, "Wrong alignment on StepSequencerTrack_GetGridSquareBeats");
static_assert(sizeof(StepSequencerTrack_GetGridSquareBeats) == 0x000004, "Wrong size on StepSequencerTrack_GetGridSquareBeats");
static_assert(offsetof(StepSequencerTrack_GetGridSquareBeats, ReturnValue) == 0x000000, "Member 'StepSequencerTrack_GetGridSquareBeats::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.GetGridSquareState
// 0x0008 (0x0008 - 0x0000)
struct StepSequencerTrack_GetGridSquareState final
{
public:
	int32                                         gridSquareIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StepSequencerTrack_GetGridSquareState) == 0x000004, "Wrong alignment on StepSequencerTrack_GetGridSquareState");
static_assert(sizeof(StepSequencerTrack_GetGridSquareState) == 0x000008, "Wrong size on StepSequencerTrack_GetGridSquareState");
static_assert(offsetof(StepSequencerTrack_GetGridSquareState, gridSquareIndex) == 0x000000, "Member 'StepSequencerTrack_GetGridSquareState::gridSquareIndex' has a wrong offset!");
static_assert(offsetof(StepSequencerTrack_GetGridSquareState, ReturnValue) == 0x000004, "Member 'StepSequencerTrack_GetGridSquareState::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.GetNumGridSquares
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerTrack_GetNumGridSquares final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_GetNumGridSquares) == 0x000004, "Wrong alignment on StepSequencerTrack_GetNumGridSquares");
static_assert(sizeof(StepSequencerTrack_GetNumGridSquares) == 0x000004, "Wrong size on StepSequencerTrack_GetNumGridSquares");
static_assert(offsetof(StepSequencerTrack_GetNumGridSquares, ReturnValue) == 0x000000, "Member 'StepSequencerTrack_GetNumGridSquares::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerTrack.TicksPerSquare
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerTrack_TicksPerSquare final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerTrack_TicksPerSquare) == 0x000004, "Wrong alignment on StepSequencerTrack_TicksPerSquare");
static_assert(sizeof(StepSequencerTrack_TicksPerSquare) == 0x000004, "Wrong size on StepSequencerTrack_TicksPerSquare");
static_assert(offsetof(StepSequencerTrack_TicksPerSquare, ReturnValue) == 0x000000, "Member 'StepSequencerTrack_TicksPerSquare::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.Continue
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_Continue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_Continue) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_Continue");
static_assert(sizeof(HarmonixPlayerComponentBase_Continue) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_Continue");
static_assert(offsetof(HarmonixPlayerComponentBase_Continue, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_Continue::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.FadeAndStop
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPlayerComponentBase_FadeAndStop final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_FadeAndStop) == 0x000004, "Wrong alignment on HarmonixPlayerComponentBase_FadeAndStop");
static_assert(sizeof(HarmonixPlayerComponentBase_FadeAndStop) == 0x000004, "Wrong size on HarmonixPlayerComponentBase_FadeAndStop");
static_assert(offsetof(HarmonixPlayerComponentBase_FadeAndStop, Seconds) == 0x000000, "Member 'HarmonixPlayerComponentBase_FadeAndStop::Seconds' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.GetHarmonixHandle
// 0x0008 (0x0008 - 0x0000)
struct HarmonixPlayerComponentBase_GetHarmonixHandle final
{
public:
	class UHarmonixHandle*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_GetHarmonixHandle) == 0x000008, "Wrong alignment on HarmonixPlayerComponentBase_GetHarmonixHandle");
static_assert(sizeof(HarmonixPlayerComponentBase_GetHarmonixHandle) == 0x000008, "Wrong size on HarmonixPlayerComponentBase_GetHarmonixHandle");
static_assert(offsetof(HarmonixPlayerComponentBase_GetHarmonixHandle, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_GetHarmonixHandle::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.GetSyncClip
// 0x0010 (0x0010 - 0x0000)
struct HarmonixPlayerComponentBase_GetSyncClip final
{
public:
	class UHarmonixPlayerComponentBase*           syncClip_0;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMusicPlayerComponentBase*              ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_GetSyncClip) == 0x000008, "Wrong alignment on HarmonixPlayerComponentBase_GetSyncClip");
static_assert(sizeof(HarmonixPlayerComponentBase_GetSyncClip) == 0x000010, "Wrong size on HarmonixPlayerComponentBase_GetSyncClip");
static_assert(offsetof(HarmonixPlayerComponentBase_GetSyncClip, syncClip_0) == 0x000000, "Member 'HarmonixPlayerComponentBase_GetSyncClip::syncClip_0' has a wrong offset!");
static_assert(offsetof(HarmonixPlayerComponentBase_GetSyncClip, ReturnValue) == 0x000008, "Member 'HarmonixPlayerComponentBase_GetSyncClip::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.Pause
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_Pause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_Pause) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_Pause");
static_assert(sizeof(HarmonixPlayerComponentBase_Pause) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_Pause");
static_assert(offsetof(HarmonixPlayerComponentBase_Pause, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_Pause::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.SetGain
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPlayerComponentBase_SetGain final
{
public:
	float                                         Gain_0;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_SetGain) == 0x000004, "Wrong alignment on HarmonixPlayerComponentBase_SetGain");
static_assert(sizeof(HarmonixPlayerComponentBase_SetGain) == 0x000004, "Wrong size on HarmonixPlayerComponentBase_SetGain");
static_assert(offsetof(HarmonixPlayerComponentBase_SetGain, Gain_0) == 0x000000, "Member 'HarmonixPlayerComponentBase_SetGain::Gain_0' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.SetMute
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_SetMute final
{
public:
	bool                                          mute_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_SetMute) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_SetMute");
static_assert(sizeof(HarmonixPlayerComponentBase_SetMute) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_SetMute");
static_assert(offsetof(HarmonixPlayerComponentBase_SetMute, mute_0) == 0x000000, "Member 'HarmonixPlayerComponentBase_SetMute::mute_0' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.SetParameterValue
// 0x000C (0x000C - 0x0000)
struct HarmonixPlayerComponentBase_SetParameterValue final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixPlayerComponentBase_SetParameterValue) == 0x000004, "Wrong alignment on HarmonixPlayerComponentBase_SetParameterValue");
static_assert(sizeof(HarmonixPlayerComponentBase_SetParameterValue) == 0x00000C, "Wrong size on HarmonixPlayerComponentBase_SetParameterValue");
static_assert(offsetof(HarmonixPlayerComponentBase_SetParameterValue, Name_0) == 0x000000, "Member 'HarmonixPlayerComponentBase_SetParameterValue::Name_0' has a wrong offset!");
static_assert(offsetof(HarmonixPlayerComponentBase_SetParameterValue, Value) == 0x000004, "Member 'HarmonixPlayerComponentBase_SetParameterValue::Value' has a wrong offset!");
static_assert(offsetof(HarmonixPlayerComponentBase_SetParameterValue, ReturnValue) == 0x000008, "Member 'HarmonixPlayerComponentBase_SetParameterValue::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.SetPlayEmitterFindMethod
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_SetPlayEmitterFindMethod final
{
public:
	EPlayEmitterFindMethod                        Method;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_SetPlayEmitterFindMethod) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_SetPlayEmitterFindMethod");
static_assert(sizeof(HarmonixPlayerComponentBase_SetPlayEmitterFindMethod) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_SetPlayEmitterFindMethod");
static_assert(offsetof(HarmonixPlayerComponentBase_SetPlayEmitterFindMethod, Method) == 0x000000, "Member 'HarmonixPlayerComponentBase_SetPlayEmitterFindMethod::Method' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.SetStartPosition
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_SetStartPosition final
{
public:
	EAudioClipStartPosition                       Pos;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_SetStartPosition) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_SetStartPosition");
static_assert(sizeof(HarmonixPlayerComponentBase_SetStartPosition) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_SetStartPosition");
static_assert(offsetof(HarmonixPlayerComponentBase_SetStartPosition, Pos) == 0x000000, "Member 'HarmonixPlayerComponentBase_SetStartPosition::Pos' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.SetSyncClip
// 0x0008 (0x0008 - 0x0000)
struct HarmonixPlayerComponentBase_SetSyncClip final
{
public:
	class UMusicPlayerComponentBase*              syncClip_0;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_SetSyncClip) == 0x000008, "Wrong alignment on HarmonixPlayerComponentBase_SetSyncClip");
static_assert(sizeof(HarmonixPlayerComponentBase_SetSyncClip) == 0x000008, "Wrong size on HarmonixPlayerComponentBase_SetSyncClip");
static_assert(offsetof(HarmonixPlayerComponentBase_SetSyncClip, syncClip_0) == 0x000000, "Member 'HarmonixPlayerComponentBase_SetSyncClip::syncClip_0' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.SetSyncEmitterSpec
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_SetSyncEmitterSpec final
{
public:
	ESyncEmitterFindMethod                        syncEmitterSpec_0;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_SetSyncEmitterSpec) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_SetSyncEmitterSpec");
static_assert(sizeof(HarmonixPlayerComponentBase_SetSyncEmitterSpec) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_SetSyncEmitterSpec");
static_assert(offsetof(HarmonixPlayerComponentBase_SetSyncEmitterSpec, syncEmitterSpec_0) == 0x000000, "Member 'HarmonixPlayerComponentBase_SetSyncEmitterSpec::syncEmitterSpec_0' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.SetTickOffset
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPlayerComponentBase_SetTickOffset final
{
public:
	int32                                         Tick;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_SetTickOffset) == 0x000004, "Wrong alignment on HarmonixPlayerComponentBase_SetTickOffset");
static_assert(sizeof(HarmonixPlayerComponentBase_SetTickOffset) == 0x000004, "Wrong size on HarmonixPlayerComponentBase_SetTickOffset");
static_assert(offsetof(HarmonixPlayerComponentBase_SetTickOffset, Tick) == 0x000000, "Member 'HarmonixPlayerComponentBase_SetTickOffset::Tick' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.SetVolume
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPlayerComponentBase_SetVolume final
{
public:
	float                                         Volume_0;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_SetVolume) == 0x000004, "Wrong alignment on HarmonixPlayerComponentBase_SetVolume");
static_assert(sizeof(HarmonixPlayerComponentBase_SetVolume) == 0x000004, "Wrong size on HarmonixPlayerComponentBase_SetVolume");
static_assert(offsetof(HarmonixPlayerComponentBase_SetVolume, Volume_0) == 0x000000, "Member 'HarmonixPlayerComponentBase_SetVolume::Volume_0' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.Stop
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_Stop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_Stop) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_Stop");
static_assert(sizeof(HarmonixPlayerComponentBase_Stop) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_Stop");
static_assert(offsetof(HarmonixPlayerComponentBase_Stop, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_Stop::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.Trigger
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_Trigger final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_Trigger) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_Trigger");
static_assert(sizeof(HarmonixPlayerComponentBase_Trigger) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_Trigger");
static_assert(offsetof(HarmonixPlayerComponentBase_Trigger, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_Trigger::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.GetElapsedMs
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPlayerComponentBase_GetElapsedMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_GetElapsedMs) == 0x000004, "Wrong alignment on HarmonixPlayerComponentBase_GetElapsedMs");
static_assert(sizeof(HarmonixPlayerComponentBase_GetElapsedMs) == 0x000004, "Wrong size on HarmonixPlayerComponentBase_GetElapsedMs");
static_assert(offsetof(HarmonixPlayerComponentBase_GetElapsedMs, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_GetElapsedMs::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.GetParameterValue
// 0x000C (0x000C - 0x0000)
struct HarmonixPlayerComponentBase_GetParameterValue final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixPlayerComponentBase_GetParameterValue) == 0x000004, "Wrong alignment on HarmonixPlayerComponentBase_GetParameterValue");
static_assert(sizeof(HarmonixPlayerComponentBase_GetParameterValue) == 0x00000C, "Wrong size on HarmonixPlayerComponentBase_GetParameterValue");
static_assert(offsetof(HarmonixPlayerComponentBase_GetParameterValue, Name_0) == 0x000000, "Member 'HarmonixPlayerComponentBase_GetParameterValue::Name_0' has a wrong offset!");
static_assert(offsetof(HarmonixPlayerComponentBase_GetParameterValue, Value) == 0x000004, "Member 'HarmonixPlayerComponentBase_GetParameterValue::Value' has a wrong offset!");
static_assert(offsetof(HarmonixPlayerComponentBase_GetParameterValue, ReturnValue) == 0x000008, "Member 'HarmonixPlayerComponentBase_GetParameterValue::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.GetSecsUntilNextPlay
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPlayerComponentBase_GetSecsUntilNextPlay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_GetSecsUntilNextPlay) == 0x000004, "Wrong alignment on HarmonixPlayerComponentBase_GetSecsUntilNextPlay");
static_assert(sizeof(HarmonixPlayerComponentBase_GetSecsUntilNextPlay) == 0x000004, "Wrong size on HarmonixPlayerComponentBase_GetSecsUntilNextPlay");
static_assert(offsetof(HarmonixPlayerComponentBase_GetSecsUntilNextPlay, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_GetSecsUntilNextPlay::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.GetStartPosition
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_GetStartPosition final
{
public:
	EAudioClipStartPosition                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_GetStartPosition) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_GetStartPosition");
static_assert(sizeof(HarmonixPlayerComponentBase_GetStartPosition) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_GetStartPosition");
static_assert(offsetof(HarmonixPlayerComponentBase_GetStartPosition, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_GetStartPosition::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.GetSyncEmitterSpec
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_GetSyncEmitterSpec final
{
public:
	ESyncEmitterFindMethod                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_GetSyncEmitterSpec) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_GetSyncEmitterSpec");
static_assert(sizeof(HarmonixPlayerComponentBase_GetSyncEmitterSpec) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_GetSyncEmitterSpec");
static_assert(offsetof(HarmonixPlayerComponentBase_GetSyncEmitterSpec, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_GetSyncEmitterSpec::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.GetTickOffset
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPlayerComponentBase_GetTickOffset final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_GetTickOffset) == 0x000004, "Wrong alignment on HarmonixPlayerComponentBase_GetTickOffset");
static_assert(sizeof(HarmonixPlayerComponentBase_GetTickOffset) == 0x000004, "Wrong size on HarmonixPlayerComponentBase_GetTickOffset");
static_assert(offsetof(HarmonixPlayerComponentBase_GetTickOffset, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_GetTickOffset::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_IsFinished) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_IsFinished");
static_assert(sizeof(HarmonixPlayerComponentBase_IsFinished) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_IsFinished");
static_assert(offsetof(HarmonixPlayerComponentBase_IsFinished, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_IsFinished::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.IsNotPlaying
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_IsNotPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_IsNotPlaying) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_IsNotPlaying");
static_assert(sizeof(HarmonixPlayerComponentBase_IsNotPlaying) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_IsNotPlaying");
static_assert(offsetof(HarmonixPlayerComponentBase_IsNotPlaying, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_IsNotPlaying::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_IsPaused) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_IsPaused");
static_assert(sizeof(HarmonixPlayerComponentBase_IsPaused) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_IsPaused");
static_assert(offsetof(HarmonixPlayerComponentBase_IsPaused, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_IsPaused::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_IsPlaying) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_IsPlaying");
static_assert(sizeof(HarmonixPlayerComponentBase_IsPlaying) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_IsPlaying");
static_assert(offsetof(HarmonixPlayerComponentBase_IsPlaying, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_IsPlaying::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.IsStarted
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_IsStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_IsStarted) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_IsStarted");
static_assert(sizeof(HarmonixPlayerComponentBase_IsStarted) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_IsStarted");
static_assert(offsetof(HarmonixPlayerComponentBase_IsStarted, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_IsStarted::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPlayerComponentBase.IsTriggered
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPlayerComponentBase_IsTriggered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPlayerComponentBase_IsTriggered) == 0x000001, "Wrong alignment on HarmonixPlayerComponentBase_IsTriggered");
static_assert(sizeof(HarmonixPlayerComponentBase_IsTriggered) == 0x000001, "Wrong size on HarmonixPlayerComponentBase_IsTriggered");
static_assert(offsetof(HarmonixPlayerComponentBase_IsTriggered, ReturnValue) == 0x000000, "Member 'HarmonixPlayerComponentBase_IsTriggered::ReturnValue' has a wrong offset!");

// Function HmxAudio.RepeatableMusicalAssetPlayerComponentBase.GetContinuationMode
// 0x0001 (0x0001 - 0x0000)
struct RepeatableMusicalAssetPlayerComponentBase_GetContinuationMode final
{
public:
	EFAudioContinuationMode                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RepeatableMusicalAssetPlayerComponentBase_GetContinuationMode) == 0x000001, "Wrong alignment on RepeatableMusicalAssetPlayerComponentBase_GetContinuationMode");
static_assert(sizeof(RepeatableMusicalAssetPlayerComponentBase_GetContinuationMode) == 0x000001, "Wrong size on RepeatableMusicalAssetPlayerComponentBase_GetContinuationMode");
static_assert(offsetof(RepeatableMusicalAssetPlayerComponentBase_GetContinuationMode, ReturnValue) == 0x000000, "Member 'RepeatableMusicalAssetPlayerComponentBase_GetContinuationMode::ReturnValue' has a wrong offset!");

// Function HmxAudio.SynthesizerComponentBase.AllNotesOffQuantized
// 0x0038 (0x0038 - 0x0000)
struct SynthesizerComponentBase_AllNotesOffQuantized final
{
public:
	class UQuartzClockHandle*                     InClockHandle;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuartzQuantizationBoundary            InQuantizationBoundary;                            // 0x0008(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> InDelegate;                                        // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SynthesizerComponentBase_AllNotesOffQuantized) == 0x000008, "Wrong alignment on SynthesizerComponentBase_AllNotesOffQuantized");
static_assert(sizeof(SynthesizerComponentBase_AllNotesOffQuantized) == 0x000038, "Wrong size on SynthesizerComponentBase_AllNotesOffQuantized");
static_assert(offsetof(SynthesizerComponentBase_AllNotesOffQuantized, InClockHandle) == 0x000000, "Member 'SynthesizerComponentBase_AllNotesOffQuantized::InClockHandle' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_AllNotesOffQuantized, InQuantizationBoundary) == 0x000008, "Member 'SynthesizerComponentBase_AllNotesOffQuantized::InQuantizationBoundary' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_AllNotesOffQuantized, InDelegate) == 0x000028, "Member 'SynthesizerComponentBase_AllNotesOffQuantized::InDelegate' has a wrong offset!");

// Function HmxAudio.SynthesizerComponentBase.GetController
// 0x0014 (0x0014 - 0x0000)
struct SynthesizerComponentBase_GetController final
{
public:
	int32                                         midiChannel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMidiControllerID                             ControllerId;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCCSetting                             ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthesizerComponentBase_GetController) == 0x000004, "Wrong alignment on SynthesizerComponentBase_GetController");
static_assert(sizeof(SynthesizerComponentBase_GetController) == 0x000014, "Wrong size on SynthesizerComponentBase_GetController");
static_assert(offsetof(SynthesizerComponentBase_GetController, midiChannel) == 0x000000, "Member 'SynthesizerComponentBase_GetController::midiChannel' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_GetController, ControllerId) == 0x000004, "Member 'SynthesizerComponentBase_GetController::ControllerId' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_GetController, ReturnValue) == 0x000008, "Member 'SynthesizerComponentBase_GetController::ReturnValue' has a wrong offset!");

// Function HmxAudio.SynthesizerComponentBase.GetPitchbend
// 0x000C (0x000C - 0x0000)
struct SynthesizerComponentBase_GetPitchbend final
{
public:
	int32                                         midiChannel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPBSetting                             ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthesizerComponentBase_GetPitchbend) == 0x000004, "Wrong alignment on SynthesizerComponentBase_GetPitchbend");
static_assert(sizeof(SynthesizerComponentBase_GetPitchbend) == 0x00000C, "Wrong size on SynthesizerComponentBase_GetPitchbend");
static_assert(offsetof(SynthesizerComponentBase_GetPitchbend, midiChannel) == 0x000000, "Member 'SynthesizerComponentBase_GetPitchbend::midiChannel' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_GetPitchbend, ReturnValue) == 0x000004, "Member 'SynthesizerComponentBase_GetPitchbend::ReturnValue' has a wrong offset!");

// Function HmxAudio.SynthesizerComponentBase.GetSynthHandle
// 0x0008 (0x0008 - 0x0000)
struct SynthesizerComponentBase_GetSynthHandle final
{
public:
	class UInstrumentHandle*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthesizerComponentBase_GetSynthHandle) == 0x000008, "Wrong alignment on SynthesizerComponentBase_GetSynthHandle");
static_assert(sizeof(SynthesizerComponentBase_GetSynthHandle) == 0x000008, "Wrong size on SynthesizerComponentBase_GetSynthHandle");
static_assert(offsetof(SynthesizerComponentBase_GetSynthHandle, ReturnValue) == 0x000000, "Member 'SynthesizerComponentBase_GetSynthHandle::ReturnValue' has a wrong offset!");

// Function HmxAudio.SynthesizerComponentBase.NoteOff
// 0x0008 (0x0008 - 0x0000)
struct SynthesizerComponentBase_NoteOff final
{
public:
	struct FMidiNote                              Note_0;                                            // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         midiCh;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthesizerComponentBase_NoteOff) == 0x000004, "Wrong alignment on SynthesizerComponentBase_NoteOff");
static_assert(sizeof(SynthesizerComponentBase_NoteOff) == 0x000008, "Wrong size on SynthesizerComponentBase_NoteOff");
static_assert(offsetof(SynthesizerComponentBase_NoteOff, Note_0) == 0x000000, "Member 'SynthesizerComponentBase_NoteOff::Note_0' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOff, midiCh) == 0x000004, "Member 'SynthesizerComponentBase_NoteOff::midiCh' has a wrong offset!");

// Function HmxAudio.SynthesizerComponentBase.NoteOffQuantized
// 0x0040 (0x0040 - 0x0000)
struct SynthesizerComponentBase_NoteOffQuantized final
{
public:
	class UQuartzClockHandle*                     InClockHandle;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuartzQuantizationBoundary            InQuantizationBoundary;                            // 0x0008(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> InDelegate;                                        // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMidiNote                              Note_0;                                            // 0x0034(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         midiCh;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SynthesizerComponentBase_NoteOffQuantized) == 0x000008, "Wrong alignment on SynthesizerComponentBase_NoteOffQuantized");
static_assert(sizeof(SynthesizerComponentBase_NoteOffQuantized) == 0x000040, "Wrong size on SynthesizerComponentBase_NoteOffQuantized");
static_assert(offsetof(SynthesizerComponentBase_NoteOffQuantized, InClockHandle) == 0x000000, "Member 'SynthesizerComponentBase_NoteOffQuantized::InClockHandle' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOffQuantized, InQuantizationBoundary) == 0x000008, "Member 'SynthesizerComponentBase_NoteOffQuantized::InQuantizationBoundary' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOffQuantized, InDelegate) == 0x000028, "Member 'SynthesizerComponentBase_NoteOffQuantized::InDelegate' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOffQuantized, Note_0) == 0x000034, "Member 'SynthesizerComponentBase_NoteOffQuantized::Note_0' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOffQuantized, midiCh) == 0x000038, "Member 'SynthesizerComponentBase_NoteOffQuantized::midiCh' has a wrong offset!");

// Function HmxAudio.SynthesizerComponentBase.NoteOn
// 0x0008 (0x0008 - 0x0000)
struct SynthesizerComponentBase_NoteOn final
{
public:
	struct FMidiNote                              Note_0;                                            // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Velocity_0;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthesizerComponentBase_NoteOn) == 0x000004, "Wrong alignment on SynthesizerComponentBase_NoteOn");
static_assert(sizeof(SynthesizerComponentBase_NoteOn) == 0x000008, "Wrong size on SynthesizerComponentBase_NoteOn");
static_assert(offsetof(SynthesizerComponentBase_NoteOn, Note_0) == 0x000000, "Member 'SynthesizerComponentBase_NoteOn::Note_0' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOn, Velocity_0) == 0x000004, "Member 'SynthesizerComponentBase_NoteOn::Velocity_0' has a wrong offset!");

// Function HmxAudio.SynthesizerComponentBase.NoteOnChannel
// 0x000C (0x000C - 0x0000)
struct SynthesizerComponentBase_NoteOnChannel final
{
public:
	struct FMidiNote                              Note_0;                                            // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Velocity_0;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         midiCh;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthesizerComponentBase_NoteOnChannel) == 0x000004, "Wrong alignment on SynthesizerComponentBase_NoteOnChannel");
static_assert(sizeof(SynthesizerComponentBase_NoteOnChannel) == 0x00000C, "Wrong size on SynthesizerComponentBase_NoteOnChannel");
static_assert(offsetof(SynthesizerComponentBase_NoteOnChannel, Note_0) == 0x000000, "Member 'SynthesizerComponentBase_NoteOnChannel::Note_0' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOnChannel, Velocity_0) == 0x000004, "Member 'SynthesizerComponentBase_NoteOnChannel::Velocity_0' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOnChannel, midiCh) == 0x000008, "Member 'SynthesizerComponentBase_NoteOnChannel::midiCh' has a wrong offset!");

// Function HmxAudio.SynthesizerComponentBase.NoteOnChannelWithOffset
// 0x0010 (0x0010 - 0x0000)
struct SynthesizerComponentBase_NoteOnChannelWithOffset final
{
public:
	struct FMidiNote                              Note_0;                                            // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Velocity_0;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         msOffset;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         midiCh;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthesizerComponentBase_NoteOnChannelWithOffset) == 0x000004, "Wrong alignment on SynthesizerComponentBase_NoteOnChannelWithOffset");
static_assert(sizeof(SynthesizerComponentBase_NoteOnChannelWithOffset) == 0x000010, "Wrong size on SynthesizerComponentBase_NoteOnChannelWithOffset");
static_assert(offsetof(SynthesizerComponentBase_NoteOnChannelWithOffset, Note_0) == 0x000000, "Member 'SynthesizerComponentBase_NoteOnChannelWithOffset::Note_0' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOnChannelWithOffset, Velocity_0) == 0x000004, "Member 'SynthesizerComponentBase_NoteOnChannelWithOffset::Velocity_0' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOnChannelWithOffset, msOffset) == 0x000008, "Member 'SynthesizerComponentBase_NoteOnChannelWithOffset::msOffset' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOnChannelWithOffset, midiCh) == 0x00000C, "Member 'SynthesizerComponentBase_NoteOnChannelWithOffset::midiCh' has a wrong offset!");

// Function HmxAudio.SynthesizerComponentBase.NoteOnQuantized
// 0x0040 (0x0040 - 0x0000)
struct SynthesizerComponentBase_NoteOnQuantized final
{
public:
	class UQuartzClockHandle*                     InClockHandle;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuartzQuantizationBoundary            InQuantizationBoundary;                            // 0x0008(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> InDelegate;                                        // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMidiNote                              Note_0;                                            // 0x0034(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Velocity_0;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         midiCh;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthesizerComponentBase_NoteOnQuantized) == 0x000008, "Wrong alignment on SynthesizerComponentBase_NoteOnQuantized");
static_assert(sizeof(SynthesizerComponentBase_NoteOnQuantized) == 0x000040, "Wrong size on SynthesizerComponentBase_NoteOnQuantized");
static_assert(offsetof(SynthesizerComponentBase_NoteOnQuantized, InClockHandle) == 0x000000, "Member 'SynthesizerComponentBase_NoteOnQuantized::InClockHandle' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOnQuantized, InQuantizationBoundary) == 0x000008, "Member 'SynthesizerComponentBase_NoteOnQuantized::InQuantizationBoundary' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOnQuantized, InDelegate) == 0x000028, "Member 'SynthesizerComponentBase_NoteOnQuantized::InDelegate' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOnQuantized, Note_0) == 0x000034, "Member 'SynthesizerComponentBase_NoteOnQuantized::Note_0' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOnQuantized, Velocity_0) == 0x000038, "Member 'SynthesizerComponentBase_NoteOnQuantized::Velocity_0' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOnQuantized, midiCh) == 0x00003C, "Member 'SynthesizerComponentBase_NoteOnQuantized::midiCh' has a wrong offset!");

// Function HmxAudio.SynthesizerComponentBase.NoteOnWithOffset
// 0x000C (0x000C - 0x0000)
struct SynthesizerComponentBase_NoteOnWithOffset final
{
public:
	struct FMidiNote                              Note_0;                                            // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Velocity_0;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         msOffset;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthesizerComponentBase_NoteOnWithOffset) == 0x000004, "Wrong alignment on SynthesizerComponentBase_NoteOnWithOffset");
static_assert(sizeof(SynthesizerComponentBase_NoteOnWithOffset) == 0x00000C, "Wrong size on SynthesizerComponentBase_NoteOnWithOffset");
static_assert(offsetof(SynthesizerComponentBase_NoteOnWithOffset, Note_0) == 0x000000, "Member 'SynthesizerComponentBase_NoteOnWithOffset::Note_0' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOnWithOffset, Velocity_0) == 0x000004, "Member 'SynthesizerComponentBase_NoteOnWithOffset::Velocity_0' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_NoteOnWithOffset, msOffset) == 0x000008, "Member 'SynthesizerComponentBase_NoteOnWithOffset::msOffset' has a wrong offset!");

// Function HmxAudio.SynthesizerComponentBase.SetController
// 0x000C (0x000C - 0x0000)
struct SynthesizerComponentBase_SetController final
{
public:
	int32                                         midiChannel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMidiControllerID                             ControllerId;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthesizerComponentBase_SetController) == 0x000004, "Wrong alignment on SynthesizerComponentBase_SetController");
static_assert(sizeof(SynthesizerComponentBase_SetController) == 0x00000C, "Wrong size on SynthesizerComponentBase_SetController");
static_assert(offsetof(SynthesizerComponentBase_SetController, midiChannel) == 0x000000, "Member 'SynthesizerComponentBase_SetController::midiChannel' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_SetController, ControllerId) == 0x000004, "Member 'SynthesizerComponentBase_SetController::ControllerId' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_SetController, Value) == 0x000008, "Member 'SynthesizerComponentBase_SetController::Value' has a wrong offset!");

// Function HmxAudio.SynthesizerComponentBase.SetNote
// 0x0001 (0x0001 - 0x0000)
struct SynthesizerComponentBase_SetNote final
{
public:
	struct FMidiNote                              Note_0;                                            // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthesizerComponentBase_SetNote) == 0x000001, "Wrong alignment on SynthesizerComponentBase_SetNote");
static_assert(sizeof(SynthesizerComponentBase_SetNote) == 0x000001, "Wrong size on SynthesizerComponentBase_SetNote");
static_assert(offsetof(SynthesizerComponentBase_SetNote, Note_0) == 0x000000, "Member 'SynthesizerComponentBase_SetNote::Note_0' has a wrong offset!");

// Function HmxAudio.SynthesizerComponentBase.SetPitchBend
// 0x0008 (0x0008 - 0x0000)
struct SynthesizerComponentBase_SetPitchBend final
{
public:
	int32                                         midiChannel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthesizerComponentBase_SetPitchBend) == 0x000004, "Wrong alignment on SynthesizerComponentBase_SetPitchBend");
static_assert(sizeof(SynthesizerComponentBase_SetPitchBend) == 0x000008, "Wrong size on SynthesizerComponentBase_SetPitchBend");
static_assert(offsetof(SynthesizerComponentBase_SetPitchBend, midiChannel) == 0x000000, "Member 'SynthesizerComponentBase_SetPitchBend::midiChannel' has a wrong offset!");
static_assert(offsetof(SynthesizerComponentBase_SetPitchBend, Value) == 0x000004, "Member 'SynthesizerComponentBase_SetPitchBend::Value' has a wrong offset!");

// Function HmxAudio.SynthesizerComponentBase.SetVelocity
// 0x0004 (0x0004 - 0x0000)
struct SynthesizerComponentBase_SetVelocity final
{
public:
	int32                                         Velocity_0;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthesizerComponentBase_SetVelocity) == 0x000004, "Wrong alignment on SynthesizerComponentBase_SetVelocity");
static_assert(sizeof(SynthesizerComponentBase_SetVelocity) == 0x000004, "Wrong size on SynthesizerComponentBase_SetVelocity");
static_assert(offsetof(SynthesizerComponentBase_SetVelocity, Velocity_0) == 0x000000, "Member 'SynthesizerComponentBase_SetVelocity::Velocity_0' has a wrong offset!");

// Function HmxAudio.DaggerSynthComponent.SetDaggerPatch
// 0x0028 (0x0028 - 0x0000)
struct DaggerSynthComponent_SetDaggerPatch final
{
public:
	TSoftObjectPtr<class UDaggerPatchAsset>       Patch;                                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaggerSynthComponent_SetDaggerPatch) == 0x000008, "Wrong alignment on DaggerSynthComponent_SetDaggerPatch");
static_assert(sizeof(DaggerSynthComponent_SetDaggerPatch) == 0x000028, "Wrong size on DaggerSynthComponent_SetDaggerPatch");
static_assert(offsetof(DaggerSynthComponent_SetDaggerPatch, Patch) == 0x000000, "Member 'DaggerSynthComponent_SetDaggerPatch::Patch' has a wrong offset!");

// Function HmxAudio.FusionSynthComponent.SetFusionPatch
// 0x0028 (0x0028 - 0x0000)
struct FusionSynthComponent_SetFusionPatch final
{
public:
	TSoftObjectPtr<class UFusionPatchAsset>       Patch;                                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionSynthComponent_SetFusionPatch) == 0x000008, "Wrong alignment on FusionSynthComponent_SetFusionPatch");
static_assert(sizeof(FusionSynthComponent_SetFusionPatch) == 0x000028, "Wrong size on FusionSynthComponent_SetFusionPatch");
static_assert(offsetof(FusionSynthComponent_SetFusionPatch, Patch) == 0x000000, "Member 'FusionSynthComponent_SetFusionPatch::Patch' has a wrong offset!");

// Function HmxAudio.MediaMusicTimelineGenerator.CalculateSongPosAtTick
// 0x0050 (0x0050 - 0x0000)
struct MediaMusicTimelineGenerator_CalculateSongPosAtTick final
{
public:
	float                                         Tick;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSongPos                               ReturnValue;                                       // 0x0004(0x004C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaMusicTimelineGenerator_CalculateSongPosAtTick) == 0x000004, "Wrong alignment on MediaMusicTimelineGenerator_CalculateSongPosAtTick");
static_assert(sizeof(MediaMusicTimelineGenerator_CalculateSongPosAtTick) == 0x000050, "Wrong size on MediaMusicTimelineGenerator_CalculateSongPosAtTick");
static_assert(offsetof(MediaMusicTimelineGenerator_CalculateSongPosAtTick, Tick) == 0x000000, "Member 'MediaMusicTimelineGenerator_CalculateSongPosAtTick::Tick' has a wrong offset!");
static_assert(offsetof(MediaMusicTimelineGenerator_CalculateSongPosAtTick, ReturnValue) == 0x000004, "Member 'MediaMusicTimelineGenerator_CalculateSongPosAtTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.MediaMusicTimelineGenerator.GetElapsedMs
// 0x0004 (0x0004 - 0x0000)
struct MediaMusicTimelineGenerator_GetElapsedMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaMusicTimelineGenerator_GetElapsedMs) == 0x000004, "Wrong alignment on MediaMusicTimelineGenerator_GetElapsedMs");
static_assert(sizeof(MediaMusicTimelineGenerator_GetElapsedMs) == 0x000004, "Wrong size on MediaMusicTimelineGenerator_GetElapsedMs");
static_assert(offsetof(MediaMusicTimelineGenerator_GetElapsedMs, ReturnValue) == 0x000000, "Member 'MediaMusicTimelineGenerator_GetElapsedMs::ReturnValue' has a wrong offset!");

// Function HmxAudio.MediaMusicTimelineGenerator.GetLengthMs
// 0x0004 (0x0004 - 0x0000)
struct MediaMusicTimelineGenerator_GetLengthMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaMusicTimelineGenerator_GetLengthMs) == 0x000004, "Wrong alignment on MediaMusicTimelineGenerator_GetLengthMs");
static_assert(sizeof(MediaMusicTimelineGenerator_GetLengthMs) == 0x000004, "Wrong size on MediaMusicTimelineGenerator_GetLengthMs");
static_assert(offsetof(MediaMusicTimelineGenerator_GetLengthMs, ReturnValue) == 0x000000, "Member 'MediaMusicTimelineGenerator_GetLengthMs::ReturnValue' has a wrong offset!");

// Function HmxAudio.MediaMusicTimelineGenerator.GetMusicHandle
// 0x0008 (0x0008 - 0x0000)
struct MediaMusicTimelineGenerator_GetMusicHandle final
{
public:
	class UMusicHandle*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaMusicTimelineGenerator_GetMusicHandle) == 0x000008, "Wrong alignment on MediaMusicTimelineGenerator_GetMusicHandle");
static_assert(sizeof(MediaMusicTimelineGenerator_GetMusicHandle) == 0x000008, "Wrong size on MediaMusicTimelineGenerator_GetMusicHandle");
static_assert(offsetof(MediaMusicTimelineGenerator_GetMusicHandle, ReturnValue) == 0x000000, "Member 'MediaMusicTimelineGenerator_GetMusicHandle::ReturnValue' has a wrong offset!");

// Function HmxAudio.MediaMusicTimelineGenerator.SetMediaSoundComponent
// 0x0008 (0x0008 - 0x0000)
struct MediaMusicTimelineGenerator_SetMediaSoundComponent final
{
public:
	class UMediaSoundComponent*                   InMediaSoundComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaMusicTimelineGenerator_SetMediaSoundComponent) == 0x000008, "Wrong alignment on MediaMusicTimelineGenerator_SetMediaSoundComponent");
static_assert(sizeof(MediaMusicTimelineGenerator_SetMediaSoundComponent) == 0x000008, "Wrong size on MediaMusicTimelineGenerator_SetMediaSoundComponent");
static_assert(offsetof(MediaMusicTimelineGenerator_SetMediaSoundComponent, InMediaSoundComponent) == 0x000000, "Member 'MediaMusicTimelineGenerator_SetMediaSoundComponent::InMediaSoundComponent' has a wrong offset!");

// Function HmxAudio.MidiMsgBroadcasterComponent.SetEmitter
// 0x0008 (0x0008 - 0x0000)
struct MidiMsgBroadcasterComponent_SetEmitter final
{
public:
	class UMusicEmitterComponent*                 InEmitter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMsgBroadcasterComponent_SetEmitter) == 0x000008, "Wrong alignment on MidiMsgBroadcasterComponent_SetEmitter");
static_assert(sizeof(MidiMsgBroadcasterComponent_SetEmitter) == 0x000008, "Wrong size on MidiMsgBroadcasterComponent_SetEmitter");
static_assert(offsetof(MidiMsgBroadcasterComponent_SetEmitter, InEmitter) == 0x000000, "Member 'MidiMsgBroadcasterComponent_SetEmitter::InEmitter' has a wrong offset!");

// Function HmxAudio.MidiMsgBroadcasterComponent.SetMusicHandle
// 0x0008 (0x0008 - 0x0000)
struct MidiMsgBroadcasterComponent_SetMusicHandle final
{
public:
	class UMusicHandle*                           InHandle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMsgBroadcasterComponent_SetMusicHandle) == 0x000008, "Wrong alignment on MidiMsgBroadcasterComponent_SetMusicHandle");
static_assert(sizeof(MidiMsgBroadcasterComponent_SetMusicHandle) == 0x000008, "Wrong size on MidiMsgBroadcasterComponent_SetMusicHandle");
static_assert(offsetof(MidiMsgBroadcasterComponent_SetMusicHandle, InHandle) == 0x000000, "Member 'MidiMsgBroadcasterComponent_SetMusicHandle::InHandle' has a wrong offset!");

// Function HmxAudio.MidiMsgBroadcasterComponent.SetMusicPlayer
// 0x0008 (0x0008 - 0x0000)
struct MidiMsgBroadcasterComponent_SetMusicPlayer final
{
public:
	class UMusicPlayerComponentBase*              InMusicPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiMsgBroadcasterComponent_SetMusicPlayer) == 0x000008, "Wrong alignment on MidiMsgBroadcasterComponent_SetMusicPlayer");
static_assert(sizeof(MidiMsgBroadcasterComponent_SetMusicPlayer) == 0x000008, "Wrong size on MidiMsgBroadcasterComponent_SetMusicPlayer");
static_assert(offsetof(MidiMsgBroadcasterComponent_SetMusicPlayer, InMusicPlayer) == 0x000000, "Member 'MidiMsgBroadcasterComponent_SetMusicPlayer::InMusicPlayer' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.FindTextEvent
// 0x0028 (0x0028 - 0x0000)
struct MusicPlayerComponentBase_FindTextEvent final
{
public:
	class FString                                 MarkerText;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 midiTrackName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicPlayerComponentBase_FindTextEvent) == 0x000008, "Wrong alignment on MusicPlayerComponentBase_FindTextEvent");
static_assert(sizeof(MusicPlayerComponentBase_FindTextEvent) == 0x000028, "Wrong size on MusicPlayerComponentBase_FindTextEvent");
static_assert(offsetof(MusicPlayerComponentBase_FindTextEvent, MarkerText) == 0x000000, "Member 'MusicPlayerComponentBase_FindTextEvent::MarkerText' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_FindTextEvent, midiTrackName) == 0x000010, "Member 'MusicPlayerComponentBase_FindTextEvent::midiTrackName' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_FindTextEvent, ReturnValue) == 0x000020, "Member 'MusicPlayerComponentBase_FindTextEvent::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.GetBar
// 0x0008 (0x0008 - 0x0000)
struct MusicPlayerComponentBase_GetBar final
{
public:
	EMusicTimebase                                inTimeBase;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicTimeStart                               InTimeStart;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_GetBar) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_GetBar");
static_assert(sizeof(MusicPlayerComponentBase_GetBar) == 0x000008, "Wrong size on MusicPlayerComponentBase_GetBar");
static_assert(offsetof(MusicPlayerComponentBase_GetBar, inTimeBase) == 0x000000, "Member 'MusicPlayerComponentBase_GetBar::inTimeBase' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_GetBar, InTimeStart) == 0x000001, "Member 'MusicPlayerComponentBase_GetBar::InTimeStart' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_GetBar, ReturnValue) == 0x000004, "Member 'MusicPlayerComponentBase_GetBar::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.GetBeat
// 0x0008 (0x0008 - 0x0000)
struct MusicPlayerComponentBase_GetBeat final
{
public:
	EMusicTimebase                                inTimeBase;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicTimeStart                               InTimeStart;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_GetBeat) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_GetBeat");
static_assert(sizeof(MusicPlayerComponentBase_GetBeat) == 0x000008, "Wrong size on MusicPlayerComponentBase_GetBeat");
static_assert(offsetof(MusicPlayerComponentBase_GetBeat, inTimeBase) == 0x000000, "Member 'MusicPlayerComponentBase_GetBeat::inTimeBase' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_GetBeat, InTimeStart) == 0x000001, "Member 'MusicPlayerComponentBase_GetBeat::InTimeStart' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_GetBeat, ReturnValue) == 0x000004, "Member 'MusicPlayerComponentBase_GetBeat::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.GetBeatSpan
// 0x0008 (0x0008 - 0x0000)
struct MusicPlayerComponentBase_GetBeatSpan final
{
public:
	EMusicTimebase                                inTimeBase;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicTimeStart                               InTimeStart;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_GetBeatSpan) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_GetBeatSpan");
static_assert(sizeof(MusicPlayerComponentBase_GetBeatSpan) == 0x000008, "Wrong size on MusicPlayerComponentBase_GetBeatSpan");
static_assert(offsetof(MusicPlayerComponentBase_GetBeatSpan, inTimeBase) == 0x000000, "Member 'MusicPlayerComponentBase_GetBeatSpan::inTimeBase' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_GetBeatSpan, InTimeStart) == 0x000001, "Member 'MusicPlayerComponentBase_GetBeatSpan::InTimeStart' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_GetBeatSpan, ReturnValue) == 0x000004, "Member 'MusicPlayerComponentBase_GetBeatSpan::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.GetCurrentSection
// 0x0004 (0x0004 - 0x0000)
struct MusicPlayerComponentBase_GetCurrentSection final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_GetCurrentSection) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_GetCurrentSection");
static_assert(sizeof(MusicPlayerComponentBase_GetCurrentSection) == 0x000004, "Wrong size on MusicPlayerComponentBase_GetCurrentSection");
static_assert(offsetof(MusicPlayerComponentBase_GetCurrentSection, ReturnValue) == 0x000000, "Member 'MusicPlayerComponentBase_GetCurrentSection::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.GetCurrentTempo
// 0x0004 (0x0004 - 0x0000)
struct MusicPlayerComponentBase_GetCurrentTempo final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_GetCurrentTempo) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_GetCurrentTempo");
static_assert(sizeof(MusicPlayerComponentBase_GetCurrentTempo) == 0x000004, "Wrong size on MusicPlayerComponentBase_GetCurrentTempo");
static_assert(offsetof(MusicPlayerComponentBase_GetCurrentTempo, ReturnValue) == 0x000000, "Member 'MusicPlayerComponentBase_GetCurrentTempo::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.GetLengthInTicks
// 0x0004 (0x0004 - 0x0000)
struct MusicPlayerComponentBase_GetLengthInTicks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_GetLengthInTicks) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_GetLengthInTicks");
static_assert(sizeof(MusicPlayerComponentBase_GetLengthInTicks) == 0x000004, "Wrong size on MusicPlayerComponentBase_GetLengthInTicks");
static_assert(offsetof(MusicPlayerComponentBase_GetLengthInTicks, ReturnValue) == 0x000000, "Member 'MusicPlayerComponentBase_GetLengthInTicks::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.GetMeasureSpan
// 0x0008 (0x0008 - 0x0000)
struct MusicPlayerComponentBase_GetMeasureSpan final
{
public:
	EMusicTimebase                                inTimebas;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicTimeStart                               InTimeStart;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_GetMeasureSpan) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_GetMeasureSpan");
static_assert(sizeof(MusicPlayerComponentBase_GetMeasureSpan) == 0x000008, "Wrong size on MusicPlayerComponentBase_GetMeasureSpan");
static_assert(offsetof(MusicPlayerComponentBase_GetMeasureSpan, inTimebas) == 0x000000, "Member 'MusicPlayerComponentBase_GetMeasureSpan::inTimebas' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_GetMeasureSpan, InTimeStart) == 0x000001, "Member 'MusicPlayerComponentBase_GetMeasureSpan::InTimeStart' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_GetMeasureSpan, ReturnValue) == 0x000004, "Member 'MusicPlayerComponentBase_GetMeasureSpan::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.GetMusicHandle
// 0x0008 (0x0008 - 0x0000)
struct MusicPlayerComponentBase_GetMusicHandle final
{
public:
	class UMusicHandle*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_GetMusicHandle) == 0x000008, "Wrong alignment on MusicPlayerComponentBase_GetMusicHandle");
static_assert(sizeof(MusicPlayerComponentBase_GetMusicHandle) == 0x000008, "Wrong size on MusicPlayerComponentBase_GetMusicHandle");
static_assert(offsetof(MusicPlayerComponentBase_GetMusicHandle, ReturnValue) == 0x000000, "Member 'MusicPlayerComponentBase_GetMusicHandle::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.GetSongPos
// 0x0050 (0x0050 - 0x0000)
struct MusicPlayerComponentBase_GetSongPos final
{
public:
	EMusicTimebase                                inTimeBase;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicTimeStart                               InTimeStart;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSongPos                               ReturnValue;                                       // 0x0004(0x004C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_GetSongPos) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_GetSongPos");
static_assert(sizeof(MusicPlayerComponentBase_GetSongPos) == 0x000050, "Wrong size on MusicPlayerComponentBase_GetSongPos");
static_assert(offsetof(MusicPlayerComponentBase_GetSongPos, inTimeBase) == 0x000000, "Member 'MusicPlayerComponentBase_GetSongPos::inTimeBase' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_GetSongPos, InTimeStart) == 0x000001, "Member 'MusicPlayerComponentBase_GetSongPos::InTimeStart' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_GetSongPos, ReturnValue) == 0x000004, "Member 'MusicPlayerComponentBase_GetSongPos::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.GetTick
// 0x0008 (0x0008 - 0x0000)
struct MusicPlayerComponentBase_GetTick final
{
public:
	EMusicTimebase                                inTimeBase;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicTimeStart                               InTimeStart;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_GetTick) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_GetTick");
static_assert(sizeof(MusicPlayerComponentBase_GetTick) == 0x000008, "Wrong size on MusicPlayerComponentBase_GetTick");
static_assert(offsetof(MusicPlayerComponentBase_GetTick, inTimeBase) == 0x000000, "Member 'MusicPlayerComponentBase_GetTick::inTimeBase' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_GetTick, InTimeStart) == 0x000001, "Member 'MusicPlayerComponentBase_GetTick::InTimeStart' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_GetTick, ReturnValue) == 0x000004, "Member 'MusicPlayerComponentBase_GetTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.RegisterMusicalEventRouter
// 0x0008 (0x0008 - 0x0000)
struct MusicPlayerComponentBase_RegisterMusicalEventRouter final
{
public:
	class UMusicalEventRouterComponentBase*       router;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_RegisterMusicalEventRouter) == 0x000008, "Wrong alignment on MusicPlayerComponentBase_RegisterMusicalEventRouter");
static_assert(sizeof(MusicPlayerComponentBase_RegisterMusicalEventRouter) == 0x000008, "Wrong size on MusicPlayerComponentBase_RegisterMusicalEventRouter");
static_assert(offsetof(MusicPlayerComponentBase_RegisterMusicalEventRouter, router) == 0x000000, "Member 'MusicPlayerComponentBase_RegisterMusicalEventRouter::router' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.Seek
// 0x0004 (0x0004 - 0x0000)
struct MusicPlayerComponentBase_Seek final
{
public:
	float                                         positionMs;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_Seek) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_Seek");
static_assert(sizeof(MusicPlayerComponentBase_Seek) == 0x000004, "Wrong size on MusicPlayerComponentBase_Seek");
static_assert(offsetof(MusicPlayerComponentBase_Seek, positionMs) == 0x000000, "Member 'MusicPlayerComponentBase_Seek::positionMs' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.SeekToTick
// 0x0004 (0x0004 - 0x0000)
struct MusicPlayerComponentBase_SeekToTick final
{
public:
	int32                                         seekTick;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_SeekToTick) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_SeekToTick");
static_assert(sizeof(MusicPlayerComponentBase_SeekToTick) == 0x000004, "Wrong size on MusicPlayerComponentBase_SeekToTick");
static_assert(offsetof(MusicPlayerComponentBase_SeekToTick, seekTick) == 0x000000, "Member 'MusicPlayerComponentBase_SeekToTick::seekTick' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.SetAllTracksMute
// 0x0001 (0x0001 - 0x0000)
struct MusicPlayerComponentBase_SetAllTracksMute final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_SetAllTracksMute) == 0x000001, "Wrong alignment on MusicPlayerComponentBase_SetAllTracksMute");
static_assert(sizeof(MusicPlayerComponentBase_SetAllTracksMute) == 0x000001, "Wrong size on MusicPlayerComponentBase_SetAllTracksMute");
static_assert(offsetof(MusicPlayerComponentBase_SetAllTracksMute, On) == 0x000000, "Member 'MusicPlayerComponentBase_SetAllTracksMute::On' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.SetLoopViaStartEndBar
// 0x0010 (0x0010 - 0x0000)
struct MusicPlayerComponentBase_SetLoopViaStartEndBar final
{
public:
	int32                                         loopStartBar;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         loopEndBar;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicPlayerComponentBase_SetLoopViaStartEndBar) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_SetLoopViaStartEndBar");
static_assert(sizeof(MusicPlayerComponentBase_SetLoopViaStartEndBar) == 0x000010, "Wrong size on MusicPlayerComponentBase_SetLoopViaStartEndBar");
static_assert(offsetof(MusicPlayerComponentBase_SetLoopViaStartEndBar, loopStartBar) == 0x000000, "Member 'MusicPlayerComponentBase_SetLoopViaStartEndBar::loopStartBar' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_SetLoopViaStartEndBar, loopEndBar) == 0x000004, "Member 'MusicPlayerComponentBase_SetLoopViaStartEndBar::loopEndBar' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_SetLoopViaStartEndBar, Count) == 0x000008, "Member 'MusicPlayerComponentBase_SetLoopViaStartEndBar::Count' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_SetLoopViaStartEndBar, ReturnValue) == 0x00000C, "Member 'MusicPlayerComponentBase_SetLoopViaStartEndBar::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.SetLoopViaStartEndTick
// 0x0010 (0x0010 - 0x0000)
struct MusicPlayerComponentBase_SetLoopViaStartEndTick final
{
public:
	int32                                         loopStartTick;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         loopEndTick;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicPlayerComponentBase_SetLoopViaStartEndTick) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_SetLoopViaStartEndTick");
static_assert(sizeof(MusicPlayerComponentBase_SetLoopViaStartEndTick) == 0x000010, "Wrong size on MusicPlayerComponentBase_SetLoopViaStartEndTick");
static_assert(offsetof(MusicPlayerComponentBase_SetLoopViaStartEndTick, loopStartTick) == 0x000000, "Member 'MusicPlayerComponentBase_SetLoopViaStartEndTick::loopStartTick' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_SetLoopViaStartEndTick, loopEndTick) == 0x000004, "Member 'MusicPlayerComponentBase_SetLoopViaStartEndTick::loopEndTick' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_SetLoopViaStartEndTick, Count) == 0x000008, "Member 'MusicPlayerComponentBase_SetLoopViaStartEndTick::Count' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_SetLoopViaStartEndTick, ReturnValue) == 0x00000C, "Member 'MusicPlayerComponentBase_SetLoopViaStartEndTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.SetMaintainPitch
// 0x0001 (0x0001 - 0x0000)
struct MusicPlayerComponentBase_SetMaintainPitch final
{
public:
	bool                                          maintainPitch;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_SetMaintainPitch) == 0x000001, "Wrong alignment on MusicPlayerComponentBase_SetMaintainPitch");
static_assert(sizeof(MusicPlayerComponentBase_SetMaintainPitch) == 0x000001, "Wrong size on MusicPlayerComponentBase_SetMaintainPitch");
static_assert(offsetof(MusicPlayerComponentBase_SetMaintainPitch, maintainPitch) == 0x000000, "Member 'MusicPlayerComponentBase_SetMaintainPitch::maintainPitch' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.SetSpeed
// 0x0004 (0x0004 - 0x0000)
struct MusicPlayerComponentBase_SetSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_SetSpeed) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_SetSpeed");
static_assert(sizeof(MusicPlayerComponentBase_SetSpeed) == 0x000004, "Wrong size on MusicPlayerComponentBase_SetSpeed");
static_assert(offsetof(MusicPlayerComponentBase_SetSpeed, Speed) == 0x000000, "Member 'MusicPlayerComponentBase_SetSpeed::Speed' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.SetSpeedToAchieveTempo
// 0x0008 (0x0008 - 0x0000)
struct MusicPlayerComponentBase_SetSpeedToAchieveTempo final
{
public:
	float                                         BPM;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          maintainPitch;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicPlayerComponentBase_SetSpeedToAchieveTempo) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_SetSpeedToAchieveTempo");
static_assert(sizeof(MusicPlayerComponentBase_SetSpeedToAchieveTempo) == 0x000008, "Wrong size on MusicPlayerComponentBase_SetSpeedToAchieveTempo");
static_assert(offsetof(MusicPlayerComponentBase_SetSpeedToAchieveTempo, BPM) == 0x000000, "Member 'MusicPlayerComponentBase_SetSpeedToAchieveTempo::BPM' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_SetSpeedToAchieveTempo, maintainPitch) == 0x000004, "Member 'MusicPlayerComponentBase_SetSpeedToAchieveTempo::maintainPitch' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.SetTrackDb
// 0x0018 (0x0018 - 0x0000)
struct MusicPlayerComponentBase_SetTrackDb final
{
public:
	class FString                                 trackName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         db;                                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_SetTrackDb) == 0x000008, "Wrong alignment on MusicPlayerComponentBase_SetTrackDb");
static_assert(sizeof(MusicPlayerComponentBase_SetTrackDb) == 0x000018, "Wrong size on MusicPlayerComponentBase_SetTrackDb");
static_assert(offsetof(MusicPlayerComponentBase_SetTrackDb, trackName) == 0x000000, "Member 'MusicPlayerComponentBase_SetTrackDb::trackName' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_SetTrackDb, db) == 0x000010, "Member 'MusicPlayerComponentBase_SetTrackDb::db' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_SetTrackDb, Seconds) == 0x000014, "Member 'MusicPlayerComponentBase_SetTrackDb::Seconds' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.SetTrackGain
// 0x0018 (0x0018 - 0x0000)
struct MusicPlayerComponentBase_SetTrackGain final
{
public:
	class FString                                 trackName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         trackGain;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_SetTrackGain) == 0x000008, "Wrong alignment on MusicPlayerComponentBase_SetTrackGain");
static_assert(sizeof(MusicPlayerComponentBase_SetTrackGain) == 0x000018, "Wrong size on MusicPlayerComponentBase_SetTrackGain");
static_assert(offsetof(MusicPlayerComponentBase_SetTrackGain, trackName) == 0x000000, "Member 'MusicPlayerComponentBase_SetTrackGain::trackName' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_SetTrackGain, trackGain) == 0x000010, "Member 'MusicPlayerComponentBase_SetTrackGain::trackGain' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_SetTrackGain, Seconds) == 0x000014, "Member 'MusicPlayerComponentBase_SetTrackGain::Seconds' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.SetTrackMute
// 0x0020 (0x0020 - 0x0000)
struct MusicPlayerComponentBase_SetTrackMute final
{
public:
	struct FTrackChannelSpecifier                 trackInfo;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          On;                                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicPlayerComponentBase_SetTrackMute) == 0x000008, "Wrong alignment on MusicPlayerComponentBase_SetTrackMute");
static_assert(sizeof(MusicPlayerComponentBase_SetTrackMute) == 0x000020, "Wrong size on MusicPlayerComponentBase_SetTrackMute");
static_assert(offsetof(MusicPlayerComponentBase_SetTrackMute, trackInfo) == 0x000000, "Member 'MusicPlayerComponentBase_SetTrackMute::trackInfo' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_SetTrackMute, On) == 0x000018, "Member 'MusicPlayerComponentBase_SetTrackMute::On' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.SetTransposition
// 0x0004 (0x0004 - 0x0000)
struct MusicPlayerComponentBase_SetTransposition final
{
public:
	int32                                         Semitones;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_SetTransposition) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_SetTransposition");
static_assert(sizeof(MusicPlayerComponentBase_SetTransposition) == 0x000004, "Wrong size on MusicPlayerComponentBase_SetTransposition");
static_assert(offsetof(MusicPlayerComponentBase_SetTransposition, Semitones) == 0x000000, "Member 'MusicPlayerComponentBase_SetTransposition::Semitones' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.UnregisterMusicalEventRouter
// 0x0008 (0x0008 - 0x0000)
struct MusicPlayerComponentBase_UnregisterMusicalEventRouter final
{
public:
	class UMusicalEventRouterComponentBase*       router;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_UnregisterMusicalEventRouter) == 0x000008, "Wrong alignment on MusicPlayerComponentBase_UnregisterMusicalEventRouter");
static_assert(sizeof(MusicPlayerComponentBase_UnregisterMusicalEventRouter) == 0x000008, "Wrong size on MusicPlayerComponentBase_UnregisterMusicalEventRouter");
static_assert(offsetof(MusicPlayerComponentBase_UnregisterMusicalEventRouter, router) == 0x000000, "Member 'MusicPlayerComponentBase_UnregisterMusicalEventRouter::router' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.CalculateSongPosAtMs
// 0x0050 (0x0050 - 0x0000)
struct MusicPlayerComponentBase_CalculateSongPosAtMs final
{
public:
	float                                         ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSongPos                               ReturnValue;                                       // 0x0004(0x004C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_CalculateSongPosAtMs) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_CalculateSongPosAtMs");
static_assert(sizeof(MusicPlayerComponentBase_CalculateSongPosAtMs) == 0x000050, "Wrong size on MusicPlayerComponentBase_CalculateSongPosAtMs");
static_assert(offsetof(MusicPlayerComponentBase_CalculateSongPosAtMs, ms) == 0x000000, "Member 'MusicPlayerComponentBase_CalculateSongPosAtMs::ms' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_CalculateSongPosAtMs, ReturnValue) == 0x000004, "Member 'MusicPlayerComponentBase_CalculateSongPosAtMs::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.CalculateSongPosAtTick
// 0x0050 (0x0050 - 0x0000)
struct MusicPlayerComponentBase_CalculateSongPosAtTick final
{
public:
	float                                         inTick;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSongPos                               ReturnValue;                                       // 0x0004(0x004C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_CalculateSongPosAtTick) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_CalculateSongPosAtTick");
static_assert(sizeof(MusicPlayerComponentBase_CalculateSongPosAtTick) == 0x000050, "Wrong size on MusicPlayerComponentBase_CalculateSongPosAtTick");
static_assert(offsetof(MusicPlayerComponentBase_CalculateSongPosAtTick, inTick) == 0x000000, "Member 'MusicPlayerComponentBase_CalculateSongPosAtTick::inTick' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_CalculateSongPosAtTick, ReturnValue) == 0x000004, "Member 'MusicPlayerComponentBase_CalculateSongPosAtTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.GetSpeed
// 0x0004 (0x0004 - 0x0000)
struct MusicPlayerComponentBase_GetSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_GetSpeed) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_GetSpeed");
static_assert(sizeof(MusicPlayerComponentBase_GetSpeed) == 0x000004, "Wrong size on MusicPlayerComponentBase_GetSpeed");
static_assert(offsetof(MusicPlayerComponentBase_GetSpeed, ReturnValue) == 0x000000, "Member 'MusicPlayerComponentBase_GetSpeed::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicPlayerComponentBase.GetTempoAtTick
// 0x0008 (0x0008 - 0x0000)
struct MusicPlayerComponentBase_GetTempoAtTick final
{
public:
	int32                                         atTick;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayerComponentBase_GetTempoAtTick) == 0x000004, "Wrong alignment on MusicPlayerComponentBase_GetTempoAtTick");
static_assert(sizeof(MusicPlayerComponentBase_GetTempoAtTick) == 0x000008, "Wrong size on MusicPlayerComponentBase_GetTempoAtTick");
static_assert(offsetof(MusicPlayerComponentBase_GetTempoAtTick, atTick) == 0x000000, "Member 'MusicPlayerComponentBase_GetTempoAtTick::atTick' has a wrong offset!");
static_assert(offsetof(MusicPlayerComponentBase_GetTempoAtTick, ReturnValue) == 0x000004, "Member 'MusicPlayerComponentBase_GetTempoAtTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicalEventRouterComponentBase.AttachToMusicHandle
// 0x0010 (0x0010 - 0x0000)
struct MusicalEventRouterComponentBase_AttachToMusicHandle final
{
public:
	class UMusicHandle*                           Handle;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicalEventRouterComponentBase_AttachToMusicHandle) == 0x000008, "Wrong alignment on MusicalEventRouterComponentBase_AttachToMusicHandle");
static_assert(sizeof(MusicalEventRouterComponentBase_AttachToMusicHandle) == 0x000010, "Wrong size on MusicalEventRouterComponentBase_AttachToMusicHandle");
static_assert(offsetof(MusicalEventRouterComponentBase_AttachToMusicHandle, Handle) == 0x000000, "Member 'MusicalEventRouterComponentBase_AttachToMusicHandle::Handle' has a wrong offset!");
static_assert(offsetof(MusicalEventRouterComponentBase_AttachToMusicHandle, ReturnValue) == 0x000008, "Member 'MusicalEventRouterComponentBase_AttachToMusicHandle::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicalEventRouterComponentBase.DetachFromMusicHandle
// 0x0010 (0x0010 - 0x0000)
struct MusicalEventRouterComponentBase_DetachFromMusicHandle final
{
public:
	class UMusicHandle*                           Handle;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicalEventRouterComponentBase_DetachFromMusicHandle) == 0x000008, "Wrong alignment on MusicalEventRouterComponentBase_DetachFromMusicHandle");
static_assert(sizeof(MusicalEventRouterComponentBase_DetachFromMusicHandle) == 0x000010, "Wrong size on MusicalEventRouterComponentBase_DetachFromMusicHandle");
static_assert(offsetof(MusicalEventRouterComponentBase_DetachFromMusicHandle, Handle) == 0x000000, "Member 'MusicalEventRouterComponentBase_DetachFromMusicHandle::Handle' has a wrong offset!");
static_assert(offsetof(MusicalEventRouterComponentBase_DetachFromMusicHandle, ReturnValue) == 0x000008, "Member 'MusicalEventRouterComponentBase_DetachFromMusicHandle::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicalEventRouterComponentBase.IsAttached
// 0x0001 (0x0001 - 0x0000)
struct MusicalEventRouterComponentBase_IsAttached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalEventRouterComponentBase_IsAttached) == 0x000001, "Wrong alignment on MusicalEventRouterComponentBase_IsAttached");
static_assert(sizeof(MusicalEventRouterComponentBase_IsAttached) == 0x000001, "Wrong size on MusicalEventRouterComponentBase_IsAttached");
static_assert(offsetof(MusicalEventRouterComponentBase_IsAttached, ReturnValue) == 0x000000, "Member 'MusicalEventRouterComponentBase_IsAttached::ReturnValue' has a wrong offset!");

// Function HmxAudio.SchedulerBasedMusicalEventRouterComponentBase.SecsUntilNextFire
// 0x0004 (0x0004 - 0x0000)
struct SchedulerBasedMusicalEventRouterComponentBase_SecsUntilNextFire final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SchedulerBasedMusicalEventRouterComponentBase_SecsUntilNextFire) == 0x000004, "Wrong alignment on SchedulerBasedMusicalEventRouterComponentBase_SecsUntilNextFire");
static_assert(sizeof(SchedulerBasedMusicalEventRouterComponentBase_SecsUntilNextFire) == 0x000004, "Wrong size on SchedulerBasedMusicalEventRouterComponentBase_SecsUntilNextFire");
static_assert(offsetof(SchedulerBasedMusicalEventRouterComponentBase_SecsUntilNextFire, ReturnValue) == 0x000000, "Member 'SchedulerBasedMusicalEventRouterComponentBase_SecsUntilNextFire::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicalTimespanSequencerComponent.Cancel
// 0x0001 (0x0001 - 0x0000)
struct MusicalTimespanSequencerComponent_Cancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTimespanSequencerComponent_Cancel) == 0x000001, "Wrong alignment on MusicalTimespanSequencerComponent_Cancel");
static_assert(sizeof(MusicalTimespanSequencerComponent_Cancel) == 0x000001, "Wrong size on MusicalTimespanSequencerComponent_Cancel");
static_assert(offsetof(MusicalTimespanSequencerComponent_Cancel, ReturnValue) == 0x000000, "Member 'MusicalTimespanSequencerComponent_Cancel::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicalTimespanSequencerComponent.GetProgress
// 0x0004 (0x0004 - 0x0000)
struct MusicalTimespanSequencerComponent_GetProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTimespanSequencerComponent_GetProgress) == 0x000004, "Wrong alignment on MusicalTimespanSequencerComponent_GetProgress");
static_assert(sizeof(MusicalTimespanSequencerComponent_GetProgress) == 0x000004, "Wrong size on MusicalTimespanSequencerComponent_GetProgress");
static_assert(offsetof(MusicalTimespanSequencerComponent_GetProgress, ReturnValue) == 0x000000, "Member 'MusicalTimespanSequencerComponent_GetProgress::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicalTimespanSequencerComponent.OnSeeked
// 0x0010 (0x0010 - 0x0000)
struct MusicalTimespanSequencerComponent_OnSeeked final
{
public:
	struct FMusicalTimeSpan                       nextTrigger;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTimespanSequencerComponent_OnSeeked) == 0x000004, "Wrong alignment on MusicalTimespanSequencerComponent_OnSeeked");
static_assert(sizeof(MusicalTimespanSequencerComponent_OnSeeked) == 0x000010, "Wrong size on MusicalTimespanSequencerComponent_OnSeeked");
static_assert(offsetof(MusicalTimespanSequencerComponent_OnSeeked, nextTrigger) == 0x000000, "Member 'MusicalTimespanSequencerComponent_OnSeeked::nextTrigger' has a wrong offset!");

// Function HmxAudio.MusicalTimespanSequencerComponent.OnTriggered
// 0x0010 (0x0010 - 0x0000)
struct MusicalTimespanSequencerComponent_OnTriggered final
{
public:
	struct FMusicalTimeSpan                       nextTrigger;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTimespanSequencerComponent_OnTriggered) == 0x000004, "Wrong alignment on MusicalTimespanSequencerComponent_OnTriggered");
static_assert(sizeof(MusicalTimespanSequencerComponent_OnTriggered) == 0x000010, "Wrong size on MusicalTimespanSequencerComponent_OnTriggered");
static_assert(offsetof(MusicalTimespanSequencerComponent_OnTriggered, nextTrigger) == 0x000000, "Member 'MusicalTimespanSequencerComponent_OnTriggered::nextTrigger' has a wrong offset!");

// Function HmxAudio.MusicalTimespanSequencerComponent.Running
// 0x0001 (0x0001 - 0x0000)
struct MusicalTimespanSequencerComponent_Running final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTimespanSequencerComponent_Running) == 0x000001, "Wrong alignment on MusicalTimespanSequencerComponent_Running");
static_assert(sizeof(MusicalTimespanSequencerComponent_Running) == 0x000001, "Wrong size on MusicalTimespanSequencerComponent_Running");
static_assert(offsetof(MusicalTimespanSequencerComponent_Running, ReturnValue) == 0x000000, "Member 'MusicalTimespanSequencerComponent_Running::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicalTimespanSequencerComponent.SetMusicClock
// 0x0008 (0x0008 - 0x0000)
struct MusicalTimespanSequencerComponent_SetMusicClock final
{
public:
	class UOldMusicClockComponent*                clock;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTimespanSequencerComponent_SetMusicClock) == 0x000008, "Wrong alignment on MusicalTimespanSequencerComponent_SetMusicClock");
static_assert(sizeof(MusicalTimespanSequencerComponent_SetMusicClock) == 0x000008, "Wrong size on MusicalTimespanSequencerComponent_SetMusicClock");
static_assert(offsetof(MusicalTimespanSequencerComponent_SetMusicClock, clock) == 0x000000, "Member 'MusicalTimespanSequencerComponent_SetMusicClock::clock' has a wrong offset!");

// Function HmxAudio.MusicalTimespanSequencerComponent.StartOnNextBeat
// 0x000C (0x000C - 0x0000)
struct MusicalTimespanSequencerComponent_StartOnNextBeat final
{
public:
	EMTSResult                                    Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         waitMinimumTicks;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         waitMinimumMs;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTimespanSequencerComponent_StartOnNextBeat) == 0x000004, "Wrong alignment on MusicalTimespanSequencerComponent_StartOnNextBeat");
static_assert(sizeof(MusicalTimespanSequencerComponent_StartOnNextBeat) == 0x00000C, "Wrong size on MusicalTimespanSequencerComponent_StartOnNextBeat");
static_assert(offsetof(MusicalTimespanSequencerComponent_StartOnNextBeat, Result) == 0x000000, "Member 'MusicalTimespanSequencerComponent_StartOnNextBeat::Result' has a wrong offset!");
static_assert(offsetof(MusicalTimespanSequencerComponent_StartOnNextBeat, waitMinimumTicks) == 0x000004, "Member 'MusicalTimespanSequencerComponent_StartOnNextBeat::waitMinimumTicks' has a wrong offset!");
static_assert(offsetof(MusicalTimespanSequencerComponent_StartOnNextBeat, waitMinimumMs) == 0x000008, "Member 'MusicalTimespanSequencerComponent_StartOnNextBeat::waitMinimumMs' has a wrong offset!");

// Function HmxAudio.MusicalTimespanSequencerComponent.StartOnNextDownBeat
// 0x000C (0x000C - 0x0000)
struct MusicalTimespanSequencerComponent_StartOnNextDownBeat final
{
public:
	EMTSResult                                    Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         waitMinimumTicks;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         waitMinimumMs;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTimespanSequencerComponent_StartOnNextDownBeat) == 0x000004, "Wrong alignment on MusicalTimespanSequencerComponent_StartOnNextDownBeat");
static_assert(sizeof(MusicalTimespanSequencerComponent_StartOnNextDownBeat) == 0x00000C, "Wrong size on MusicalTimespanSequencerComponent_StartOnNextDownBeat");
static_assert(offsetof(MusicalTimespanSequencerComponent_StartOnNextDownBeat, Result) == 0x000000, "Member 'MusicalTimespanSequencerComponent_StartOnNextDownBeat::Result' has a wrong offset!");
static_assert(offsetof(MusicalTimespanSequencerComponent_StartOnNextDownBeat, waitMinimumTicks) == 0x000004, "Member 'MusicalTimespanSequencerComponent_StartOnNextDownBeat::waitMinimumTicks' has a wrong offset!");
static_assert(offsetof(MusicalTimespanSequencerComponent_StartOnNextDownBeat, waitMinimumMs) == 0x000008, "Member 'MusicalTimespanSequencerComponent_StartOnNextDownBeat::waitMinimumMs' has a wrong offset!");

// Function HmxAudio.MusicEmitterComponent.GetWorldsDefaultMusicEmitter
// 0x0010 (0x0010 - 0x0000)
struct MusicEmitterComponent_GetWorldsDefaultMusicEmitter final
{
public:
	class UObject*                                worldContextObj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMusicEmitterComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicEmitterComponent_GetWorldsDefaultMusicEmitter) == 0x000008, "Wrong alignment on MusicEmitterComponent_GetWorldsDefaultMusicEmitter");
static_assert(sizeof(MusicEmitterComponent_GetWorldsDefaultMusicEmitter) == 0x000010, "Wrong size on MusicEmitterComponent_GetWorldsDefaultMusicEmitter");
static_assert(offsetof(MusicEmitterComponent_GetWorldsDefaultMusicEmitter, worldContextObj) == 0x000000, "Member 'MusicEmitterComponent_GetWorldsDefaultMusicEmitter::worldContextObj' has a wrong offset!");
static_assert(offsetof(MusicEmitterComponent_GetWorldsDefaultMusicEmitter, ReturnValue) == 0x000008, "Member 'MusicEmitterComponent_GetWorldsDefaultMusicEmitter::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicEmitterComponent.GetBar
// 0x0004 (0x0004 - 0x0000)
struct MusicEmitterComponent_GetBar final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicEmitterComponent_GetBar) == 0x000004, "Wrong alignment on MusicEmitterComponent_GetBar");
static_assert(sizeof(MusicEmitterComponent_GetBar) == 0x000004, "Wrong size on MusicEmitterComponent_GetBar");
static_assert(offsetof(MusicEmitterComponent_GetBar, ReturnValue) == 0x000000, "Member 'MusicEmitterComponent_GetBar::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicEmitterComponent.GetBeat
// 0x0004 (0x0004 - 0x0000)
struct MusicEmitterComponent_GetBeat final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicEmitterComponent_GetBeat) == 0x000004, "Wrong alignment on MusicEmitterComponent_GetBeat");
static_assert(sizeof(MusicEmitterComponent_GetBeat) == 0x000004, "Wrong size on MusicEmitterComponent_GetBeat");
static_assert(offsetof(MusicEmitterComponent_GetBeat, ReturnValue) == 0x000000, "Member 'MusicEmitterComponent_GetBeat::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicEmitterComponent.GetParameter
// 0x000C (0x000C - 0x0000)
struct MusicEmitterComponent_GetParameter final
{
public:
	class FName                                   Parameter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicEmitterComponent_GetParameter) == 0x000004, "Wrong alignment on MusicEmitterComponent_GetParameter");
static_assert(sizeof(MusicEmitterComponent_GetParameter) == 0x00000C, "Wrong size on MusicEmitterComponent_GetParameter");
static_assert(offsetof(MusicEmitterComponent_GetParameter, Parameter) == 0x000000, "Member 'MusicEmitterComponent_GetParameter::Parameter' has a wrong offset!");
static_assert(offsetof(MusicEmitterComponent_GetParameter, OutVal) == 0x000004, "Member 'MusicEmitterComponent_GetParameter::OutVal' has a wrong offset!");
static_assert(offsetof(MusicEmitterComponent_GetParameter, ReturnValue) == 0x000008, "Member 'MusicEmitterComponent_GetParameter::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicEmitterComponent.InsertDynamicSourceEffect
// 0x0008 (0x0008 - 0x0000)
struct MusicEmitterComponent_InsertDynamicSourceEffect final
{
public:
	class USoundEffectSourcePreset*               EffectPreset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicEmitterComponent_InsertDynamicSourceEffect) == 0x000008, "Wrong alignment on MusicEmitterComponent_InsertDynamicSourceEffect");
static_assert(sizeof(MusicEmitterComponent_InsertDynamicSourceEffect) == 0x000008, "Wrong size on MusicEmitterComponent_InsertDynamicSourceEffect");
static_assert(offsetof(MusicEmitterComponent_InsertDynamicSourceEffect, EffectPreset) == 0x000000, "Member 'MusicEmitterComponent_InsertDynamicSourceEffect::EffectPreset' has a wrong offset!");

// Function HmxAudio.MusicEmitterComponent.PlayInstrument
// 0x0080 (0x0080 - 0x0000)
struct MusicEmitterComponent_PlayInstrument final
{
public:
	struct FPlayInstrumentArgs                    args;                                              // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UInstrumentHandle*                      ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicEmitterComponent_PlayInstrument) == 0x000008, "Wrong alignment on MusicEmitterComponent_PlayInstrument");
static_assert(sizeof(MusicEmitterComponent_PlayInstrument) == 0x000080, "Wrong size on MusicEmitterComponent_PlayInstrument");
static_assert(offsetof(MusicEmitterComponent_PlayInstrument, args) == 0x000000, "Member 'MusicEmitterComponent_PlayInstrument::args' has a wrong offset!");
static_assert(offsetof(MusicEmitterComponent_PlayInstrument, ReturnValue) == 0x000078, "Member 'MusicEmitterComponent_PlayInstrument::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicEmitterComponent.PlayMusic
// 0x00B0 (0x00B0 - 0x0000)
struct MusicEmitterComponent_PlayMusic final
{
public:
	struct FPlayMusicArgs                         args;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UMusicHandle*                           ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicEmitterComponent_PlayMusic) == 0x000008, "Wrong alignment on MusicEmitterComponent_PlayMusic");
static_assert(sizeof(MusicEmitterComponent_PlayMusic) == 0x0000B0, "Wrong size on MusicEmitterComponent_PlayMusic");
static_assert(offsetof(MusicEmitterComponent_PlayMusic, args) == 0x000000, "Member 'MusicEmitterComponent_PlayMusic::args' has a wrong offset!");
static_assert(offsetof(MusicEmitterComponent_PlayMusic, ReturnValue) == 0x0000A8, "Member 'MusicEmitterComponent_PlayMusic::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicEmitterComponent.RemoveDynamicSourceEffect
// 0x0008 (0x0008 - 0x0000)
struct MusicEmitterComponent_RemoveDynamicSourceEffect final
{
public:
	class USoundEffectSourcePreset*               EffectPreset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicEmitterComponent_RemoveDynamicSourceEffect) == 0x000008, "Wrong alignment on MusicEmitterComponent_RemoveDynamicSourceEffect");
static_assert(sizeof(MusicEmitterComponent_RemoveDynamicSourceEffect) == 0x000008, "Wrong size on MusicEmitterComponent_RemoveDynamicSourceEffect");
static_assert(offsetof(MusicEmitterComponent_RemoveDynamicSourceEffect, EffectPreset) == 0x000000, "Member 'MusicEmitterComponent_RemoveDynamicSourceEffect::EffectPreset' has a wrong offset!");

// Function HmxAudio.MusicEmitterComponent.SetParameter
// 0x0008 (0x0008 - 0x0000)
struct MusicEmitterComponent_SetParameter final
{
public:
	class FName                                   Parameter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicEmitterComponent_SetParameter) == 0x000004, "Wrong alignment on MusicEmitterComponent_SetParameter");
static_assert(sizeof(MusicEmitterComponent_SetParameter) == 0x000008, "Wrong size on MusicEmitterComponent_SetParameter");
static_assert(offsetof(MusicEmitterComponent_SetParameter, Parameter) == 0x000000, "Member 'MusicEmitterComponent_SetParameter::Parameter' has a wrong offset!");
static_assert(offsetof(MusicEmitterComponent_SetParameter, Value) == 0x000004, "Member 'MusicEmitterComponent_SetParameter::Value' has a wrong offset!");

// Function HmxAudio.MusicEmitterComponent.GetSection
// 0x0010 (0x0010 - 0x0000)
struct MusicEmitterComponent_GetSection final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicEmitterComponent_GetSection) == 0x000008, "Wrong alignment on MusicEmitterComponent_GetSection");
static_assert(sizeof(MusicEmitterComponent_GetSection) == 0x000010, "Wrong size on MusicEmitterComponent_GetSection");
static_assert(offsetof(MusicEmitterComponent_GetSection, ReturnValue) == 0x000000, "Member 'MusicEmitterComponent_GetSection::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicEmitterComponent.GetTimeAuthorityHandle
// 0x0008 (0x0008 - 0x0000)
struct MusicEmitterComponent_GetTimeAuthorityHandle final
{
public:
	class UMusicHandle*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicEmitterComponent_GetTimeAuthorityHandle) == 0x000008, "Wrong alignment on MusicEmitterComponent_GetTimeAuthorityHandle");
static_assert(sizeof(MusicEmitterComponent_GetTimeAuthorityHandle) == 0x000008, "Wrong size on MusicEmitterComponent_GetTimeAuthorityHandle");
static_assert(offsetof(MusicEmitterComponent_GetTimeAuthorityHandle, ReturnValue) == 0x000000, "Member 'MusicEmitterComponent_GetTimeAuthorityHandle::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicTimelinePlayerComponent.GetLengthTimeSigAndNativeTempo
// 0x0010 (0x0010 - 0x0000)
struct MusicTimelinePlayerComponent_GetLengthTimeSigAndNativeTempo final
{
public:
	int32                                         numMeasures;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BPM;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         denom;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTimelinePlayerComponent_GetLengthTimeSigAndNativeTempo) == 0x000004, "Wrong alignment on MusicTimelinePlayerComponent_GetLengthTimeSigAndNativeTempo");
static_assert(sizeof(MusicTimelinePlayerComponent_GetLengthTimeSigAndNativeTempo) == 0x000010, "Wrong size on MusicTimelinePlayerComponent_GetLengthTimeSigAndNativeTempo");
static_assert(offsetof(MusicTimelinePlayerComponent_GetLengthTimeSigAndNativeTempo, numMeasures) == 0x000000, "Member 'MusicTimelinePlayerComponent_GetLengthTimeSigAndNativeTempo::numMeasures' has a wrong offset!");
static_assert(offsetof(MusicTimelinePlayerComponent_GetLengthTimeSigAndNativeTempo, BPM) == 0x000004, "Member 'MusicTimelinePlayerComponent_GetLengthTimeSigAndNativeTempo::BPM' has a wrong offset!");
static_assert(offsetof(MusicTimelinePlayerComponent_GetLengthTimeSigAndNativeTempo, Num) == 0x000008, "Member 'MusicTimelinePlayerComponent_GetLengthTimeSigAndNativeTempo::Num' has a wrong offset!");
static_assert(offsetof(MusicTimelinePlayerComponent_GetLengthTimeSigAndNativeTempo, denom) == 0x00000C, "Member 'MusicTimelinePlayerComponent_GetLengthTimeSigAndNativeTempo::denom' has a wrong offset!");

// Function HmxAudio.MusicTimelinePlayerComponent.GetTimeSignature
// 0x0008 (0x0008 - 0x0000)
struct MusicTimelinePlayerComponent_GetTimeSignature final
{
public:
	int32                                         Numerator;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Denominator;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTimelinePlayerComponent_GetTimeSignature) == 0x000004, "Wrong alignment on MusicTimelinePlayerComponent_GetTimeSignature");
static_assert(sizeof(MusicTimelinePlayerComponent_GetTimeSignature) == 0x000008, "Wrong size on MusicTimelinePlayerComponent_GetTimeSignature");
static_assert(offsetof(MusicTimelinePlayerComponent_GetTimeSignature, Numerator) == 0x000000, "Member 'MusicTimelinePlayerComponent_GetTimeSignature::Numerator' has a wrong offset!");
static_assert(offsetof(MusicTimelinePlayerComponent_GetTimeSignature, Denominator) == 0x000004, "Member 'MusicTimelinePlayerComponent_GetTimeSignature::Denominator' has a wrong offset!");

// Function HmxAudio.MusicTimelinePlayerComponent.SetLength
// 0x0004 (0x0004 - 0x0000)
struct MusicTimelinePlayerComponent_SetLength final
{
public:
	int32                                         newMeasures;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTimelinePlayerComponent_SetLength) == 0x000004, "Wrong alignment on MusicTimelinePlayerComponent_SetLength");
static_assert(sizeof(MusicTimelinePlayerComponent_SetLength) == 0x000004, "Wrong size on MusicTimelinePlayerComponent_SetLength");
static_assert(offsetof(MusicTimelinePlayerComponent_SetLength, newMeasures) == 0x000000, "Member 'MusicTimelinePlayerComponent_SetLength::newMeasures' has a wrong offset!");

// Function HmxAudio.MusicTimelinePlayerComponent.SetLengthTimeSigAndNativeTempo
// 0x0010 (0x0010 - 0x0000)
struct MusicTimelinePlayerComponent_SetLengthTimeSigAndNativeTempo final
{
public:
	int32                                         newMeasures;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BPM;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         denom;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTimelinePlayerComponent_SetLengthTimeSigAndNativeTempo) == 0x000004, "Wrong alignment on MusicTimelinePlayerComponent_SetLengthTimeSigAndNativeTempo");
static_assert(sizeof(MusicTimelinePlayerComponent_SetLengthTimeSigAndNativeTempo) == 0x000010, "Wrong size on MusicTimelinePlayerComponent_SetLengthTimeSigAndNativeTempo");
static_assert(offsetof(MusicTimelinePlayerComponent_SetLengthTimeSigAndNativeTempo, newMeasures) == 0x000000, "Member 'MusicTimelinePlayerComponent_SetLengthTimeSigAndNativeTempo::newMeasures' has a wrong offset!");
static_assert(offsetof(MusicTimelinePlayerComponent_SetLengthTimeSigAndNativeTempo, BPM) == 0x000004, "Member 'MusicTimelinePlayerComponent_SetLengthTimeSigAndNativeTempo::BPM' has a wrong offset!");
static_assert(offsetof(MusicTimelinePlayerComponent_SetLengthTimeSigAndNativeTempo, Num) == 0x000008, "Member 'MusicTimelinePlayerComponent_SetLengthTimeSigAndNativeTempo::Num' has a wrong offset!");
static_assert(offsetof(MusicTimelinePlayerComponent_SetLengthTimeSigAndNativeTempo, denom) == 0x00000C, "Member 'MusicTimelinePlayerComponent_SetLengthTimeSigAndNativeTempo::denom' has a wrong offset!");

// Function HmxAudio.MusicTimelinePlayerComponent.SetTimelineNativeTempo
// 0x0008 (0x0008 - 0x0000)
struct MusicTimelinePlayerComponent_SetTimelineNativeTempo final
{
public:
	float                                         newTempo;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyNow;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicTimelinePlayerComponent_SetTimelineNativeTempo) == 0x000004, "Wrong alignment on MusicTimelinePlayerComponent_SetTimelineNativeTempo");
static_assert(sizeof(MusicTimelinePlayerComponent_SetTimelineNativeTempo) == 0x000008, "Wrong size on MusicTimelinePlayerComponent_SetTimelineNativeTempo");
static_assert(offsetof(MusicTimelinePlayerComponent_SetTimelineNativeTempo, newTempo) == 0x000000, "Member 'MusicTimelinePlayerComponent_SetTimelineNativeTempo::newTempo' has a wrong offset!");
static_assert(offsetof(MusicTimelinePlayerComponent_SetTimelineNativeTempo, ApplyNow) == 0x000004, "Member 'MusicTimelinePlayerComponent_SetTimelineNativeTempo::ApplyNow' has a wrong offset!");

// Function HmxAudio.MusicTimelinePlayerComponent.SetTimelineNativeTempoImmediate
// 0x0004 (0x0004 - 0x0000)
struct MusicTimelinePlayerComponent_SetTimelineNativeTempoImmediate final
{
public:
	float                                         newTempo;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTimelinePlayerComponent_SetTimelineNativeTempoImmediate) == 0x000004, "Wrong alignment on MusicTimelinePlayerComponent_SetTimelineNativeTempoImmediate");
static_assert(sizeof(MusicTimelinePlayerComponent_SetTimelineNativeTempoImmediate) == 0x000004, "Wrong size on MusicTimelinePlayerComponent_SetTimelineNativeTempoImmediate");
static_assert(offsetof(MusicTimelinePlayerComponent_SetTimelineNativeTempoImmediate, newTempo) == 0x000000, "Member 'MusicTimelinePlayerComponent_SetTimelineNativeTempoImmediate::newTempo' has a wrong offset!");

// Function HmxAudio.MusicTimelinePlayerComponent.SetTimeSignature
// 0x0008 (0x0008 - 0x0000)
struct MusicTimelinePlayerComponent_SetTimeSignature final
{
public:
	int32                                         Numerator;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Denominator;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTimelinePlayerComponent_SetTimeSignature) == 0x000004, "Wrong alignment on MusicTimelinePlayerComponent_SetTimeSignature");
static_assert(sizeof(MusicTimelinePlayerComponent_SetTimeSignature) == 0x000008, "Wrong size on MusicTimelinePlayerComponent_SetTimeSignature");
static_assert(offsetof(MusicTimelinePlayerComponent_SetTimeSignature, Numerator) == 0x000000, "Member 'MusicTimelinePlayerComponent_SetTimeSignature::Numerator' has a wrong offset!");
static_assert(offsetof(MusicTimelinePlayerComponent_SetTimeSignature, Denominator) == 0x000004, "Member 'MusicTimelinePlayerComponent_SetTimeSignature::Denominator' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.CreateMusicClock
// 0x0020 (0x0020 - 0x0000)
struct OldMusicClockComponent_CreateMusicClock final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMusicEmitterComponent*                 Emitter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHarmonixHandleValidity                       Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Start_0;                                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UOldMusicClockComponent*                ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_CreateMusicClock) == 0x000008, "Wrong alignment on OldMusicClockComponent_CreateMusicClock");
static_assert(sizeof(OldMusicClockComponent_CreateMusicClock) == 0x000020, "Wrong size on OldMusicClockComponent_CreateMusicClock");
static_assert(offsetof(OldMusicClockComponent_CreateMusicClock, WorldContextObject) == 0x000000, "Member 'OldMusicClockComponent_CreateMusicClock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_CreateMusicClock, Emitter) == 0x000008, "Member 'OldMusicClockComponent_CreateMusicClock::Emitter' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_CreateMusicClock, Result) == 0x000010, "Member 'OldMusicClockComponent_CreateMusicClock::Result' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_CreateMusicClock, Start_0) == 0x000011, "Member 'OldMusicClockComponent_CreateMusicClock::Start_0' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_CreateMusicClock, ReturnValue) == 0x000018, "Member 'OldMusicClockComponent_CreateMusicClock::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.MusicalBeatDelay
// 0x0030 (0x0030 - 0x0000)
struct OldMusicClockComponent_MusicalBeatDelay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         beats;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicTimebase                                inTimeBase;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMusicHandle*                           MusicHandle;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_MusicalBeatDelay) == 0x000008, "Wrong alignment on OldMusicClockComponent_MusicalBeatDelay");
static_assert(sizeof(OldMusicClockComponent_MusicalBeatDelay) == 0x000030, "Wrong size on OldMusicClockComponent_MusicalBeatDelay");
static_assert(offsetof(OldMusicClockComponent_MusicalBeatDelay, WorldContextObject) == 0x000000, "Member 'OldMusicClockComponent_MusicalBeatDelay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_MusicalBeatDelay, beats) == 0x000008, "Member 'OldMusicClockComponent_MusicalBeatDelay::beats' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_MusicalBeatDelay, inTimeBase) == 0x00000C, "Member 'OldMusicClockComponent_MusicalBeatDelay::inTimeBase' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_MusicalBeatDelay, MusicHandle) == 0x000010, "Member 'OldMusicClockComponent_MusicalBeatDelay::MusicHandle' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_MusicalBeatDelay, LatentInfo) == 0x000018, "Member 'OldMusicClockComponent_MusicalBeatDelay::LatentInfo' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.MusicalTickDelay
// 0x0030 (0x0030 - 0x0000)
struct OldMusicClockComponent_MusicalTickDelay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ticks;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicTimebase                                inTimeBase;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMusicHandle*                           MusicHandle;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_MusicalTickDelay) == 0x000008, "Wrong alignment on OldMusicClockComponent_MusicalTickDelay");
static_assert(sizeof(OldMusicClockComponent_MusicalTickDelay) == 0x000030, "Wrong size on OldMusicClockComponent_MusicalTickDelay");
static_assert(offsetof(OldMusicClockComponent_MusicalTickDelay, WorldContextObject) == 0x000000, "Member 'OldMusicClockComponent_MusicalTickDelay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_MusicalTickDelay, ticks) == 0x000008, "Member 'OldMusicClockComponent_MusicalTickDelay::ticks' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_MusicalTickDelay, inTimeBase) == 0x00000C, "Member 'OldMusicClockComponent_MusicalTickDelay::inTimeBase' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_MusicalTickDelay, MusicHandle) == 0x000010, "Member 'OldMusicClockComponent_MusicalTickDelay::MusicHandle' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_MusicalTickDelay, LatentInfo) == 0x000018, "Member 'OldMusicClockComponent_MusicalTickDelay::LatentInfo' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetMusicHandle
// 0x0008 (0x0008 - 0x0000)
struct OldMusicClockComponent_GetMusicHandle final
{
public:
	class UMusicHandle*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetMusicHandle) == 0x000008, "Wrong alignment on OldMusicClockComponent_GetMusicHandle");
static_assert(sizeof(OldMusicClockComponent_GetMusicHandle) == 0x000008, "Wrong size on OldMusicClockComponent_GetMusicHandle");
static_assert(offsetof(OldMusicClockComponent_GetMusicHandle, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetMusicHandle::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.SetMusicHandle
// 0x0010 (0x0010 - 0x0000)
struct OldMusicClockComponent_SetMusicHandle final
{
public:
	class UMusicHandle*                           sh;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OldMusicClockComponent_SetMusicHandle) == 0x000008, "Wrong alignment on OldMusicClockComponent_SetMusicHandle");
static_assert(sizeof(OldMusicClockComponent_SetMusicHandle) == 0x000010, "Wrong size on OldMusicClockComponent_SetMusicHandle");
static_assert(offsetof(OldMusicClockComponent_SetMusicHandle, sh) == 0x000000, "Member 'OldMusicClockComponent_SetMusicHandle::sh' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_SetMusicHandle, ReturnValue) == 0x000008, "Member 'OldMusicClockComponent_SetMusicHandle::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.SpawnMusicalGridEvent
// 0x0040 (0x0040 - 0x0000)
struct OldMusicClockComponent_SpawnMusicalGridEvent final
{
public:
	EOldScheduleResult                            outResult;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMusicalTimeSpan                       gridConfig;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         holdOffMs;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         holdOffTicks;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          repeating;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMusicalGridEvent>          EventType;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Parent;                                            // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMusicalGridEvent*                      ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_SpawnMusicalGridEvent) == 0x000008, "Wrong alignment on OldMusicClockComponent_SpawnMusicalGridEvent");
static_assert(sizeof(OldMusicClockComponent_SpawnMusicalGridEvent) == 0x000040, "Wrong size on OldMusicClockComponent_SpawnMusicalGridEvent");
static_assert(offsetof(OldMusicClockComponent_SpawnMusicalGridEvent, outResult) == 0x000000, "Member 'OldMusicClockComponent_SpawnMusicalGridEvent::outResult' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_SpawnMusicalGridEvent, gridConfig) == 0x000004, "Member 'OldMusicClockComponent_SpawnMusicalGridEvent::gridConfig' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_SpawnMusicalGridEvent, holdOffMs) == 0x000014, "Member 'OldMusicClockComponent_SpawnMusicalGridEvent::holdOffMs' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_SpawnMusicalGridEvent, holdOffTicks) == 0x000018, "Member 'OldMusicClockComponent_SpawnMusicalGridEvent::holdOffTicks' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_SpawnMusicalGridEvent, repeating) == 0x00001C, "Member 'OldMusicClockComponent_SpawnMusicalGridEvent::repeating' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_SpawnMusicalGridEvent, EventType) == 0x000020, "Member 'OldMusicClockComponent_SpawnMusicalGridEvent::EventType' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_SpawnMusicalGridEvent, Parent) == 0x000028, "Member 'OldMusicClockComponent_SpawnMusicalGridEvent::Parent' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_SpawnMusicalGridEvent, Name_0) == 0x000030, "Member 'OldMusicClockComponent_SpawnMusicalGridEvent::Name_0' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_SpawnMusicalGridEvent, ReturnValue) == 0x000038, "Member 'OldMusicClockComponent_SpawnMusicalGridEvent::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.WatchEmitter
// 0x0010 (0x0010 - 0x0000)
struct OldMusicClockComponent_WatchEmitter final
{
public:
	class UMusicEmitterComponent*                 Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Start;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OldMusicClockComponent_WatchEmitter) == 0x000008, "Wrong alignment on OldMusicClockComponent_WatchEmitter");
static_assert(sizeof(OldMusicClockComponent_WatchEmitter) == 0x000010, "Wrong size on OldMusicClockComponent_WatchEmitter");
static_assert(offsetof(OldMusicClockComponent_WatchEmitter, Emitter) == 0x000000, "Member 'OldMusicClockComponent_WatchEmitter::Emitter' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_WatchEmitter, Start) == 0x000008, "Member 'OldMusicClockComponent_WatchEmitter::Start' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetBeat
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetBeat final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetBeat) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetBeat");
static_assert(sizeof(OldMusicClockComponent_GetBeat) == 0x000004, "Wrong size on OldMusicClockComponent_GetBeat");
static_assert(offsetof(OldMusicClockComponent_GetBeat, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetBeat::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetBeatInMeasure
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetBeatInMeasure final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetBeatInMeasure) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetBeatInMeasure");
static_assert(sizeof(OldMusicClockComponent_GetBeatInMeasure) == 0x000004, "Wrong size on OldMusicClockComponent_GetBeatInMeasure");
static_assert(offsetof(OldMusicClockComponent_GetBeatInMeasure, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetBeatInMeasure::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetCurentMsPerPulse
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetCurentMsPerPulse final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetCurentMsPerPulse) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetCurentMsPerPulse");
static_assert(sizeof(OldMusicClockComponent_GetCurentMsPerPulse) == 0x000004, "Wrong size on OldMusicClockComponent_GetCurentMsPerPulse");
static_assert(offsetof(OldMusicClockComponent_GetCurentMsPerPulse, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetCurentMsPerPulse::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetCurrentMsPerBeat
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetCurrentMsPerBeat final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetCurrentMsPerBeat) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetCurrentMsPerBeat");
static_assert(sizeof(OldMusicClockComponent_GetCurrentMsPerBeat) == 0x000004, "Wrong size on OldMusicClockComponent_GetCurrentMsPerBeat");
static_assert(offsetof(OldMusicClockComponent_GetCurrentMsPerBeat, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetCurrentMsPerBeat::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetCurrentMsPerMeasure
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetCurrentMsPerMeasure final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetCurrentMsPerMeasure) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetCurrentMsPerMeasure");
static_assert(sizeof(OldMusicClockComponent_GetCurrentMsPerMeasure) == 0x000004, "Wrong size on OldMusicClockComponent_GetCurrentMsPerMeasure");
static_assert(offsetof(OldMusicClockComponent_GetCurrentMsPerMeasure, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetCurrentMsPerMeasure::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetCurrentMsPerTick
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetCurrentMsPerTick final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetCurrentMsPerTick) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetCurrentMsPerTick");
static_assert(sizeof(OldMusicClockComponent_GetCurrentMsPerTick) == 0x000004, "Wrong size on OldMusicClockComponent_GetCurrentMsPerTick");
static_assert(offsetof(OldMusicClockComponent_GetCurrentMsPerTick, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetCurrentMsPerTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetCurrentTicksPerMeasure
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetCurrentTicksPerMeasure final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetCurrentTicksPerMeasure) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetCurrentTicksPerMeasure");
static_assert(sizeof(OldMusicClockComponent_GetCurrentTicksPerMeasure) == 0x000004, "Wrong size on OldMusicClockComponent_GetCurrentTicksPerMeasure");
static_assert(offsetof(OldMusicClockComponent_GetCurrentTicksPerMeasure, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetCurrentTicksPerMeasure::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetCurrentTicksPerPulse
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetCurrentTicksPerPulse final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetCurrentTicksPerPulse) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetCurrentTicksPerPulse");
static_assert(sizeof(OldMusicClockComponent_GetCurrentTicksPerPulse) == 0x000004, "Wrong size on OldMusicClockComponent_GetCurrentTicksPerPulse");
static_assert(offsetof(OldMusicClockComponent_GetCurrentTicksPerPulse, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetCurrentTicksPerPulse::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetDeltaBeat
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetDeltaBeat final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetDeltaBeat) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetDeltaBeat");
static_assert(sizeof(OldMusicClockComponent_GetDeltaBeat) == 0x000004, "Wrong size on OldMusicClockComponent_GetDeltaBeat");
static_assert(offsetof(OldMusicClockComponent_GetDeltaBeat, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetDeltaBeat::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetDeltaMeasure
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetDeltaMeasure final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetDeltaMeasure) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetDeltaMeasure");
static_assert(sizeof(OldMusicClockComponent_GetDeltaMeasure) == 0x000004, "Wrong size on OldMusicClockComponent_GetDeltaMeasure");
static_assert(offsetof(OldMusicClockComponent_GetDeltaMeasure, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetDeltaMeasure::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetDeltaTick
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetDeltaTick final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetDeltaTick) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetDeltaTick");
static_assert(sizeof(OldMusicClockComponent_GetDeltaTick) == 0x000004, "Wrong size on OldMusicClockComponent_GetDeltaTick");
static_assert(offsetof(OldMusicClockComponent_GetDeltaTick, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetDeltaTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetFractionalBeat
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetFractionalBeat final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetFractionalBeat) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetFractionalBeat");
static_assert(sizeof(OldMusicClockComponent_GetFractionalBeat) == 0x000004, "Wrong size on OldMusicClockComponent_GetFractionalBeat");
static_assert(offsetof(OldMusicClockComponent_GetFractionalBeat, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetFractionalBeat::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetFractionalBeatInMeasure
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetFractionalBeatInMeasure final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetFractionalBeatInMeasure) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetFractionalBeatInMeasure");
static_assert(sizeof(OldMusicClockComponent_GetFractionalBeatInMeasure) == 0x000004, "Wrong size on OldMusicClockComponent_GetFractionalBeatInMeasure");
static_assert(offsetof(OldMusicClockComponent_GetFractionalBeatInMeasure, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetFractionalBeatInMeasure::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetFractionalMeasure
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetFractionalMeasure final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetFractionalMeasure) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetFractionalMeasure");
static_assert(sizeof(OldMusicClockComponent_GetFractionalMeasure) == 0x000004, "Wrong size on OldMusicClockComponent_GetFractionalMeasure");
static_assert(offsetof(OldMusicClockComponent_GetFractionalMeasure, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetFractionalMeasure::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetFractionalTick
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetFractionalTick final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetFractionalTick) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetFractionalTick");
static_assert(sizeof(OldMusicClockComponent_GetFractionalTick) == 0x000004, "Wrong size on OldMusicClockComponent_GetFractionalTick");
static_assert(offsetof(OldMusicClockComponent_GetFractionalTick, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetFractionalTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetFractionalTickInBeat
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetFractionalTickInBeat final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetFractionalTickInBeat) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetFractionalTickInBeat");
static_assert(sizeof(OldMusicClockComponent_GetFractionalTickInBeat) == 0x000004, "Wrong size on OldMusicClockComponent_GetFractionalTickInBeat");
static_assert(offsetof(OldMusicClockComponent_GetFractionalTickInBeat, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetFractionalTickInBeat::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetFractionalTickInMeasure
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetFractionalTickInMeasure final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetFractionalTickInMeasure) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetFractionalTickInMeasure");
static_assert(sizeof(OldMusicClockComponent_GetFractionalTickInMeasure) == 0x000004, "Wrong size on OldMusicClockComponent_GetFractionalTickInMeasure");
static_assert(offsetof(OldMusicClockComponent_GetFractionalTickInMeasure, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetFractionalTickInMeasure::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetMeasure
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetMeasure final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetMeasure) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetMeasure");
static_assert(sizeof(OldMusicClockComponent_GetMeasure) == 0x000004, "Wrong size on OldMusicClockComponent_GetMeasure");
static_assert(offsetof(OldMusicClockComponent_GetMeasure, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetMeasure::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetSeconds
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetSeconds) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetSeconds");
static_assert(sizeof(OldMusicClockComponent_GetSeconds) == 0x000004, "Wrong size on OldMusicClockComponent_GetSeconds");
static_assert(offsetof(OldMusicClockComponent_GetSeconds, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetSeconds::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetSongPos
// 0x004C (0x004C - 0x0000)
struct OldMusicClockComponent_GetSongPos final
{
public:
	struct FSongPos                               ReturnValue;                                       // 0x0000(0x004C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetSongPos) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetSongPos");
static_assert(sizeof(OldMusicClockComponent_GetSongPos) == 0x00004C, "Wrong size on OldMusicClockComponent_GetSongPos");
static_assert(offsetof(OldMusicClockComponent_GetSongPos, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetSongPos::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetState
// 0x0001 (0x0001 - 0x0000)
struct OldMusicClockComponent_GetState final
{
public:
	EOldMusicClockState                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetState) == 0x000001, "Wrong alignment on OldMusicClockComponent_GetState");
static_assert(sizeof(OldMusicClockComponent_GetState) == 0x000001, "Wrong size on OldMusicClockComponent_GetState");
static_assert(offsetof(OldMusicClockComponent_GetState, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetState::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetTick
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetTick final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetTick) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetTick");
static_assert(sizeof(OldMusicClockComponent_GetTick) == 0x000004, "Wrong size on OldMusicClockComponent_GetTick");
static_assert(offsetof(OldMusicClockComponent_GetTick, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetTickInBeat
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetTickInBeat final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetTickInBeat) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetTickInBeat");
static_assert(sizeof(OldMusicClockComponent_GetTickInBeat) == 0x000004, "Wrong size on OldMusicClockComponent_GetTickInBeat");
static_assert(offsetof(OldMusicClockComponent_GetTickInBeat, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetTickInBeat::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetTickInMeasure
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetTickInMeasure final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetTickInMeasure) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetTickInMeasure");
static_assert(sizeof(OldMusicClockComponent_GetTickInMeasure) == 0x000004, "Wrong size on OldMusicClockComponent_GetTickInMeasure");
static_assert(offsetof(OldMusicClockComponent_GetTickInMeasure, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetTickInMeasure::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetTicksPerMeasure
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetTicksPerMeasure final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetTicksPerMeasure) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetTicksPerMeasure");
static_assert(sizeof(OldMusicClockComponent_GetTicksPerMeasure) == 0x000004, "Wrong size on OldMusicClockComponent_GetTicksPerMeasure");
static_assert(offsetof(OldMusicClockComponent_GetTicksPerMeasure, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetTicksPerMeasure::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.GetTicksPerPulse
// 0x0004 (0x0004 - 0x0000)
struct OldMusicClockComponent_GetTicksPerPulse final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_GetTicksPerPulse) == 0x000004, "Wrong alignment on OldMusicClockComponent_GetTicksPerPulse");
static_assert(sizeof(OldMusicClockComponent_GetTicksPerPulse) == 0x000004, "Wrong size on OldMusicClockComponent_GetTicksPerPulse");
static_assert(offsetof(OldMusicClockComponent_GetTicksPerPulse, ReturnValue) == 0x000000, "Member 'OldMusicClockComponent_GetTicksPerPulse::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.MeasureSpanProgress
// 0x0014 (0x0014 - 0x0000)
struct OldMusicClockComponent_MeasureSpanProgress final
{
public:
	struct FMusicalTimeSpan                       span;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_MeasureSpanProgress) == 0x000004, "Wrong alignment on OldMusicClockComponent_MeasureSpanProgress");
static_assert(sizeof(OldMusicClockComponent_MeasureSpanProgress) == 0x000014, "Wrong size on OldMusicClockComponent_MeasureSpanProgress");
static_assert(offsetof(OldMusicClockComponent_MeasureSpanProgress, span) == 0x000000, "Member 'OldMusicClockComponent_MeasureSpanProgress::span' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_MeasureSpanProgress, ReturnValue) == 0x000010, "Member 'OldMusicClockComponent_MeasureSpanProgress::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.MeasureTimeSinceSpan
// 0x0014 (0x0014 - 0x0000)
struct OldMusicClockComponent_MeasureTimeSinceSpan final
{
public:
	struct FMusicalTimeSpan                       span;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_MeasureTimeSinceSpan) == 0x000004, "Wrong alignment on OldMusicClockComponent_MeasureTimeSinceSpan");
static_assert(sizeof(OldMusicClockComponent_MeasureTimeSinceSpan) == 0x000014, "Wrong size on OldMusicClockComponent_MeasureTimeSinceSpan");
static_assert(offsetof(OldMusicClockComponent_MeasureTimeSinceSpan, span) == 0x000000, "Member 'OldMusicClockComponent_MeasureTimeSinceSpan::span' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_MeasureTimeSinceSpan, ReturnValue) == 0x000010, "Member 'OldMusicClockComponent_MeasureTimeSinceSpan::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.MeasureTimeUntilSpan
// 0x0014 (0x0014 - 0x0000)
struct OldMusicClockComponent_MeasureTimeUntilSpan final
{
public:
	struct FMusicalTimeSpan                       span;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_MeasureTimeUntilSpan) == 0x000004, "Wrong alignment on OldMusicClockComponent_MeasureTimeUntilSpan");
static_assert(sizeof(OldMusicClockComponent_MeasureTimeUntilSpan) == 0x000014, "Wrong size on OldMusicClockComponent_MeasureTimeUntilSpan");
static_assert(offsetof(OldMusicClockComponent_MeasureTimeUntilSpan, span) == 0x000000, "Member 'OldMusicClockComponent_MeasureTimeUntilSpan::span' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_MeasureTimeUntilSpan, ReturnValue) == 0x000010, "Member 'OldMusicClockComponent_MeasureTimeUntilSpan::ReturnValue' has a wrong offset!");

// Function HmxAudio.OldMusicClockComponent.MsToFractionalTick
// 0x0008 (0x0008 - 0x0000)
struct OldMusicClockComponent_MsToFractionalTick final
{
public:
	float                                         ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldMusicClockComponent_MsToFractionalTick) == 0x000004, "Wrong alignment on OldMusicClockComponent_MsToFractionalTick");
static_assert(sizeof(OldMusicClockComponent_MsToFractionalTick) == 0x000008, "Wrong size on OldMusicClockComponent_MsToFractionalTick");
static_assert(offsetof(OldMusicClockComponent_MsToFractionalTick, ms) == 0x000000, "Member 'OldMusicClockComponent_MsToFractionalTick::ms' has a wrong offset!");
static_assert(offsetof(OldMusicClockComponent_MsToFractionalTick, ReturnValue) == 0x000004, "Member 'OldMusicClockComponent_MsToFractionalTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.AppendSteps
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerComponent_AppendSteps final
{
public:
	int32                                         numSteps;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_AppendSteps) == 0x000004, "Wrong alignment on StepSequencerComponent_AppendSteps");
static_assert(sizeof(StepSequencerComponent_AppendSteps) == 0x000004, "Wrong size on StepSequencerComponent_AppendSteps");
static_assert(offsetof(StepSequencerComponent_AppendSteps, numSteps) == 0x000000, "Member 'StepSequencerComponent_AppendSteps::numSteps' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.ApplySaveToTrack
// 0x0008 (0x0008 - 0x0000)
struct StepSequencerComponent_ApplySaveToTrack final
{
public:
	class UStepSequencerTrack*                    track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_ApplySaveToTrack) == 0x000008, "Wrong alignment on StepSequencerComponent_ApplySaveToTrack");
static_assert(sizeof(StepSequencerComponent_ApplySaveToTrack) == 0x000008, "Wrong size on StepSequencerComponent_ApplySaveToTrack");
static_assert(offsetof(StepSequencerComponent_ApplySaveToTrack, track) == 0x000000, "Member 'StepSequencerComponent_ApplySaveToTrack::track' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.ApplyTemplate
// 0x0010 (0x0010 - 0x0000)
struct StepSequencerComponent_ApplyTemplate final
{
public:
	struct FSequencerSave                         Template;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_ApplyTemplate) == 0x000008, "Wrong alignment on StepSequencerComponent_ApplyTemplate");
static_assert(sizeof(StepSequencerComponent_ApplyTemplate) == 0x000010, "Wrong size on StepSequencerComponent_ApplyTemplate");
static_assert(offsetof(StepSequencerComponent_ApplyTemplate, Template) == 0x000000, "Member 'StepSequencerComponent_ApplyTemplate::Template' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.CreateNewTrack
// 0x0038 (0x0038 - 0x0000)
struct StepSequencerComponent_CreateNewTrack final
{
public:
	struct FTrackArgs                             args;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UStepSequencerTrack*                    ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_CreateNewTrack) == 0x000008, "Wrong alignment on StepSequencerComponent_CreateNewTrack");
static_assert(sizeof(StepSequencerComponent_CreateNewTrack) == 0x000038, "Wrong size on StepSequencerComponent_CreateNewTrack");
static_assert(offsetof(StepSequencerComponent_CreateNewTrack, args) == 0x000000, "Member 'StepSequencerComponent_CreateNewTrack::args' has a wrong offset!");
static_assert(offsetof(StepSequencerComponent_CreateNewTrack, ReturnValue) == 0x000030, "Member 'StepSequencerComponent_CreateNewTrack::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.MakeNewMidiSongFromTracks
// 0x0008 (0x0008 - 0x0000)
struct StepSequencerComponent_MakeNewMidiSongFromTracks final
{
public:
	class UMidiMusicAsset*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_MakeNewMidiSongFromTracks) == 0x000008, "Wrong alignment on StepSequencerComponent_MakeNewMidiSongFromTracks");
static_assert(sizeof(StepSequencerComponent_MakeNewMidiSongFromTracks) == 0x000008, "Wrong size on StepSequencerComponent_MakeNewMidiSongFromTracks");
static_assert(offsetof(StepSequencerComponent_MakeNewMidiSongFromTracks, ReturnValue) == 0x000000, "Member 'StepSequencerComponent_MakeNewMidiSongFromTracks::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.OnAnyGridSquareStateChanged
// 0x0008 (0x0008 - 0x0000)
struct StepSequencerComponent_OnAnyGridSquareStateChanged final
{
public:
	class UStepSequencerTrack*                    track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_OnAnyGridSquareStateChanged) == 0x000008, "Wrong alignment on StepSequencerComponent_OnAnyGridSquareStateChanged");
static_assert(sizeof(StepSequencerComponent_OnAnyGridSquareStateChanged) == 0x000008, "Wrong size on StepSequencerComponent_OnAnyGridSquareStateChanged");
static_assert(offsetof(StepSequencerComponent_OnAnyGridSquareStateChanged, track) == 0x000000, "Member 'StepSequencerComponent_OnAnyGridSquareStateChanged::track' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.OnGridSquareStateChanged
// 0x0010 (0x0010 - 0x0000)
struct StepSequencerComponent_OnGridSquareStateChanged final
{
public:
	class UStepSequencerTrack*                    track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMidiMusicTimeSlot*                     timeSlot;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_OnGridSquareStateChanged) == 0x000008, "Wrong alignment on StepSequencerComponent_OnGridSquareStateChanged");
static_assert(sizeof(StepSequencerComponent_OnGridSquareStateChanged) == 0x000010, "Wrong size on StepSequencerComponent_OnGridSquareStateChanged");
static_assert(offsetof(StepSequencerComponent_OnGridSquareStateChanged, track) == 0x000000, "Member 'StepSequencerComponent_OnGridSquareStateChanged::track' has a wrong offset!");
static_assert(offsetof(StepSequencerComponent_OnGridSquareStateChanged, timeSlot) == 0x000008, "Member 'StepSequencerComponent_OnGridSquareStateChanged::timeSlot' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.PopSteps
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerComponent_PopSteps final
{
public:
	int32                                         numSteps;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_PopSteps) == 0x000004, "Wrong alignment on StepSequencerComponent_PopSteps");
static_assert(sizeof(StepSequencerComponent_PopSteps) == 0x000004, "Wrong size on StepSequencerComponent_PopSteps");
static_assert(offsetof(StepSequencerComponent_PopSteps, numSteps) == 0x000000, "Member 'StepSequencerComponent_PopSteps::numSteps' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.RemoveTrack
// 0x0010 (0x0010 - 0x0000)
struct StepSequencerComponent_RemoveTrack final
{
public:
	class UStepSequencerTrack*                    track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StepSequencerComponent_RemoveTrack) == 0x000008, "Wrong alignment on StepSequencerComponent_RemoveTrack");
static_assert(sizeof(StepSequencerComponent_RemoveTrack) == 0x000010, "Wrong size on StepSequencerComponent_RemoveTrack");
static_assert(offsetof(StepSequencerComponent_RemoveTrack, track) == 0x000000, "Member 'StepSequencerComponent_RemoveTrack::track' has a wrong offset!");
static_assert(offsetof(StepSequencerComponent_RemoveTrack, ReturnValue) == 0x000008, "Member 'StepSequencerComponent_RemoveTrack::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.RemoveTrackAt
// 0x0008 (0x0008 - 0x0000)
struct StepSequencerComponent_RemoveTrackAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StepSequencerComponent_RemoveTrackAt) == 0x000004, "Wrong alignment on StepSequencerComponent_RemoveTrackAt");
static_assert(sizeof(StepSequencerComponent_RemoveTrackAt) == 0x000008, "Wrong size on StepSequencerComponent_RemoveTrackAt");
static_assert(offsetof(StepSequencerComponent_RemoveTrackAt, Index_0) == 0x000000, "Member 'StepSequencerComponent_RemoveTrackAt::Index_0' has a wrong offset!");
static_assert(offsetof(StepSequencerComponent_RemoveTrackAt, ReturnValue) == 0x000004, "Member 'StepSequencerComponent_RemoveTrackAt::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.SetBeatLength
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerComponent_SetBeatLength final
{
public:
	float                                         BeatLength;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_SetBeatLength) == 0x000004, "Wrong alignment on StepSequencerComponent_SetBeatLength");
static_assert(sizeof(StepSequencerComponent_SetBeatLength) == 0x000004, "Wrong size on StepSequencerComponent_SetBeatLength");
static_assert(offsetof(StepSequencerComponent_SetBeatLength, BeatLength) == 0x000000, "Member 'StepSequencerComponent_SetBeatLength::BeatLength' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.SetCurrentPage
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerComponent_SetCurrentPage final
{
public:
	int32                                         inCurrentPage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_SetCurrentPage) == 0x000004, "Wrong alignment on StepSequencerComponent_SetCurrentPage");
static_assert(sizeof(StepSequencerComponent_SetCurrentPage) == 0x000004, "Wrong size on StepSequencerComponent_SetCurrentPage");
static_assert(offsetof(StepSequencerComponent_SetCurrentPage, inCurrentPage) == 0x000000, "Member 'StepSequencerComponent_SetCurrentPage::inCurrentPage' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.SetMonophonic
// 0x0001 (0x0001 - 0x0000)
struct StepSequencerComponent_SetMonophonic final
{
public:
	bool                                          bNewMonophonic;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_SetMonophonic) == 0x000001, "Wrong alignment on StepSequencerComponent_SetMonophonic");
static_assert(sizeof(StepSequencerComponent_SetMonophonic) == 0x000001, "Wrong size on StepSequencerComponent_SetMonophonic");
static_assert(offsetof(StepSequencerComponent_SetMonophonic, bNewMonophonic) == 0x000000, "Member 'StepSequencerComponent_SetMonophonic::bNewMonophonic' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.SetNumberPages
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerComponent_SetNumberPages final
{
public:
	int32                                         inPages;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_SetNumberPages) == 0x000004, "Wrong alignment on StepSequencerComponent_SetNumberPages");
static_assert(sizeof(StepSequencerComponent_SetNumberPages) == 0x000004, "Wrong size on StepSequencerComponent_SetNumberPages");
static_assert(offsetof(StepSequencerComponent_SetNumberPages, inPages) == 0x000000, "Member 'StepSequencerComponent_SetNumberPages::inPages' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.UpdateMidiSongOnMidiMusicPlayer
// 0x0010 (0x0010 - 0x0000)
struct StepSequencerComponent_UpdateMidiSongOnMidiMusicPlayer final
{
public:
	class UMidiMusicPlayerComponent*              InMidiMusicPlayerComponent;                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceRefresh;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StepSequencerComponent_UpdateMidiSongOnMidiMusicPlayer) == 0x000008, "Wrong alignment on StepSequencerComponent_UpdateMidiSongOnMidiMusicPlayer");
static_assert(sizeof(StepSequencerComponent_UpdateMidiSongOnMidiMusicPlayer) == 0x000010, "Wrong size on StepSequencerComponent_UpdateMidiSongOnMidiMusicPlayer");
static_assert(offsetof(StepSequencerComponent_UpdateMidiSongOnMidiMusicPlayer, InMidiMusicPlayerComponent) == 0x000000, "Member 'StepSequencerComponent_UpdateMidiSongOnMidiMusicPlayer::InMidiMusicPlayerComponent' has a wrong offset!");
static_assert(offsetof(StepSequencerComponent_UpdateMidiSongOnMidiMusicPlayer, ForceRefresh) == 0x000008, "Member 'StepSequencerComponent_UpdateMidiSongOnMidiMusicPlayer::ForceRefresh' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.FindTrackAt
// 0x0010 (0x0010 - 0x0000)
struct StepSequencerComponent_FindTrackAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStepSequencerTrack*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_FindTrackAt) == 0x000008, "Wrong alignment on StepSequencerComponent_FindTrackAt");
static_assert(sizeof(StepSequencerComponent_FindTrackAt) == 0x000010, "Wrong size on StepSequencerComponent_FindTrackAt");
static_assert(offsetof(StepSequencerComponent_FindTrackAt, Index_0) == 0x000000, "Member 'StepSequencerComponent_FindTrackAt::Index_0' has a wrong offset!");
static_assert(offsetof(StepSequencerComponent_FindTrackAt, ReturnValue) == 0x000008, "Member 'StepSequencerComponent_FindTrackAt::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.GetCurrentPage
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerComponent_GetCurrentPage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_GetCurrentPage) == 0x000004, "Wrong alignment on StepSequencerComponent_GetCurrentPage");
static_assert(sizeof(StepSequencerComponent_GetCurrentPage) == 0x000004, "Wrong size on StepSequencerComponent_GetCurrentPage");
static_assert(offsetof(StepSequencerComponent_GetCurrentPage, ReturnValue) == 0x000000, "Member 'StepSequencerComponent_GetCurrentPage::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.GetLengthTicks
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerComponent_GetLengthTicks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_GetLengthTicks) == 0x000004, "Wrong alignment on StepSequencerComponent_GetLengthTicks");
static_assert(sizeof(StepSequencerComponent_GetLengthTicks) == 0x000004, "Wrong size on StepSequencerComponent_GetLengthTicks");
static_assert(offsetof(StepSequencerComponent_GetLengthTicks, ReturnValue) == 0x000000, "Member 'StepSequencerComponent_GetLengthTicks::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.GetMaxNumSteps
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerComponent_GetMaxNumSteps final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_GetMaxNumSteps) == 0x000004, "Wrong alignment on StepSequencerComponent_GetMaxNumSteps");
static_assert(sizeof(StepSequencerComponent_GetMaxNumSteps) == 0x000004, "Wrong size on StepSequencerComponent_GetMaxNumSteps");
static_assert(offsetof(StepSequencerComponent_GetMaxNumSteps, ReturnValue) == 0x000000, "Member 'StepSequencerComponent_GetMaxNumSteps::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.GetNumSteps
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerComponent_GetNumSteps final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_GetNumSteps) == 0x000004, "Wrong alignment on StepSequencerComponent_GetNumSteps");
static_assert(sizeof(StepSequencerComponent_GetNumSteps) == 0x000004, "Wrong size on StepSequencerComponent_GetNumSteps");
static_assert(offsetof(StepSequencerComponent_GetNumSteps, ReturnValue) == 0x000000, "Member 'StepSequencerComponent_GetNumSteps::ReturnValue' has a wrong offset!");

// Function HmxAudio.StepSequencerComponent.GetNumTracks
// 0x0004 (0x0004 - 0x0000)
struct StepSequencerComponent_GetNumTracks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StepSequencerComponent_GetNumTracks) == 0x000004, "Wrong alignment on StepSequencerComponent_GetNumTracks");
static_assert(sizeof(StepSequencerComponent_GetNumTracks) == 0x000004, "Wrong size on StepSequencerComponent_GetNumTracks");
static_assert(offsetof(StepSequencerComponent_GetNumTracks, ReturnValue) == 0x000000, "Member 'StepSequencerComponent_GetNumTracks::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.CreateHarmonixAnalyzerInstanceOnEmitter
// 0x00C0 (0x00C0 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_CreateHarmonixAnalyzerInstanceOnEmitter final
{
public:
	class UMusicEmitterComponent*                 Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixAnalyzerEffectSettings        InSettings;                                        // 0x0008(0x00B0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UHarmonixAnalyzerSourceEffectPreset*    ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_CreateHarmonixAnalyzerInstanceOnEmitter) == 0x000008, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_CreateHarmonixAnalyzerInstanceOnEmitter");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_CreateHarmonixAnalyzerInstanceOnEmitter) == 0x0000C0, "Wrong size on HarmonixAnalyzerSourceEffectPreset_CreateHarmonixAnalyzerInstanceOnEmitter");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_CreateHarmonixAnalyzerInstanceOnEmitter, Emitter) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_CreateHarmonixAnalyzerInstanceOnEmitter::Emitter' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_CreateHarmonixAnalyzerInstanceOnEmitter, InSettings) == 0x000008, "Member 'HarmonixAnalyzerSourceEffectPreset_CreateHarmonixAnalyzerInstanceOnEmitter::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_CreateHarmonixAnalyzerInstanceOnEmitter, ReturnValue) == 0x0000B8, "Member 'HarmonixAnalyzerSourceEffectPreset_CreateHarmonixAnalyzerInstanceOnEmitter::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.GetHarmonixAnalyzerResults
// 0x0090 (0x0090 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_GetHarmonixAnalyzerResults final
{
public:
	class FName                                   AnalyzerName;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHarmonixAnalyzerEffectResults         Result;                                            // 0x0008(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ResetMonoPeakDb;                                   // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_GetHarmonixAnalyzerResults) == 0x000008, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_GetHarmonixAnalyzerResults");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_GetHarmonixAnalyzerResults) == 0x000090, "Wrong size on HarmonixAnalyzerSourceEffectPreset_GetHarmonixAnalyzerResults");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_GetHarmonixAnalyzerResults, AnalyzerName) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_GetHarmonixAnalyzerResults::AnalyzerName' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_GetHarmonixAnalyzerResults, Result) == 0x000008, "Member 'HarmonixAnalyzerSourceEffectPreset_GetHarmonixAnalyzerResults::Result' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_GetHarmonixAnalyzerResults, ResetMonoPeakDb) == 0x000088, "Member 'HarmonixAnalyzerSourceEffectPreset_GetHarmonixAnalyzerResults::ResetMonoPeakDb' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.GetResults
// 0x0088 (0x0088 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_GetResults final
{
public:
	struct FHarmonixAnalyzerEffectResults         Result;                                            // 0x0000(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ResetMonoPeakDb;                                   // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_GetResults) == 0x000008, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_GetResults");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_GetResults) == 0x000088, "Wrong size on HarmonixAnalyzerSourceEffectPreset_GetResults");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_GetResults, Result) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_GetResults::Result' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_GetResults, ResetMonoPeakDb) == 0x000080, "Member 'HarmonixAnalyzerSourceEffectPreset_GetResults::ResetMonoPeakDb' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankBandEndHz
// 0x0008 (0x0008 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandEndHz final
{
public:
	int32                                         bandIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         hz;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandEndHz) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandEndHz");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandEndHz) == 0x000008, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandEndHz");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandEndHz, bandIndex) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandEndHz::bandIndex' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandEndHz, hz) == 0x000004, "Member 'HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandEndHz::hz' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankBandOutputSettings
// 0x0014 (0x0014 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandOutputSettings final
{
public:
	int32                                         bandIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixAnalyzerOutputSettings        outSsettings;                                      // 0x0004(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandOutputSettings) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandOutputSettings");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandOutputSettings) == 0x000014, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandOutputSettings");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandOutputSettings, bandIndex) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandOutputSettings::bandIndex' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandOutputSettings, outSsettings) == 0x000004, "Member 'HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandOutputSettings::outSsettings' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankBandStartHz
// 0x0008 (0x0008 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandStartHz final
{
public:
	int32                                         bandIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         hz;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandStartHz) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandStartHz");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandStartHz) == 0x000008, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandStartHz");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandStartHz, bandIndex) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandStartHz::bandIndex' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandStartHz, hz) == 0x000004, "Member 'HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankBandStartHz::hz' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankEnabled final
{
public:
	bool                                          E;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankEnabled) == 0x000001, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankEnabled");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankEnabled) == 0x000001, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankEnabled");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankEnabled, E) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankEnabled::E' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankFallMs
// 0x0008 (0x0008 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankFallMs final
{
public:
	int32                                         bandIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ms;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankFallMs) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankFallMs");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankFallMs) == 0x000008, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankFallMs");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankFallMs, bandIndex) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankFallMs::bandIndex' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankFallMs, ms) == 0x000004, "Member 'HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankFallMs::ms' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankMaxDB
// 0x0008 (0x0008 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankMaxDB final
{
public:
	int32                                         bandIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         dbMax;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankMaxDB) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankMaxDB");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankMaxDB) == 0x000008, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankMaxDB");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankMaxDB, bandIndex) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankMaxDB::bandIndex' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankMaxDB, dbMax) == 0x000004, "Member 'HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankMaxDB::dbMax' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankRangeDB
// 0x0008 (0x0008 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRangeDB final
{
public:
	int32                                         bandIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         dbRange;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRangeDB) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRangeDB");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRangeDB) == 0x000008, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRangeDB");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRangeDB, bandIndex) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRangeDB::bandIndex' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRangeDB, dbRange) == 0x000004, "Member 'HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRangeDB::dbRange' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetBandFilterBankRiseMs
// 0x0008 (0x0008 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRiseMs final
{
public:
	int32                                         bandIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ms;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRiseMs) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRiseMs");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRiseMs) == 0x000008, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRiseMs");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRiseMs, bandIndex) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRiseMs::bandIndex' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRiseMs, ms) == 0x000004, "Member 'HarmonixAnalyzerSourceEffectPreset_SetBandFilterBankRiseMs::ms' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetDynamicRangeMeterAlphas
// 0x0010 (0x0010 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterAlphas final
{
public:
	float                                         highRising;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         highFalling;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         lowRising;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         lowFalling;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterAlphas) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterAlphas");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterAlphas) == 0x000010, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterAlphas");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterAlphas, highRising) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterAlphas::highRising' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterAlphas, highFalling) == 0x000004, "Member 'HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterAlphas::highFalling' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterAlphas, lowRising) == 0x000008, "Member 'HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterAlphas::lowRising' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterAlphas, lowFalling) == 0x00000C, "Member 'HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterAlphas::lowFalling' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetDynamicRangeMeterEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterEnabled final
{
public:
	bool                                          E;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterEnabled) == 0x000001, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterEnabled");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterEnabled) == 0x000001, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterEnabled");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterEnabled, E) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterEnabled::E' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetDynamicRangeMeterFilter
// 0x0008 (0x0008 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterFilter final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Cutoff;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterFilter) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterFilter");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterFilter) == 0x000008, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterFilter");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterFilter, Enable) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterFilter::Enable' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterFilter, Cutoff) == 0x000004, "Member 'HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterFilter::Cutoff' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetDynamicRangeMeterRmsWindow
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterRmsWindow final
{
public:
	int32                                         Frames;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterRmsWindow) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterRmsWindow");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterRmsWindow) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterRmsWindow");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterRmsWindow, Frames) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetDynamicRangeMeterRmsWindow::Frames' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetFFTEnabled final
{
public:
	bool                                          E;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetFFTEnabled) == 0x000001, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetFFTEnabled");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetFFTEnabled) == 0x000001, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetFFTEnabled");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetFFTEnabled, E) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetFFTEnabled::E' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTEqualLoudnessWeights
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetFFTEqualLoudnessWeights final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetFFTEqualLoudnessWeights) == 0x000001, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetFFTEqualLoudnessWeights");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetFFTEqualLoudnessWeights) == 0x000001, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetFFTEqualLoudnessWeights");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetFFTEqualLoudnessWeights, On) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetFFTEqualLoudnessWeights::On' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTFallMs
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetFFTFallMs final
{
public:
	float                                         ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetFFTFallMs) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetFFTFallMs");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetFFTFallMs) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetFFTFallMs");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetFFTFallMs, ms) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetFFTFallMs::ms' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTLength
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetFFTLength final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetFFTLength) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetFFTLength");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetFFTLength) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetFFTLength");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetFFTLength, Num) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetFFTLength::Num' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTMaxDB
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetFFTMaxDB final
{
public:
	float                                         dbMax;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetFFTMaxDB) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetFFTMaxDB");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetFFTMaxDB) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetFFTMaxDB");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetFFTMaxDB, dbMax) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetFFTMaxDB::dbMax' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTMaxFrequencyHz
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetFFTMaxFrequencyHz final
{
public:
	float                                         hz;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetFFTMaxFrequencyHz) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetFFTMaxFrequencyHz");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetFFTMaxFrequencyHz) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetFFTMaxFrequencyHz");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetFFTMaxFrequencyHz, hz) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetFFTMaxFrequencyHz::hz' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTMelScaleBinning
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetFFTMelScaleBinning final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetFFTMelScaleBinning) == 0x000001, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetFFTMelScaleBinning");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetFFTMelScaleBinning) == 0x000001, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetFFTMelScaleBinning");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetFFTMelScaleBinning, On) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetFFTMelScaleBinning::On' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTMinFrequencyHz
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetFFTMinFrequencyHz final
{
public:
	float                                         hz;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetFFTMinFrequencyHz) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetFFTMinFrequencyHz");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetFFTMinFrequencyHz) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetFFTMinFrequencyHz");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetFFTMinFrequencyHz, hz) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetFFTMinFrequencyHz::hz' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTNumResultBins
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetFFTNumResultBins final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetFFTNumResultBins) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetFFTNumResultBins");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetFFTNumResultBins) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetFFTNumResultBins");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetFFTNumResultBins, Num) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetFFTNumResultBins::Num' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTOutputSettings
// 0x0010 (0x0010 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetFFTOutputSettings final
{
public:
	struct FHarmonixAnalyzerOutputSettings        outSsettings;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetFFTOutputSettings) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetFFTOutputSettings");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetFFTOutputSettings) == 0x000010, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetFFTOutputSettings");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetFFTOutputSettings, outSsettings) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetFFTOutputSettings::outSsettings' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTRangeDB
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetFFTRangeDB final
{
public:
	float                                         dbRange;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetFFTRangeDB) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetFFTRangeDB");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetFFTRangeDB) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetFFTRangeDB");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetFFTRangeDB, dbRange) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetFFTRangeDB::dbRange' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetFFTRiseMs
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetFFTRiseMs final
{
public:
	float                                         ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetFFTRiseMs) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetFFTRiseMs");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetFFTRiseMs) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetFFTRiseMs");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetFFTRiseMs, ms) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetFFTRiseMs::ms' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetNumBandFilterBankBands
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetNumBandFilterBankBands final
{
public:
	int32                                         Bands;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetNumBandFilterBankBands) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetNumBandFilterBankBands");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetNumBandFilterBankBands) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetNumBandFilterBankBands");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetNumBandFilterBankBands, Bands) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetNumBandFilterBankBands::Bands' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetSemitoneFilterBankEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankEnabled final
{
public:
	bool                                          E;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankEnabled) == 0x000001, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankEnabled");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankEnabled) == 0x000001, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankEnabled");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankEnabled, E) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankEnabled::E' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetSemitoneFilterBankMinMidiNote
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankMinMidiNote final
{
public:
	int32                                         min_0;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankMinMidiNote) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankMinMidiNote");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankMinMidiNote) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankMinMidiNote");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankMinMidiNote, min_0) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankMinMidiNote::min_0' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetSemitoneFilterBankNumMidiNotes
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankNumMidiNotes final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankNumMidiNotes) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankNumMidiNotes");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankNumMidiNotes) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankNumMidiNotes");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankNumMidiNotes, Num) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankNumMidiNotes::Num' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetSemitoneFilterBankOutputSettings
// 0x0010 (0x0010 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankOutputSettings final
{
public:
	struct FHarmonixAnalyzerOutputSettings        outSsettings;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankOutputSettings) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankOutputSettings");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankOutputSettings) == 0x000010, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankOutputSettings");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankOutputSettings, outSsettings) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetSemitoneFilterBankOutputSettings::outSsettings' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetSettings
// 0x00B0 (0x00B0 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetSettings final
{
public:
	struct FHarmonixAnalyzerEffectSettings        InSettings;                                        // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetSettings) == 0x000008, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetSettings");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetSettings) == 0x0000B0, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetSettings");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetVUMeterEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetVUMeterEnabled final
{
public:
	bool                                          E;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetVUMeterEnabled) == 0x000001, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetVUMeterEnabled");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetVUMeterEnabled) == 0x000001, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetVUMeterEnabled");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetVUMeterEnabled, E) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetVUMeterEnabled::E' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetVUMeterFallMs
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetVUMeterFallMs final
{
public:
	float                                         ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetVUMeterFallMs) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetVUMeterFallMs");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetVUMeterFallMs) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetVUMeterFallMs");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetVUMeterFallMs, ms) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetVUMeterFallMs::ms' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetVUMeterMaxDB
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetVUMeterMaxDB final
{
public:
	float                                         dbMax;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetVUMeterMaxDB) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetVUMeterMaxDB");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetVUMeterMaxDB) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetVUMeterMaxDB");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetVUMeterMaxDB, dbMax) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetVUMeterMaxDB::dbMax' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetVUMeterRangeDB
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetVUMeterRangeDB final
{
public:
	float                                         dbRange;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetVUMeterRangeDB) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetVUMeterRangeDB");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetVUMeterRangeDB) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetVUMeterRangeDB");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetVUMeterRangeDB, dbRange) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetVUMeterRangeDB::dbRange' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetVUMeterRiseMs
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetVUMeterRiseMs final
{
public:
	float                                         ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetVUMeterRiseMs) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetVUMeterRiseMs");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetVUMeterRiseMs) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetVUMeterRiseMs");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetVUMeterRiseMs, ms) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetVUMeterRiseMs::ms' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetVUOutputSettings
// 0x0010 (0x0010 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetVUOutputSettings final
{
public:
	struct FHarmonixAnalyzerOutputSettings        outSsettings;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetVUOutputSettings) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetVUOutputSettings");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetVUOutputSettings) == 0x000010, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetVUOutputSettings");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetVUOutputSettings, outSsettings) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetVUOutputSettings::outSsettings' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetWaveformEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetWaveformEnabled final
{
public:
	bool                                          E;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetWaveformEnabled) == 0x000001, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetWaveformEnabled");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetWaveformEnabled) == 0x000001, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetWaveformEnabled");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetWaveformEnabled, E) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetWaveformEnabled::E' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetWaveformNumBinsHeld
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsHeld final
{
public:
	int32                                         numBins;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsHeld) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsHeld");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsHeld) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsHeld");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsHeld, numBins) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsHeld::numBins' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetWaveformNumBinsPerSecond
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsPerSecond final
{
public:
	int32                                         numBinsPerSecond;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsPerSecond) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsPerSecond");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsPerSecond) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsPerSecond");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsPerSecond, numBinsPerSecond) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetWaveformNumBinsPerSecond::numBinsPerSecond' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetWaveformOutputSettings
// 0x0010 (0x0010 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetWaveformOutputSettings final
{
public:
	struct FHarmonixAnalyzerOutputSettings        outSsettings;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetWaveformOutputSettings) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetWaveformOutputSettings");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetWaveformOutputSettings) == 0x000010, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetWaveformOutputSettings");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetWaveformOutputSettings, outSsettings) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetWaveformOutputSettings::outSsettings' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetWaveformSmoothingDistance
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingDistance final
{
public:
	int32                                         SmoothingDistance;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingDistance) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingDistance");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingDistance) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingDistance");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingDistance, SmoothingDistance) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingDistance::SmoothingDistance' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSourceEffectPreset.SetWaveformSmoothingFactor
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingFactor final
{
public:
	float                                         smoothingFactor;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingFactor) == 0x000004, "Wrong alignment on HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingFactor");
static_assert(sizeof(HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingFactor) == 0x000004, "Wrong size on HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingFactor");
static_assert(offsetof(HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingFactor, smoothingFactor) == 0x000000, "Member 'HarmonixAnalyzerSourceEffectPreset_SetWaveformSmoothingFactor::smoothingFactor' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.CreateHarmonixAnalyzerInstanceOnSubmix
// 0x00C8 (0x00C8 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_CreateHarmonixAnalyzerInstanceOnSubmix final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           Submix;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixAnalyzerEffectSettings        InSettings;                                        // 0x0010(0x00B0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UHarmonixAnalyzerSubmixEffectPreset*    ReturnValue;                                       // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_CreateHarmonixAnalyzerInstanceOnSubmix) == 0x000008, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_CreateHarmonixAnalyzerInstanceOnSubmix");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_CreateHarmonixAnalyzerInstanceOnSubmix) == 0x0000C8, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_CreateHarmonixAnalyzerInstanceOnSubmix");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_CreateHarmonixAnalyzerInstanceOnSubmix, WorldContextObject) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_CreateHarmonixAnalyzerInstanceOnSubmix::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_CreateHarmonixAnalyzerInstanceOnSubmix, Submix) == 0x000008, "Member 'HarmonixAnalyzerSubmixEffectPreset_CreateHarmonixAnalyzerInstanceOnSubmix::Submix' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_CreateHarmonixAnalyzerInstanceOnSubmix, InSettings) == 0x000010, "Member 'HarmonixAnalyzerSubmixEffectPreset_CreateHarmonixAnalyzerInstanceOnSubmix::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_CreateHarmonixAnalyzerInstanceOnSubmix, ReturnValue) == 0x0000C0, "Member 'HarmonixAnalyzerSubmixEffectPreset_CreateHarmonixAnalyzerInstanceOnSubmix::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.GetResults
// 0x0088 (0x0088 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_GetResults final
{
public:
	struct FHarmonixAnalyzerEffectResults         Result;                                            // 0x0000(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ResetMonoPeakDb;                                   // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_GetResults) == 0x000008, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_GetResults");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_GetResults) == 0x000088, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_GetResults");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_GetResults, Result) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_GetResults::Result' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_GetResults, ResetMonoPeakDb) == 0x000080, "Member 'HarmonixAnalyzerSubmixEffectPreset_GetResults::ResetMonoPeakDb' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankBandEndHz
// 0x0008 (0x0008 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandEndHz final
{
public:
	int32                                         bandIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         hz;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandEndHz) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandEndHz");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandEndHz) == 0x000008, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandEndHz");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandEndHz, bandIndex) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandEndHz::bandIndex' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandEndHz, hz) == 0x000004, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandEndHz::hz' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankBandOutputSettings
// 0x0014 (0x0014 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandOutputSettings final
{
public:
	int32                                         bandIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixAnalyzerOutputSettings        outSsettings;                                      // 0x0004(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandOutputSettings) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandOutputSettings");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandOutputSettings) == 0x000014, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandOutputSettings");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandOutputSettings, bandIndex) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandOutputSettings::bandIndex' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandOutputSettings, outSsettings) == 0x000004, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandOutputSettings::outSsettings' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankBandStartHz
// 0x0008 (0x0008 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandStartHz final
{
public:
	int32                                         bandIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         hz;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandStartHz) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandStartHz");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandStartHz) == 0x000008, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandStartHz");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandStartHz, bandIndex) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandStartHz::bandIndex' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandStartHz, hz) == 0x000004, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankBandStartHz::hz' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankEnabled final
{
public:
	bool                                          E;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankEnabled) == 0x000001, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankEnabled");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankEnabled) == 0x000001, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankEnabled");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankEnabled, E) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankEnabled::E' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankFallMs
// 0x0008 (0x0008 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankFallMs final
{
public:
	int32                                         bandIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ms;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankFallMs) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankFallMs");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankFallMs) == 0x000008, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankFallMs");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankFallMs, bandIndex) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankFallMs::bandIndex' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankFallMs, ms) == 0x000004, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankFallMs::ms' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankMaxDB
// 0x0008 (0x0008 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankMaxDB final
{
public:
	int32                                         bandIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         dbMax;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankMaxDB) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankMaxDB");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankMaxDB) == 0x000008, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankMaxDB");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankMaxDB, bandIndex) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankMaxDB::bandIndex' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankMaxDB, dbMax) == 0x000004, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankMaxDB::dbMax' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankRangeDB
// 0x0008 (0x0008 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRangeDB final
{
public:
	int32                                         bandIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         dbRange;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRangeDB) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRangeDB");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRangeDB) == 0x000008, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRangeDB");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRangeDB, bandIndex) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRangeDB::bandIndex' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRangeDB, dbRange) == 0x000004, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRangeDB::dbRange' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetBandFilterBankRiseMs
// 0x0008 (0x0008 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRiseMs final
{
public:
	int32                                         bandIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ms;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRiseMs) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRiseMs");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRiseMs) == 0x000008, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRiseMs");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRiseMs, bandIndex) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRiseMs::bandIndex' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRiseMs, ms) == 0x000004, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetBandFilterBankRiseMs::ms' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetDynamicRangeMeterAlphas
// 0x0010 (0x0010 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterAlphas final
{
public:
	float                                         highRising;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         highFalling;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         lowRising;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         lowFalling;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterAlphas) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterAlphas");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterAlphas) == 0x000010, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterAlphas");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterAlphas, highRising) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterAlphas::highRising' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterAlphas, highFalling) == 0x000004, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterAlphas::highFalling' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterAlphas, lowRising) == 0x000008, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterAlphas::lowRising' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterAlphas, lowFalling) == 0x00000C, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterAlphas::lowFalling' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetDynamicRangeMeterEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterEnabled final
{
public:
	bool                                          E;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterEnabled) == 0x000001, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterEnabled");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterEnabled) == 0x000001, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterEnabled");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterEnabled, E) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterEnabled::E' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetDynamicRangeMeterFilter
// 0x0008 (0x0008 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterFilter final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Cutoff;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterFilter) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterFilter");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterFilter) == 0x000008, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterFilter");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterFilter, Enable) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterFilter::Enable' has a wrong offset!");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterFilter, Cutoff) == 0x000004, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterFilter::Cutoff' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetDynamicRangeMeterRmsWindow
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterRmsWindow final
{
public:
	int32                                         Frames;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterRmsWindow) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterRmsWindow");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterRmsWindow) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterRmsWindow");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterRmsWindow, Frames) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetDynamicRangeMeterRmsWindow::Frames' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetFFTEnabled final
{
public:
	bool                                          E;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetFFTEnabled) == 0x000001, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetFFTEnabled");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetFFTEnabled) == 0x000001, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetFFTEnabled");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetFFTEnabled, E) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetFFTEnabled::E' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTEqualLoudnessWeights
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetFFTEqualLoudnessWeights final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetFFTEqualLoudnessWeights) == 0x000001, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetFFTEqualLoudnessWeights");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetFFTEqualLoudnessWeights) == 0x000001, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetFFTEqualLoudnessWeights");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetFFTEqualLoudnessWeights, On) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetFFTEqualLoudnessWeights::On' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTFallMs
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetFFTFallMs final
{
public:
	float                                         ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetFFTFallMs) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetFFTFallMs");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetFFTFallMs) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetFFTFallMs");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetFFTFallMs, ms) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetFFTFallMs::ms' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTLength
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetFFTLength final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetFFTLength) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetFFTLength");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetFFTLength) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetFFTLength");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetFFTLength, Num) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetFFTLength::Num' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTMaxDB
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxDB final
{
public:
	float                                         dbMax;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxDB) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxDB");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxDB) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxDB");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxDB, dbMax) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxDB::dbMax' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTMaxFrequencyHz
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxFrequencyHz final
{
public:
	float                                         hz;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxFrequencyHz) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxFrequencyHz");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxFrequencyHz) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxFrequencyHz");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxFrequencyHz, hz) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetFFTMaxFrequencyHz::hz' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTMelScaleBinning
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetFFTMelScaleBinning final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetFFTMelScaleBinning) == 0x000001, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetFFTMelScaleBinning");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetFFTMelScaleBinning) == 0x000001, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetFFTMelScaleBinning");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetFFTMelScaleBinning, On) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetFFTMelScaleBinning::On' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTMinFrequencyHz
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetFFTMinFrequencyHz final
{
public:
	float                                         hz;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetFFTMinFrequencyHz) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetFFTMinFrequencyHz");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetFFTMinFrequencyHz) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetFFTMinFrequencyHz");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetFFTMinFrequencyHz, hz) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetFFTMinFrequencyHz::hz' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTNumResultBins
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetFFTNumResultBins final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetFFTNumResultBins) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetFFTNumResultBins");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetFFTNumResultBins) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetFFTNumResultBins");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetFFTNumResultBins, Num) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetFFTNumResultBins::Num' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTOutputSettings
// 0x0010 (0x0010 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetFFTOutputSettings final
{
public:
	struct FHarmonixAnalyzerOutputSettings        outSsettings;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetFFTOutputSettings) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetFFTOutputSettings");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetFFTOutputSettings) == 0x000010, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetFFTOutputSettings");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetFFTOutputSettings, outSsettings) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetFFTOutputSettings::outSsettings' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTRangeDB
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetFFTRangeDB final
{
public:
	float                                         dbRange;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetFFTRangeDB) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetFFTRangeDB");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetFFTRangeDB) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetFFTRangeDB");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetFFTRangeDB, dbRange) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetFFTRangeDB::dbRange' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetFFTRiseMs
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetFFTRiseMs final
{
public:
	float                                         ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetFFTRiseMs) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetFFTRiseMs");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetFFTRiseMs) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetFFTRiseMs");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetFFTRiseMs, ms) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetFFTRiseMs::ms' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetNumBandFilterBankBands
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetNumBandFilterBankBands final
{
public:
	int32                                         Bands;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetNumBandFilterBankBands) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetNumBandFilterBankBands");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetNumBandFilterBankBands) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetNumBandFilterBankBands");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetNumBandFilterBankBands, Bands) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetNumBandFilterBankBands::Bands' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetSemitoneFilterBankEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankEnabled final
{
public:
	bool                                          E;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankEnabled) == 0x000001, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankEnabled");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankEnabled) == 0x000001, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankEnabled");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankEnabled, E) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankEnabled::E' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetSemitoneFilterBankMinMidiNote
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankMinMidiNote final
{
public:
	int32                                         min_0;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankMinMidiNote) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankMinMidiNote");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankMinMidiNote) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankMinMidiNote");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankMinMidiNote, min_0) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankMinMidiNote::min_0' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetSemitoneFilterBankNumMidiNotes
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankNumMidiNotes final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankNumMidiNotes) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankNumMidiNotes");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankNumMidiNotes) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankNumMidiNotes");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankNumMidiNotes, Num) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankNumMidiNotes::Num' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetSemitoneFilterBankOutputSettings
// 0x0010 (0x0010 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankOutputSettings final
{
public:
	struct FHarmonixAnalyzerOutputSettings        outSsettings;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankOutputSettings) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankOutputSettings");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankOutputSettings) == 0x000010, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankOutputSettings");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankOutputSettings, outSsettings) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetSemitoneFilterBankOutputSettings::outSsettings' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetSettings
// 0x00B0 (0x00B0 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetSettings final
{
public:
	struct FHarmonixAnalyzerEffectSettings        InSettings;                                        // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetSettings) == 0x000008, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetSettings");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetSettings) == 0x0000B0, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetSettings");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetVUMeterEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetVUMeterEnabled final
{
public:
	bool                                          E;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetVUMeterEnabled) == 0x000001, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetVUMeterEnabled");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetVUMeterEnabled) == 0x000001, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetVUMeterEnabled");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetVUMeterEnabled, E) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetVUMeterEnabled::E' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetVUMeterFallMs
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetVUMeterFallMs final
{
public:
	float                                         ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetVUMeterFallMs) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetVUMeterFallMs");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetVUMeterFallMs) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetVUMeterFallMs");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetVUMeterFallMs, ms) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetVUMeterFallMs::ms' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetVUMeterMaxDB
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetVUMeterMaxDB final
{
public:
	float                                         dbMax;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetVUMeterMaxDB) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetVUMeterMaxDB");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetVUMeterMaxDB) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetVUMeterMaxDB");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetVUMeterMaxDB, dbMax) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetVUMeterMaxDB::dbMax' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetVUMeterRangeDB
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRangeDB final
{
public:
	float                                         dbRange;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRangeDB) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRangeDB");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRangeDB) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRangeDB");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRangeDB, dbRange) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRangeDB::dbRange' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetVUMeterRiseMs
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRiseMs final
{
public:
	float                                         ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRiseMs) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRiseMs");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRiseMs) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRiseMs");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRiseMs, ms) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetVUMeterRiseMs::ms' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetVUOutputSettings
// 0x0010 (0x0010 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetVUOutputSettings final
{
public:
	struct FHarmonixAnalyzerOutputSettings        outSsettings;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetVUOutputSettings) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetVUOutputSettings");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetVUOutputSettings) == 0x000010, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetVUOutputSettings");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetVUOutputSettings, outSsettings) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetVUOutputSettings::outSsettings' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetWaveformEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetWaveformEnabled final
{
public:
	bool                                          E;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformEnabled) == 0x000001, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetWaveformEnabled");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformEnabled) == 0x000001, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetWaveformEnabled");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformEnabled, E) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetWaveformEnabled::E' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetWaveformNumBinsHeld
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsHeld final
{
public:
	int32                                         numBins;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsHeld) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsHeld");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsHeld) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsHeld");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsHeld, numBins) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsHeld::numBins' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetWaveformNumBinsPerSecond
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsPerSecond final
{
public:
	int32                                         numBinsPerSecond;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsPerSecond) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsPerSecond");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsPerSecond) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsPerSecond");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsPerSecond, numBinsPerSecond) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetWaveformNumBinsPerSecond::numBinsPerSecond' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetWaveformOutputSettings
// 0x0010 (0x0010 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetWaveformOutputSettings final
{
public:
	struct FHarmonixAnalyzerOutputSettings        outSsettings;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformOutputSettings) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetWaveformOutputSettings");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformOutputSettings) == 0x000010, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetWaveformOutputSettings");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformOutputSettings, outSsettings) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetWaveformOutputSettings::outSsettings' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetWaveformSmoothingDistance
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingDistance final
{
public:
	int32                                         SmoothingDistance;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingDistance) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingDistance");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingDistance) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingDistance");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingDistance, SmoothingDistance) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingDistance::SmoothingDistance' has a wrong offset!");

// Function HmxAudio.HarmonixAnalyzerSubmixEffectPreset.SetWaveformSmoothingFactor
// 0x0004 (0x0004 - 0x0000)
struct HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingFactor final
{
public:
	float                                         smoothingFactor;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingFactor) == 0x000004, "Wrong alignment on HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingFactor");
static_assert(sizeof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingFactor) == 0x000004, "Wrong size on HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingFactor");
static_assert(offsetof(HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingFactor, smoothingFactor) == 0x000000, "Member 'HarmonixAnalyzerSubmixEffectPreset_SetWaveformSmoothingFactor::smoothingFactor' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.CreateHarmonixBitCrusherInstanceOnEmitter
// 0x0028 (0x0028 - 0x0000)
struct HarmonixBitCrusherSourceEffectPreset_CreateHarmonixBitCrusherInstanceOnEmitter final
{
public:
	class UMusicEmitterComponent*                 Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixBitCrusherEffectSettings      InSettings;                                        // 0x0008(0x0018)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UHarmonixBitCrusherSourceEffectPreset*  ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBitCrusherSourceEffectPreset_CreateHarmonixBitCrusherInstanceOnEmitter) == 0x000008, "Wrong alignment on HarmonixBitCrusherSourceEffectPreset_CreateHarmonixBitCrusherInstanceOnEmitter");
static_assert(sizeof(HarmonixBitCrusherSourceEffectPreset_CreateHarmonixBitCrusherInstanceOnEmitter) == 0x000028, "Wrong size on HarmonixBitCrusherSourceEffectPreset_CreateHarmonixBitCrusherInstanceOnEmitter");
static_assert(offsetof(HarmonixBitCrusherSourceEffectPreset_CreateHarmonixBitCrusherInstanceOnEmitter, Emitter) == 0x000000, "Member 'HarmonixBitCrusherSourceEffectPreset_CreateHarmonixBitCrusherInstanceOnEmitter::Emitter' has a wrong offset!");
static_assert(offsetof(HarmonixBitCrusherSourceEffectPreset_CreateHarmonixBitCrusherInstanceOnEmitter, InSettings) == 0x000008, "Member 'HarmonixBitCrusherSourceEffectPreset_CreateHarmonixBitCrusherInstanceOnEmitter::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixBitCrusherSourceEffectPreset_CreateHarmonixBitCrusherInstanceOnEmitter, ReturnValue) == 0x000020, "Member 'HarmonixBitCrusherSourceEffectPreset_CreateHarmonixBitCrusherInstanceOnEmitter::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.SetCrush
// 0x0002 (0x0002 - 0x0000)
struct HarmonixBitCrusherSourceEffectPreset_SetCrush final
{
public:
	ECrushedBitDepth                              crushLevel;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBitCrusherSourceEffectPreset_SetCrush) == 0x000001, "Wrong alignment on HarmonixBitCrusherSourceEffectPreset_SetCrush");
static_assert(sizeof(HarmonixBitCrusherSourceEffectPreset_SetCrush) == 0x000002, "Wrong size on HarmonixBitCrusherSourceEffectPreset_SetCrush");
static_assert(offsetof(HarmonixBitCrusherSourceEffectPreset_SetCrush, crushLevel) == 0x000000, "Member 'HarmonixBitCrusherSourceEffectPreset_SetCrush::crushLevel' has a wrong offset!");
static_assert(offsetof(HarmonixBitCrusherSourceEffectPreset_SetCrush, Snap) == 0x000001, "Member 'HarmonixBitCrusherSourceEffectPreset_SetCrush::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixBitCrusherSourceEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBitCrusherSourceEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixBitCrusherSourceEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixBitCrusherSourceEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixBitCrusherSourceEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixBitCrusherSourceEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixBitCrusherSourceEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.SetInputGain
// 0x0008 (0x0008 - 0x0000)
struct HarmonixBitCrusherSourceEffectPreset_SetInputGain final
{
public:
	float                                         inGain;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixBitCrusherSourceEffectPreset_SetInputGain) == 0x000004, "Wrong alignment on HarmonixBitCrusherSourceEffectPreset_SetInputGain");
static_assert(sizeof(HarmonixBitCrusherSourceEffectPreset_SetInputGain) == 0x000008, "Wrong size on HarmonixBitCrusherSourceEffectPreset_SetInputGain");
static_assert(offsetof(HarmonixBitCrusherSourceEffectPreset_SetInputGain, inGain) == 0x000000, "Member 'HarmonixBitCrusherSourceEffectPreset_SetInputGain::inGain' has a wrong offset!");
static_assert(offsetof(HarmonixBitCrusherSourceEffectPreset_SetInputGain, Snap) == 0x000004, "Member 'HarmonixBitCrusherSourceEffectPreset_SetInputGain::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.SetOutputGain
// 0x0008 (0x0008 - 0x0000)
struct HarmonixBitCrusherSourceEffectPreset_SetOutputGain final
{
public:
	float                                         outGain;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixBitCrusherSourceEffectPreset_SetOutputGain) == 0x000004, "Wrong alignment on HarmonixBitCrusherSourceEffectPreset_SetOutputGain");
static_assert(sizeof(HarmonixBitCrusherSourceEffectPreset_SetOutputGain) == 0x000008, "Wrong size on HarmonixBitCrusherSourceEffectPreset_SetOutputGain");
static_assert(offsetof(HarmonixBitCrusherSourceEffectPreset_SetOutputGain, outGain) == 0x000000, "Member 'HarmonixBitCrusherSourceEffectPreset_SetOutputGain::outGain' has a wrong offset!");
static_assert(offsetof(HarmonixBitCrusherSourceEffectPreset_SetOutputGain, Snap) == 0x000004, "Member 'HarmonixBitCrusherSourceEffectPreset_SetOutputGain::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.SetSampleHoldFactor
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBitCrusherSourceEffectPreset_SetSampleHoldFactor final
{
public:
	int32                                         sampleHoldFactor;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBitCrusherSourceEffectPreset_SetSampleHoldFactor) == 0x000004, "Wrong alignment on HarmonixBitCrusherSourceEffectPreset_SetSampleHoldFactor");
static_assert(sizeof(HarmonixBitCrusherSourceEffectPreset_SetSampleHoldFactor) == 0x000004, "Wrong size on HarmonixBitCrusherSourceEffectPreset_SetSampleHoldFactor");
static_assert(offsetof(HarmonixBitCrusherSourceEffectPreset_SetSampleHoldFactor, sampleHoldFactor) == 0x000000, "Member 'HarmonixBitCrusherSourceEffectPreset_SetSampleHoldFactor::sampleHoldFactor' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.SetSettings
// 0x0018 (0x0018 - 0x0000)
struct HarmonixBitCrusherSourceEffectPreset_SetSettings final
{
public:
	struct FHarmonixBitCrusherEffectSettings      InSettings;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBitCrusherSourceEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixBitCrusherSourceEffectPreset_SetSettings");
static_assert(sizeof(HarmonixBitCrusherSourceEffectPreset_SetSettings) == 0x000018, "Wrong size on HarmonixBitCrusherSourceEffectPreset_SetSettings");
static_assert(offsetof(HarmonixBitCrusherSourceEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixBitCrusherSourceEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSourceEffectPreset.SetWet
// 0x0008 (0x0008 - 0x0000)
struct HarmonixBitCrusherSourceEffectPreset_SetWet final
{
public:
	float                                         wet;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixBitCrusherSourceEffectPreset_SetWet) == 0x000004, "Wrong alignment on HarmonixBitCrusherSourceEffectPreset_SetWet");
static_assert(sizeof(HarmonixBitCrusherSourceEffectPreset_SetWet) == 0x000008, "Wrong size on HarmonixBitCrusherSourceEffectPreset_SetWet");
static_assert(offsetof(HarmonixBitCrusherSourceEffectPreset_SetWet, wet) == 0x000000, "Member 'HarmonixBitCrusherSourceEffectPreset_SetWet::wet' has a wrong offset!");
static_assert(offsetof(HarmonixBitCrusherSourceEffectPreset_SetWet, Snap) == 0x000004, "Member 'HarmonixBitCrusherSourceEffectPreset_SetWet::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.CreateHarmonixBitCrusherInstanceOnSubmix
// 0x0030 (0x0030 - 0x0000)
struct HarmonixBitCrusherSubmixEffectPreset_CreateHarmonixBitCrusherInstanceOnSubmix final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           Submix;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixBitCrusherEffectSettings      InSettings;                                        // 0x0010(0x0018)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UHarmonixBitCrusherSubmixEffectPreset*  ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBitCrusherSubmixEffectPreset_CreateHarmonixBitCrusherInstanceOnSubmix) == 0x000008, "Wrong alignment on HarmonixBitCrusherSubmixEffectPreset_CreateHarmonixBitCrusherInstanceOnSubmix");
static_assert(sizeof(HarmonixBitCrusherSubmixEffectPreset_CreateHarmonixBitCrusherInstanceOnSubmix) == 0x000030, "Wrong size on HarmonixBitCrusherSubmixEffectPreset_CreateHarmonixBitCrusherInstanceOnSubmix");
static_assert(offsetof(HarmonixBitCrusherSubmixEffectPreset_CreateHarmonixBitCrusherInstanceOnSubmix, WorldContextObject) == 0x000000, "Member 'HarmonixBitCrusherSubmixEffectPreset_CreateHarmonixBitCrusherInstanceOnSubmix::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HarmonixBitCrusherSubmixEffectPreset_CreateHarmonixBitCrusherInstanceOnSubmix, Submix) == 0x000008, "Member 'HarmonixBitCrusherSubmixEffectPreset_CreateHarmonixBitCrusherInstanceOnSubmix::Submix' has a wrong offset!");
static_assert(offsetof(HarmonixBitCrusherSubmixEffectPreset_CreateHarmonixBitCrusherInstanceOnSubmix, InSettings) == 0x000010, "Member 'HarmonixBitCrusherSubmixEffectPreset_CreateHarmonixBitCrusherInstanceOnSubmix::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixBitCrusherSubmixEffectPreset_CreateHarmonixBitCrusherInstanceOnSubmix, ReturnValue) == 0x000028, "Member 'HarmonixBitCrusherSubmixEffectPreset_CreateHarmonixBitCrusherInstanceOnSubmix::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.SetCrush
// 0x0002 (0x0002 - 0x0000)
struct HarmonixBitCrusherSubmixEffectPreset_SetCrush final
{
public:
	ECrushedBitDepth                              crushLevel;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBitCrusherSubmixEffectPreset_SetCrush) == 0x000001, "Wrong alignment on HarmonixBitCrusherSubmixEffectPreset_SetCrush");
static_assert(sizeof(HarmonixBitCrusherSubmixEffectPreset_SetCrush) == 0x000002, "Wrong size on HarmonixBitCrusherSubmixEffectPreset_SetCrush");
static_assert(offsetof(HarmonixBitCrusherSubmixEffectPreset_SetCrush, crushLevel) == 0x000000, "Member 'HarmonixBitCrusherSubmixEffectPreset_SetCrush::crushLevel' has a wrong offset!");
static_assert(offsetof(HarmonixBitCrusherSubmixEffectPreset_SetCrush, Snap) == 0x000001, "Member 'HarmonixBitCrusherSubmixEffectPreset_SetCrush::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixBitCrusherSubmixEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBitCrusherSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixBitCrusherSubmixEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixBitCrusherSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixBitCrusherSubmixEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixBitCrusherSubmixEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixBitCrusherSubmixEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.SetInputGain
// 0x0008 (0x0008 - 0x0000)
struct HarmonixBitCrusherSubmixEffectPreset_SetInputGain final
{
public:
	float                                         inGain;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixBitCrusherSubmixEffectPreset_SetInputGain) == 0x000004, "Wrong alignment on HarmonixBitCrusherSubmixEffectPreset_SetInputGain");
static_assert(sizeof(HarmonixBitCrusherSubmixEffectPreset_SetInputGain) == 0x000008, "Wrong size on HarmonixBitCrusherSubmixEffectPreset_SetInputGain");
static_assert(offsetof(HarmonixBitCrusherSubmixEffectPreset_SetInputGain, inGain) == 0x000000, "Member 'HarmonixBitCrusherSubmixEffectPreset_SetInputGain::inGain' has a wrong offset!");
static_assert(offsetof(HarmonixBitCrusherSubmixEffectPreset_SetInputGain, Snap) == 0x000004, "Member 'HarmonixBitCrusherSubmixEffectPreset_SetInputGain::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.SetOutputGain
// 0x0008 (0x0008 - 0x0000)
struct HarmonixBitCrusherSubmixEffectPreset_SetOutputGain final
{
public:
	float                                         outGain;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixBitCrusherSubmixEffectPreset_SetOutputGain) == 0x000004, "Wrong alignment on HarmonixBitCrusherSubmixEffectPreset_SetOutputGain");
static_assert(sizeof(HarmonixBitCrusherSubmixEffectPreset_SetOutputGain) == 0x000008, "Wrong size on HarmonixBitCrusherSubmixEffectPreset_SetOutputGain");
static_assert(offsetof(HarmonixBitCrusherSubmixEffectPreset_SetOutputGain, outGain) == 0x000000, "Member 'HarmonixBitCrusherSubmixEffectPreset_SetOutputGain::outGain' has a wrong offset!");
static_assert(offsetof(HarmonixBitCrusherSubmixEffectPreset_SetOutputGain, Snap) == 0x000004, "Member 'HarmonixBitCrusherSubmixEffectPreset_SetOutputGain::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.SetSampleHoldFactor
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBitCrusherSubmixEffectPreset_SetSampleHoldFactor final
{
public:
	int32                                         sampleHoldFactor;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBitCrusherSubmixEffectPreset_SetSampleHoldFactor) == 0x000004, "Wrong alignment on HarmonixBitCrusherSubmixEffectPreset_SetSampleHoldFactor");
static_assert(sizeof(HarmonixBitCrusherSubmixEffectPreset_SetSampleHoldFactor) == 0x000004, "Wrong size on HarmonixBitCrusherSubmixEffectPreset_SetSampleHoldFactor");
static_assert(offsetof(HarmonixBitCrusherSubmixEffectPreset_SetSampleHoldFactor, sampleHoldFactor) == 0x000000, "Member 'HarmonixBitCrusherSubmixEffectPreset_SetSampleHoldFactor::sampleHoldFactor' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.SetSettings
// 0x0018 (0x0018 - 0x0000)
struct HarmonixBitCrusherSubmixEffectPreset_SetSettings final
{
public:
	struct FHarmonixBitCrusherEffectSettings      InSettings;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBitCrusherSubmixEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixBitCrusherSubmixEffectPreset_SetSettings");
static_assert(sizeof(HarmonixBitCrusherSubmixEffectPreset_SetSettings) == 0x000018, "Wrong size on HarmonixBitCrusherSubmixEffectPreset_SetSettings");
static_assert(offsetof(HarmonixBitCrusherSubmixEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixBitCrusherSubmixEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixBitCrusherSubmixEffectPreset.SetWet
// 0x0008 (0x0008 - 0x0000)
struct HarmonixBitCrusherSubmixEffectPreset_SetWet final
{
public:
	float                                         wet;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixBitCrusherSubmixEffectPreset_SetWet) == 0x000004, "Wrong alignment on HarmonixBitCrusherSubmixEffectPreset_SetWet");
static_assert(sizeof(HarmonixBitCrusherSubmixEffectPreset_SetWet) == 0x000008, "Wrong size on HarmonixBitCrusherSubmixEffectPreset_SetWet");
static_assert(offsetof(HarmonixBitCrusherSubmixEffectPreset_SetWet, wet) == 0x000000, "Member 'HarmonixBitCrusherSubmixEffectPreset_SetWet::wet' has a wrong offset!");
static_assert(offsetof(HarmonixBitCrusherSubmixEffectPreset_SetWet, Snap) == 0x000004, "Member 'HarmonixBitCrusherSubmixEffectPreset_SetWet::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.CreateHarmonixBufferUtilInstanceOnEmitter
// 0x0018 (0x0018 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_CreateHarmonixBufferUtilInstanceOnEmitter final
{
public:
	class UMusicEmitterComponent*                 Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixBufferUtilEffectSettings      InSettings;                                        // 0x0008(0x0001)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHarmonixBufferUtilSourceEffectPreset*  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_CreateHarmonixBufferUtilInstanceOnEmitter) == 0x000008, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_CreateHarmonixBufferUtilInstanceOnEmitter");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_CreateHarmonixBufferUtilInstanceOnEmitter) == 0x000018, "Wrong size on HarmonixBufferUtilSourceEffectPreset_CreateHarmonixBufferUtilInstanceOnEmitter");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_CreateHarmonixBufferUtilInstanceOnEmitter, Emitter) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_CreateHarmonixBufferUtilInstanceOnEmitter::Emitter' has a wrong offset!");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_CreateHarmonixBufferUtilInstanceOnEmitter, InSettings) == 0x000008, "Member 'HarmonixBufferUtilSourceEffectPreset_CreateHarmonixBufferUtilInstanceOnEmitter::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_CreateHarmonixBufferUtilInstanceOnEmitter, ReturnValue) == 0x000010, "Member 'HarmonixBufferUtilSourceEffectPreset_CreateHarmonixBufferUtilInstanceOnEmitter::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetAttach
// 0x0001 (0x0001 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetAttach final
{
public:
	bool                                          attach;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetAttach) == 0x000001, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetAttach");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetAttach) == 0x000001, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetAttach");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetAttach, attach) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetAttach::attach' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetAutomation
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetAutomation final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetAutomation) == 0x000004, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetAutomation");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetAutomation) == 0x000004, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetAutomation");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetAutomation, A) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetAutomation::A' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetBufSpeed
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetBufSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetBufSpeed) == 0x000004, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetBufSpeed");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetBufSpeed) == 0x000004, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetBufSpeed");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetBufSpeed, Speed) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetBufSpeed::Speed' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetDotted
// 0x0001 (0x0001 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetDotted final
{
public:
	bool                                          Dotted;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetDotted) == 0x000001, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetDotted");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetDotted) == 0x000001, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetDotted");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetDotted, Dotted) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetDotted::Dotted' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetEven
// 0x0001 (0x0001 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetEven final
{
public:
	bool                                          Even;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetEven) == 0x000001, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetEven");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetEven) == 0x000001, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetEven");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetEven, Even) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetEven::Even' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetMaxDur
// 0x0008 (0x0008 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetMaxDur final
{
public:
	int32                                         D;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BeatValChange;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetMaxDur) == 0x000004, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetMaxDur");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetMaxDur) == 0x000008, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetMaxDur");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetMaxDur, D) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetMaxDur::D' has a wrong offset!");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetMaxDur, BeatValChange) == 0x000004, "Member 'HarmonixBufferUtilSourceEffectPreset_SetMaxDur::BeatValChange' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetMinDur
// 0x0008 (0x0008 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetMinDur final
{
public:
	int32                                         D;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BeatValChange;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetMinDur) == 0x000004, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetMinDur");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetMinDur) == 0x000008, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetMinDur");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetMinDur, D) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetMinDur::D' has a wrong offset!");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetMinDur, BeatValChange) == 0x000004, "Member 'HarmonixBufferUtilSourceEffectPreset_SetMinDur::BeatValChange' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetRepeatP
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetRepeatP final
{
public:
	float                                         P;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetRepeatP) == 0x000004, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetRepeatP");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetRepeatP) == 0x000004, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetRepeatP");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetRepeatP, P) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetRepeatP::P' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetReverseP
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetReverseP final
{
public:
	float                                         P;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetReverseP) == 0x000004, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetReverseP");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetReverseP) == 0x000004, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetReverseP");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetReverseP, P) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetReverseP::P' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetScratch
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetScratch final
{
public:
	float                                         scratch;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetScratch) == 0x000004, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetScratch");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetScratch) == 0x000004, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetScratch");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetScratch, scratch) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetScratch::scratch' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetSequence
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetSequence final
{
public:
	int32                                         S;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetSequence) == 0x000004, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetSequence");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetSequence) == 0x000004, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetSequence");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetSequence, S) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetSequence::S' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetSettings
// 0x0001 (0x0001 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetSettings final
{
public:
	struct FHarmonixBufferUtilEffectSettings      InSettings;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetSettings) == 0x000001, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetSettings");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetSettings) == 0x000001, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetSettings");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetShuffleP
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetShuffleP final
{
public:
	float                                         P;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetShuffleP) == 0x000004, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetShuffleP");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetShuffleP) == 0x000004, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetShuffleP");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetShuffleP, P) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetShuffleP::P' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetState
// 0x000C (0x000C - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetState final
{
public:
	int32                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Len;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutomationTriggeredSet;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetState) == 0x000004, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetState");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetState) == 0x00000C, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetState");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetState, T) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetState::T' has a wrong offset!");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetState, Len) == 0x000004, "Member 'HarmonixBufferUtilSourceEffectPreset_SetState::Len' has a wrong offset!");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetState, AutomationTriggeredSet) == 0x000008, "Member 'HarmonixBufferUtilSourceEffectPreset_SetState::AutomationTriggeredSet' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSourceEffectPreset.SetTriplet
// 0x0001 (0x0001 - 0x0000)
struct HarmonixBufferUtilSourceEffectPreset_SetTriplet final
{
public:
	bool                                          trip;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSourceEffectPreset_SetTriplet) == 0x000001, "Wrong alignment on HarmonixBufferUtilSourceEffectPreset_SetTriplet");
static_assert(sizeof(HarmonixBufferUtilSourceEffectPreset_SetTriplet) == 0x000001, "Wrong size on HarmonixBufferUtilSourceEffectPreset_SetTriplet");
static_assert(offsetof(HarmonixBufferUtilSourceEffectPreset_SetTriplet, trip) == 0x000000, "Member 'HarmonixBufferUtilSourceEffectPreset_SetTriplet::trip' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.CreateHarmonixBufferUtilInstanceOnSubmix
// 0x0020 (0x0020 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_CreateHarmonixBufferUtilInstanceOnSubmix final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           Submix;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixBufferUtilEffectSettings      InSettings;                                        // 0x0010(0x0001)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHarmonixBufferUtilSubmixEffectPreset*  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_CreateHarmonixBufferUtilInstanceOnSubmix) == 0x000008, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_CreateHarmonixBufferUtilInstanceOnSubmix");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_CreateHarmonixBufferUtilInstanceOnSubmix) == 0x000020, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_CreateHarmonixBufferUtilInstanceOnSubmix");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_CreateHarmonixBufferUtilInstanceOnSubmix, WorldContextObject) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_CreateHarmonixBufferUtilInstanceOnSubmix::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_CreateHarmonixBufferUtilInstanceOnSubmix, Submix) == 0x000008, "Member 'HarmonixBufferUtilSubmixEffectPreset_CreateHarmonixBufferUtilInstanceOnSubmix::Submix' has a wrong offset!");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_CreateHarmonixBufferUtilInstanceOnSubmix, InSettings) == 0x000010, "Member 'HarmonixBufferUtilSubmixEffectPreset_CreateHarmonixBufferUtilInstanceOnSubmix::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_CreateHarmonixBufferUtilInstanceOnSubmix, ReturnValue) == 0x000018, "Member 'HarmonixBufferUtilSubmixEffectPreset_CreateHarmonixBufferUtilInstanceOnSubmix::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetAttach
// 0x0001 (0x0001 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetAttach final
{
public:
	bool                                          attach;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetAttach) == 0x000001, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetAttach");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetAttach) == 0x000001, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetAttach");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetAttach, attach) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetAttach::attach' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetAutomation
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetAutomation final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetAutomation) == 0x000004, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetAutomation");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetAutomation) == 0x000004, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetAutomation");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetAutomation, A) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetAutomation::A' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetBufSpeed
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetBufSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetBufSpeed) == 0x000004, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetBufSpeed");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetBufSpeed) == 0x000004, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetBufSpeed");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetBufSpeed, Speed) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetBufSpeed::Speed' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetDotted
// 0x0001 (0x0001 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetDotted final
{
public:
	bool                                          Dotted;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetDotted) == 0x000001, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetDotted");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetDotted) == 0x000001, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetDotted");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetDotted, Dotted) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetDotted::Dotted' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetEven
// 0x0001 (0x0001 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetEven final
{
public:
	bool                                          Even;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetEven) == 0x000001, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetEven");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetEven) == 0x000001, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetEven");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetEven, Even) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetEven::Even' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetMaxDur
// 0x0008 (0x0008 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetMaxDur final
{
public:
	int32                                         D;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BeatValChange;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetMaxDur) == 0x000004, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetMaxDur");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetMaxDur) == 0x000008, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetMaxDur");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetMaxDur, D) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetMaxDur::D' has a wrong offset!");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetMaxDur, BeatValChange) == 0x000004, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetMaxDur::BeatValChange' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetMinDur
// 0x0008 (0x0008 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetMinDur final
{
public:
	int32                                         D;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BeatValChange;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetMinDur) == 0x000004, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetMinDur");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetMinDur) == 0x000008, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetMinDur");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetMinDur, D) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetMinDur::D' has a wrong offset!");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetMinDur, BeatValChange) == 0x000004, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetMinDur::BeatValChange' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetRepeatP
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetRepeatP final
{
public:
	float                                         P;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetRepeatP) == 0x000004, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetRepeatP");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetRepeatP) == 0x000004, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetRepeatP");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetRepeatP, P) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetRepeatP::P' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetReverseP
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetReverseP final
{
public:
	float                                         P;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetReverseP) == 0x000004, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetReverseP");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetReverseP) == 0x000004, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetReverseP");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetReverseP, P) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetReverseP::P' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetScratch
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetScratch final
{
public:
	float                                         scratch;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetScratch) == 0x000004, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetScratch");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetScratch) == 0x000004, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetScratch");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetScratch, scratch) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetScratch::scratch' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetSequence
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetSequence final
{
public:
	int32                                         S;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetSequence) == 0x000004, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetSequence");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetSequence) == 0x000004, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetSequence");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetSequence, S) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetSequence::S' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetSettings
// 0x0001 (0x0001 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetSettings final
{
public:
	struct FHarmonixBufferUtilEffectSettings      InSettings;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetSettings) == 0x000001, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetSettings");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetSettings) == 0x000001, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetSettings");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetShuffleP
// 0x0004 (0x0004 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetShuffleP final
{
public:
	float                                         P;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetShuffleP) == 0x000004, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetShuffleP");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetShuffleP) == 0x000004, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetShuffleP");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetShuffleP, P) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetShuffleP::P' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetState
// 0x000C (0x000C - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetState final
{
public:
	int32                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Len;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutomationTriggeredSet;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetState) == 0x000004, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetState");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetState) == 0x00000C, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetState");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetState, T) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetState::T' has a wrong offset!");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetState, Len) == 0x000004, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetState::Len' has a wrong offset!");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetState, AutomationTriggeredSet) == 0x000008, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetState::AutomationTriggeredSet' has a wrong offset!");

// Function HmxAudio.HarmonixBufferUtilSubmixEffectPreset.SetTriplet
// 0x0001 (0x0001 - 0x0000)
struct HarmonixBufferUtilSubmixEffectPreset_SetTriplet final
{
public:
	bool                                          trip;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixBufferUtilSubmixEffectPreset_SetTriplet) == 0x000001, "Wrong alignment on HarmonixBufferUtilSubmixEffectPreset_SetTriplet");
static_assert(sizeof(HarmonixBufferUtilSubmixEffectPreset_SetTriplet) == 0x000001, "Wrong size on HarmonixBufferUtilSubmixEffectPreset_SetTriplet");
static_assert(offsetof(HarmonixBufferUtilSubmixEffectPreset_SetTriplet, trip) == 0x000000, "Member 'HarmonixBufferUtilSubmixEffectPreset_SetTriplet::trip' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.CreateHarmonixDelayInstanceOnEmitter
// 0x0050 (0x0050 - 0x0000)
struct HarmonixDelaySourceEffectPreset_CreateHarmonixDelayInstanceOnEmitter final
{
public:
	class UMusicEmitterComponent*                 Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixDelayEffectSettings           InSettings;                                        // 0x0008(0x003C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHarmonixDelaySourceEffectPreset*       ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_CreateHarmonixDelayInstanceOnEmitter) == 0x000008, "Wrong alignment on HarmonixDelaySourceEffectPreset_CreateHarmonixDelayInstanceOnEmitter");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_CreateHarmonixDelayInstanceOnEmitter) == 0x000050, "Wrong size on HarmonixDelaySourceEffectPreset_CreateHarmonixDelayInstanceOnEmitter");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_CreateHarmonixDelayInstanceOnEmitter, Emitter) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_CreateHarmonixDelayInstanceOnEmitter::Emitter' has a wrong offset!");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_CreateHarmonixDelayInstanceOnEmitter, InSettings) == 0x000008, "Member 'HarmonixDelaySourceEffectPreset_CreateHarmonixDelayInstanceOnEmitter::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_CreateHarmonixDelayInstanceOnEmitter, ReturnValue) == 0x000048, "Member 'HarmonixDelaySourceEffectPreset_CreateHarmonixDelayInstanceOnEmitter::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetDelaySeconds
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetDelaySeconds final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetDelaySeconds) == 0x000004, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetDelaySeconds");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetDelaySeconds) == 0x000004, "Wrong size on HarmonixDelaySourceEffectPreset_SetDelaySeconds");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetDelaySeconds, Time) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetDelaySeconds::Time' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetDryGain
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetDryGain final
{
public:
	float                                         Gain;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetDryGain) == 0x000004, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetDryGain");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetDryGain) == 0x000004, "Wrong size on HarmonixDelaySourceEffectPreset_SetDryGain");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetDryGain, Gain) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetDryGain::Gain' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixDelaySourceEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetFeedbackGain
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetFeedbackGain final
{
public:
	float                                         Gain;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetFeedbackGain) == 0x000004, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetFeedbackGain");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetFeedbackGain) == 0x000004, "Wrong size on HarmonixDelaySourceEffectPreset_SetFeedbackGain");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetFeedbackGain, Gain) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetFeedbackGain::Gain' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetFilterEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetFilterEnabled final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetFilterEnabled) == 0x000001, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetFilterEnabled");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetFilterEnabled) == 0x000001, "Wrong size on HarmonixDelaySourceEffectPreset_SetFilterEnabled");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetFilterEnabled, On) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetFilterEnabled::On' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetFilterFreq
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetFilterFreq final
{
public:
	float                                         hz;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetFilterFreq) == 0x000004, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetFilterFreq");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetFilterFreq) == 0x000004, "Wrong size on HarmonixDelaySourceEffectPreset_SetFilterFreq");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetFilterFreq, hz) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetFilterFreq::hz' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetFilterQ
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetFilterQ final
{
public:
	float                                         Q;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetFilterQ) == 0x000004, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetFilterQ");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetFilterQ) == 0x000004, "Wrong size on HarmonixDelaySourceEffectPreset_SetFilterQ");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetFilterQ, Q) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetFilterQ::Q' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetFilterType
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetFilterType final
{
public:
	EHarmonixDelayFilterType                      Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetFilterType) == 0x000001, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetFilterType");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetFilterType) == 0x000001, "Wrong size on HarmonixDelaySourceEffectPreset_SetFilterType");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetFilterType, Type) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetFilterType::Type' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetLFODepth
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetLFODepth final
{
public:
	float                                         Depth;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetLFODepth) == 0x000004, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetLFODepth");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetLFODepth) == 0x000004, "Wrong size on HarmonixDelaySourceEffectPreset_SetLFODepth");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetLFODepth, Depth) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetLFODepth::Depth' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetLFOEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetLFOEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetLFOEnabled) == 0x000001, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetLFOEnabled");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetLFOEnabled) == 0x000001, "Wrong size on HarmonixDelaySourceEffectPreset_SetLFOEnabled");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetLFOEnabled, Enabled) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetLFOEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetLFOFreq
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetLFOFreq final
{
public:
	float                                         hz;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetLFOFreq) == 0x000004, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetLFOFreq");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetLFOFreq) == 0x000004, "Wrong size on HarmonixDelaySourceEffectPreset_SetLFOFreq");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetLFOFreq, hz) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetLFOFreq::hz' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetLFOTimeSyncOption
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetLFOTimeSyncOption final
{
public:
	ETempoListenerTimeSyncOption                  Option;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetLFOTimeSyncOption) == 0x000001, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetLFOTimeSyncOption");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetLFOTimeSyncOption) == 0x000001, "Wrong size on HarmonixDelaySourceEffectPreset_SetLFOTimeSyncOption");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetLFOTimeSyncOption, Option) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetLFOTimeSyncOption::Option' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetOutputGain
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetOutputGain final
{
public:
	float                                         Gain;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetOutputGain) == 0x000004, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetOutputGain");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetOutputGain) == 0x000004, "Wrong size on HarmonixDelaySourceEffectPreset_SetOutputGain");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetOutputGain, Gain) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetOutputGain::Gain' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetSettings
// 0x003C (0x003C - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetSettings final
{
public:
	struct FHarmonixDelayEffectSettings           InSettings;                                        // 0x0000(0x003C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetSettings");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetSettings) == 0x00003C, "Wrong size on HarmonixDelaySourceEffectPreset_SetSettings");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetSpeed
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetSpeed) == 0x000004, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetSpeed");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetSpeed) == 0x000004, "Wrong size on HarmonixDelaySourceEffectPreset_SetSpeed");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetSpeed, Speed) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetSpeed::Speed' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetStereoSpreadLeft
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetStereoSpreadLeft final
{
public:
	float                                         Spread;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetStereoSpreadLeft) == 0x000004, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetStereoSpreadLeft");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetStereoSpreadLeft) == 0x000004, "Wrong size on HarmonixDelaySourceEffectPreset_SetStereoSpreadLeft");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetStereoSpreadLeft, Spread) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetStereoSpreadLeft::Spread' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetStereoSpreadRight
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetStereoSpreadRight final
{
public:
	float                                         Spread;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetStereoSpreadRight) == 0x000004, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetStereoSpreadRight");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetStereoSpreadRight) == 0x000004, "Wrong size on HarmonixDelaySourceEffectPreset_SetStereoSpreadRight");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetStereoSpreadRight, Spread) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetStereoSpreadRight::Spread' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetStereoType
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetStereoType final
{
public:
	EHarmonixDelayStereoType                      Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetStereoType) == 0x000001, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetStereoType");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetStereoType) == 0x000001, "Wrong size on HarmonixDelaySourceEffectPreset_SetStereoType");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetStereoType, Type) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetStereoType::Type' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetTempo
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetTempo final
{
public:
	float                                         BPM;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetTempo) == 0x000004, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetTempo");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetTempo) == 0x000004, "Wrong size on HarmonixDelaySourceEffectPreset_SetTempo");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetTempo, BPM) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetTempo::BPM' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetTimeSyncOption
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetTimeSyncOption final
{
public:
	ETempoListenerTimeSyncOption                  Option;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetTimeSyncOption");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong size on HarmonixDelaySourceEffectPreset_SetTimeSyncOption");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetTimeSyncOption, Option) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetTimeSyncOption::Option' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySourceEffectPreset.SetWetGain
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySourceEffectPreset_SetWetGain final
{
public:
	float                                         Gain;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySourceEffectPreset_SetWetGain) == 0x000004, "Wrong alignment on HarmonixDelaySourceEffectPreset_SetWetGain");
static_assert(sizeof(HarmonixDelaySourceEffectPreset_SetWetGain) == 0x000004, "Wrong size on HarmonixDelaySourceEffectPreset_SetWetGain");
static_assert(offsetof(HarmonixDelaySourceEffectPreset_SetWetGain, Gain) == 0x000000, "Member 'HarmonixDelaySourceEffectPreset_SetWetGain::Gain' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.CreateHarmonixDelayInstanceOnSubmix
// 0x0058 (0x0058 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_CreateHarmonixDelayInstanceOnSubmix final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           Submix;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixDelayEffectSettings           InSettings;                                        // 0x0010(0x003C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHarmonixDelaySubmixEffectPreset*       ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_CreateHarmonixDelayInstanceOnSubmix) == 0x000008, "Wrong alignment on HarmonixDelaySubmixEffectPreset_CreateHarmonixDelayInstanceOnSubmix");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_CreateHarmonixDelayInstanceOnSubmix) == 0x000058, "Wrong size on HarmonixDelaySubmixEffectPreset_CreateHarmonixDelayInstanceOnSubmix");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_CreateHarmonixDelayInstanceOnSubmix, WorldContextObject) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_CreateHarmonixDelayInstanceOnSubmix::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_CreateHarmonixDelayInstanceOnSubmix, Submix) == 0x000008, "Member 'HarmonixDelaySubmixEffectPreset_CreateHarmonixDelayInstanceOnSubmix::Submix' has a wrong offset!");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_CreateHarmonixDelayInstanceOnSubmix, InSettings) == 0x000010, "Member 'HarmonixDelaySubmixEffectPreset_CreateHarmonixDelayInstanceOnSubmix::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_CreateHarmonixDelayInstanceOnSubmix, ReturnValue) == 0x000050, "Member 'HarmonixDelaySubmixEffectPreset_CreateHarmonixDelayInstanceOnSubmix::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetDelaySeconds
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetDelaySeconds final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetDelaySeconds) == 0x000004, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetDelaySeconds");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetDelaySeconds) == 0x000004, "Wrong size on HarmonixDelaySubmixEffectPreset_SetDelaySeconds");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetDelaySeconds, Time) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetDelaySeconds::Time' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetDryGain
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetDryGain final
{
public:
	float                                         Gain;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetDryGain) == 0x000004, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetDryGain");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetDryGain) == 0x000004, "Wrong size on HarmonixDelaySubmixEffectPreset_SetDryGain");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetDryGain, Gain) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetDryGain::Gain' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixDelaySubmixEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetFeedbackGain
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetFeedbackGain final
{
public:
	float                                         Gain;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetFeedbackGain) == 0x000004, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetFeedbackGain");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetFeedbackGain) == 0x000004, "Wrong size on HarmonixDelaySubmixEffectPreset_SetFeedbackGain");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetFeedbackGain, Gain) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetFeedbackGain::Gain' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetFilterEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetFilterEnabled final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetFilterEnabled) == 0x000001, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetFilterEnabled");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetFilterEnabled) == 0x000001, "Wrong size on HarmonixDelaySubmixEffectPreset_SetFilterEnabled");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetFilterEnabled, On) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetFilterEnabled::On' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetFilterFreq
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetFilterFreq final
{
public:
	float                                         hz;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetFilterFreq) == 0x000004, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetFilterFreq");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetFilterFreq) == 0x000004, "Wrong size on HarmonixDelaySubmixEffectPreset_SetFilterFreq");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetFilterFreq, hz) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetFilterFreq::hz' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetFilterQ
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetFilterQ final
{
public:
	float                                         Q;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetFilterQ) == 0x000004, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetFilterQ");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetFilterQ) == 0x000004, "Wrong size on HarmonixDelaySubmixEffectPreset_SetFilterQ");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetFilterQ, Q) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetFilterQ::Q' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetFilterType
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetFilterType final
{
public:
	EHarmonixDelayFilterType                      Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetFilterType) == 0x000001, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetFilterType");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetFilterType) == 0x000001, "Wrong size on HarmonixDelaySubmixEffectPreset_SetFilterType");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetFilterType, Type) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetFilterType::Type' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetLFODepth
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetLFODepth final
{
public:
	float                                         Depth;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetLFODepth) == 0x000004, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetLFODepth");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetLFODepth) == 0x000004, "Wrong size on HarmonixDelaySubmixEffectPreset_SetLFODepth");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetLFODepth, Depth) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetLFODepth::Depth' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetLFOEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetLFOEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetLFOEnabled) == 0x000001, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetLFOEnabled");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetLFOEnabled) == 0x000001, "Wrong size on HarmonixDelaySubmixEffectPreset_SetLFOEnabled");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetLFOEnabled, Enabled) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetLFOEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetLFOFreq
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetLFOFreq final
{
public:
	float                                         hz;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetLFOFreq) == 0x000004, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetLFOFreq");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetLFOFreq) == 0x000004, "Wrong size on HarmonixDelaySubmixEffectPreset_SetLFOFreq");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetLFOFreq, hz) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetLFOFreq::hz' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetLFOTimeSyncOption
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetLFOTimeSyncOption final
{
public:
	ETempoListenerTimeSyncOption                  Option;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetLFOTimeSyncOption) == 0x000001, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetLFOTimeSyncOption");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetLFOTimeSyncOption) == 0x000001, "Wrong size on HarmonixDelaySubmixEffectPreset_SetLFOTimeSyncOption");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetLFOTimeSyncOption, Option) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetLFOTimeSyncOption::Option' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetOutputGain
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetOutputGain final
{
public:
	float                                         Gain;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetOutputGain) == 0x000004, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetOutputGain");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetOutputGain) == 0x000004, "Wrong size on HarmonixDelaySubmixEffectPreset_SetOutputGain");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetOutputGain, Gain) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetOutputGain::Gain' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetSettings
// 0x003C (0x003C - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetSettings final
{
public:
	struct FHarmonixDelayEffectSettings           InSettings;                                        // 0x0000(0x003C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetSettings");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetSettings) == 0x00003C, "Wrong size on HarmonixDelaySubmixEffectPreset_SetSettings");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetSpeed
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetSpeed) == 0x000004, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetSpeed");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetSpeed) == 0x000004, "Wrong size on HarmonixDelaySubmixEffectPreset_SetSpeed");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetSpeed, Speed) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetSpeed::Speed' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetStereoSpreadLeft
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetStereoSpreadLeft final
{
public:
	float                                         Spread;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetStereoSpreadLeft) == 0x000004, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetStereoSpreadLeft");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetStereoSpreadLeft) == 0x000004, "Wrong size on HarmonixDelaySubmixEffectPreset_SetStereoSpreadLeft");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetStereoSpreadLeft, Spread) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetStereoSpreadLeft::Spread' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetStereoSpreadRight
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetStereoSpreadRight final
{
public:
	float                                         Spread;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetStereoSpreadRight) == 0x000004, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetStereoSpreadRight");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetStereoSpreadRight) == 0x000004, "Wrong size on HarmonixDelaySubmixEffectPreset_SetStereoSpreadRight");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetStereoSpreadRight, Spread) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetStereoSpreadRight::Spread' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetStereoType
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetStereoType final
{
public:
	EHarmonixDelayStereoType                      Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetStereoType) == 0x000001, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetStereoType");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetStereoType) == 0x000001, "Wrong size on HarmonixDelaySubmixEffectPreset_SetStereoType");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetStereoType, Type) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetStereoType::Type' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetTempo
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetTempo final
{
public:
	float                                         BPM;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetTempo) == 0x000004, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetTempo");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetTempo) == 0x000004, "Wrong size on HarmonixDelaySubmixEffectPreset_SetTempo");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetTempo, BPM) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetTempo::BPM' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetTimeSyncOption
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetTimeSyncOption final
{
public:
	ETempoListenerTimeSyncOption                  Option;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetTimeSyncOption");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong size on HarmonixDelaySubmixEffectPreset_SetTimeSyncOption");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetTimeSyncOption, Option) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetTimeSyncOption::Option' has a wrong offset!");

// Function HmxAudio.HarmonixDelaySubmixEffectPreset.SetWetGain
// 0x0004 (0x0004 - 0x0000)
struct HarmonixDelaySubmixEffectPreset_SetWetGain final
{
public:
	float                                         Gain;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDelaySubmixEffectPreset_SetWetGain) == 0x000004, "Wrong alignment on HarmonixDelaySubmixEffectPreset_SetWetGain");
static_assert(sizeof(HarmonixDelaySubmixEffectPreset_SetWetGain) == 0x000004, "Wrong size on HarmonixDelaySubmixEffectPreset_SetWetGain");
static_assert(offsetof(HarmonixDelaySubmixEffectPreset_SetWetGain, Gain) == 0x000000, "Member 'HarmonixDelaySubmixEffectPreset_SetWetGain::Gain' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSourceEffectPreset.CreateHarmonixDistortionInstanceOnEmitter
// 0x0070 (0x0070 - 0x0000)
struct HarmonixDistortionSourceEffectPreset_CreateHarmonixDistortionInstanceOnEmitter final
{
public:
	class UMusicEmitterComponent*                 Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixDistortionEffectSettings      InSettings;                                        // 0x0008(0x0060)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UHarmonixDistortionSourceEffectPreset*  ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDistortionSourceEffectPreset_CreateHarmonixDistortionInstanceOnEmitter) == 0x000008, "Wrong alignment on HarmonixDistortionSourceEffectPreset_CreateHarmonixDistortionInstanceOnEmitter");
static_assert(sizeof(HarmonixDistortionSourceEffectPreset_CreateHarmonixDistortionInstanceOnEmitter) == 0x000070, "Wrong size on HarmonixDistortionSourceEffectPreset_CreateHarmonixDistortionInstanceOnEmitter");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_CreateHarmonixDistortionInstanceOnEmitter, Emitter) == 0x000000, "Member 'HarmonixDistortionSourceEffectPreset_CreateHarmonixDistortionInstanceOnEmitter::Emitter' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_CreateHarmonixDistortionInstanceOnEmitter, InSettings) == 0x000008, "Member 'HarmonixDistortionSourceEffectPreset_CreateHarmonixDistortionInstanceOnEmitter::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_CreateHarmonixDistortionInstanceOnEmitter, ReturnValue) == 0x000068, "Member 'HarmonixDistortionSourceEffectPreset_CreateHarmonixDistortionInstanceOnEmitter::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetDCOffset
// 0x0008 (0x0008 - 0x0000)
struct HarmonixDistortionSourceEffectPreset_SetDCOffset final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixDistortionSourceEffectPreset_SetDCOffset) == 0x000004, "Wrong alignment on HarmonixDistortionSourceEffectPreset_SetDCOffset");
static_assert(sizeof(HarmonixDistortionSourceEffectPreset_SetDCOffset) == 0x000008, "Wrong size on HarmonixDistortionSourceEffectPreset_SetDCOffset");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetDCOffset, Offset) == 0x000000, "Member 'HarmonixDistortionSourceEffectPreset_SetDCOffset::Offset' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetDCOffset, Snap) == 0x000004, "Member 'HarmonixDistortionSourceEffectPreset_SetDCOffset::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetDryGainDb
// 0x0008 (0x0008 - 0x0000)
struct HarmonixDistortionSourceEffectPreset_SetDryGainDb final
{
public:
	float                                         GainDb;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixDistortionSourceEffectPreset_SetDryGainDb) == 0x000004, "Wrong alignment on HarmonixDistortionSourceEffectPreset_SetDryGainDb");
static_assert(sizeof(HarmonixDistortionSourceEffectPreset_SetDryGainDb) == 0x000008, "Wrong size on HarmonixDistortionSourceEffectPreset_SetDryGainDb");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetDryGainDb, GainDb) == 0x000000, "Member 'HarmonixDistortionSourceEffectPreset_SetDryGainDb::GainDb' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetDryGainDb, Snap) == 0x000004, "Member 'HarmonixDistortionSourceEffectPreset_SetDryGainDb::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDistortionSourceEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDistortionSourceEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixDistortionSourceEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixDistortionSourceEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixDistortionSourceEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixDistortionSourceEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetInputGainDb
// 0x0008 (0x0008 - 0x0000)
struct HarmonixDistortionSourceEffectPreset_SetInputGainDb final
{
public:
	float                                         GainDb;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixDistortionSourceEffectPreset_SetInputGainDb) == 0x000004, "Wrong alignment on HarmonixDistortionSourceEffectPreset_SetInputGainDb");
static_assert(sizeof(HarmonixDistortionSourceEffectPreset_SetInputGainDb) == 0x000008, "Wrong size on HarmonixDistortionSourceEffectPreset_SetInputGainDb");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetInputGainDb, GainDb) == 0x000000, "Member 'HarmonixDistortionSourceEffectPreset_SetInputGainDb::GainDb' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetInputGainDb, Snap) == 0x000004, "Member 'HarmonixDistortionSourceEffectPreset_SetInputGainDb::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetMix
// 0x0008 (0x0008 - 0x0000)
struct HarmonixDistortionSourceEffectPreset_SetMix final
{
public:
	float                                         M;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixDistortionSourceEffectPreset_SetMix) == 0x000004, "Wrong alignment on HarmonixDistortionSourceEffectPreset_SetMix");
static_assert(sizeof(HarmonixDistortionSourceEffectPreset_SetMix) == 0x000008, "Wrong size on HarmonixDistortionSourceEffectPreset_SetMix");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetMix, M) == 0x000000, "Member 'HarmonixDistortionSourceEffectPreset_SetMix::M' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetMix, Snap) == 0x000004, "Member 'HarmonixDistortionSourceEffectPreset_SetMix::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetOutputGainDb
// 0x0008 (0x0008 - 0x0000)
struct HarmonixDistortionSourceEffectPreset_SetOutputGainDb final
{
public:
	float                                         GainDb;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixDistortionSourceEffectPreset_SetOutputGainDb) == 0x000004, "Wrong alignment on HarmonixDistortionSourceEffectPreset_SetOutputGainDb");
static_assert(sizeof(HarmonixDistortionSourceEffectPreset_SetOutputGainDb) == 0x000008, "Wrong size on HarmonixDistortionSourceEffectPreset_SetOutputGainDb");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetOutputGainDb, GainDb) == 0x000000, "Member 'HarmonixDistortionSourceEffectPreset_SetOutputGainDb::GainDb' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetOutputGainDb, Snap) == 0x000004, "Member 'HarmonixDistortionSourceEffectPreset_SetOutputGainDb::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetOversample
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDistortionSourceEffectPreset_SetOversample final
{
public:
	bool                                          Oversample;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDistortionSourceEffectPreset_SetOversample) == 0x000001, "Wrong alignment on HarmonixDistortionSourceEffectPreset_SetOversample");
static_assert(sizeof(HarmonixDistortionSourceEffectPreset_SetOversample) == 0x000001, "Wrong size on HarmonixDistortionSourceEffectPreset_SetOversample");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetOversample, Oversample) == 0x000000, "Member 'HarmonixDistortionSourceEffectPreset_SetOversample::Oversample' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetSettings
// 0x0060 (0x0060 - 0x0000)
struct HarmonixDistortionSourceEffectPreset_SetSettings final
{
public:
	struct FHarmonixDistortionEffectSettings      InSettings;                                        // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDistortionSourceEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixDistortionSourceEffectPreset_SetSettings");
static_assert(sizeof(HarmonixDistortionSourceEffectPreset_SetSettings) == 0x000060, "Wrong size on HarmonixDistortionSourceEffectPreset_SetSettings");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixDistortionSourceEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetType
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDistortionSourceEffectPreset_SetType final
{
public:
	EDistortionType                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDistortionSourceEffectPreset_SetType) == 0x000001, "Wrong alignment on HarmonixDistortionSourceEffectPreset_SetType");
static_assert(sizeof(HarmonixDistortionSourceEffectPreset_SetType) == 0x000001, "Wrong size on HarmonixDistortionSourceEffectPreset_SetType");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetType, Type) == 0x000000, "Member 'HarmonixDistortionSourceEffectPreset_SetType::Type' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetupFilter
// 0x001C (0x001C - 0x0000)
struct HarmonixDistortionSourceEffectPreset_SetupFilter final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          pre;                                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHarmonixDistortionBiquadSettings      filterSettings;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         filterPasses;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDistortionSourceEffectPreset_SetupFilter) == 0x000004, "Wrong alignment on HarmonixDistortionSourceEffectPreset_SetupFilter");
static_assert(sizeof(HarmonixDistortionSourceEffectPreset_SetupFilter) == 0x00001C, "Wrong size on HarmonixDistortionSourceEffectPreset_SetupFilter");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetupFilter, Index_0) == 0x000000, "Member 'HarmonixDistortionSourceEffectPreset_SetupFilter::Index_0' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetupFilter, pre) == 0x000004, "Member 'HarmonixDistortionSourceEffectPreset_SetupFilter::pre' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetupFilter, filterSettings) == 0x000008, "Member 'HarmonixDistortionSourceEffectPreset_SetupFilter::filterSettings' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetupFilter, filterPasses) == 0x000018, "Member 'HarmonixDistortionSourceEffectPreset_SetupFilter::filterPasses' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSourceEffectPreset.SetWetGainDb
// 0x0008 (0x0008 - 0x0000)
struct HarmonixDistortionSourceEffectPreset_SetWetGainDb final
{
public:
	float                                         GainDb;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixDistortionSourceEffectPreset_SetWetGainDb) == 0x000004, "Wrong alignment on HarmonixDistortionSourceEffectPreset_SetWetGainDb");
static_assert(sizeof(HarmonixDistortionSourceEffectPreset_SetWetGainDb) == 0x000008, "Wrong size on HarmonixDistortionSourceEffectPreset_SetWetGainDb");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetWetGainDb, GainDb) == 0x000000, "Member 'HarmonixDistortionSourceEffectPreset_SetWetGainDb::GainDb' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSourceEffectPreset_SetWetGainDb, Snap) == 0x000004, "Member 'HarmonixDistortionSourceEffectPreset_SetWetGainDb::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.CreateHarmonixDistortionInstanceOnSubmix
// 0x0078 (0x0078 - 0x0000)
struct HarmonixDistortionSubmixEffectPreset_CreateHarmonixDistortionInstanceOnSubmix final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           Submix;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixDistortionEffectSettings      InSettings;                                        // 0x0010(0x0060)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UHarmonixDistortionSubmixEffectPreset*  ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDistortionSubmixEffectPreset_CreateHarmonixDistortionInstanceOnSubmix) == 0x000008, "Wrong alignment on HarmonixDistortionSubmixEffectPreset_CreateHarmonixDistortionInstanceOnSubmix");
static_assert(sizeof(HarmonixDistortionSubmixEffectPreset_CreateHarmonixDistortionInstanceOnSubmix) == 0x000078, "Wrong size on HarmonixDistortionSubmixEffectPreset_CreateHarmonixDistortionInstanceOnSubmix");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_CreateHarmonixDistortionInstanceOnSubmix, WorldContextObject) == 0x000000, "Member 'HarmonixDistortionSubmixEffectPreset_CreateHarmonixDistortionInstanceOnSubmix::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_CreateHarmonixDistortionInstanceOnSubmix, Submix) == 0x000008, "Member 'HarmonixDistortionSubmixEffectPreset_CreateHarmonixDistortionInstanceOnSubmix::Submix' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_CreateHarmonixDistortionInstanceOnSubmix, InSettings) == 0x000010, "Member 'HarmonixDistortionSubmixEffectPreset_CreateHarmonixDistortionInstanceOnSubmix::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_CreateHarmonixDistortionInstanceOnSubmix, ReturnValue) == 0x000070, "Member 'HarmonixDistortionSubmixEffectPreset_CreateHarmonixDistortionInstanceOnSubmix::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetDCOffset
// 0x0008 (0x0008 - 0x0000)
struct HarmonixDistortionSubmixEffectPreset_SetDCOffset final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixDistortionSubmixEffectPreset_SetDCOffset) == 0x000004, "Wrong alignment on HarmonixDistortionSubmixEffectPreset_SetDCOffset");
static_assert(sizeof(HarmonixDistortionSubmixEffectPreset_SetDCOffset) == 0x000008, "Wrong size on HarmonixDistortionSubmixEffectPreset_SetDCOffset");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetDCOffset, Offset) == 0x000000, "Member 'HarmonixDistortionSubmixEffectPreset_SetDCOffset::Offset' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetDCOffset, Snap) == 0x000004, "Member 'HarmonixDistortionSubmixEffectPreset_SetDCOffset::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetDryGainDb
// 0x0008 (0x0008 - 0x0000)
struct HarmonixDistortionSubmixEffectPreset_SetDryGainDb final
{
public:
	float                                         GainDb;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixDistortionSubmixEffectPreset_SetDryGainDb) == 0x000004, "Wrong alignment on HarmonixDistortionSubmixEffectPreset_SetDryGainDb");
static_assert(sizeof(HarmonixDistortionSubmixEffectPreset_SetDryGainDb) == 0x000008, "Wrong size on HarmonixDistortionSubmixEffectPreset_SetDryGainDb");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetDryGainDb, GainDb) == 0x000000, "Member 'HarmonixDistortionSubmixEffectPreset_SetDryGainDb::GainDb' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetDryGainDb, Snap) == 0x000004, "Member 'HarmonixDistortionSubmixEffectPreset_SetDryGainDb::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDistortionSubmixEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDistortionSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixDistortionSubmixEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixDistortionSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixDistortionSubmixEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixDistortionSubmixEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetInputGainDb
// 0x0008 (0x0008 - 0x0000)
struct HarmonixDistortionSubmixEffectPreset_SetInputGainDb final
{
public:
	float                                         GainDb;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixDistortionSubmixEffectPreset_SetInputGainDb) == 0x000004, "Wrong alignment on HarmonixDistortionSubmixEffectPreset_SetInputGainDb");
static_assert(sizeof(HarmonixDistortionSubmixEffectPreset_SetInputGainDb) == 0x000008, "Wrong size on HarmonixDistortionSubmixEffectPreset_SetInputGainDb");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetInputGainDb, GainDb) == 0x000000, "Member 'HarmonixDistortionSubmixEffectPreset_SetInputGainDb::GainDb' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetInputGainDb, Snap) == 0x000004, "Member 'HarmonixDistortionSubmixEffectPreset_SetInputGainDb::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetMix
// 0x0008 (0x0008 - 0x0000)
struct HarmonixDistortionSubmixEffectPreset_SetMix final
{
public:
	float                                         M;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixDistortionSubmixEffectPreset_SetMix) == 0x000004, "Wrong alignment on HarmonixDistortionSubmixEffectPreset_SetMix");
static_assert(sizeof(HarmonixDistortionSubmixEffectPreset_SetMix) == 0x000008, "Wrong size on HarmonixDistortionSubmixEffectPreset_SetMix");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetMix, M) == 0x000000, "Member 'HarmonixDistortionSubmixEffectPreset_SetMix::M' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetMix, Snap) == 0x000004, "Member 'HarmonixDistortionSubmixEffectPreset_SetMix::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetOutputGainDb
// 0x0008 (0x0008 - 0x0000)
struct HarmonixDistortionSubmixEffectPreset_SetOutputGainDb final
{
public:
	float                                         GainDb;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixDistortionSubmixEffectPreset_SetOutputGainDb) == 0x000004, "Wrong alignment on HarmonixDistortionSubmixEffectPreset_SetOutputGainDb");
static_assert(sizeof(HarmonixDistortionSubmixEffectPreset_SetOutputGainDb) == 0x000008, "Wrong size on HarmonixDistortionSubmixEffectPreset_SetOutputGainDb");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetOutputGainDb, GainDb) == 0x000000, "Member 'HarmonixDistortionSubmixEffectPreset_SetOutputGainDb::GainDb' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetOutputGainDb, Snap) == 0x000004, "Member 'HarmonixDistortionSubmixEffectPreset_SetOutputGainDb::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetOversample
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDistortionSubmixEffectPreset_SetOversample final
{
public:
	bool                                          Oversample;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDistortionSubmixEffectPreset_SetOversample) == 0x000001, "Wrong alignment on HarmonixDistortionSubmixEffectPreset_SetOversample");
static_assert(sizeof(HarmonixDistortionSubmixEffectPreset_SetOversample) == 0x000001, "Wrong size on HarmonixDistortionSubmixEffectPreset_SetOversample");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetOversample, Oversample) == 0x000000, "Member 'HarmonixDistortionSubmixEffectPreset_SetOversample::Oversample' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetSettings
// 0x0060 (0x0060 - 0x0000)
struct HarmonixDistortionSubmixEffectPreset_SetSettings final
{
public:
	struct FHarmonixDistortionEffectSettings      InSettings;                                        // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDistortionSubmixEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixDistortionSubmixEffectPreset_SetSettings");
static_assert(sizeof(HarmonixDistortionSubmixEffectPreset_SetSettings) == 0x000060, "Wrong size on HarmonixDistortionSubmixEffectPreset_SetSettings");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixDistortionSubmixEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetType
// 0x0001 (0x0001 - 0x0000)
struct HarmonixDistortionSubmixEffectPreset_SetType final
{
public:
	EDistortionType                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDistortionSubmixEffectPreset_SetType) == 0x000001, "Wrong alignment on HarmonixDistortionSubmixEffectPreset_SetType");
static_assert(sizeof(HarmonixDistortionSubmixEffectPreset_SetType) == 0x000001, "Wrong size on HarmonixDistortionSubmixEffectPreset_SetType");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetType, Type) == 0x000000, "Member 'HarmonixDistortionSubmixEffectPreset_SetType::Type' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetupFilter
// 0x001C (0x001C - 0x0000)
struct HarmonixDistortionSubmixEffectPreset_SetupFilter final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          pre;                                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHarmonixDistortionBiquadSettings      filterSettings;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         filterPasses;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixDistortionSubmixEffectPreset_SetupFilter) == 0x000004, "Wrong alignment on HarmonixDistortionSubmixEffectPreset_SetupFilter");
static_assert(sizeof(HarmonixDistortionSubmixEffectPreset_SetupFilter) == 0x00001C, "Wrong size on HarmonixDistortionSubmixEffectPreset_SetupFilter");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetupFilter, Index_0) == 0x000000, "Member 'HarmonixDistortionSubmixEffectPreset_SetupFilter::Index_0' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetupFilter, pre) == 0x000004, "Member 'HarmonixDistortionSubmixEffectPreset_SetupFilter::pre' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetupFilter, filterSettings) == 0x000008, "Member 'HarmonixDistortionSubmixEffectPreset_SetupFilter::filterSettings' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetupFilter, filterPasses) == 0x000018, "Member 'HarmonixDistortionSubmixEffectPreset_SetupFilter::filterPasses' has a wrong offset!");

// Function HmxAudio.HarmonixDistortionSubmixEffectPreset.SetWetGainDb
// 0x0008 (0x0008 - 0x0000)
struct HarmonixDistortionSubmixEffectPreset_SetWetGainDb final
{
public:
	float                                         GainDb;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snap;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixDistortionSubmixEffectPreset_SetWetGainDb) == 0x000004, "Wrong alignment on HarmonixDistortionSubmixEffectPreset_SetWetGainDb");
static_assert(sizeof(HarmonixDistortionSubmixEffectPreset_SetWetGainDb) == 0x000008, "Wrong size on HarmonixDistortionSubmixEffectPreset_SetWetGainDb");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetWetGainDb, GainDb) == 0x000000, "Member 'HarmonixDistortionSubmixEffectPreset_SetWetGainDb::GainDb' has a wrong offset!");
static_assert(offsetof(HarmonixDistortionSubmixEffectPreset_SetWetGainDb, Snap) == 0x000004, "Member 'HarmonixDistortionSubmixEffectPreset_SetWetGainDb::Snap' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSourceEffectPreset.CreateHarmonixFlangerInstanceOnEmitter
// 0x0038 (0x0038 - 0x0000)
struct HarmonixFlangerSourceEffectPreset_CreateHarmonixFlangerInstanceOnEmitter final
{
public:
	class UMusicEmitterComponent*                 Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixFlangerEffectSettings         InSettings;                                        // 0x0008(0x0028)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UHarmonixFlangerSourceEffectPreset*     ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSourceEffectPreset_CreateHarmonixFlangerInstanceOnEmitter) == 0x000008, "Wrong alignment on HarmonixFlangerSourceEffectPreset_CreateHarmonixFlangerInstanceOnEmitter");
static_assert(sizeof(HarmonixFlangerSourceEffectPreset_CreateHarmonixFlangerInstanceOnEmitter) == 0x000038, "Wrong size on HarmonixFlangerSourceEffectPreset_CreateHarmonixFlangerInstanceOnEmitter");
static_assert(offsetof(HarmonixFlangerSourceEffectPreset_CreateHarmonixFlangerInstanceOnEmitter, Emitter) == 0x000000, "Member 'HarmonixFlangerSourceEffectPreset_CreateHarmonixFlangerInstanceOnEmitter::Emitter' has a wrong offset!");
static_assert(offsetof(HarmonixFlangerSourceEffectPreset_CreateHarmonixFlangerInstanceOnEmitter, InSettings) == 0x000008, "Member 'HarmonixFlangerSourceEffectPreset_CreateHarmonixFlangerInstanceOnEmitter::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixFlangerSourceEffectPreset_CreateHarmonixFlangerInstanceOnEmitter, ReturnValue) == 0x000030, "Member 'HarmonixFlangerSourceEffectPreset_CreateHarmonixFlangerInstanceOnEmitter::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetDelayTimeMs
// 0x0004 (0x0004 - 0x0000)
struct HarmonixFlangerSourceEffectPreset_SetDelayTimeMs final
{
public:
	float                                         ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSourceEffectPreset_SetDelayTimeMs) == 0x000004, "Wrong alignment on HarmonixFlangerSourceEffectPreset_SetDelayTimeMs");
static_assert(sizeof(HarmonixFlangerSourceEffectPreset_SetDelayTimeMs) == 0x000004, "Wrong size on HarmonixFlangerSourceEffectPreset_SetDelayTimeMs");
static_assert(offsetof(HarmonixFlangerSourceEffectPreset_SetDelayTimeMs, ms) == 0x000000, "Member 'HarmonixFlangerSourceEffectPreset_SetDelayTimeMs::ms' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetDepth
// 0x0004 (0x0004 - 0x0000)
struct HarmonixFlangerSourceEffectPreset_SetDepth final
{
public:
	float                                         Depth;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSourceEffectPreset_SetDepth) == 0x000004, "Wrong alignment on HarmonixFlangerSourceEffectPreset_SetDepth");
static_assert(sizeof(HarmonixFlangerSourceEffectPreset_SetDepth) == 0x000004, "Wrong size on HarmonixFlangerSourceEffectPreset_SetDepth");
static_assert(offsetof(HarmonixFlangerSourceEffectPreset_SetDepth, Depth) == 0x000000, "Member 'HarmonixFlangerSourceEffectPreset_SetDepth::Depth' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixFlangerSourceEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSourceEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixFlangerSourceEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixFlangerSourceEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixFlangerSourceEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixFlangerSourceEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixFlangerSourceEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetExcursion
// 0x0004 (0x0004 - 0x0000)
struct HarmonixFlangerSourceEffectPreset_SetExcursion final
{
public:
	float                                         ex;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSourceEffectPreset_SetExcursion) == 0x000004, "Wrong alignment on HarmonixFlangerSourceEffectPreset_SetExcursion");
static_assert(sizeof(HarmonixFlangerSourceEffectPreset_SetExcursion) == 0x000004, "Wrong size on HarmonixFlangerSourceEffectPreset_SetExcursion");
static_assert(offsetof(HarmonixFlangerSourceEffectPreset_SetExcursion, ex) == 0x000000, "Member 'HarmonixFlangerSourceEffectPreset_SetExcursion::ex' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetFeedback
// 0x0004 (0x0004 - 0x0000)
struct HarmonixFlangerSourceEffectPreset_SetFeedback final
{
public:
	float                                         fb;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSourceEffectPreset_SetFeedback) == 0x000004, "Wrong alignment on HarmonixFlangerSourceEffectPreset_SetFeedback");
static_assert(sizeof(HarmonixFlangerSourceEffectPreset_SetFeedback) == 0x000004, "Wrong size on HarmonixFlangerSourceEffectPreset_SetFeedback");
static_assert(offsetof(HarmonixFlangerSourceEffectPreset_SetFeedback, fb) == 0x000000, "Member 'HarmonixFlangerSourceEffectPreset_SetFeedback::fb' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetInvert
// 0x0001 (0x0001 - 0x0000)
struct HarmonixFlangerSourceEffectPreset_SetInvert final
{
public:
	bool                                          Invert;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSourceEffectPreset_SetInvert) == 0x000001, "Wrong alignment on HarmonixFlangerSourceEffectPreset_SetInvert");
static_assert(sizeof(HarmonixFlangerSourceEffectPreset_SetInvert) == 0x000001, "Wrong size on HarmonixFlangerSourceEffectPreset_SetInvert");
static_assert(offsetof(HarmonixFlangerSourceEffectPreset_SetInvert, Invert) == 0x000000, "Member 'HarmonixFlangerSourceEffectPreset_SetInvert::Invert' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetModFreq
// 0x0008 (0x0008 - 0x0000)
struct HarmonixFlangerSourceEffectPreset_SetModFreq final
{
public:
	float                                         freq;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixFlangerSourceEffectPreset_SetModFreq) == 0x000004, "Wrong alignment on HarmonixFlangerSourceEffectPreset_SetModFreq");
static_assert(sizeof(HarmonixFlangerSourceEffectPreset_SetModFreq) == 0x000008, "Wrong size on HarmonixFlangerSourceEffectPreset_SetModFreq");
static_assert(offsetof(HarmonixFlangerSourceEffectPreset_SetModFreq, freq) == 0x000000, "Member 'HarmonixFlangerSourceEffectPreset_SetModFreq::freq' has a wrong offset!");
static_assert(offsetof(HarmonixFlangerSourceEffectPreset_SetModFreq, Force) == 0x000004, "Member 'HarmonixFlangerSourceEffectPreset_SetModFreq::Force' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetModShape
// 0x0001 (0x0001 - 0x0000)
struct HarmonixFlangerSourceEffectPreset_SetModShape final
{
public:
	EHarmonixFlangerShapes                        S;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSourceEffectPreset_SetModShape) == 0x000001, "Wrong alignment on HarmonixFlangerSourceEffectPreset_SetModShape");
static_assert(sizeof(HarmonixFlangerSourceEffectPreset_SetModShape) == 0x000001, "Wrong size on HarmonixFlangerSourceEffectPreset_SetModShape");
static_assert(offsetof(HarmonixFlangerSourceEffectPreset_SetModShape, S) == 0x000000, "Member 'HarmonixFlangerSourceEffectPreset_SetModShape::S' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetSettings
// 0x0028 (0x0028 - 0x0000)
struct HarmonixFlangerSourceEffectPreset_SetSettings final
{
public:
	struct FHarmonixFlangerEffectSettings         InSettings;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSourceEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixFlangerSourceEffectPreset_SetSettings");
static_assert(sizeof(HarmonixFlangerSourceEffectPreset_SetSettings) == 0x000028, "Wrong size on HarmonixFlangerSourceEffectPreset_SetSettings");
static_assert(offsetof(HarmonixFlangerSourceEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixFlangerSourceEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSourceEffectPreset.SetTimeSyncOption
// 0x0008 (0x0008 - 0x0000)
struct HarmonixFlangerSourceEffectPreset_SetTimeSyncOption final
{
public:
	ETempoListenerTimeSyncOption                  Option;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         currentBeatFraction;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSourceEffectPreset_SetTimeSyncOption) == 0x000004, "Wrong alignment on HarmonixFlangerSourceEffectPreset_SetTimeSyncOption");
static_assert(sizeof(HarmonixFlangerSourceEffectPreset_SetTimeSyncOption) == 0x000008, "Wrong size on HarmonixFlangerSourceEffectPreset_SetTimeSyncOption");
static_assert(offsetof(HarmonixFlangerSourceEffectPreset_SetTimeSyncOption, Option) == 0x000000, "Member 'HarmonixFlangerSourceEffectPreset_SetTimeSyncOption::Option' has a wrong offset!");
static_assert(offsetof(HarmonixFlangerSourceEffectPreset_SetTimeSyncOption, currentBeatFraction) == 0x000004, "Member 'HarmonixFlangerSourceEffectPreset_SetTimeSyncOption::currentBeatFraction' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.CreateHarmonixFlangerInstanceOnSubmix
// 0x0040 (0x0040 - 0x0000)
struct HarmonixFlangerSubmixEffectPreset_CreateHarmonixFlangerInstanceOnSubmix final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           Submix;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixFlangerEffectSettings         InSettings;                                        // 0x0010(0x0028)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UHarmonixFlangerSubmixEffectPreset*     ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSubmixEffectPreset_CreateHarmonixFlangerInstanceOnSubmix) == 0x000008, "Wrong alignment on HarmonixFlangerSubmixEffectPreset_CreateHarmonixFlangerInstanceOnSubmix");
static_assert(sizeof(HarmonixFlangerSubmixEffectPreset_CreateHarmonixFlangerInstanceOnSubmix) == 0x000040, "Wrong size on HarmonixFlangerSubmixEffectPreset_CreateHarmonixFlangerInstanceOnSubmix");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_CreateHarmonixFlangerInstanceOnSubmix, WorldContextObject) == 0x000000, "Member 'HarmonixFlangerSubmixEffectPreset_CreateHarmonixFlangerInstanceOnSubmix::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_CreateHarmonixFlangerInstanceOnSubmix, Submix) == 0x000008, "Member 'HarmonixFlangerSubmixEffectPreset_CreateHarmonixFlangerInstanceOnSubmix::Submix' has a wrong offset!");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_CreateHarmonixFlangerInstanceOnSubmix, InSettings) == 0x000010, "Member 'HarmonixFlangerSubmixEffectPreset_CreateHarmonixFlangerInstanceOnSubmix::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_CreateHarmonixFlangerInstanceOnSubmix, ReturnValue) == 0x000038, "Member 'HarmonixFlangerSubmixEffectPreset_CreateHarmonixFlangerInstanceOnSubmix::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetDelayTimeMs
// 0x0004 (0x0004 - 0x0000)
struct HarmonixFlangerSubmixEffectPreset_SetDelayTimeMs final
{
public:
	float                                         ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSubmixEffectPreset_SetDelayTimeMs) == 0x000004, "Wrong alignment on HarmonixFlangerSubmixEffectPreset_SetDelayTimeMs");
static_assert(sizeof(HarmonixFlangerSubmixEffectPreset_SetDelayTimeMs) == 0x000004, "Wrong size on HarmonixFlangerSubmixEffectPreset_SetDelayTimeMs");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_SetDelayTimeMs, ms) == 0x000000, "Member 'HarmonixFlangerSubmixEffectPreset_SetDelayTimeMs::ms' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetDepth
// 0x0004 (0x0004 - 0x0000)
struct HarmonixFlangerSubmixEffectPreset_SetDepth final
{
public:
	float                                         Depth;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSubmixEffectPreset_SetDepth) == 0x000004, "Wrong alignment on HarmonixFlangerSubmixEffectPreset_SetDepth");
static_assert(sizeof(HarmonixFlangerSubmixEffectPreset_SetDepth) == 0x000004, "Wrong size on HarmonixFlangerSubmixEffectPreset_SetDepth");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_SetDepth, Depth) == 0x000000, "Member 'HarmonixFlangerSubmixEffectPreset_SetDepth::Depth' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixFlangerSubmixEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixFlangerSubmixEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixFlangerSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixFlangerSubmixEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixFlangerSubmixEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetExcursion
// 0x0004 (0x0004 - 0x0000)
struct HarmonixFlangerSubmixEffectPreset_SetExcursion final
{
public:
	float                                         ex;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSubmixEffectPreset_SetExcursion) == 0x000004, "Wrong alignment on HarmonixFlangerSubmixEffectPreset_SetExcursion");
static_assert(sizeof(HarmonixFlangerSubmixEffectPreset_SetExcursion) == 0x000004, "Wrong size on HarmonixFlangerSubmixEffectPreset_SetExcursion");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_SetExcursion, ex) == 0x000000, "Member 'HarmonixFlangerSubmixEffectPreset_SetExcursion::ex' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetFeedback
// 0x0004 (0x0004 - 0x0000)
struct HarmonixFlangerSubmixEffectPreset_SetFeedback final
{
public:
	float                                         fb;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSubmixEffectPreset_SetFeedback) == 0x000004, "Wrong alignment on HarmonixFlangerSubmixEffectPreset_SetFeedback");
static_assert(sizeof(HarmonixFlangerSubmixEffectPreset_SetFeedback) == 0x000004, "Wrong size on HarmonixFlangerSubmixEffectPreset_SetFeedback");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_SetFeedback, fb) == 0x000000, "Member 'HarmonixFlangerSubmixEffectPreset_SetFeedback::fb' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetInvert
// 0x0001 (0x0001 - 0x0000)
struct HarmonixFlangerSubmixEffectPreset_SetInvert final
{
public:
	bool                                          Invert;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSubmixEffectPreset_SetInvert) == 0x000001, "Wrong alignment on HarmonixFlangerSubmixEffectPreset_SetInvert");
static_assert(sizeof(HarmonixFlangerSubmixEffectPreset_SetInvert) == 0x000001, "Wrong size on HarmonixFlangerSubmixEffectPreset_SetInvert");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_SetInvert, Invert) == 0x000000, "Member 'HarmonixFlangerSubmixEffectPreset_SetInvert::Invert' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetModFreq
// 0x0008 (0x0008 - 0x0000)
struct HarmonixFlangerSubmixEffectPreset_SetModFreq final
{
public:
	float                                         freq;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixFlangerSubmixEffectPreset_SetModFreq) == 0x000004, "Wrong alignment on HarmonixFlangerSubmixEffectPreset_SetModFreq");
static_assert(sizeof(HarmonixFlangerSubmixEffectPreset_SetModFreq) == 0x000008, "Wrong size on HarmonixFlangerSubmixEffectPreset_SetModFreq");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_SetModFreq, freq) == 0x000000, "Member 'HarmonixFlangerSubmixEffectPreset_SetModFreq::freq' has a wrong offset!");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_SetModFreq, Force) == 0x000004, "Member 'HarmonixFlangerSubmixEffectPreset_SetModFreq::Force' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetModShape
// 0x0001 (0x0001 - 0x0000)
struct HarmonixFlangerSubmixEffectPreset_SetModShape final
{
public:
	EHarmonixFlangerShapes                        S;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSubmixEffectPreset_SetModShape) == 0x000001, "Wrong alignment on HarmonixFlangerSubmixEffectPreset_SetModShape");
static_assert(sizeof(HarmonixFlangerSubmixEffectPreset_SetModShape) == 0x000001, "Wrong size on HarmonixFlangerSubmixEffectPreset_SetModShape");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_SetModShape, S) == 0x000000, "Member 'HarmonixFlangerSubmixEffectPreset_SetModShape::S' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetSettings
// 0x0028 (0x0028 - 0x0000)
struct HarmonixFlangerSubmixEffectPreset_SetSettings final
{
public:
	struct FHarmonixFlangerEffectSettings         InSettings;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSubmixEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixFlangerSubmixEffectPreset_SetSettings");
static_assert(sizeof(HarmonixFlangerSubmixEffectPreset_SetSettings) == 0x000028, "Wrong size on HarmonixFlangerSubmixEffectPreset_SetSettings");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixFlangerSubmixEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixFlangerSubmixEffectPreset.SetTimeSyncOption
// 0x0008 (0x0008 - 0x0000)
struct HarmonixFlangerSubmixEffectPreset_SetTimeSyncOption final
{
public:
	ETempoListenerTimeSyncOption                  Option;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         currentBeatFraction;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixFlangerSubmixEffectPreset_SetTimeSyncOption) == 0x000004, "Wrong alignment on HarmonixFlangerSubmixEffectPreset_SetTimeSyncOption");
static_assert(sizeof(HarmonixFlangerSubmixEffectPreset_SetTimeSyncOption) == 0x000008, "Wrong size on HarmonixFlangerSubmixEffectPreset_SetTimeSyncOption");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_SetTimeSyncOption, Option) == 0x000000, "Member 'HarmonixFlangerSubmixEffectPreset_SetTimeSyncOption::Option' has a wrong offset!");
static_assert(offsetof(HarmonixFlangerSubmixEffectPreset_SetTimeSyncOption, currentBeatFraction) == 0x000004, "Member 'HarmonixFlangerSubmixEffectPreset_SetTimeSyncOption::currentBeatFraction' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSourceEffectPreset.CreateHarmonixPhaserInstanceOnEmitter
// 0x0038 (0x0038 - 0x0000)
struct HarmonixPhaserSourceEffectPreset_CreateHarmonixPhaserInstanceOnEmitter final
{
public:
	class UMusicEmitterComponent*                 Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixPhaserEffectSettings          InSettings;                                        // 0x0008(0x0028)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UHarmonixPhaserSourceEffectPreset*      ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSourceEffectPreset_CreateHarmonixPhaserInstanceOnEmitter) == 0x000008, "Wrong alignment on HarmonixPhaserSourceEffectPreset_CreateHarmonixPhaserInstanceOnEmitter");
static_assert(sizeof(HarmonixPhaserSourceEffectPreset_CreateHarmonixPhaserInstanceOnEmitter) == 0x000038, "Wrong size on HarmonixPhaserSourceEffectPreset_CreateHarmonixPhaserInstanceOnEmitter");
static_assert(offsetof(HarmonixPhaserSourceEffectPreset_CreateHarmonixPhaserInstanceOnEmitter, Emitter) == 0x000000, "Member 'HarmonixPhaserSourceEffectPreset_CreateHarmonixPhaserInstanceOnEmitter::Emitter' has a wrong offset!");
static_assert(offsetof(HarmonixPhaserSourceEffectPreset_CreateHarmonixPhaserInstanceOnEmitter, InSettings) == 0x000008, "Member 'HarmonixPhaserSourceEffectPreset_CreateHarmonixPhaserInstanceOnEmitter::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixPhaserSourceEffectPreset_CreateHarmonixPhaserInstanceOnEmitter, ReturnValue) == 0x000030, "Member 'HarmonixPhaserSourceEffectPreset_CreateHarmonixPhaserInstanceOnEmitter::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetColor
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSourceEffectPreset_SetColor final
{
public:
	float                                         Color;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSourceEffectPreset_SetColor) == 0x000004, "Wrong alignment on HarmonixPhaserSourceEffectPreset_SetColor");
static_assert(sizeof(HarmonixPhaserSourceEffectPreset_SetColor) == 0x000004, "Wrong size on HarmonixPhaserSourceEffectPreset_SetColor");
static_assert(offsetof(HarmonixPhaserSourceEffectPreset_SetColor, Color) == 0x000000, "Member 'HarmonixPhaserSourceEffectPreset_SetColor::Color' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetDepth
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSourceEffectPreset_SetDepth final
{
public:
	float                                         Depth;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSourceEffectPreset_SetDepth) == 0x000004, "Wrong alignment on HarmonixPhaserSourceEffectPreset_SetDepth");
static_assert(sizeof(HarmonixPhaserSourceEffectPreset_SetDepth) == 0x000004, "Wrong size on HarmonixPhaserSourceEffectPreset_SetDepth");
static_assert(offsetof(HarmonixPhaserSourceEffectPreset_SetDepth, Depth) == 0x000000, "Member 'HarmonixPhaserSourceEffectPreset_SetDepth::Depth' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPhaserSourceEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSourceEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixPhaserSourceEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixPhaserSourceEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixPhaserSourceEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixPhaserSourceEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixPhaserSourceEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetFeedback
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSourceEffectPreset_SetFeedback final
{
public:
	float                                         fb;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSourceEffectPreset_SetFeedback) == 0x000004, "Wrong alignment on HarmonixPhaserSourceEffectPreset_SetFeedback");
static_assert(sizeof(HarmonixPhaserSourceEffectPreset_SetFeedback) == 0x000004, "Wrong size on HarmonixPhaserSourceEffectPreset_SetFeedback");
static_assert(offsetof(HarmonixPhaserSourceEffectPreset_SetFeedback, fb) == 0x000000, "Member 'HarmonixPhaserSourceEffectPreset_SetFeedback::fb' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetFrequency
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSourceEffectPreset_SetFrequency final
{
public:
	float                                         hz;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSourceEffectPreset_SetFrequency) == 0x000004, "Wrong alignment on HarmonixPhaserSourceEffectPreset_SetFrequency");
static_assert(sizeof(HarmonixPhaserSourceEffectPreset_SetFrequency) == 0x000004, "Wrong size on HarmonixPhaserSourceEffectPreset_SetFrequency");
static_assert(offsetof(HarmonixPhaserSourceEffectPreset_SetFrequency, hz) == 0x000000, "Member 'HarmonixPhaserSourceEffectPreset_SetFrequency::hz' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetNumPoles
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSourceEffectPreset_SetNumPoles final
{
public:
	int32                                         numPoles;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSourceEffectPreset_SetNumPoles) == 0x000004, "Wrong alignment on HarmonixPhaserSourceEffectPreset_SetNumPoles");
static_assert(sizeof(HarmonixPhaserSourceEffectPreset_SetNumPoles) == 0x000004, "Wrong size on HarmonixPhaserSourceEffectPreset_SetNumPoles");
static_assert(offsetof(HarmonixPhaserSourceEffectPreset_SetNumPoles, numPoles) == 0x000000, "Member 'HarmonixPhaserSourceEffectPreset_SetNumPoles::numPoles' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetPhase
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSourceEffectPreset_SetPhase final
{
public:
	float                                         Phase;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSourceEffectPreset_SetPhase) == 0x000004, "Wrong alignment on HarmonixPhaserSourceEffectPreset_SetPhase");
static_assert(sizeof(HarmonixPhaserSourceEffectPreset_SetPhase) == 0x000004, "Wrong size on HarmonixPhaserSourceEffectPreset_SetPhase");
static_assert(offsetof(HarmonixPhaserSourceEffectPreset_SetPhase, Phase) == 0x000000, "Member 'HarmonixPhaserSourceEffectPreset_SetPhase::Phase' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetRate
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSourceEffectPreset_SetRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSourceEffectPreset_SetRate) == 0x000004, "Wrong alignment on HarmonixPhaserSourceEffectPreset_SetRate");
static_assert(sizeof(HarmonixPhaserSourceEffectPreset_SetRate) == 0x000004, "Wrong size on HarmonixPhaserSourceEffectPreset_SetRate");
static_assert(offsetof(HarmonixPhaserSourceEffectPreset_SetRate, Rate) == 0x000000, "Member 'HarmonixPhaserSourceEffectPreset_SetRate::Rate' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetSettings
// 0x0028 (0x0028 - 0x0000)
struct HarmonixPhaserSourceEffectPreset_SetSettings final
{
public:
	struct FHarmonixPhaserEffectSettings          InSettings;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSourceEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixPhaserSourceEffectPreset_SetSettings");
static_assert(sizeof(HarmonixPhaserSourceEffectPreset_SetSettings) == 0x000028, "Wrong size on HarmonixPhaserSourceEffectPreset_SetSettings");
static_assert(offsetof(HarmonixPhaserSourceEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixPhaserSourceEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetShape
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPhaserSourceEffectPreset_SetShape final
{
public:
	EHarmonixPhaserShapes                         Shape;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSourceEffectPreset_SetShape) == 0x000001, "Wrong alignment on HarmonixPhaserSourceEffectPreset_SetShape");
static_assert(sizeof(HarmonixPhaserSourceEffectPreset_SetShape) == 0x000001, "Wrong size on HarmonixPhaserSourceEffectPreset_SetShape");
static_assert(offsetof(HarmonixPhaserSourceEffectPreset_SetShape, Shape) == 0x000000, "Member 'HarmonixPhaserSourceEffectPreset_SetShape::Shape' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetTimeSyncOption
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPhaserSourceEffectPreset_SetTimeSyncOption final
{
public:
	ETempoListenerTimeSyncOption                  Option;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSourceEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong alignment on HarmonixPhaserSourceEffectPreset_SetTimeSyncOption");
static_assert(sizeof(HarmonixPhaserSourceEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong size on HarmonixPhaserSourceEffectPreset_SetTimeSyncOption");
static_assert(offsetof(HarmonixPhaserSourceEffectPreset_SetTimeSyncOption, Option) == 0x000000, "Member 'HarmonixPhaserSourceEffectPreset_SetTimeSyncOption::Option' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSourceEffectPreset.SetWetDry
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSourceEffectPreset_SetWetDry final
{
public:
	float                                         wetDry;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSourceEffectPreset_SetWetDry) == 0x000004, "Wrong alignment on HarmonixPhaserSourceEffectPreset_SetWetDry");
static_assert(sizeof(HarmonixPhaserSourceEffectPreset_SetWetDry) == 0x000004, "Wrong size on HarmonixPhaserSourceEffectPreset_SetWetDry");
static_assert(offsetof(HarmonixPhaserSourceEffectPreset_SetWetDry, wetDry) == 0x000000, "Member 'HarmonixPhaserSourceEffectPreset_SetWetDry::wetDry' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.CreateHarmonixPhaserInstanceOnSubmix
// 0x0040 (0x0040 - 0x0000)
struct HarmonixPhaserSubmixEffectPreset_CreateHarmonixPhaserInstanceOnSubmix final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           Submix;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixPhaserEffectSettings          InSettings;                                        // 0x0010(0x0028)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UHarmonixPhaserSubmixEffectPreset*      ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSubmixEffectPreset_CreateHarmonixPhaserInstanceOnSubmix) == 0x000008, "Wrong alignment on HarmonixPhaserSubmixEffectPreset_CreateHarmonixPhaserInstanceOnSubmix");
static_assert(sizeof(HarmonixPhaserSubmixEffectPreset_CreateHarmonixPhaserInstanceOnSubmix) == 0x000040, "Wrong size on HarmonixPhaserSubmixEffectPreset_CreateHarmonixPhaserInstanceOnSubmix");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_CreateHarmonixPhaserInstanceOnSubmix, WorldContextObject) == 0x000000, "Member 'HarmonixPhaserSubmixEffectPreset_CreateHarmonixPhaserInstanceOnSubmix::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_CreateHarmonixPhaserInstanceOnSubmix, Submix) == 0x000008, "Member 'HarmonixPhaserSubmixEffectPreset_CreateHarmonixPhaserInstanceOnSubmix::Submix' has a wrong offset!");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_CreateHarmonixPhaserInstanceOnSubmix, InSettings) == 0x000010, "Member 'HarmonixPhaserSubmixEffectPreset_CreateHarmonixPhaserInstanceOnSubmix::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_CreateHarmonixPhaserInstanceOnSubmix, ReturnValue) == 0x000038, "Member 'HarmonixPhaserSubmixEffectPreset_CreateHarmonixPhaserInstanceOnSubmix::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetColor
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSubmixEffectPreset_SetColor final
{
public:
	float                                         Color;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSubmixEffectPreset_SetColor) == 0x000004, "Wrong alignment on HarmonixPhaserSubmixEffectPreset_SetColor");
static_assert(sizeof(HarmonixPhaserSubmixEffectPreset_SetColor) == 0x000004, "Wrong size on HarmonixPhaserSubmixEffectPreset_SetColor");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_SetColor, Color) == 0x000000, "Member 'HarmonixPhaserSubmixEffectPreset_SetColor::Color' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetDepth
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSubmixEffectPreset_SetDepth final
{
public:
	float                                         Depth;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSubmixEffectPreset_SetDepth) == 0x000004, "Wrong alignment on HarmonixPhaserSubmixEffectPreset_SetDepth");
static_assert(sizeof(HarmonixPhaserSubmixEffectPreset_SetDepth) == 0x000004, "Wrong size on HarmonixPhaserSubmixEffectPreset_SetDepth");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_SetDepth, Depth) == 0x000000, "Member 'HarmonixPhaserSubmixEffectPreset_SetDepth::Depth' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPhaserSubmixEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixPhaserSubmixEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixPhaserSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixPhaserSubmixEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixPhaserSubmixEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetFeedback
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSubmixEffectPreset_SetFeedback final
{
public:
	float                                         fb;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSubmixEffectPreset_SetFeedback) == 0x000004, "Wrong alignment on HarmonixPhaserSubmixEffectPreset_SetFeedback");
static_assert(sizeof(HarmonixPhaserSubmixEffectPreset_SetFeedback) == 0x000004, "Wrong size on HarmonixPhaserSubmixEffectPreset_SetFeedback");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_SetFeedback, fb) == 0x000000, "Member 'HarmonixPhaserSubmixEffectPreset_SetFeedback::fb' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetFrequency
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSubmixEffectPreset_SetFrequency final
{
public:
	float                                         hz;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSubmixEffectPreset_SetFrequency) == 0x000004, "Wrong alignment on HarmonixPhaserSubmixEffectPreset_SetFrequency");
static_assert(sizeof(HarmonixPhaserSubmixEffectPreset_SetFrequency) == 0x000004, "Wrong size on HarmonixPhaserSubmixEffectPreset_SetFrequency");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_SetFrequency, hz) == 0x000000, "Member 'HarmonixPhaserSubmixEffectPreset_SetFrequency::hz' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetNumPoles
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSubmixEffectPreset_SetNumPoles final
{
public:
	int32                                         numPoles;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSubmixEffectPreset_SetNumPoles) == 0x000004, "Wrong alignment on HarmonixPhaserSubmixEffectPreset_SetNumPoles");
static_assert(sizeof(HarmonixPhaserSubmixEffectPreset_SetNumPoles) == 0x000004, "Wrong size on HarmonixPhaserSubmixEffectPreset_SetNumPoles");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_SetNumPoles, numPoles) == 0x000000, "Member 'HarmonixPhaserSubmixEffectPreset_SetNumPoles::numPoles' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetPhase
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSubmixEffectPreset_SetPhase final
{
public:
	float                                         Phase;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSubmixEffectPreset_SetPhase) == 0x000004, "Wrong alignment on HarmonixPhaserSubmixEffectPreset_SetPhase");
static_assert(sizeof(HarmonixPhaserSubmixEffectPreset_SetPhase) == 0x000004, "Wrong size on HarmonixPhaserSubmixEffectPreset_SetPhase");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_SetPhase, Phase) == 0x000000, "Member 'HarmonixPhaserSubmixEffectPreset_SetPhase::Phase' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetRate
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSubmixEffectPreset_SetRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSubmixEffectPreset_SetRate) == 0x000004, "Wrong alignment on HarmonixPhaserSubmixEffectPreset_SetRate");
static_assert(sizeof(HarmonixPhaserSubmixEffectPreset_SetRate) == 0x000004, "Wrong size on HarmonixPhaserSubmixEffectPreset_SetRate");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_SetRate, Rate) == 0x000000, "Member 'HarmonixPhaserSubmixEffectPreset_SetRate::Rate' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetSettings
// 0x0028 (0x0028 - 0x0000)
struct HarmonixPhaserSubmixEffectPreset_SetSettings final
{
public:
	struct FHarmonixPhaserEffectSettings          InSettings;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSubmixEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixPhaserSubmixEffectPreset_SetSettings");
static_assert(sizeof(HarmonixPhaserSubmixEffectPreset_SetSettings) == 0x000028, "Wrong size on HarmonixPhaserSubmixEffectPreset_SetSettings");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixPhaserSubmixEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetShape
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPhaserSubmixEffectPreset_SetShape final
{
public:
	EHarmonixPhaserShapes                         Shape;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSubmixEffectPreset_SetShape) == 0x000001, "Wrong alignment on HarmonixPhaserSubmixEffectPreset_SetShape");
static_assert(sizeof(HarmonixPhaserSubmixEffectPreset_SetShape) == 0x000001, "Wrong size on HarmonixPhaserSubmixEffectPreset_SetShape");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_SetShape, Shape) == 0x000000, "Member 'HarmonixPhaserSubmixEffectPreset_SetShape::Shape' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetTimeSyncOption
// 0x0001 (0x0001 - 0x0000)
struct HarmonixPhaserSubmixEffectPreset_SetTimeSyncOption final
{
public:
	ETempoListenerTimeSyncOption                  Option;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSubmixEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong alignment on HarmonixPhaserSubmixEffectPreset_SetTimeSyncOption");
static_assert(sizeof(HarmonixPhaserSubmixEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong size on HarmonixPhaserSubmixEffectPreset_SetTimeSyncOption");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_SetTimeSyncOption, Option) == 0x000000, "Member 'HarmonixPhaserSubmixEffectPreset_SetTimeSyncOption::Option' has a wrong offset!");

// Function HmxAudio.HarmonixPhaserSubmixEffectPreset.SetWetDry
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPhaserSubmixEffectPreset_SetWetDry final
{
public:
	float                                         wetDry;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPhaserSubmixEffectPreset_SetWetDry) == 0x000004, "Wrong alignment on HarmonixPhaserSubmixEffectPreset_SetWetDry");
static_assert(sizeof(HarmonixPhaserSubmixEffectPreset_SetWetDry) == 0x000004, "Wrong size on HarmonixPhaserSubmixEffectPreset_SetWetDry");
static_assert(offsetof(HarmonixPhaserSubmixEffectPreset_SetWetDry, wetDry) == 0x000000, "Member 'HarmonixPhaserSubmixEffectPreset_SetWetDry::wetDry' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.CreateHarmonixStutterEditInstanceOnEmitter
// 0x0020 (0x0020 - 0x0000)
struct HarmonixStutterEditSourceEffectPreset_CreateHarmonixStutterEditInstanceOnEmitter final
{
public:
	class UMusicEmitterComponent*                 Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixStutterEditEffectSettings     InSettings;                                        // 0x0008(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UHarmonixStutterEditSourceEffectPreset* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSourceEffectPreset_CreateHarmonixStutterEditInstanceOnEmitter) == 0x000008, "Wrong alignment on HarmonixStutterEditSourceEffectPreset_CreateHarmonixStutterEditInstanceOnEmitter");
static_assert(sizeof(HarmonixStutterEditSourceEffectPreset_CreateHarmonixStutterEditInstanceOnEmitter) == 0x000020, "Wrong size on HarmonixStutterEditSourceEffectPreset_CreateHarmonixStutterEditInstanceOnEmitter");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_CreateHarmonixStutterEditInstanceOnEmitter, Emitter) == 0x000000, "Member 'HarmonixStutterEditSourceEffectPreset_CreateHarmonixStutterEditInstanceOnEmitter::Emitter' has a wrong offset!");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_CreateHarmonixStutterEditInstanceOnEmitter, InSettings) == 0x000008, "Member 'HarmonixStutterEditSourceEffectPreset_CreateHarmonixStutterEditInstanceOnEmitter::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_CreateHarmonixStutterEditInstanceOnEmitter, ReturnValue) == 0x000018, "Member 'HarmonixStutterEditSourceEffectPreset_CreateHarmonixStutterEditInstanceOnEmitter::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.Capture
// 0x0008 (0x0008 - 0x0000)
struct HarmonixStutterEditSourceEffectPreset_Capture final
{
public:
	int32                                         fromTick;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         toTick;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSourceEffectPreset_Capture) == 0x000004, "Wrong alignment on HarmonixStutterEditSourceEffectPreset_Capture");
static_assert(sizeof(HarmonixStutterEditSourceEffectPreset_Capture) == 0x000008, "Wrong size on HarmonixStutterEditSourceEffectPreset_Capture");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_Capture, fromTick) == 0x000000, "Member 'HarmonixStutterEditSourceEffectPreset_Capture::fromTick' has a wrong offset!");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_Capture, toTick) == 0x000004, "Member 'HarmonixStutterEditSourceEffectPreset_Capture::toTick' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.ScheduleStutter
// 0x0010 (0x0010 - 0x0000)
struct HarmonixStutterEditSourceEffectPreset_ScheduleStutter final
{
public:
	int32                                         Tick;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lengthInTicks;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isReverse;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         offsetTicks;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSourceEffectPreset_ScheduleStutter) == 0x000004, "Wrong alignment on HarmonixStutterEditSourceEffectPreset_ScheduleStutter");
static_assert(sizeof(HarmonixStutterEditSourceEffectPreset_ScheduleStutter) == 0x000010, "Wrong size on HarmonixStutterEditSourceEffectPreset_ScheduleStutter");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_ScheduleStutter, Tick) == 0x000000, "Member 'HarmonixStutterEditSourceEffectPreset_ScheduleStutter::Tick' has a wrong offset!");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_ScheduleStutter, lengthInTicks) == 0x000004, "Member 'HarmonixStutterEditSourceEffectPreset_ScheduleStutter::lengthInTicks' has a wrong offset!");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_ScheduleStutter, isReverse) == 0x000008, "Member 'HarmonixStutterEditSourceEffectPreset_ScheduleStutter::isReverse' has a wrong offset!");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_ScheduleStutter, offsetTicks) == 0x00000C, "Member 'HarmonixStutterEditSourceEffectPreset_ScheduleStutter::offsetTicks' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.SetAllowPassthrough
// 0x0001 (0x0001 - 0x0000)
struct HarmonixStutterEditSourceEffectPreset_SetAllowPassthrough final
{
public:
	bool                                          allow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSourceEffectPreset_SetAllowPassthrough) == 0x000001, "Wrong alignment on HarmonixStutterEditSourceEffectPreset_SetAllowPassthrough");
static_assert(sizeof(HarmonixStutterEditSourceEffectPreset_SetAllowPassthrough) == 0x000001, "Wrong size on HarmonixStutterEditSourceEffectPreset_SetAllowPassthrough");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_SetAllowPassthrough, allow) == 0x000000, "Member 'HarmonixStutterEditSourceEffectPreset_SetAllowPassthrough::allow' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixStutterEditSourceEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSourceEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixStutterEditSourceEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixStutterEditSourceEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixStutterEditSourceEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixStutterEditSourceEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.SetFadeEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixStutterEditSourceEffectPreset_SetFadeEnabled final
{
public:
	bool                                          fade;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSourceEffectPreset_SetFadeEnabled) == 0x000001, "Wrong alignment on HarmonixStutterEditSourceEffectPreset_SetFadeEnabled");
static_assert(sizeof(HarmonixStutterEditSourceEffectPreset_SetFadeEnabled) == 0x000001, "Wrong size on HarmonixStutterEditSourceEffectPreset_SetFadeEnabled");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_SetFadeEnabled, fade) == 0x000000, "Member 'HarmonixStutterEditSourceEffectPreset_SetFadeEnabled::fade' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.SetSettings
// 0x0010 (0x0010 - 0x0000)
struct HarmonixStutterEditSourceEffectPreset_SetSettings final
{
public:
	struct FHarmonixStutterEditEffectSettings     InSettings;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSourceEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixStutterEditSourceEffectPreset_SetSettings");
static_assert(sizeof(HarmonixStutterEditSourceEffectPreset_SetSettings) == 0x000010, "Wrong size on HarmonixStutterEditSourceEffectPreset_SetSettings");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixStutterEditSourceEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.SetSilenceWhileScheduled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixStutterEditSourceEffectPreset_SetSilenceWhileScheduled final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSourceEffectPreset_SetSilenceWhileScheduled) == 0x000001, "Wrong alignment on HarmonixStutterEditSourceEffectPreset_SetSilenceWhileScheduled");
static_assert(sizeof(HarmonixStutterEditSourceEffectPreset_SetSilenceWhileScheduled) == 0x000001, "Wrong size on HarmonixStutterEditSourceEffectPreset_SetSilenceWhileScheduled");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_SetSilenceWhileScheduled, B) == 0x000000, "Member 'HarmonixStutterEditSourceEffectPreset_SetSilenceWhileScheduled::B' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.SetSyncDriver
// 0x0008 (0x0008 - 0x0000)
struct HarmonixStutterEditSourceEffectPreset_SetSyncDriver final
{
public:
	class UHarmonixHandle*                        Handle;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSourceEffectPreset_SetSyncDriver) == 0x000008, "Wrong alignment on HarmonixStutterEditSourceEffectPreset_SetSyncDriver");
static_assert(sizeof(HarmonixStutterEditSourceEffectPreset_SetSyncDriver) == 0x000008, "Wrong size on HarmonixStutterEditSourceEffectPreset_SetSyncDriver");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_SetSyncDriver, Handle) == 0x000000, "Member 'HarmonixStutterEditSourceEffectPreset_SetSyncDriver::Handle' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSourceEffectPreset.SetVarispeedForTempoChanges
// 0x0001 (0x0001 - 0x0000)
struct HarmonixStutterEditSourceEffectPreset_SetVarispeedForTempoChanges final
{
public:
	bool                                          V;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSourceEffectPreset_SetVarispeedForTempoChanges) == 0x000001, "Wrong alignment on HarmonixStutterEditSourceEffectPreset_SetVarispeedForTempoChanges");
static_assert(sizeof(HarmonixStutterEditSourceEffectPreset_SetVarispeedForTempoChanges) == 0x000001, "Wrong size on HarmonixStutterEditSourceEffectPreset_SetVarispeedForTempoChanges");
static_assert(offsetof(HarmonixStutterEditSourceEffectPreset_SetVarispeedForTempoChanges, V) == 0x000000, "Member 'HarmonixStutterEditSourceEffectPreset_SetVarispeedForTempoChanges::V' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.CreateHarmonixStutterEditInstanceOnSubmix
// 0x0028 (0x0028 - 0x0000)
struct HarmonixStutterEditSubmixEffectPreset_CreateHarmonixStutterEditInstanceOnSubmix final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           Submix;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixStutterEditEffectSettings     InSettings;                                        // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UHarmonixStutterEditSubmixEffectPreset* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSubmixEffectPreset_CreateHarmonixStutterEditInstanceOnSubmix) == 0x000008, "Wrong alignment on HarmonixStutterEditSubmixEffectPreset_CreateHarmonixStutterEditInstanceOnSubmix");
static_assert(sizeof(HarmonixStutterEditSubmixEffectPreset_CreateHarmonixStutterEditInstanceOnSubmix) == 0x000028, "Wrong size on HarmonixStutterEditSubmixEffectPreset_CreateHarmonixStutterEditInstanceOnSubmix");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_CreateHarmonixStutterEditInstanceOnSubmix, WorldContextObject) == 0x000000, "Member 'HarmonixStutterEditSubmixEffectPreset_CreateHarmonixStutterEditInstanceOnSubmix::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_CreateHarmonixStutterEditInstanceOnSubmix, Submix) == 0x000008, "Member 'HarmonixStutterEditSubmixEffectPreset_CreateHarmonixStutterEditInstanceOnSubmix::Submix' has a wrong offset!");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_CreateHarmonixStutterEditInstanceOnSubmix, InSettings) == 0x000010, "Member 'HarmonixStutterEditSubmixEffectPreset_CreateHarmonixStutterEditInstanceOnSubmix::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_CreateHarmonixStutterEditInstanceOnSubmix, ReturnValue) == 0x000020, "Member 'HarmonixStutterEditSubmixEffectPreset_CreateHarmonixStutterEditInstanceOnSubmix::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.Capture
// 0x0008 (0x0008 - 0x0000)
struct HarmonixStutterEditSubmixEffectPreset_Capture final
{
public:
	int32                                         fromTick;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         toTick;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSubmixEffectPreset_Capture) == 0x000004, "Wrong alignment on HarmonixStutterEditSubmixEffectPreset_Capture");
static_assert(sizeof(HarmonixStutterEditSubmixEffectPreset_Capture) == 0x000008, "Wrong size on HarmonixStutterEditSubmixEffectPreset_Capture");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_Capture, fromTick) == 0x000000, "Member 'HarmonixStutterEditSubmixEffectPreset_Capture::fromTick' has a wrong offset!");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_Capture, toTick) == 0x000004, "Member 'HarmonixStutterEditSubmixEffectPreset_Capture::toTick' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.ScheduleStutter
// 0x0010 (0x0010 - 0x0000)
struct HarmonixStutterEditSubmixEffectPreset_ScheduleStutter final
{
public:
	int32                                         Tick;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lengthInTicks;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isReverse;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         offsetTicks;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSubmixEffectPreset_ScheduleStutter) == 0x000004, "Wrong alignment on HarmonixStutterEditSubmixEffectPreset_ScheduleStutter");
static_assert(sizeof(HarmonixStutterEditSubmixEffectPreset_ScheduleStutter) == 0x000010, "Wrong size on HarmonixStutterEditSubmixEffectPreset_ScheduleStutter");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_ScheduleStutter, Tick) == 0x000000, "Member 'HarmonixStutterEditSubmixEffectPreset_ScheduleStutter::Tick' has a wrong offset!");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_ScheduleStutter, lengthInTicks) == 0x000004, "Member 'HarmonixStutterEditSubmixEffectPreset_ScheduleStutter::lengthInTicks' has a wrong offset!");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_ScheduleStutter, isReverse) == 0x000008, "Member 'HarmonixStutterEditSubmixEffectPreset_ScheduleStutter::isReverse' has a wrong offset!");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_ScheduleStutter, offsetTicks) == 0x00000C, "Member 'HarmonixStutterEditSubmixEffectPreset_ScheduleStutter::offsetTicks' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.SetAllowPassthrough
// 0x0001 (0x0001 - 0x0000)
struct HarmonixStutterEditSubmixEffectPreset_SetAllowPassthrough final
{
public:
	bool                                          allow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSubmixEffectPreset_SetAllowPassthrough) == 0x000001, "Wrong alignment on HarmonixStutterEditSubmixEffectPreset_SetAllowPassthrough");
static_assert(sizeof(HarmonixStutterEditSubmixEffectPreset_SetAllowPassthrough) == 0x000001, "Wrong size on HarmonixStutterEditSubmixEffectPreset_SetAllowPassthrough");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_SetAllowPassthrough, allow) == 0x000000, "Member 'HarmonixStutterEditSubmixEffectPreset_SetAllowPassthrough::allow' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixStutterEditSubmixEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixStutterEditSubmixEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixStutterEditSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixStutterEditSubmixEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixStutterEditSubmixEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.SetFadeEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixStutterEditSubmixEffectPreset_SetFadeEnabled final
{
public:
	bool                                          fade;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSubmixEffectPreset_SetFadeEnabled) == 0x000001, "Wrong alignment on HarmonixStutterEditSubmixEffectPreset_SetFadeEnabled");
static_assert(sizeof(HarmonixStutterEditSubmixEffectPreset_SetFadeEnabled) == 0x000001, "Wrong size on HarmonixStutterEditSubmixEffectPreset_SetFadeEnabled");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_SetFadeEnabled, fade) == 0x000000, "Member 'HarmonixStutterEditSubmixEffectPreset_SetFadeEnabled::fade' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.SetSettings
// 0x0010 (0x0010 - 0x0000)
struct HarmonixStutterEditSubmixEffectPreset_SetSettings final
{
public:
	struct FHarmonixStutterEditEffectSettings     InSettings;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSubmixEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixStutterEditSubmixEffectPreset_SetSettings");
static_assert(sizeof(HarmonixStutterEditSubmixEffectPreset_SetSettings) == 0x000010, "Wrong size on HarmonixStutterEditSubmixEffectPreset_SetSettings");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixStutterEditSubmixEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.SetSilenceWhileScheduled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixStutterEditSubmixEffectPreset_SetSilenceWhileScheduled final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSubmixEffectPreset_SetSilenceWhileScheduled) == 0x000001, "Wrong alignment on HarmonixStutterEditSubmixEffectPreset_SetSilenceWhileScheduled");
static_assert(sizeof(HarmonixStutterEditSubmixEffectPreset_SetSilenceWhileScheduled) == 0x000001, "Wrong size on HarmonixStutterEditSubmixEffectPreset_SetSilenceWhileScheduled");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_SetSilenceWhileScheduled, B) == 0x000000, "Member 'HarmonixStutterEditSubmixEffectPreset_SetSilenceWhileScheduled::B' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.SetSyncDriver
// 0x0008 (0x0008 - 0x0000)
struct HarmonixStutterEditSubmixEffectPreset_SetSyncDriver final
{
public:
	class UHarmonixHandle*                        Handle;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSubmixEffectPreset_SetSyncDriver) == 0x000008, "Wrong alignment on HarmonixStutterEditSubmixEffectPreset_SetSyncDriver");
static_assert(sizeof(HarmonixStutterEditSubmixEffectPreset_SetSyncDriver) == 0x000008, "Wrong size on HarmonixStutterEditSubmixEffectPreset_SetSyncDriver");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_SetSyncDriver, Handle) == 0x000000, "Member 'HarmonixStutterEditSubmixEffectPreset_SetSyncDriver::Handle' has a wrong offset!");

// Function HmxAudio.HarmonixStutterEditSubmixEffectPreset.SetVarispeedForTempoChanges
// 0x0001 (0x0001 - 0x0000)
struct HarmonixStutterEditSubmixEffectPreset_SetVarispeedForTempoChanges final
{
public:
	bool                                          V;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixStutterEditSubmixEffectPreset_SetVarispeedForTempoChanges) == 0x000001, "Wrong alignment on HarmonixStutterEditSubmixEffectPreset_SetVarispeedForTempoChanges");
static_assert(sizeof(HarmonixStutterEditSubmixEffectPreset_SetVarispeedForTempoChanges) == 0x000001, "Wrong size on HarmonixStutterEditSubmixEffectPreset_SetVarispeedForTempoChanges");
static_assert(offsetof(HarmonixStutterEditSubmixEffectPreset_SetVarispeedForTempoChanges, V) == 0x000000, "Member 'HarmonixStutterEditSubmixEffectPreset_SetVarispeedForTempoChanges::V' has a wrong offset!");

// Function HmxAudio.HarmonixTapeStartStopSourceEffectPreset.CreateHarmonixTapeStartStopInstanceOnEmitter
// 0x0020 (0x0020 - 0x0000)
struct HarmonixTapeStartStopSourceEffectPreset_CreateHarmonixTapeStartStopInstanceOnEmitter final
{
public:
	class UMusicEmitterComponent*                 Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixTapeStartStopEffectSettings   InSettings;                                        // 0x0008(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHarmonixTapeStartStopSourceEffectPreset* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTapeStartStopSourceEffectPreset_CreateHarmonixTapeStartStopInstanceOnEmitter) == 0x000008, "Wrong alignment on HarmonixTapeStartStopSourceEffectPreset_CreateHarmonixTapeStartStopInstanceOnEmitter");
static_assert(sizeof(HarmonixTapeStartStopSourceEffectPreset_CreateHarmonixTapeStartStopInstanceOnEmitter) == 0x000020, "Wrong size on HarmonixTapeStartStopSourceEffectPreset_CreateHarmonixTapeStartStopInstanceOnEmitter");
static_assert(offsetof(HarmonixTapeStartStopSourceEffectPreset_CreateHarmonixTapeStartStopInstanceOnEmitter, Emitter) == 0x000000, "Member 'HarmonixTapeStartStopSourceEffectPreset_CreateHarmonixTapeStartStopInstanceOnEmitter::Emitter' has a wrong offset!");
static_assert(offsetof(HarmonixTapeStartStopSourceEffectPreset_CreateHarmonixTapeStartStopInstanceOnEmitter, InSettings) == 0x000008, "Member 'HarmonixTapeStartStopSourceEffectPreset_CreateHarmonixTapeStartStopInstanceOnEmitter::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixTapeStartStopSourceEffectPreset_CreateHarmonixTapeStartStopInstanceOnEmitter, ReturnValue) == 0x000018, "Member 'HarmonixTapeStartStopSourceEffectPreset_CreateHarmonixTapeStartStopInstanceOnEmitter::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixTapeStartStopSourceEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixTapeStartStopSourceEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTapeStartStopSourceEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixTapeStartStopSourceEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixTapeStartStopSourceEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixTapeStartStopSourceEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixTapeStartStopSourceEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixTapeStartStopSourceEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixTapeStartStopSourceEffectPreset.SetSettings
// 0x000C (0x000C - 0x0000)
struct HarmonixTapeStartStopSourceEffectPreset_SetSettings final
{
public:
	struct FHarmonixTapeStartStopEffectSettings   InSettings;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTapeStartStopSourceEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixTapeStartStopSourceEffectPreset_SetSettings");
static_assert(sizeof(HarmonixTapeStartStopSourceEffectPreset_SetSettings) == 0x00000C, "Wrong size on HarmonixTapeStartStopSourceEffectPreset_SetSettings");
static_assert(offsetof(HarmonixTapeStartStopSourceEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixTapeStartStopSourceEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixTapeStartStopSourceEffectPreset.SetTransportState
// 0x0008 (0x0008 - 0x0000)
struct HarmonixTapeStartStopSourceEffectPreset_SetTransportState final
{
public:
	EHarmonixTapeStartStopTransportState          Transport;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTapeStartStopSourceEffectPreset_SetTransportState) == 0x000004, "Wrong alignment on HarmonixTapeStartStopSourceEffectPreset_SetTransportState");
static_assert(sizeof(HarmonixTapeStartStopSourceEffectPreset_SetTransportState) == 0x000008, "Wrong size on HarmonixTapeStartStopSourceEffectPreset_SetTransportState");
static_assert(offsetof(HarmonixTapeStartStopSourceEffectPreset_SetTransportState, Transport) == 0x000000, "Member 'HarmonixTapeStartStopSourceEffectPreset_SetTransportState::Transport' has a wrong offset!");
static_assert(offsetof(HarmonixTapeStartStopSourceEffectPreset_SetTransportState, Duration) == 0x000004, "Member 'HarmonixTapeStartStopSourceEffectPreset_SetTransportState::Duration' has a wrong offset!");

// Function HmxAudio.HarmonixTapeStartStopSourceEffectPreset.SnapTransportState
// 0x0001 (0x0001 - 0x0000)
struct HarmonixTapeStartStopSourceEffectPreset_SnapTransportState final
{
public:
	EHarmonixTapeStartStopTransportState          Transport;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTapeStartStopSourceEffectPreset_SnapTransportState) == 0x000001, "Wrong alignment on HarmonixTapeStartStopSourceEffectPreset_SnapTransportState");
static_assert(sizeof(HarmonixTapeStartStopSourceEffectPreset_SnapTransportState) == 0x000001, "Wrong size on HarmonixTapeStartStopSourceEffectPreset_SnapTransportState");
static_assert(offsetof(HarmonixTapeStartStopSourceEffectPreset_SnapTransportState, Transport) == 0x000000, "Member 'HarmonixTapeStartStopSourceEffectPreset_SnapTransportState::Transport' has a wrong offset!");

// Function HmxAudio.HarmonixTapeStartStopSubmixEffectPreset.CreateHarmonixTapeStartStopInstanceOnSubmix
// 0x0028 (0x0028 - 0x0000)
struct HarmonixTapeStartStopSubmixEffectPreset_CreateHarmonixTapeStartStopInstanceOnSubmix final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           Submix;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixTapeStartStopEffectSettings   InSettings;                                        // 0x0010(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHarmonixTapeStartStopSubmixEffectPreset* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTapeStartStopSubmixEffectPreset_CreateHarmonixTapeStartStopInstanceOnSubmix) == 0x000008, "Wrong alignment on HarmonixTapeStartStopSubmixEffectPreset_CreateHarmonixTapeStartStopInstanceOnSubmix");
static_assert(sizeof(HarmonixTapeStartStopSubmixEffectPreset_CreateHarmonixTapeStartStopInstanceOnSubmix) == 0x000028, "Wrong size on HarmonixTapeStartStopSubmixEffectPreset_CreateHarmonixTapeStartStopInstanceOnSubmix");
static_assert(offsetof(HarmonixTapeStartStopSubmixEffectPreset_CreateHarmonixTapeStartStopInstanceOnSubmix, WorldContextObject) == 0x000000, "Member 'HarmonixTapeStartStopSubmixEffectPreset_CreateHarmonixTapeStartStopInstanceOnSubmix::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HarmonixTapeStartStopSubmixEffectPreset_CreateHarmonixTapeStartStopInstanceOnSubmix, Submix) == 0x000008, "Member 'HarmonixTapeStartStopSubmixEffectPreset_CreateHarmonixTapeStartStopInstanceOnSubmix::Submix' has a wrong offset!");
static_assert(offsetof(HarmonixTapeStartStopSubmixEffectPreset_CreateHarmonixTapeStartStopInstanceOnSubmix, InSettings) == 0x000010, "Member 'HarmonixTapeStartStopSubmixEffectPreset_CreateHarmonixTapeStartStopInstanceOnSubmix::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixTapeStartStopSubmixEffectPreset_CreateHarmonixTapeStartStopInstanceOnSubmix, ReturnValue) == 0x000020, "Member 'HarmonixTapeStartStopSubmixEffectPreset_CreateHarmonixTapeStartStopInstanceOnSubmix::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixTapeStartStopSubmixEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixTapeStartStopSubmixEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTapeStartStopSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixTapeStartStopSubmixEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixTapeStartStopSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixTapeStartStopSubmixEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixTapeStartStopSubmixEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixTapeStartStopSubmixEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixTapeStartStopSubmixEffectPreset.SetSettings
// 0x000C (0x000C - 0x0000)
struct HarmonixTapeStartStopSubmixEffectPreset_SetSettings final
{
public:
	struct FHarmonixTapeStartStopEffectSettings   InSettings;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTapeStartStopSubmixEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixTapeStartStopSubmixEffectPreset_SetSettings");
static_assert(sizeof(HarmonixTapeStartStopSubmixEffectPreset_SetSettings) == 0x00000C, "Wrong size on HarmonixTapeStartStopSubmixEffectPreset_SetSettings");
static_assert(offsetof(HarmonixTapeStartStopSubmixEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixTapeStartStopSubmixEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixTapeStartStopSubmixEffectPreset.SetTransportState
// 0x0008 (0x0008 - 0x0000)
struct HarmonixTapeStartStopSubmixEffectPreset_SetTransportState final
{
public:
	EHarmonixTapeStartStopTransportState          Transport;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTapeStartStopSubmixEffectPreset_SetTransportState) == 0x000004, "Wrong alignment on HarmonixTapeStartStopSubmixEffectPreset_SetTransportState");
static_assert(sizeof(HarmonixTapeStartStopSubmixEffectPreset_SetTransportState) == 0x000008, "Wrong size on HarmonixTapeStartStopSubmixEffectPreset_SetTransportState");
static_assert(offsetof(HarmonixTapeStartStopSubmixEffectPreset_SetTransportState, Transport) == 0x000000, "Member 'HarmonixTapeStartStopSubmixEffectPreset_SetTransportState::Transport' has a wrong offset!");
static_assert(offsetof(HarmonixTapeStartStopSubmixEffectPreset_SetTransportState, Duration) == 0x000004, "Member 'HarmonixTapeStartStopSubmixEffectPreset_SetTransportState::Duration' has a wrong offset!");

// Function HmxAudio.HarmonixTapeStartStopSubmixEffectPreset.SnapTransportState
// 0x0001 (0x0001 - 0x0000)
struct HarmonixTapeStartStopSubmixEffectPreset_SnapTransportState final
{
public:
	EHarmonixTapeStartStopTransportState          Transport;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTapeStartStopSubmixEffectPreset_SnapTransportState) == 0x000001, "Wrong alignment on HarmonixTapeStartStopSubmixEffectPreset_SnapTransportState");
static_assert(sizeof(HarmonixTapeStartStopSubmixEffectPreset_SnapTransportState) == 0x000001, "Wrong size on HarmonixTapeStartStopSubmixEffectPreset_SnapTransportState");
static_assert(offsetof(HarmonixTapeStartStopSubmixEffectPreset_SnapTransportState, Transport) == 0x000000, "Member 'HarmonixTapeStartStopSubmixEffectPreset_SnapTransportState::Transport' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSourceEffectPreset.CreateHarmonixTremoloInstanceOnEmitter
// 0x0028 (0x0028 - 0x0000)
struct HarmonixTremoloSourceEffectPreset_CreateHarmonixTremoloInstanceOnEmitter final
{
public:
	class UMusicEmitterComponent*                 Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixTremoloEffectSettings         InSettings;                                        // 0x0008(0x0018)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UHarmonixTremoloSourceEffectPreset*     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSourceEffectPreset_CreateHarmonixTremoloInstanceOnEmitter) == 0x000008, "Wrong alignment on HarmonixTremoloSourceEffectPreset_CreateHarmonixTremoloInstanceOnEmitter");
static_assert(sizeof(HarmonixTremoloSourceEffectPreset_CreateHarmonixTremoloInstanceOnEmitter) == 0x000028, "Wrong size on HarmonixTremoloSourceEffectPreset_CreateHarmonixTremoloInstanceOnEmitter");
static_assert(offsetof(HarmonixTremoloSourceEffectPreset_CreateHarmonixTremoloInstanceOnEmitter, Emitter) == 0x000000, "Member 'HarmonixTremoloSourceEffectPreset_CreateHarmonixTremoloInstanceOnEmitter::Emitter' has a wrong offset!");
static_assert(offsetof(HarmonixTremoloSourceEffectPreset_CreateHarmonixTremoloInstanceOnEmitter, InSettings) == 0x000008, "Member 'HarmonixTremoloSourceEffectPreset_CreateHarmonixTremoloInstanceOnEmitter::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixTremoloSourceEffectPreset_CreateHarmonixTremoloInstanceOnEmitter, ReturnValue) == 0x000020, "Member 'HarmonixTremoloSourceEffectPreset_CreateHarmonixTremoloInstanceOnEmitter::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSourceEffectPreset.SetDepth
// 0x0004 (0x0004 - 0x0000)
struct HarmonixTremoloSourceEffectPreset_SetDepth final
{
public:
	float                                         Depth;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSourceEffectPreset_SetDepth) == 0x000004, "Wrong alignment on HarmonixTremoloSourceEffectPreset_SetDepth");
static_assert(sizeof(HarmonixTremoloSourceEffectPreset_SetDepth) == 0x000004, "Wrong size on HarmonixTremoloSourceEffectPreset_SetDepth");
static_assert(offsetof(HarmonixTremoloSourceEffectPreset_SetDepth, Depth) == 0x000000, "Member 'HarmonixTremoloSourceEffectPreset_SetDepth::Depth' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSourceEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixTremoloSourceEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSourceEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixTremoloSourceEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixTremoloSourceEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixTremoloSourceEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixTremoloSourceEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixTremoloSourceEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSourceEffectPreset.SetInvertLFO
// 0x0001 (0x0001 - 0x0000)
struct HarmonixTremoloSourceEffectPreset_SetInvertLFO final
{
public:
	bool                                          inv;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSourceEffectPreset_SetInvertLFO) == 0x000001, "Wrong alignment on HarmonixTremoloSourceEffectPreset_SetInvertLFO");
static_assert(sizeof(HarmonixTremoloSourceEffectPreset_SetInvertLFO) == 0x000001, "Wrong size on HarmonixTremoloSourceEffectPreset_SetInvertLFO");
static_assert(offsetof(HarmonixTremoloSourceEffectPreset_SetInvertLFO, inv) == 0x000000, "Member 'HarmonixTremoloSourceEffectPreset_SetInvertLFO::inv' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSourceEffectPreset.SetLFORate
// 0x0004 (0x0004 - 0x0000)
struct HarmonixTremoloSourceEffectPreset_SetLFORate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSourceEffectPreset_SetLFORate) == 0x000004, "Wrong alignment on HarmonixTremoloSourceEffectPreset_SetLFORate");
static_assert(sizeof(HarmonixTremoloSourceEffectPreset_SetLFORate) == 0x000004, "Wrong size on HarmonixTremoloSourceEffectPreset_SetLFORate");
static_assert(offsetof(HarmonixTremoloSourceEffectPreset_SetLFORate, Rate) == 0x000000, "Member 'HarmonixTremoloSourceEffectPreset_SetLFORate::Rate' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSourceEffectPreset.SetSettings
// 0x0018 (0x0018 - 0x0000)
struct HarmonixTremoloSourceEffectPreset_SetSettings final
{
public:
	struct FHarmonixTremoloEffectSettings         InSettings;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSourceEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixTremoloSourceEffectPreset_SetSettings");
static_assert(sizeof(HarmonixTremoloSourceEffectPreset_SetSettings) == 0x000018, "Wrong size on HarmonixTremoloSourceEffectPreset_SetSettings");
static_assert(offsetof(HarmonixTremoloSourceEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixTremoloSourceEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSourceEffectPreset.SetShape
// 0x0004 (0x0004 - 0x0000)
struct HarmonixTremoloSourceEffectPreset_SetShape final
{
public:
	float                                         Shape;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSourceEffectPreset_SetShape) == 0x000004, "Wrong alignment on HarmonixTremoloSourceEffectPreset_SetShape");
static_assert(sizeof(HarmonixTremoloSourceEffectPreset_SetShape) == 0x000004, "Wrong size on HarmonixTremoloSourceEffectPreset_SetShape");
static_assert(offsetof(HarmonixTremoloSourceEffectPreset_SetShape, Shape) == 0x000000, "Member 'HarmonixTremoloSourceEffectPreset_SetShape::Shape' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSourceEffectPreset.SetTimeSyncOption
// 0x0001 (0x0001 - 0x0000)
struct HarmonixTremoloSourceEffectPreset_SetTimeSyncOption final
{
public:
	ETempoListenerTimeSyncOption                  Option;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSourceEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong alignment on HarmonixTremoloSourceEffectPreset_SetTimeSyncOption");
static_assert(sizeof(HarmonixTremoloSourceEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong size on HarmonixTremoloSourceEffectPreset_SetTimeSyncOption");
static_assert(offsetof(HarmonixTremoloSourceEffectPreset_SetTimeSyncOption, Option) == 0x000000, "Member 'HarmonixTremoloSourceEffectPreset_SetTimeSyncOption::Option' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.CreateHarmonixTremoloInstanceOnSubmix
// 0x0030 (0x0030 - 0x0000)
struct HarmonixTremoloSubmixEffectPreset_CreateHarmonixTremoloInstanceOnSubmix final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           Submix;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixTremoloEffectSettings         InSettings;                                        // 0x0010(0x0018)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UHarmonixTremoloSubmixEffectPreset*     ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSubmixEffectPreset_CreateHarmonixTremoloInstanceOnSubmix) == 0x000008, "Wrong alignment on HarmonixTremoloSubmixEffectPreset_CreateHarmonixTremoloInstanceOnSubmix");
static_assert(sizeof(HarmonixTremoloSubmixEffectPreset_CreateHarmonixTremoloInstanceOnSubmix) == 0x000030, "Wrong size on HarmonixTremoloSubmixEffectPreset_CreateHarmonixTremoloInstanceOnSubmix");
static_assert(offsetof(HarmonixTremoloSubmixEffectPreset_CreateHarmonixTremoloInstanceOnSubmix, WorldContextObject) == 0x000000, "Member 'HarmonixTremoloSubmixEffectPreset_CreateHarmonixTremoloInstanceOnSubmix::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HarmonixTremoloSubmixEffectPreset_CreateHarmonixTremoloInstanceOnSubmix, Submix) == 0x000008, "Member 'HarmonixTremoloSubmixEffectPreset_CreateHarmonixTremoloInstanceOnSubmix::Submix' has a wrong offset!");
static_assert(offsetof(HarmonixTremoloSubmixEffectPreset_CreateHarmonixTremoloInstanceOnSubmix, InSettings) == 0x000010, "Member 'HarmonixTremoloSubmixEffectPreset_CreateHarmonixTremoloInstanceOnSubmix::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixTremoloSubmixEffectPreset_CreateHarmonixTremoloInstanceOnSubmix, ReturnValue) == 0x000028, "Member 'HarmonixTremoloSubmixEffectPreset_CreateHarmonixTremoloInstanceOnSubmix::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.SetDepth
// 0x0004 (0x0004 - 0x0000)
struct HarmonixTremoloSubmixEffectPreset_SetDepth final
{
public:
	float                                         Depth;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSubmixEffectPreset_SetDepth) == 0x000004, "Wrong alignment on HarmonixTremoloSubmixEffectPreset_SetDepth");
static_assert(sizeof(HarmonixTremoloSubmixEffectPreset_SetDepth) == 0x000004, "Wrong size on HarmonixTremoloSubmixEffectPreset_SetDepth");
static_assert(offsetof(HarmonixTremoloSubmixEffectPreset_SetDepth, Depth) == 0x000000, "Member 'HarmonixTremoloSubmixEffectPreset_SetDepth::Depth' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixTremoloSubmixEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixTremoloSubmixEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixTremoloSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixTremoloSubmixEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixTremoloSubmixEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixTremoloSubmixEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.SetInvertLFO
// 0x0001 (0x0001 - 0x0000)
struct HarmonixTremoloSubmixEffectPreset_SetInvertLFO final
{
public:
	bool                                          inv;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSubmixEffectPreset_SetInvertLFO) == 0x000001, "Wrong alignment on HarmonixTremoloSubmixEffectPreset_SetInvertLFO");
static_assert(sizeof(HarmonixTremoloSubmixEffectPreset_SetInvertLFO) == 0x000001, "Wrong size on HarmonixTremoloSubmixEffectPreset_SetInvertLFO");
static_assert(offsetof(HarmonixTremoloSubmixEffectPreset_SetInvertLFO, inv) == 0x000000, "Member 'HarmonixTremoloSubmixEffectPreset_SetInvertLFO::inv' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.SetLFORate
// 0x0004 (0x0004 - 0x0000)
struct HarmonixTremoloSubmixEffectPreset_SetLFORate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSubmixEffectPreset_SetLFORate) == 0x000004, "Wrong alignment on HarmonixTremoloSubmixEffectPreset_SetLFORate");
static_assert(sizeof(HarmonixTremoloSubmixEffectPreset_SetLFORate) == 0x000004, "Wrong size on HarmonixTremoloSubmixEffectPreset_SetLFORate");
static_assert(offsetof(HarmonixTremoloSubmixEffectPreset_SetLFORate, Rate) == 0x000000, "Member 'HarmonixTremoloSubmixEffectPreset_SetLFORate::Rate' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.SetSettings
// 0x0018 (0x0018 - 0x0000)
struct HarmonixTremoloSubmixEffectPreset_SetSettings final
{
public:
	struct FHarmonixTremoloEffectSettings         InSettings;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSubmixEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixTremoloSubmixEffectPreset_SetSettings");
static_assert(sizeof(HarmonixTremoloSubmixEffectPreset_SetSettings) == 0x000018, "Wrong size on HarmonixTremoloSubmixEffectPreset_SetSettings");
static_assert(offsetof(HarmonixTremoloSubmixEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixTremoloSubmixEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.SetShape
// 0x0004 (0x0004 - 0x0000)
struct HarmonixTremoloSubmixEffectPreset_SetShape final
{
public:
	float                                         Shape;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSubmixEffectPreset_SetShape) == 0x000004, "Wrong alignment on HarmonixTremoloSubmixEffectPreset_SetShape");
static_assert(sizeof(HarmonixTremoloSubmixEffectPreset_SetShape) == 0x000004, "Wrong size on HarmonixTremoloSubmixEffectPreset_SetShape");
static_assert(offsetof(HarmonixTremoloSubmixEffectPreset_SetShape, Shape) == 0x000000, "Member 'HarmonixTremoloSubmixEffectPreset_SetShape::Shape' has a wrong offset!");

// Function HmxAudio.HarmonixTremoloSubmixEffectPreset.SetTimeSyncOption
// 0x0001 (0x0001 - 0x0000)
struct HarmonixTremoloSubmixEffectPreset_SetTimeSyncOption final
{
public:
	ETempoListenerTimeSyncOption                  Option;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTremoloSubmixEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong alignment on HarmonixTremoloSubmixEffectPreset_SetTimeSyncOption");
static_assert(sizeof(HarmonixTremoloSubmixEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong size on HarmonixTremoloSubmixEffectPreset_SetTimeSyncOption");
static_assert(offsetof(HarmonixTremoloSubmixEffectPreset_SetTimeSyncOption, Option) == 0x000000, "Member 'HarmonixTremoloSubmixEffectPreset_SetTimeSyncOption::Option' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSourceEffectPreset.CreateHarmonixVibeInstanceOnEmitter
// 0x0040 (0x0040 - 0x0000)
struct HarmonixVibeSourceEffectPreset_CreateHarmonixVibeInstanceOnEmitter final
{
public:
	class UMusicEmitterComponent*                 Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixVibeEffectSettings            InSettings;                                        // 0x0008(0x002C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHarmonixVibeSourceEffectPreset*        ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSourceEffectPreset_CreateHarmonixVibeInstanceOnEmitter) == 0x000008, "Wrong alignment on HarmonixVibeSourceEffectPreset_CreateHarmonixVibeInstanceOnEmitter");
static_assert(sizeof(HarmonixVibeSourceEffectPreset_CreateHarmonixVibeInstanceOnEmitter) == 0x000040, "Wrong size on HarmonixVibeSourceEffectPreset_CreateHarmonixVibeInstanceOnEmitter");
static_assert(offsetof(HarmonixVibeSourceEffectPreset_CreateHarmonixVibeInstanceOnEmitter, Emitter) == 0x000000, "Member 'HarmonixVibeSourceEffectPreset_CreateHarmonixVibeInstanceOnEmitter::Emitter' has a wrong offset!");
static_assert(offsetof(HarmonixVibeSourceEffectPreset_CreateHarmonixVibeInstanceOnEmitter, InSettings) == 0x000008, "Member 'HarmonixVibeSourceEffectPreset_CreateHarmonixVibeInstanceOnEmitter::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixVibeSourceEffectPreset_CreateHarmonixVibeInstanceOnEmitter, ReturnValue) == 0x000038, "Member 'HarmonixVibeSourceEffectPreset_CreateHarmonixVibeInstanceOnEmitter::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixVibeSourceEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSourceEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixVibeSourceEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixVibeSourceEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixVibeSourceEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixVibeSourceEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixVibeSourceEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetFreq
// 0x0008 (0x0008 - 0x0000)
struct HarmonixVibeSourceEffectPreset_SetFreq final
{
public:
	int32                                         stageIdx;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         freq;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSourceEffectPreset_SetFreq) == 0x000004, "Wrong alignment on HarmonixVibeSourceEffectPreset_SetFreq");
static_assert(sizeof(HarmonixVibeSourceEffectPreset_SetFreq) == 0x000008, "Wrong size on HarmonixVibeSourceEffectPreset_SetFreq");
static_assert(offsetof(HarmonixVibeSourceEffectPreset_SetFreq, stageIdx) == 0x000000, "Member 'HarmonixVibeSourceEffectPreset_SetFreq::stageIdx' has a wrong offset!");
static_assert(offsetof(HarmonixVibeSourceEffectPreset_SetFreq, freq) == 0x000004, "Member 'HarmonixVibeSourceEffectPreset_SetFreq::freq' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetGain
// 0x0004 (0x0004 - 0x0000)
struct HarmonixVibeSourceEffectPreset_SetGain final
{
public:
	float                                         Gain;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSourceEffectPreset_SetGain) == 0x000004, "Wrong alignment on HarmonixVibeSourceEffectPreset_SetGain");
static_assert(sizeof(HarmonixVibeSourceEffectPreset_SetGain) == 0x000004, "Wrong size on HarmonixVibeSourceEffectPreset_SetGain");
static_assert(offsetof(HarmonixVibeSourceEffectPreset_SetGain, Gain) == 0x000000, "Member 'HarmonixVibeSourceEffectPreset_SetGain::Gain' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetLFODepth
// 0x0004 (0x0004 - 0x0000)
struct HarmonixVibeSourceEffectPreset_SetLFODepth final
{
public:
	float                                         Depth;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSourceEffectPreset_SetLFODepth) == 0x000004, "Wrong alignment on HarmonixVibeSourceEffectPreset_SetLFODepth");
static_assert(sizeof(HarmonixVibeSourceEffectPreset_SetLFODepth) == 0x000004, "Wrong size on HarmonixVibeSourceEffectPreset_SetLFODepth");
static_assert(offsetof(HarmonixVibeSourceEffectPreset_SetLFODepth, Depth) == 0x000000, "Member 'HarmonixVibeSourceEffectPreset_SetLFODepth::Depth' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetLFORate
// 0x0004 (0x0004 - 0x0000)
struct HarmonixVibeSourceEffectPreset_SetLFORate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSourceEffectPreset_SetLFORate) == 0x000004, "Wrong alignment on HarmonixVibeSourceEffectPreset_SetLFORate");
static_assert(sizeof(HarmonixVibeSourceEffectPreset_SetLFORate) == 0x000004, "Wrong size on HarmonixVibeSourceEffectPreset_SetLFORate");
static_assert(offsetof(HarmonixVibeSourceEffectPreset_SetLFORate, Rate) == 0x000000, "Member 'HarmonixVibeSourceEffectPreset_SetLFORate::Rate' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetLFOShape
// 0x0004 (0x0004 - 0x0000)
struct HarmonixVibeSourceEffectPreset_SetLFOShape final
{
public:
	float                                         Shape;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSourceEffectPreset_SetLFOShape) == 0x000004, "Wrong alignment on HarmonixVibeSourceEffectPreset_SetLFOShape");
static_assert(sizeof(HarmonixVibeSourceEffectPreset_SetLFOShape) == 0x000004, "Wrong size on HarmonixVibeSourceEffectPreset_SetLFOShape");
static_assert(offsetof(HarmonixVibeSourceEffectPreset_SetLFOShape, Shape) == 0x000000, "Member 'HarmonixVibeSourceEffectPreset_SetLFOShape::Shape' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetSettings
// 0x002C (0x002C - 0x0000)
struct HarmonixVibeSourceEffectPreset_SetSettings final
{
public:
	struct FHarmonixVibeEffectSettings            InSettings;                                        // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSourceEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixVibeSourceEffectPreset_SetSettings");
static_assert(sizeof(HarmonixVibeSourceEffectPreset_SetSettings) == 0x00002C, "Wrong size on HarmonixVibeSourceEffectPreset_SetSettings");
static_assert(offsetof(HarmonixVibeSourceEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixVibeSourceEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetTimeSyncOption
// 0x0001 (0x0001 - 0x0000)
struct HarmonixVibeSourceEffectPreset_SetTimeSyncOption final
{
public:
	ETempoListenerTimeSyncOption                  Option;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSourceEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong alignment on HarmonixVibeSourceEffectPreset_SetTimeSyncOption");
static_assert(sizeof(HarmonixVibeSourceEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong size on HarmonixVibeSourceEffectPreset_SetTimeSyncOption");
static_assert(offsetof(HarmonixVibeSourceEffectPreset_SetTimeSyncOption, Option) == 0x000000, "Member 'HarmonixVibeSourceEffectPreset_SetTimeSyncOption::Option' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSourceEffectPreset.SetWetMix
// 0x0004 (0x0004 - 0x0000)
struct HarmonixVibeSourceEffectPreset_SetWetMix final
{
public:
	float                                         wetMix;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSourceEffectPreset_SetWetMix) == 0x000004, "Wrong alignment on HarmonixVibeSourceEffectPreset_SetWetMix");
static_assert(sizeof(HarmonixVibeSourceEffectPreset_SetWetMix) == 0x000004, "Wrong size on HarmonixVibeSourceEffectPreset_SetWetMix");
static_assert(offsetof(HarmonixVibeSourceEffectPreset_SetWetMix, wetMix) == 0x000000, "Member 'HarmonixVibeSourceEffectPreset_SetWetMix::wetMix' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSubmixEffectPreset.CreateHarmonixVibeInstanceOnSubmix
// 0x0048 (0x0048 - 0x0000)
struct HarmonixVibeSubmixEffectPreset_CreateHarmonixVibeInstanceOnSubmix final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           Submix;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixVibeEffectSettings            InSettings;                                        // 0x0010(0x002C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHarmonixVibeSubmixEffectPreset*        ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSubmixEffectPreset_CreateHarmonixVibeInstanceOnSubmix) == 0x000008, "Wrong alignment on HarmonixVibeSubmixEffectPreset_CreateHarmonixVibeInstanceOnSubmix");
static_assert(sizeof(HarmonixVibeSubmixEffectPreset_CreateHarmonixVibeInstanceOnSubmix) == 0x000048, "Wrong size on HarmonixVibeSubmixEffectPreset_CreateHarmonixVibeInstanceOnSubmix");
static_assert(offsetof(HarmonixVibeSubmixEffectPreset_CreateHarmonixVibeInstanceOnSubmix, WorldContextObject) == 0x000000, "Member 'HarmonixVibeSubmixEffectPreset_CreateHarmonixVibeInstanceOnSubmix::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HarmonixVibeSubmixEffectPreset_CreateHarmonixVibeInstanceOnSubmix, Submix) == 0x000008, "Member 'HarmonixVibeSubmixEffectPreset_CreateHarmonixVibeInstanceOnSubmix::Submix' has a wrong offset!");
static_assert(offsetof(HarmonixVibeSubmixEffectPreset_CreateHarmonixVibeInstanceOnSubmix, InSettings) == 0x000010, "Member 'HarmonixVibeSubmixEffectPreset_CreateHarmonixVibeInstanceOnSubmix::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixVibeSubmixEffectPreset_CreateHarmonixVibeInstanceOnSubmix, ReturnValue) == 0x000040, "Member 'HarmonixVibeSubmixEffectPreset_CreateHarmonixVibeInstanceOnSubmix::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixVibeSubmixEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixVibeSubmixEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixVibeSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixVibeSubmixEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixVibeSubmixEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixVibeSubmixEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetFreq
// 0x0008 (0x0008 - 0x0000)
struct HarmonixVibeSubmixEffectPreset_SetFreq final
{
public:
	int32                                         stageIdx;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         freq;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSubmixEffectPreset_SetFreq) == 0x000004, "Wrong alignment on HarmonixVibeSubmixEffectPreset_SetFreq");
static_assert(sizeof(HarmonixVibeSubmixEffectPreset_SetFreq) == 0x000008, "Wrong size on HarmonixVibeSubmixEffectPreset_SetFreq");
static_assert(offsetof(HarmonixVibeSubmixEffectPreset_SetFreq, stageIdx) == 0x000000, "Member 'HarmonixVibeSubmixEffectPreset_SetFreq::stageIdx' has a wrong offset!");
static_assert(offsetof(HarmonixVibeSubmixEffectPreset_SetFreq, freq) == 0x000004, "Member 'HarmonixVibeSubmixEffectPreset_SetFreq::freq' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetGain
// 0x0004 (0x0004 - 0x0000)
struct HarmonixVibeSubmixEffectPreset_SetGain final
{
public:
	float                                         Gain;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSubmixEffectPreset_SetGain) == 0x000004, "Wrong alignment on HarmonixVibeSubmixEffectPreset_SetGain");
static_assert(sizeof(HarmonixVibeSubmixEffectPreset_SetGain) == 0x000004, "Wrong size on HarmonixVibeSubmixEffectPreset_SetGain");
static_assert(offsetof(HarmonixVibeSubmixEffectPreset_SetGain, Gain) == 0x000000, "Member 'HarmonixVibeSubmixEffectPreset_SetGain::Gain' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetLFODepth
// 0x0004 (0x0004 - 0x0000)
struct HarmonixVibeSubmixEffectPreset_SetLFODepth final
{
public:
	float                                         Depth;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSubmixEffectPreset_SetLFODepth) == 0x000004, "Wrong alignment on HarmonixVibeSubmixEffectPreset_SetLFODepth");
static_assert(sizeof(HarmonixVibeSubmixEffectPreset_SetLFODepth) == 0x000004, "Wrong size on HarmonixVibeSubmixEffectPreset_SetLFODepth");
static_assert(offsetof(HarmonixVibeSubmixEffectPreset_SetLFODepth, Depth) == 0x000000, "Member 'HarmonixVibeSubmixEffectPreset_SetLFODepth::Depth' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetLFORate
// 0x0004 (0x0004 - 0x0000)
struct HarmonixVibeSubmixEffectPreset_SetLFORate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSubmixEffectPreset_SetLFORate) == 0x000004, "Wrong alignment on HarmonixVibeSubmixEffectPreset_SetLFORate");
static_assert(sizeof(HarmonixVibeSubmixEffectPreset_SetLFORate) == 0x000004, "Wrong size on HarmonixVibeSubmixEffectPreset_SetLFORate");
static_assert(offsetof(HarmonixVibeSubmixEffectPreset_SetLFORate, Rate) == 0x000000, "Member 'HarmonixVibeSubmixEffectPreset_SetLFORate::Rate' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetLFOShape
// 0x0004 (0x0004 - 0x0000)
struct HarmonixVibeSubmixEffectPreset_SetLFOShape final
{
public:
	float                                         Shape;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSubmixEffectPreset_SetLFOShape) == 0x000004, "Wrong alignment on HarmonixVibeSubmixEffectPreset_SetLFOShape");
static_assert(sizeof(HarmonixVibeSubmixEffectPreset_SetLFOShape) == 0x000004, "Wrong size on HarmonixVibeSubmixEffectPreset_SetLFOShape");
static_assert(offsetof(HarmonixVibeSubmixEffectPreset_SetLFOShape, Shape) == 0x000000, "Member 'HarmonixVibeSubmixEffectPreset_SetLFOShape::Shape' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetSettings
// 0x002C (0x002C - 0x0000)
struct HarmonixVibeSubmixEffectPreset_SetSettings final
{
public:
	struct FHarmonixVibeEffectSettings            InSettings;                                        // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSubmixEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixVibeSubmixEffectPreset_SetSettings");
static_assert(sizeof(HarmonixVibeSubmixEffectPreset_SetSettings) == 0x00002C, "Wrong size on HarmonixVibeSubmixEffectPreset_SetSettings");
static_assert(offsetof(HarmonixVibeSubmixEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixVibeSubmixEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetTimeSyncOption
// 0x0001 (0x0001 - 0x0000)
struct HarmonixVibeSubmixEffectPreset_SetTimeSyncOption final
{
public:
	ETempoListenerTimeSyncOption                  Option;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSubmixEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong alignment on HarmonixVibeSubmixEffectPreset_SetTimeSyncOption");
static_assert(sizeof(HarmonixVibeSubmixEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong size on HarmonixVibeSubmixEffectPreset_SetTimeSyncOption");
static_assert(offsetof(HarmonixVibeSubmixEffectPreset_SetTimeSyncOption, Option) == 0x000000, "Member 'HarmonixVibeSubmixEffectPreset_SetTimeSyncOption::Option' has a wrong offset!");

// Function HmxAudio.HarmonixVibeSubmixEffectPreset.SetWetMix
// 0x0004 (0x0004 - 0x0000)
struct HarmonixVibeSubmixEffectPreset_SetWetMix final
{
public:
	float                                         wetMix;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixVibeSubmixEffectPreset_SetWetMix) == 0x000004, "Wrong alignment on HarmonixVibeSubmixEffectPreset_SetWetMix");
static_assert(sizeof(HarmonixVibeSubmixEffectPreset_SetWetMix) == 0x000004, "Wrong size on HarmonixVibeSubmixEffectPreset_SetWetMix");
static_assert(offsetof(HarmonixVibeSubmixEffectPreset_SetWetMix, wetMix) == 0x000000, "Member 'HarmonixVibeSubmixEffectPreset_SetWetMix::wetMix' has a wrong offset!");

// Function HmxAudio.HarmonixWahSourceEffectPreset.CreateHarmonixWahInstanceOnEmitter
// 0x0038 (0x0038 - 0x0000)
struct HarmonixWahSourceEffectPreset_CreateHarmonixWahInstanceOnEmitter final
{
public:
	class UMusicEmitterComponent*                 Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixWahEffectSettings             InSettings;                                        // 0x0008(0x0024)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHarmonixWahSourceEffectPreset*         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSourceEffectPreset_CreateHarmonixWahInstanceOnEmitter) == 0x000008, "Wrong alignment on HarmonixWahSourceEffectPreset_CreateHarmonixWahInstanceOnEmitter");
static_assert(sizeof(HarmonixWahSourceEffectPreset_CreateHarmonixWahInstanceOnEmitter) == 0x000038, "Wrong size on HarmonixWahSourceEffectPreset_CreateHarmonixWahInstanceOnEmitter");
static_assert(offsetof(HarmonixWahSourceEffectPreset_CreateHarmonixWahInstanceOnEmitter, Emitter) == 0x000000, "Member 'HarmonixWahSourceEffectPreset_CreateHarmonixWahInstanceOnEmitter::Emitter' has a wrong offset!");
static_assert(offsetof(HarmonixWahSourceEffectPreset_CreateHarmonixWahInstanceOnEmitter, InSettings) == 0x000008, "Member 'HarmonixWahSourceEffectPreset_CreateHarmonixWahInstanceOnEmitter::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixWahSourceEffectPreset_CreateHarmonixWahInstanceOnEmitter, ReturnValue) == 0x000030, "Member 'HarmonixWahSourceEffectPreset_CreateHarmonixWahInstanceOnEmitter::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixWahSourceEffectPreset.SetAutoWahEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixWahSourceEffectPreset_SetAutoWahEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSourceEffectPreset_SetAutoWahEnabled) == 0x000001, "Wrong alignment on HarmonixWahSourceEffectPreset_SetAutoWahEnabled");
static_assert(sizeof(HarmonixWahSourceEffectPreset_SetAutoWahEnabled) == 0x000001, "Wrong size on HarmonixWahSourceEffectPreset_SetAutoWahEnabled");
static_assert(offsetof(HarmonixWahSourceEffectPreset_SetAutoWahEnabled, Enabled) == 0x000000, "Member 'HarmonixWahSourceEffectPreset_SetAutoWahEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixWahSourceEffectPreset.SetClosedFreq
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSourceEffectPreset_SetClosedFreq final
{
public:
	float                                         hz;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSourceEffectPreset_SetClosedFreq) == 0x000004, "Wrong alignment on HarmonixWahSourceEffectPreset_SetClosedFreq");
static_assert(sizeof(HarmonixWahSourceEffectPreset_SetClosedFreq) == 0x000004, "Wrong size on HarmonixWahSourceEffectPreset_SetClosedFreq");
static_assert(offsetof(HarmonixWahSourceEffectPreset_SetClosedFreq, hz) == 0x000000, "Member 'HarmonixWahSourceEffectPreset_SetClosedFreq::hz' has a wrong offset!");

// Function HmxAudio.HarmonixWahSourceEffectPreset.SetClosedQ
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSourceEffectPreset_SetClosedQ final
{
public:
	float                                         Q;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSourceEffectPreset_SetClosedQ) == 0x000004, "Wrong alignment on HarmonixWahSourceEffectPreset_SetClosedQ");
static_assert(sizeof(HarmonixWahSourceEffectPreset_SetClosedQ) == 0x000004, "Wrong size on HarmonixWahSourceEffectPreset_SetClosedQ");
static_assert(offsetof(HarmonixWahSourceEffectPreset_SetClosedQ, Q) == 0x000000, "Member 'HarmonixWahSourceEffectPreset_SetClosedQ::Q' has a wrong offset!");

// Function HmxAudio.HarmonixWahSourceEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixWahSourceEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSourceEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixWahSourceEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixWahSourceEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixWahSourceEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixWahSourceEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixWahSourceEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixWahSourceEffectPreset.SetGain
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSourceEffectPreset_SetGain final
{
public:
	float                                         Gain;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSourceEffectPreset_SetGain) == 0x000004, "Wrong alignment on HarmonixWahSourceEffectPreset_SetGain");
static_assert(sizeof(HarmonixWahSourceEffectPreset_SetGain) == 0x000004, "Wrong size on HarmonixWahSourceEffectPreset_SetGain");
static_assert(offsetof(HarmonixWahSourceEffectPreset_SetGain, Gain) == 0x000000, "Member 'HarmonixWahSourceEffectPreset_SetGain::Gain' has a wrong offset!");

// Function HmxAudio.HarmonixWahSourceEffectPreset.SetLFORate
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSourceEffectPreset_SetLFORate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSourceEffectPreset_SetLFORate) == 0x000004, "Wrong alignment on HarmonixWahSourceEffectPreset_SetLFORate");
static_assert(sizeof(HarmonixWahSourceEffectPreset_SetLFORate) == 0x000004, "Wrong size on HarmonixWahSourceEffectPreset_SetLFORate");
static_assert(offsetof(HarmonixWahSourceEffectPreset_SetLFORate, Rate) == 0x000000, "Member 'HarmonixWahSourceEffectPreset_SetLFORate::Rate' has a wrong offset!");

// Function HmxAudio.HarmonixWahSourceEffectPreset.SetLFORateScale
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSourceEffectPreset_SetLFORateScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSourceEffectPreset_SetLFORateScale) == 0x000004, "Wrong alignment on HarmonixWahSourceEffectPreset_SetLFORateScale");
static_assert(sizeof(HarmonixWahSourceEffectPreset_SetLFORateScale) == 0x000004, "Wrong size on HarmonixWahSourceEffectPreset_SetLFORateScale");
static_assert(offsetof(HarmonixWahSourceEffectPreset_SetLFORateScale, Scale) == 0x000000, "Member 'HarmonixWahSourceEffectPreset_SetLFORateScale::Scale' has a wrong offset!");

// Function HmxAudio.HarmonixWahSourceEffectPreset.SetLFOShape
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSourceEffectPreset_SetLFOShape final
{
public:
	float                                         Shape;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSourceEffectPreset_SetLFOShape) == 0x000004, "Wrong alignment on HarmonixWahSourceEffectPreset_SetLFOShape");
static_assert(sizeof(HarmonixWahSourceEffectPreset_SetLFOShape) == 0x000004, "Wrong size on HarmonixWahSourceEffectPreset_SetLFOShape");
static_assert(offsetof(HarmonixWahSourceEffectPreset_SetLFOShape, Shape) == 0x000000, "Member 'HarmonixWahSourceEffectPreset_SetLFOShape::Shape' has a wrong offset!");

// Function HmxAudio.HarmonixWahSourceEffectPreset.SetOpenFreq
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSourceEffectPreset_SetOpenFreq final
{
public:
	float                                         hz;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSourceEffectPreset_SetOpenFreq) == 0x000004, "Wrong alignment on HarmonixWahSourceEffectPreset_SetOpenFreq");
static_assert(sizeof(HarmonixWahSourceEffectPreset_SetOpenFreq) == 0x000004, "Wrong size on HarmonixWahSourceEffectPreset_SetOpenFreq");
static_assert(offsetof(HarmonixWahSourceEffectPreset_SetOpenFreq, hz) == 0x000000, "Member 'HarmonixWahSourceEffectPreset_SetOpenFreq::hz' has a wrong offset!");

// Function HmxAudio.HarmonixWahSourceEffectPreset.SetOpenOnAttack
// 0x0001 (0x0001 - 0x0000)
struct HarmonixWahSourceEffectPreset_SetOpenOnAttack final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSourceEffectPreset_SetOpenOnAttack) == 0x000001, "Wrong alignment on HarmonixWahSourceEffectPreset_SetOpenOnAttack");
static_assert(sizeof(HarmonixWahSourceEffectPreset_SetOpenOnAttack) == 0x000001, "Wrong size on HarmonixWahSourceEffectPreset_SetOpenOnAttack");
static_assert(offsetof(HarmonixWahSourceEffectPreset_SetOpenOnAttack, Enable) == 0x000000, "Member 'HarmonixWahSourceEffectPreset_SetOpenOnAttack::Enable' has a wrong offset!");

// Function HmxAudio.HarmonixWahSourceEffectPreset.SetOpenQ
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSourceEffectPreset_SetOpenQ final
{
public:
	float                                         Q;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSourceEffectPreset_SetOpenQ) == 0x000004, "Wrong alignment on HarmonixWahSourceEffectPreset_SetOpenQ");
static_assert(sizeof(HarmonixWahSourceEffectPreset_SetOpenQ) == 0x000004, "Wrong size on HarmonixWahSourceEffectPreset_SetOpenQ");
static_assert(offsetof(HarmonixWahSourceEffectPreset_SetOpenQ, Q) == 0x000000, "Member 'HarmonixWahSourceEffectPreset_SetOpenQ::Q' has a wrong offset!");

// Function HmxAudio.HarmonixWahSourceEffectPreset.SetSettings
// 0x0024 (0x0024 - 0x0000)
struct HarmonixWahSourceEffectPreset_SetSettings final
{
public:
	struct FHarmonixWahEffectSettings             InSettings;                                        // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSourceEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixWahSourceEffectPreset_SetSettings");
static_assert(sizeof(HarmonixWahSourceEffectPreset_SetSettings) == 0x000024, "Wrong size on HarmonixWahSourceEffectPreset_SetSettings");
static_assert(offsetof(HarmonixWahSourceEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixWahSourceEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixWahSourceEffectPreset.SetSteepFilter
// 0x0001 (0x0001 - 0x0000)
struct HarmonixWahSourceEffectPreset_SetSteepFilter final
{
public:
	bool                                          steep;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSourceEffectPreset_SetSteepFilter) == 0x000001, "Wrong alignment on HarmonixWahSourceEffectPreset_SetSteepFilter");
static_assert(sizeof(HarmonixWahSourceEffectPreset_SetSteepFilter) == 0x000001, "Wrong size on HarmonixWahSourceEffectPreset_SetSteepFilter");
static_assert(offsetof(HarmonixWahSourceEffectPreset_SetSteepFilter, steep) == 0x000000, "Member 'HarmonixWahSourceEffectPreset_SetSteepFilter::steep' has a wrong offset!");

// Function HmxAudio.HarmonixWahSourceEffectPreset.SetTimeSyncOption
// 0x0001 (0x0001 - 0x0000)
struct HarmonixWahSourceEffectPreset_SetTimeSyncOption final
{
public:
	ETempoListenerTimeSyncOption                  Option;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSourceEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong alignment on HarmonixWahSourceEffectPreset_SetTimeSyncOption");
static_assert(sizeof(HarmonixWahSourceEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong size on HarmonixWahSourceEffectPreset_SetTimeSyncOption");
static_assert(offsetof(HarmonixWahSourceEffectPreset_SetTimeSyncOption, Option) == 0x000000, "Member 'HarmonixWahSourceEffectPreset_SetTimeSyncOption::Option' has a wrong offset!");

// Function HmxAudio.HarmonixWahSubmixEffectPreset.CreateHarmonixWahInstanceOnSubmix
// 0x0040 (0x0040 - 0x0000)
struct HarmonixWahSubmixEffectPreset_CreateHarmonixWahInstanceOnSubmix final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           Submix;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixWahEffectSettings             InSettings;                                        // 0x0010(0x0024)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHarmonixWahSubmixEffectPreset*         ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSubmixEffectPreset_CreateHarmonixWahInstanceOnSubmix) == 0x000008, "Wrong alignment on HarmonixWahSubmixEffectPreset_CreateHarmonixWahInstanceOnSubmix");
static_assert(sizeof(HarmonixWahSubmixEffectPreset_CreateHarmonixWahInstanceOnSubmix) == 0x000040, "Wrong size on HarmonixWahSubmixEffectPreset_CreateHarmonixWahInstanceOnSubmix");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_CreateHarmonixWahInstanceOnSubmix, WorldContextObject) == 0x000000, "Member 'HarmonixWahSubmixEffectPreset_CreateHarmonixWahInstanceOnSubmix::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_CreateHarmonixWahInstanceOnSubmix, Submix) == 0x000008, "Member 'HarmonixWahSubmixEffectPreset_CreateHarmonixWahInstanceOnSubmix::Submix' has a wrong offset!");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_CreateHarmonixWahInstanceOnSubmix, InSettings) == 0x000010, "Member 'HarmonixWahSubmixEffectPreset_CreateHarmonixWahInstanceOnSubmix::InSettings' has a wrong offset!");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_CreateHarmonixWahInstanceOnSubmix, ReturnValue) == 0x000038, "Member 'HarmonixWahSubmixEffectPreset_CreateHarmonixWahInstanceOnSubmix::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetAutoWahEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixWahSubmixEffectPreset_SetAutoWahEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSubmixEffectPreset_SetAutoWahEnabled) == 0x000001, "Wrong alignment on HarmonixWahSubmixEffectPreset_SetAutoWahEnabled");
static_assert(sizeof(HarmonixWahSubmixEffectPreset_SetAutoWahEnabled) == 0x000001, "Wrong size on HarmonixWahSubmixEffectPreset_SetAutoWahEnabled");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_SetAutoWahEnabled, Enabled) == 0x000000, "Member 'HarmonixWahSubmixEffectPreset_SetAutoWahEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetClosedFreq
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSubmixEffectPreset_SetClosedFreq final
{
public:
	float                                         hz;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSubmixEffectPreset_SetClosedFreq) == 0x000004, "Wrong alignment on HarmonixWahSubmixEffectPreset_SetClosedFreq");
static_assert(sizeof(HarmonixWahSubmixEffectPreset_SetClosedFreq) == 0x000004, "Wrong size on HarmonixWahSubmixEffectPreset_SetClosedFreq");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_SetClosedFreq, hz) == 0x000000, "Member 'HarmonixWahSubmixEffectPreset_SetClosedFreq::hz' has a wrong offset!");

// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetClosedQ
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSubmixEffectPreset_SetClosedQ final
{
public:
	float                                         Q;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSubmixEffectPreset_SetClosedQ) == 0x000004, "Wrong alignment on HarmonixWahSubmixEffectPreset_SetClosedQ");
static_assert(sizeof(HarmonixWahSubmixEffectPreset_SetClosedQ) == 0x000004, "Wrong size on HarmonixWahSubmixEffectPreset_SetClosedQ");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_SetClosedQ, Q) == 0x000000, "Member 'HarmonixWahSubmixEffectPreset_SetClosedQ::Q' has a wrong offset!");

// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct HarmonixWahSubmixEffectPreset_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong alignment on HarmonixWahSubmixEffectPreset_SetEnabled");
static_assert(sizeof(HarmonixWahSubmixEffectPreset_SetEnabled) == 0x000001, "Wrong size on HarmonixWahSubmixEffectPreset_SetEnabled");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_SetEnabled, Enabled) == 0x000000, "Member 'HarmonixWahSubmixEffectPreset_SetEnabled::Enabled' has a wrong offset!");

// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetGain
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSubmixEffectPreset_SetGain final
{
public:
	float                                         Gain;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSubmixEffectPreset_SetGain) == 0x000004, "Wrong alignment on HarmonixWahSubmixEffectPreset_SetGain");
static_assert(sizeof(HarmonixWahSubmixEffectPreset_SetGain) == 0x000004, "Wrong size on HarmonixWahSubmixEffectPreset_SetGain");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_SetGain, Gain) == 0x000000, "Member 'HarmonixWahSubmixEffectPreset_SetGain::Gain' has a wrong offset!");

// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetLFORate
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSubmixEffectPreset_SetLFORate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSubmixEffectPreset_SetLFORate) == 0x000004, "Wrong alignment on HarmonixWahSubmixEffectPreset_SetLFORate");
static_assert(sizeof(HarmonixWahSubmixEffectPreset_SetLFORate) == 0x000004, "Wrong size on HarmonixWahSubmixEffectPreset_SetLFORate");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_SetLFORate, Rate) == 0x000000, "Member 'HarmonixWahSubmixEffectPreset_SetLFORate::Rate' has a wrong offset!");

// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetLFORateScale
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSubmixEffectPreset_SetLFORateScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSubmixEffectPreset_SetLFORateScale) == 0x000004, "Wrong alignment on HarmonixWahSubmixEffectPreset_SetLFORateScale");
static_assert(sizeof(HarmonixWahSubmixEffectPreset_SetLFORateScale) == 0x000004, "Wrong size on HarmonixWahSubmixEffectPreset_SetLFORateScale");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_SetLFORateScale, Scale) == 0x000000, "Member 'HarmonixWahSubmixEffectPreset_SetLFORateScale::Scale' has a wrong offset!");

// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetLFOShape
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSubmixEffectPreset_SetLFOShape final
{
public:
	float                                         Shape;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSubmixEffectPreset_SetLFOShape) == 0x000004, "Wrong alignment on HarmonixWahSubmixEffectPreset_SetLFOShape");
static_assert(sizeof(HarmonixWahSubmixEffectPreset_SetLFOShape) == 0x000004, "Wrong size on HarmonixWahSubmixEffectPreset_SetLFOShape");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_SetLFOShape, Shape) == 0x000000, "Member 'HarmonixWahSubmixEffectPreset_SetLFOShape::Shape' has a wrong offset!");

// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetOpenFreq
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSubmixEffectPreset_SetOpenFreq final
{
public:
	float                                         hz;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSubmixEffectPreset_SetOpenFreq) == 0x000004, "Wrong alignment on HarmonixWahSubmixEffectPreset_SetOpenFreq");
static_assert(sizeof(HarmonixWahSubmixEffectPreset_SetOpenFreq) == 0x000004, "Wrong size on HarmonixWahSubmixEffectPreset_SetOpenFreq");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_SetOpenFreq, hz) == 0x000000, "Member 'HarmonixWahSubmixEffectPreset_SetOpenFreq::hz' has a wrong offset!");

// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetOpenOnAttack
// 0x0001 (0x0001 - 0x0000)
struct HarmonixWahSubmixEffectPreset_SetOpenOnAttack final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSubmixEffectPreset_SetOpenOnAttack) == 0x000001, "Wrong alignment on HarmonixWahSubmixEffectPreset_SetOpenOnAttack");
static_assert(sizeof(HarmonixWahSubmixEffectPreset_SetOpenOnAttack) == 0x000001, "Wrong size on HarmonixWahSubmixEffectPreset_SetOpenOnAttack");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_SetOpenOnAttack, Enable) == 0x000000, "Member 'HarmonixWahSubmixEffectPreset_SetOpenOnAttack::Enable' has a wrong offset!");

// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetOpenQ
// 0x0004 (0x0004 - 0x0000)
struct HarmonixWahSubmixEffectPreset_SetOpenQ final
{
public:
	float                                         Q;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSubmixEffectPreset_SetOpenQ) == 0x000004, "Wrong alignment on HarmonixWahSubmixEffectPreset_SetOpenQ");
static_assert(sizeof(HarmonixWahSubmixEffectPreset_SetOpenQ) == 0x000004, "Wrong size on HarmonixWahSubmixEffectPreset_SetOpenQ");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_SetOpenQ, Q) == 0x000000, "Member 'HarmonixWahSubmixEffectPreset_SetOpenQ::Q' has a wrong offset!");

// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetSettings
// 0x0024 (0x0024 - 0x0000)
struct HarmonixWahSubmixEffectPreset_SetSettings final
{
public:
	struct FHarmonixWahEffectSettings             InSettings;                                        // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSubmixEffectPreset_SetSettings) == 0x000004, "Wrong alignment on HarmonixWahSubmixEffectPreset_SetSettings");
static_assert(sizeof(HarmonixWahSubmixEffectPreset_SetSettings) == 0x000024, "Wrong size on HarmonixWahSubmixEffectPreset_SetSettings");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_SetSettings, InSettings) == 0x000000, "Member 'HarmonixWahSubmixEffectPreset_SetSettings::InSettings' has a wrong offset!");

// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetSteepFilter
// 0x0001 (0x0001 - 0x0000)
struct HarmonixWahSubmixEffectPreset_SetSteepFilter final
{
public:
	bool                                          steep;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSubmixEffectPreset_SetSteepFilter) == 0x000001, "Wrong alignment on HarmonixWahSubmixEffectPreset_SetSteepFilter");
static_assert(sizeof(HarmonixWahSubmixEffectPreset_SetSteepFilter) == 0x000001, "Wrong size on HarmonixWahSubmixEffectPreset_SetSteepFilter");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_SetSteepFilter, steep) == 0x000000, "Member 'HarmonixWahSubmixEffectPreset_SetSteepFilter::steep' has a wrong offset!");

// Function HmxAudio.HarmonixWahSubmixEffectPreset.SetTimeSyncOption
// 0x0001 (0x0001 - 0x0000)
struct HarmonixWahSubmixEffectPreset_SetTimeSyncOption final
{
public:
	ETempoListenerTimeSyncOption                  Option;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixWahSubmixEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong alignment on HarmonixWahSubmixEffectPreset_SetTimeSyncOption");
static_assert(sizeof(HarmonixWahSubmixEffectPreset_SetTimeSyncOption) == 0x000001, "Wrong size on HarmonixWahSubmixEffectPreset_SetTimeSyncOption");
static_assert(offsetof(HarmonixWahSubmixEffectPreset_SetTimeSyncOption, Option) == 0x000000, "Member 'HarmonixWahSubmixEffectPreset_SetTimeSyncOption::Option' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.GetElapsedMs
// 0x0004 (0x0004 - 0x0000)
struct HarmonixHandle_GetElapsedMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixHandle_GetElapsedMs) == 0x000004, "Wrong alignment on HarmonixHandle_GetElapsedMs");
static_assert(sizeof(HarmonixHandle_GetElapsedMs) == 0x000004, "Wrong size on HarmonixHandle_GetElapsedMs");
static_assert(offsetof(HarmonixHandle_GetElapsedMs, ReturnValue) == 0x000000, "Member 'HarmonixHandle_GetElapsedMs::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.GetGain
// 0x0004 (0x0004 - 0x0000)
struct HarmonixHandle_GetGain final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixHandle_GetGain) == 0x000004, "Wrong alignment on HarmonixHandle_GetGain");
static_assert(sizeof(HarmonixHandle_GetGain) == 0x000004, "Wrong size on HarmonixHandle_GetGain");
static_assert(offsetof(HarmonixHandle_GetGain, ReturnValue) == 0x000000, "Member 'HarmonixHandle_GetGain::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.GetLengthMs
// 0x0004 (0x0004 - 0x0000)
struct HarmonixHandle_GetLengthMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixHandle_GetLengthMs) == 0x000004, "Wrong alignment on HarmonixHandle_GetLengthMs");
static_assert(sizeof(HarmonixHandle_GetLengthMs) == 0x000004, "Wrong size on HarmonixHandle_GetLengthMs");
static_assert(offsetof(HarmonixHandle_GetLengthMs, ReturnValue) == 0x000000, "Member 'HarmonixHandle_GetLengthMs::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.GetMute
// 0x0001 (0x0001 - 0x0000)
struct HarmonixHandle_GetMute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixHandle_GetMute) == 0x000001, "Wrong alignment on HarmonixHandle_GetMute");
static_assert(sizeof(HarmonixHandle_GetMute) == 0x000001, "Wrong size on HarmonixHandle_GetMute");
static_assert(offsetof(HarmonixHandle_GetMute, ReturnValue) == 0x000000, "Member 'HarmonixHandle_GetMute::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.GetParameter
// 0x000C (0x000C - 0x0000)
struct HarmonixHandle_GetParameter final
{
public:
	class FName                                   Param;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EParamExists                                  Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixHandle_GetParameter) == 0x000004, "Wrong alignment on HarmonixHandle_GetParameter");
static_assert(sizeof(HarmonixHandle_GetParameter) == 0x00000C, "Wrong size on HarmonixHandle_GetParameter");
static_assert(offsetof(HarmonixHandle_GetParameter, Param) == 0x000000, "Member 'HarmonixHandle_GetParameter::Param' has a wrong offset!");
static_assert(offsetof(HarmonixHandle_GetParameter, Result) == 0x000004, "Member 'HarmonixHandle_GetParameter::Result' has a wrong offset!");
static_assert(offsetof(HarmonixHandle_GetParameter, ReturnValue) == 0x000008, "Member 'HarmonixHandle_GetParameter::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.GetRawPitchMultiplier
// 0x0004 (0x0004 - 0x0000)
struct HarmonixHandle_GetRawPitchMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixHandle_GetRawPitchMultiplier) == 0x000004, "Wrong alignment on HarmonixHandle_GetRawPitchMultiplier");
static_assert(sizeof(HarmonixHandle_GetRawPitchMultiplier) == 0x000004, "Wrong size on HarmonixHandle_GetRawPitchMultiplier");
static_assert(offsetof(HarmonixHandle_GetRawPitchMultiplier, ReturnValue) == 0x000000, "Member 'HarmonixHandle_GetRawPitchMultiplier::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.GetSpeed
// 0x0004 (0x0004 - 0x0000)
struct HarmonixHandle_GetSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixHandle_GetSpeed) == 0x000004, "Wrong alignment on HarmonixHandle_GetSpeed");
static_assert(sizeof(HarmonixHandle_GetSpeed) == 0x000004, "Wrong size on HarmonixHandle_GetSpeed");
static_assert(offsetof(HarmonixHandle_GetSpeed, ReturnValue) == 0x000000, "Member 'HarmonixHandle_GetSpeed::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.GetTimelineMs
// 0x0004 (0x0004 - 0x0000)
struct HarmonixHandle_GetTimelineMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixHandle_GetTimelineMs) == 0x000004, "Wrong alignment on HarmonixHandle_GetTimelineMs");
static_assert(sizeof(HarmonixHandle_GetTimelineMs) == 0x000004, "Wrong size on HarmonixHandle_GetTimelineMs");
static_assert(offsetof(HarmonixHandle_GetTimelineMs, ReturnValue) == 0x000000, "Member 'HarmonixHandle_GetTimelineMs::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.GetTransportState
// 0x0001 (0x0001 - 0x0000)
struct HarmonixHandle_GetTransportState final
{
public:
	EAudioTransportState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixHandle_GetTransportState) == 0x000001, "Wrong alignment on HarmonixHandle_GetTransportState");
static_assert(sizeof(HarmonixHandle_GetTransportState) == 0x000001, "Wrong size on HarmonixHandle_GetTransportState");
static_assert(offsetof(HarmonixHandle_GetTransportState, ReturnValue) == 0x000000, "Member 'HarmonixHandle_GetTransportState::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.GetVolume
// 0x0004 (0x0004 - 0x0000)
struct HarmonixHandle_GetVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixHandle_GetVolume) == 0x000004, "Wrong alignment on HarmonixHandle_GetVolume");
static_assert(sizeof(HarmonixHandle_GetVolume) == 0x000004, "Wrong size on HarmonixHandle_GetVolume");
static_assert(offsetof(HarmonixHandle_GetVolume, ReturnValue) == 0x000000, "Member 'HarmonixHandle_GetVolume::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.SeekToMs
// 0x0004 (0x0004 - 0x0000)
struct HarmonixHandle_SeekToMs final
{
public:
	float                                         ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixHandle_SeekToMs) == 0x000004, "Wrong alignment on HarmonixHandle_SeekToMs");
static_assert(sizeof(HarmonixHandle_SeekToMs) == 0x000004, "Wrong size on HarmonixHandle_SeekToMs");
static_assert(offsetof(HarmonixHandle_SeekToMs, ms) == 0x000000, "Member 'HarmonixHandle_SeekToMs::ms' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.SetGain
// 0x000C (0x000C - 0x0000)
struct HarmonixHandle_SetGain final
{
public:
	float                                         Gain;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPostFadeOption                               Option;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixHandle_SetGain) == 0x000004, "Wrong alignment on HarmonixHandle_SetGain");
static_assert(sizeof(HarmonixHandle_SetGain) == 0x00000C, "Wrong size on HarmonixHandle_SetGain");
static_assert(offsetof(HarmonixHandle_SetGain, Gain) == 0x000000, "Member 'HarmonixHandle_SetGain::Gain' has a wrong offset!");
static_assert(offsetof(HarmonixHandle_SetGain, Seconds) == 0x000004, "Member 'HarmonixHandle_SetGain::Seconds' has a wrong offset!");
static_assert(offsetof(HarmonixHandle_SetGain, Option) == 0x000008, "Member 'HarmonixHandle_SetGain::Option' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.SetMute
// 0x0001 (0x0001 - 0x0000)
struct HarmonixHandle_SetMute final
{
public:
	bool                                          muted;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixHandle_SetMute) == 0x000001, "Wrong alignment on HarmonixHandle_SetMute");
static_assert(sizeof(HarmonixHandle_SetMute) == 0x000001, "Wrong size on HarmonixHandle_SetMute");
static_assert(offsetof(HarmonixHandle_SetMute, muted) == 0x000000, "Member 'HarmonixHandle_SetMute::muted' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.SetParameter
// 0x000C (0x000C - 0x0000)
struct HarmonixHandle_SetParameter final
{
public:
	class FName                                   Param;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EParamExists                                  Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixHandle_SetParameter) == 0x000004, "Wrong alignment on HarmonixHandle_SetParameter");
static_assert(sizeof(HarmonixHandle_SetParameter) == 0x00000C, "Wrong size on HarmonixHandle_SetParameter");
static_assert(offsetof(HarmonixHandle_SetParameter, Param) == 0x000000, "Member 'HarmonixHandle_SetParameter::Param' has a wrong offset!");
static_assert(offsetof(HarmonixHandle_SetParameter, Value) == 0x000004, "Member 'HarmonixHandle_SetParameter::Value' has a wrong offset!");
static_assert(offsetof(HarmonixHandle_SetParameter, Result) == 0x000008, "Member 'HarmonixHandle_SetParameter::Result' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.SetRawPitchMultiplier
// 0x0004 (0x0004 - 0x0000)
struct HarmonixHandle_SetRawPitchMultiplier final
{
public:
	float                                         PitchMultiplier;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixHandle_SetRawPitchMultiplier) == 0x000004, "Wrong alignment on HarmonixHandle_SetRawPitchMultiplier");
static_assert(sizeof(HarmonixHandle_SetRawPitchMultiplier) == 0x000004, "Wrong size on HarmonixHandle_SetRawPitchMultiplier");
static_assert(offsetof(HarmonixHandle_SetRawPitchMultiplier, PitchMultiplier) == 0x000000, "Member 'HarmonixHandle_SetRawPitchMultiplier::PitchMultiplier' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.SetSpeed
// 0x0008 (0x0008 - 0x0000)
struct HarmonixHandle_SetSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          maintainPitch;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixHandle_SetSpeed) == 0x000004, "Wrong alignment on HarmonixHandle_SetSpeed");
static_assert(sizeof(HarmonixHandle_SetSpeed) == 0x000008, "Wrong size on HarmonixHandle_SetSpeed");
static_assert(offsetof(HarmonixHandle_SetSpeed, Speed) == 0x000000, "Member 'HarmonixHandle_SetSpeed::Speed' has a wrong offset!");
static_assert(offsetof(HarmonixHandle_SetSpeed, maintainPitch) == 0x000004, "Member 'HarmonixHandle_SetSpeed::maintainPitch' has a wrong offset!");

// Function HmxAudio.HarmonixHandle.SetVolume
// 0x000C (0x000C - 0x0000)
struct HarmonixHandle_SetVolume final
{
public:
	float                                         vol;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPostFadeOption                               Option;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixHandle_SetVolume) == 0x000004, "Wrong alignment on HarmonixHandle_SetVolume");
static_assert(sizeof(HarmonixHandle_SetVolume) == 0x00000C, "Wrong size on HarmonixHandle_SetVolume");
static_assert(offsetof(HarmonixHandle_SetVolume, vol) == 0x000000, "Member 'HarmonixHandle_SetVolume::vol' has a wrong offset!");
static_assert(offsetof(HarmonixHandle_SetVolume, Seconds) == 0x000004, "Member 'HarmonixHandle_SetVolume::Seconds' has a wrong offset!");
static_assert(offsetof(HarmonixHandle_SetVolume, Option) == 0x000008, "Member 'HarmonixHandle_SetVolume::Option' has a wrong offset!");

// Function HmxAudio.HarmonixHandleUtil.CastToInstrumentHandle
// 0x0020 (0x0020 - 0x0000)
struct HarmonixHandleUtil_CastToInstrumentHandle final
{
public:
	class UObject*                                worldContextObj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHarmonixHandle*                        H;                                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHarmonixHandleValidity                       Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInstrumentHandle*                      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixHandleUtil_CastToInstrumentHandle) == 0x000008, "Wrong alignment on HarmonixHandleUtil_CastToInstrumentHandle");
static_assert(sizeof(HarmonixHandleUtil_CastToInstrumentHandle) == 0x000020, "Wrong size on HarmonixHandleUtil_CastToInstrumentHandle");
static_assert(offsetof(HarmonixHandleUtil_CastToInstrumentHandle, worldContextObj) == 0x000000, "Member 'HarmonixHandleUtil_CastToInstrumentHandle::worldContextObj' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_CastToInstrumentHandle, H) == 0x000008, "Member 'HarmonixHandleUtil_CastToInstrumentHandle::H' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_CastToInstrumentHandle, Result) == 0x000010, "Member 'HarmonixHandleUtil_CastToInstrumentHandle::Result' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_CastToInstrumentHandle, ReturnValue) == 0x000018, "Member 'HarmonixHandleUtil_CastToInstrumentHandle::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandleUtil.CastToMusicHandle
// 0x0020 (0x0020 - 0x0000)
struct HarmonixHandleUtil_CastToMusicHandle final
{
public:
	class UObject*                                worldContextObj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHarmonixHandle*                        H;                                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHarmonixHandleValidity                       Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMusicHandle*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixHandleUtil_CastToMusicHandle) == 0x000008, "Wrong alignment on HarmonixHandleUtil_CastToMusicHandle");
static_assert(sizeof(HarmonixHandleUtil_CastToMusicHandle) == 0x000020, "Wrong size on HarmonixHandleUtil_CastToMusicHandle");
static_assert(offsetof(HarmonixHandleUtil_CastToMusicHandle, worldContextObj) == 0x000000, "Member 'HarmonixHandleUtil_CastToMusicHandle::worldContextObj' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_CastToMusicHandle, H) == 0x000008, "Member 'HarmonixHandleUtil_CastToMusicHandle::H' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_CastToMusicHandle, Result) == 0x000010, "Member 'HarmonixHandleUtil_CastToMusicHandle::Result' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_CastToMusicHandle, ReturnValue) == 0x000018, "Member 'HarmonixHandleUtil_CastToMusicHandle::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandleUtil.HarmonixHandleIsValid
// 0x0010 (0x0010 - 0x0000)
struct HarmonixHandleUtil_HarmonixHandleIsValid final
{
public:
	class UHarmonixHandle*                        HarmonixHandle;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHarmonixHandleValidity                       Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixHandleUtil_HarmonixHandleIsValid) == 0x000008, "Wrong alignment on HarmonixHandleUtil_HarmonixHandleIsValid");
static_assert(sizeof(HarmonixHandleUtil_HarmonixHandleIsValid) == 0x000010, "Wrong size on HarmonixHandleUtil_HarmonixHandleIsValid");
static_assert(offsetof(HarmonixHandleUtil_HarmonixHandleIsValid, HarmonixHandle) == 0x000000, "Member 'HarmonixHandleUtil_HarmonixHandleIsValid::HarmonixHandle' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_HarmonixHandleIsValid, Result) == 0x000008, "Member 'HarmonixHandleUtil_HarmonixHandleIsValid::Result' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_HarmonixHandleIsValid, ReturnValue) == 0x000009, "Member 'HarmonixHandleUtil_HarmonixHandleIsValid::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandleUtil.InstrumentHandleIsValid
// 0x0010 (0x0010 - 0x0000)
struct HarmonixHandleUtil_InstrumentHandleIsValid final
{
public:
	class UInstrumentHandle*                      InstrumentHandle;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHarmonixHandleValidity                       Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixHandleUtil_InstrumentHandleIsValid) == 0x000008, "Wrong alignment on HarmonixHandleUtil_InstrumentHandleIsValid");
static_assert(sizeof(HarmonixHandleUtil_InstrumentHandleIsValid) == 0x000010, "Wrong size on HarmonixHandleUtil_InstrumentHandleIsValid");
static_assert(offsetof(HarmonixHandleUtil_InstrumentHandleIsValid, InstrumentHandle) == 0x000000, "Member 'HarmonixHandleUtil_InstrumentHandleIsValid::InstrumentHandle' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_InstrumentHandleIsValid, Result) == 0x000008, "Member 'HarmonixHandleUtil_InstrumentHandleIsValid::Result' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_InstrumentHandleIsValid, ReturnValue) == 0x000009, "Member 'HarmonixHandleUtil_InstrumentHandleIsValid::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandleUtil.IsInstrument
// 0x0010 (0x0010 - 0x0000)
struct HarmonixHandleUtil_IsInstrument final
{
public:
	class UHarmonixHandle*                        HarmonixHandle;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHarmonixHandleValidity                       Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixHandleUtil_IsInstrument) == 0x000008, "Wrong alignment on HarmonixHandleUtil_IsInstrument");
static_assert(sizeof(HarmonixHandleUtil_IsInstrument) == 0x000010, "Wrong size on HarmonixHandleUtil_IsInstrument");
static_assert(offsetof(HarmonixHandleUtil_IsInstrument, HarmonixHandle) == 0x000000, "Member 'HarmonixHandleUtil_IsInstrument::HarmonixHandle' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_IsInstrument, Result) == 0x000008, "Member 'HarmonixHandleUtil_IsInstrument::Result' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_IsInstrument, ReturnValue) == 0x000009, "Member 'HarmonixHandleUtil_IsInstrument::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandleUtil.IsMusic
// 0x0010 (0x0010 - 0x0000)
struct HarmonixHandleUtil_IsMusic final
{
public:
	class UHarmonixHandle*                        HarmonixHandle;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHarmonixHandleValidity                       Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixHandleUtil_IsMusic) == 0x000008, "Wrong alignment on HarmonixHandleUtil_IsMusic");
static_assert(sizeof(HarmonixHandleUtil_IsMusic) == 0x000010, "Wrong size on HarmonixHandleUtil_IsMusic");
static_assert(offsetof(HarmonixHandleUtil_IsMusic, HarmonixHandle) == 0x000000, "Member 'HarmonixHandleUtil_IsMusic::HarmonixHandle' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_IsMusic, Result) == 0x000008, "Member 'HarmonixHandleUtil_IsMusic::Result' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_IsMusic, ReturnValue) == 0x000009, "Member 'HarmonixHandleUtil_IsMusic::ReturnValue' has a wrong offset!");

// Function HmxAudio.HarmonixHandleUtil.MusicHandleIsValid
// 0x0010 (0x0010 - 0x0000)
struct HarmonixHandleUtil_MusicHandleIsValid final
{
public:
	class UMusicHandle*                           MusicHandle;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHarmonixHandleValidity                       Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixHandleUtil_MusicHandleIsValid) == 0x000008, "Wrong alignment on HarmonixHandleUtil_MusicHandleIsValid");
static_assert(sizeof(HarmonixHandleUtil_MusicHandleIsValid) == 0x000010, "Wrong size on HarmonixHandleUtil_MusicHandleIsValid");
static_assert(offsetof(HarmonixHandleUtil_MusicHandleIsValid, MusicHandle) == 0x000000, "Member 'HarmonixHandleUtil_MusicHandleIsValid::MusicHandle' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_MusicHandleIsValid, Result) == 0x000008, "Member 'HarmonixHandleUtil_MusicHandleIsValid::Result' has a wrong offset!");
static_assert(offsetof(HarmonixHandleUtil_MusicHandleIsValid, ReturnValue) == 0x000009, "Member 'HarmonixHandleUtil_MusicHandleIsValid::ReturnValue' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.GetController
// 0x000C (0x000C - 0x0000)
struct InstrumentHandle_GetController final
{
public:
	int32                                         Controller;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         midiChannel;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_GetController) == 0x000004, "Wrong alignment on InstrumentHandle_GetController");
static_assert(sizeof(InstrumentHandle_GetController) == 0x00000C, "Wrong size on InstrumentHandle_GetController");
static_assert(offsetof(InstrumentHandle_GetController, Controller) == 0x000000, "Member 'InstrumentHandle_GetController::Controller' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_GetController, midiChannel) == 0x000004, "Member 'InstrumentHandle_GetController::midiChannel' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_GetController, ReturnValue) == 0x000008, "Member 'InstrumentHandle_GetController::ReturnValue' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.GetMaxNumVoices
// 0x0004 (0x0004 - 0x0000)
struct InstrumentHandle_GetMaxNumVoices final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_GetMaxNumVoices) == 0x000004, "Wrong alignment on InstrumentHandle_GetMaxNumVoices");
static_assert(sizeof(InstrumentHandle_GetMaxNumVoices) == 0x000004, "Wrong size on InstrumentHandle_GetMaxNumVoices");
static_assert(offsetof(InstrumentHandle_GetMaxNumVoices, ReturnValue) == 0x000000, "Member 'InstrumentHandle_GetMaxNumVoices::ReturnValue' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.GetNumVoicesInUse
// 0x0004 (0x0004 - 0x0000)
struct InstrumentHandle_GetNumVoicesInUse final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_GetNumVoicesInUse) == 0x000004, "Wrong alignment on InstrumentHandle_GetNumVoicesInUse");
static_assert(sizeof(InstrumentHandle_GetNumVoicesInUse) == 0x000004, "Wrong size on InstrumentHandle_GetNumVoicesInUse");
static_assert(offsetof(InstrumentHandle_GetNumVoicesInUse, ReturnValue) == 0x000000, "Member 'InstrumentHandle_GetNumVoicesInUse::ReturnValue' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.GetPitchbend
// 0x0008 (0x0008 - 0x0000)
struct InstrumentHandle_GetPitchbend final
{
public:
	int32                                         midiChannel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_GetPitchbend) == 0x000004, "Wrong alignment on InstrumentHandle_GetPitchbend");
static_assert(sizeof(InstrumentHandle_GetPitchbend) == 0x000008, "Wrong size on InstrumentHandle_GetPitchbend");
static_assert(offsetof(InstrumentHandle_GetPitchbend, midiChannel) == 0x000000, "Member 'InstrumentHandle_GetPitchbend::midiChannel' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_GetPitchbend, ReturnValue) == 0x000004, "Member 'InstrumentHandle_GetPitchbend::ReturnValue' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.GetRawTransposition
// 0x0004 (0x0004 - 0x0000)
struct InstrumentHandle_GetRawTransposition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_GetRawTransposition) == 0x000004, "Wrong alignment on InstrumentHandle_GetRawTransposition");
static_assert(sizeof(InstrumentHandle_GetRawTransposition) == 0x000004, "Wrong size on InstrumentHandle_GetRawTransposition");
static_assert(offsetof(InstrumentHandle_GetRawTransposition, ReturnValue) == 0x000000, "Member 'InstrumentHandle_GetRawTransposition::ReturnValue' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.GetVoiceUsage
// 0x0008 (0x0008 - 0x0000)
struct InstrumentHandle_GetVoiceUsage final
{
public:
	int32                                         Current;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         peak;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_GetVoiceUsage) == 0x000004, "Wrong alignment on InstrumentHandle_GetVoiceUsage");
static_assert(sizeof(InstrumentHandle_GetVoiceUsage) == 0x000008, "Wrong size on InstrumentHandle_GetVoiceUsage");
static_assert(offsetof(InstrumentHandle_GetVoiceUsage, Current) == 0x000000, "Member 'InstrumentHandle_GetVoiceUsage::Current' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_GetVoiceUsage, peak) == 0x000004, "Member 'InstrumentHandle_GetVoiceUsage::peak' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.NoteIsOn
// 0x000C (0x000C - 0x0000)
struct InstrumentHandle_NoteIsOn final
{
public:
	int32                                         midiNoteNumber;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         midiChannel;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InstrumentHandle_NoteIsOn) == 0x000004, "Wrong alignment on InstrumentHandle_NoteIsOn");
static_assert(sizeof(InstrumentHandle_NoteIsOn) == 0x00000C, "Wrong size on InstrumentHandle_NoteIsOn");
static_assert(offsetof(InstrumentHandle_NoteIsOn, midiNoteNumber) == 0x000000, "Member 'InstrumentHandle_NoteIsOn::midiNoteNumber' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_NoteIsOn, midiChannel) == 0x000004, "Member 'InstrumentHandle_NoteIsOn::midiChannel' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_NoteIsOn, ReturnValue) == 0x000008, "Member 'InstrumentHandle_NoteIsOn::ReturnValue' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.NoteOff
// 0x0008 (0x0008 - 0x0000)
struct InstrumentHandle_NoteOff final
{
public:
	int32                                         midiNoteNumber;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         midiChannel;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_NoteOff) == 0x000004, "Wrong alignment on InstrumentHandle_NoteOff");
static_assert(sizeof(InstrumentHandle_NoteOff) == 0x000008, "Wrong size on InstrumentHandle_NoteOff");
static_assert(offsetof(InstrumentHandle_NoteOff, midiNoteNumber) == 0x000000, "Member 'InstrumentHandle_NoteOff::midiNoteNumber' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_NoteOff, midiChannel) == 0x000004, "Member 'InstrumentHandle_NoteOff::midiChannel' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.NoteOn
// 0x000C (0x000C - 0x0000)
struct InstrumentHandle_NoteOn final
{
public:
	int32                                         midiNoteNumber;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Velocity;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         midiChannel;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_NoteOn) == 0x000004, "Wrong alignment on InstrumentHandle_NoteOn");
static_assert(sizeof(InstrumentHandle_NoteOn) == 0x00000C, "Wrong size on InstrumentHandle_NoteOn");
static_assert(offsetof(InstrumentHandle_NoteOn, midiNoteNumber) == 0x000000, "Member 'InstrumentHandle_NoteOn::midiNoteNumber' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_NoteOn, Velocity) == 0x000004, "Member 'InstrumentHandle_NoteOn::Velocity' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_NoteOn, midiChannel) == 0x000008, "Member 'InstrumentHandle_NoteOn::midiChannel' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.NotesOff
// 0x0020 (0x0020 - 0x0000)
struct InstrumentHandle_NotesOff final
{
public:
	TArray<int32>                                 midiNoteNumbers;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Channels;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_NotesOff) == 0x000008, "Wrong alignment on InstrumentHandle_NotesOff");
static_assert(sizeof(InstrumentHandle_NotesOff) == 0x000020, "Wrong size on InstrumentHandle_NotesOff");
static_assert(offsetof(InstrumentHandle_NotesOff, midiNoteNumbers) == 0x000000, "Member 'InstrumentHandle_NotesOff::midiNoteNumbers' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_NotesOff, Channels) == 0x000010, "Member 'InstrumentHandle_NotesOff::Channels' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.NotesOn
// 0x0030 (0x0030 - 0x0000)
struct InstrumentHandle_NotesOn final
{
public:
	TArray<int32>                                 midiNoteNumbers;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 velocities;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Channels;                                          // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_NotesOn) == 0x000008, "Wrong alignment on InstrumentHandle_NotesOn");
static_assert(sizeof(InstrumentHandle_NotesOn) == 0x000030, "Wrong size on InstrumentHandle_NotesOn");
static_assert(offsetof(InstrumentHandle_NotesOn, midiNoteNumbers) == 0x000000, "Member 'InstrumentHandle_NotesOn::midiNoteNumbers' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_NotesOn, velocities) == 0x000010, "Member 'InstrumentHandle_NotesOn::velocities' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_NotesOn, Channels) == 0x000020, "Member 'InstrumentHandle_NotesOn::Channels' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.ProcessMidiMessage
// 0x000C (0x000C - 0x0000)
struct InstrumentHandle_ProcessMidiMessage final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         data1;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         data2;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_ProcessMidiMessage) == 0x000004, "Wrong alignment on InstrumentHandle_ProcessMidiMessage");
static_assert(sizeof(InstrumentHandle_ProcessMidiMessage) == 0x00000C, "Wrong size on InstrumentHandle_ProcessMidiMessage");
static_assert(offsetof(InstrumentHandle_ProcessMidiMessage, Status) == 0x000000, "Member 'InstrumentHandle_ProcessMidiMessage::Status' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_ProcessMidiMessage, data1) == 0x000004, "Member 'InstrumentHandle_ProcessMidiMessage::data1' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_ProcessMidiMessage, data2) == 0x000008, "Member 'InstrumentHandle_ProcessMidiMessage::data2' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.SetController
// 0x000C (0x000C - 0x0000)
struct InstrumentHandle_SetController final
{
public:
	int32                                         Controller;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         midiChannel;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_SetController) == 0x000004, "Wrong alignment on InstrumentHandle_SetController");
static_assert(sizeof(InstrumentHandle_SetController) == 0x00000C, "Wrong size on InstrumentHandle_SetController");
static_assert(offsetof(InstrumentHandle_SetController, Controller) == 0x000000, "Member 'InstrumentHandle_SetController::Controller' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_SetController, Value) == 0x000004, "Member 'InstrumentHandle_SetController::Value' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_SetController, midiChannel) == 0x000008, "Member 'InstrumentHandle_SetController::midiChannel' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.SetExtraPitchBend
// 0x0008 (0x0008 - 0x0000)
struct InstrumentHandle_SetExtraPitchBend final
{
public:
	float                                         Semitones;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         midiChannel;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_SetExtraPitchBend) == 0x000004, "Wrong alignment on InstrumentHandle_SetExtraPitchBend");
static_assert(sizeof(InstrumentHandle_SetExtraPitchBend) == 0x000008, "Wrong size on InstrumentHandle_SetExtraPitchBend");
static_assert(offsetof(InstrumentHandle_SetExtraPitchBend, Semitones) == 0x000000, "Member 'InstrumentHandle_SetExtraPitchBend::Semitones' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_SetExtraPitchBend, midiChannel) == 0x000004, "Member 'InstrumentHandle_SetExtraPitchBend::midiChannel' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.SetPitchBend
// 0x0008 (0x0008 - 0x0000)
struct InstrumentHandle_SetPitchBend final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         midiChannel;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_SetPitchBend) == 0x000004, "Wrong alignment on InstrumentHandle_SetPitchBend");
static_assert(sizeof(InstrumentHandle_SetPitchBend) == 0x000008, "Wrong size on InstrumentHandle_SetPitchBend");
static_assert(offsetof(InstrumentHandle_SetPitchBend, Value) == 0x000000, "Member 'InstrumentHandle_SetPitchBend::Value' has a wrong offset!");
static_assert(offsetof(InstrumentHandle_SetPitchBend, midiChannel) == 0x000004, "Member 'InstrumentHandle_SetPitchBend::midiChannel' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.SetRawTransposition
// 0x0004 (0x0004 - 0x0000)
struct InstrumentHandle_SetRawTransposition final
{
public:
	int32                                         Semitones;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_SetRawTransposition) == 0x000004, "Wrong alignment on InstrumentHandle_SetRawTransposition");
static_assert(sizeof(InstrumentHandle_SetRawTransposition) == 0x000004, "Wrong size on InstrumentHandle_SetRawTransposition");
static_assert(offsetof(InstrumentHandle_SetRawTransposition, Semitones) == 0x000000, "Member 'InstrumentHandle_SetRawTransposition::Semitones' has a wrong offset!");

// Function HmxAudio.InstrumentHandle.SetTempo
// 0x0004 (0x0004 - 0x0000)
struct InstrumentHandle_SetTempo final
{
public:
	float                                         BPM;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstrumentHandle_SetTempo) == 0x000004, "Wrong alignment on InstrumentHandle_SetTempo");
static_assert(sizeof(InstrumentHandle_SetTempo) == 0x000004, "Wrong size on InstrumentHandle_SetTempo");
static_assert(offsetof(InstrumentHandle_SetTempo, BPM) == 0x000000, "Member 'InstrumentHandle_SetTempo::BPM' has a wrong offset!");

// Function HmxAudio.MusicHandle.ClearLoop
// 0x0001 (0x0001 - 0x0000)
struct MusicHandle_ClearLoop final
{
public:
	bool                                          ignoreLookAhead;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_ClearLoop) == 0x000001, "Wrong alignment on MusicHandle_ClearLoop");
static_assert(sizeof(MusicHandle_ClearLoop) == 0x000001, "Wrong size on MusicHandle_ClearLoop");
static_assert(offsetof(MusicHandle_ClearLoop, ignoreLookAhead) == 0x000000, "Member 'MusicHandle_ClearLoop::ignoreLookAhead' has a wrong offset!");

// Function HmxAudio.MusicHandle.ClearTimeAuthority
// 0x0001 (0x0001 - 0x0000)
struct MusicHandle_ClearTimeAuthority final
{
public:
	bool                                          maintainLastTempoSpeed;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_ClearTimeAuthority) == 0x000001, "Wrong alignment on MusicHandle_ClearTimeAuthority");
static_assert(sizeof(MusicHandle_ClearTimeAuthority) == 0x000001, "Wrong size on MusicHandle_ClearTimeAuthority");
static_assert(offsetof(MusicHandle_ClearTimeAuthority, maintainLastTempoSpeed) == 0x000000, "Member 'MusicHandle_ClearTimeAuthority::maintainLastTempoSpeed' has a wrong offset!");

// Function HmxAudio.MusicHandle.FindLowLevelMidiTrackIndex
// 0x0018 (0x0018 - 0x0000)
struct MusicHandle_FindLowLevelMidiTrackIndex final
{
public:
	class FString                                 trackName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicFindResults                             Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_FindLowLevelMidiTrackIndex) == 0x000008, "Wrong alignment on MusicHandle_FindLowLevelMidiTrackIndex");
static_assert(sizeof(MusicHandle_FindLowLevelMidiTrackIndex) == 0x000018, "Wrong size on MusicHandle_FindLowLevelMidiTrackIndex");
static_assert(offsetof(MusicHandle_FindLowLevelMidiTrackIndex, trackName) == 0x000000, "Member 'MusicHandle_FindLowLevelMidiTrackIndex::trackName' has a wrong offset!");
static_assert(offsetof(MusicHandle_FindLowLevelMidiTrackIndex, Result) == 0x000010, "Member 'MusicHandle_FindLowLevelMidiTrackIndex::Result' has a wrong offset!");
static_assert(offsetof(MusicHandle_FindLowLevelMidiTrackIndex, ReturnValue) == 0x000014, "Member 'MusicHandle_FindLowLevelMidiTrackIndex::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.FindSectionIndex
// 0x0018 (0x0018 - 0x0000)
struct MusicHandle_FindSectionIndex final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicFindResults                             Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_FindSectionIndex) == 0x000008, "Wrong alignment on MusicHandle_FindSectionIndex");
static_assert(sizeof(MusicHandle_FindSectionIndex) == 0x000018, "Wrong size on MusicHandle_FindSectionIndex");
static_assert(offsetof(MusicHandle_FindSectionIndex, Name_0) == 0x000000, "Member 'MusicHandle_FindSectionIndex::Name_0' has a wrong offset!");
static_assert(offsetof(MusicHandle_FindSectionIndex, Result) == 0x000010, "Member 'MusicHandle_FindSectionIndex::Result' has a wrong offset!");
static_assert(offsetof(MusicHandle_FindSectionIndex, ReturnValue) == 0x000014, "Member 'MusicHandle_FindSectionIndex::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.FindTrackIndex
// 0x0018 (0x0018 - 0x0000)
struct MusicHandle_FindTrackIndex final
{
public:
	class FString                                 trackName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicFindResults                             Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_FindTrackIndex) == 0x000008, "Wrong alignment on MusicHandle_FindTrackIndex");
static_assert(sizeof(MusicHandle_FindTrackIndex) == 0x000018, "Wrong size on MusicHandle_FindTrackIndex");
static_assert(offsetof(MusicHandle_FindTrackIndex, trackName) == 0x000000, "Member 'MusicHandle_FindTrackIndex::trackName' has a wrong offset!");
static_assert(offsetof(MusicHandle_FindTrackIndex, Result) == 0x000010, "Member 'MusicHandle_FindTrackIndex::Result' has a wrong offset!");
static_assert(offsetof(MusicHandle_FindTrackIndex, ReturnValue) == 0x000014, "Member 'MusicHandle_FindTrackIndex::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetAudioLatencyMs
// 0x0004 (0x0004 - 0x0000)
struct MusicHandle_GetAudioLatencyMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetAudioLatencyMs) == 0x000004, "Wrong alignment on MusicHandle_GetAudioLatencyMs");
static_assert(sizeof(MusicHandle_GetAudioLatencyMs) == 0x000004, "Wrong size on MusicHandle_GetAudioLatencyMs");
static_assert(offsetof(MusicHandle_GetAudioLatencyMs, ReturnValue) == 0x000000, "Member 'MusicHandle_GetAudioLatencyMs::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetCurrentSectionName
// 0x0018 (0x0018 - 0x0000)
struct MusicHandle_GetCurrentSectionName final
{
public:
	EMusicTimebase                                inTimeBase;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetCurrentSectionName) == 0x000008, "Wrong alignment on MusicHandle_GetCurrentSectionName");
static_assert(sizeof(MusicHandle_GetCurrentSectionName) == 0x000018, "Wrong size on MusicHandle_GetCurrentSectionName");
static_assert(offsetof(MusicHandle_GetCurrentSectionName, inTimeBase) == 0x000000, "Member 'MusicHandle_GetCurrentSectionName::inTimeBase' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetCurrentSectionName, ReturnValue) == 0x000008, "Member 'MusicHandle_GetCurrentSectionName::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetMs
// 0x0008 (0x0008 - 0x0000)
struct MusicHandle_GetMs final
{
public:
	EMusicTimebase                                inTimeBase;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicTimeStart                               InTimeStart;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetMs) == 0x000004, "Wrong alignment on MusicHandle_GetMs");
static_assert(sizeof(MusicHandle_GetMs) == 0x000008, "Wrong size on MusicHandle_GetMs");
static_assert(offsetof(MusicHandle_GetMs, inTimeBase) == 0x000000, "Member 'MusicHandle_GetMs::inTimeBase' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetMs, InTimeStart) == 0x000001, "Member 'MusicHandle_GetMs::InTimeStart' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetMs, ReturnValue) == 0x000004, "Member 'MusicHandle_GetMs::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetNumSections
// 0x0004 (0x0004 - 0x0000)
struct MusicHandle_GetNumSections final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetNumSections) == 0x000004, "Wrong alignment on MusicHandle_GetNumSections");
static_assert(sizeof(MusicHandle_GetNumSections) == 0x000004, "Wrong size on MusicHandle_GetNumSections");
static_assert(offsetof(MusicHandle_GetNumSections, ReturnValue) == 0x000000, "Member 'MusicHandle_GetNumSections::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetNumTracks
// 0x0004 (0x0004 - 0x0000)
struct MusicHandle_GetNumTracks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetNumTracks) == 0x000004, "Wrong alignment on MusicHandle_GetNumTracks");
static_assert(sizeof(MusicHandle_GetNumTracks) == 0x000004, "Wrong size on MusicHandle_GetNumTracks");
static_assert(offsetof(MusicHandle_GetNumTracks, ReturnValue) == 0x000000, "Member 'MusicHandle_GetNumTracks::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetRawTransposition
// 0x0004 (0x0004 - 0x0000)
struct MusicHandle_GetRawTransposition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetRawTransposition) == 0x000004, "Wrong alignment on MusicHandle_GetRawTransposition");
static_assert(sizeof(MusicHandle_GetRawTransposition) == 0x000004, "Wrong size on MusicHandle_GetRawTransposition");
static_assert(offsetof(MusicHandle_GetRawTransposition, ReturnValue) == 0x000000, "Member 'MusicHandle_GetRawTransposition::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetSecsAndTicksUntilPlay
// 0x000C (0x000C - 0x0000)
struct MusicHandle_GetSecsAndTicksUntilPlay final
{
public:
	float                                         secs;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ticks;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicHandle_GetSecsAndTicksUntilPlay) == 0x000004, "Wrong alignment on MusicHandle_GetSecsAndTicksUntilPlay");
static_assert(sizeof(MusicHandle_GetSecsAndTicksUntilPlay) == 0x00000C, "Wrong size on MusicHandle_GetSecsAndTicksUntilPlay");
static_assert(offsetof(MusicHandle_GetSecsAndTicksUntilPlay, secs) == 0x000000, "Member 'MusicHandle_GetSecsAndTicksUntilPlay::secs' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetSecsAndTicksUntilPlay, ticks) == 0x000004, "Member 'MusicHandle_GetSecsAndTicksUntilPlay::ticks' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetSecsAndTicksUntilPlay, ReturnValue) == 0x000008, "Member 'MusicHandle_GetSecsAndTicksUntilPlay::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetSectionName
// 0x0018 (0x0018 - 0x0000)
struct MusicHandle_GetSectionName final
{
public:
	int32                                         SectionIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicFindResults                             Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetSectionName) == 0x000008, "Wrong alignment on MusicHandle_GetSectionName");
static_assert(sizeof(MusicHandle_GetSectionName) == 0x000018, "Wrong size on MusicHandle_GetSectionName");
static_assert(offsetof(MusicHandle_GetSectionName, SectionIndex) == 0x000000, "Member 'MusicHandle_GetSectionName::SectionIndex' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetSectionName, Result) == 0x000004, "Member 'MusicHandle_GetSectionName::Result' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetSectionName, ReturnValue) == 0x000008, "Member 'MusicHandle_GetSectionName::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetSectionNameAtTick
// 0x0018 (0x0018 - 0x0000)
struct MusicHandle_GetSectionNameAtTick final
{
public:
	int32                                         Tick;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetSectionNameAtTick) == 0x000008, "Wrong alignment on MusicHandle_GetSectionNameAtTick");
static_assert(sizeof(MusicHandle_GetSectionNameAtTick) == 0x000018, "Wrong size on MusicHandle_GetSectionNameAtTick");
static_assert(offsetof(MusicHandle_GetSectionNameAtTick, Tick) == 0x000000, "Member 'MusicHandle_GetSectionNameAtTick::Tick' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetSectionNameAtTick, ReturnValue) == 0x000008, "Member 'MusicHandle_GetSectionNameAtTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetSectionNames
// 0x0010 (0x0010 - 0x0000)
struct MusicHandle_GetSectionNames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetSectionNames) == 0x000008, "Wrong alignment on MusicHandle_GetSectionNames");
static_assert(sizeof(MusicHandle_GetSectionNames) == 0x000010, "Wrong size on MusicHandle_GetSectionNames");
static_assert(offsetof(MusicHandle_GetSectionNames, ReturnValue) == 0x000000, "Member 'MusicHandle_GetSectionNames::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetSmoothingLatencyMs
// 0x0004 (0x0004 - 0x0000)
struct MusicHandle_GetSmoothingLatencyMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetSmoothingLatencyMs) == 0x000004, "Wrong alignment on MusicHandle_GetSmoothingLatencyMs");
static_assert(sizeof(MusicHandle_GetSmoothingLatencyMs) == 0x000004, "Wrong size on MusicHandle_GetSmoothingLatencyMs");
static_assert(offsetof(MusicHandle_GetSmoothingLatencyMs, ReturnValue) == 0x000000, "Member 'MusicHandle_GetSmoothingLatencyMs::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetSongPos
// 0x0050 (0x0050 - 0x0000)
struct MusicHandle_GetSongPos final
{
public:
	EMusicTimebase                                inTimeBase;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicTimeStart                               InTimeStart;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSongPos                               ReturnValue;                                       // 0x0004(0x004C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetSongPos) == 0x000004, "Wrong alignment on MusicHandle_GetSongPos");
static_assert(sizeof(MusicHandle_GetSongPos) == 0x000050, "Wrong size on MusicHandle_GetSongPos");
static_assert(offsetof(MusicHandle_GetSongPos, inTimeBase) == 0x000000, "Member 'MusicHandle_GetSongPos::inTimeBase' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetSongPos, InTimeStart) == 0x000001, "Member 'MusicHandle_GetSongPos::InTimeStart' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetSongPos, ReturnValue) == 0x000004, "Member 'MusicHandle_GetSongPos::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetSoundId
// 0x0010 (0x0010 - 0x0000)
struct MusicHandle_GetSoundId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetSoundId) == 0x000008, "Wrong alignment on MusicHandle_GetSoundId");
static_assert(sizeof(MusicHandle_GetSoundId) == 0x000010, "Wrong size on MusicHandle_GetSoundId");
static_assert(offsetof(MusicHandle_GetSoundId, ReturnValue) == 0x000000, "Member 'MusicHandle_GetSoundId::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetTick
// 0x0008 (0x0008 - 0x0000)
struct MusicHandle_GetTick final
{
public:
	EMusicTimebase                                inTimeBase;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicTimeStart                               InTimeStart;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetTick) == 0x000004, "Wrong alignment on MusicHandle_GetTick");
static_assert(sizeof(MusicHandle_GetTick) == 0x000008, "Wrong size on MusicHandle_GetTick");
static_assert(offsetof(MusicHandle_GetTick, inTimeBase) == 0x000000, "Member 'MusicHandle_GetTick::inTimeBase' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetTick, InTimeStart) == 0x000001, "Member 'MusicHandle_GetTick::InTimeStart' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetTick, ReturnValue) == 0x000004, "Member 'MusicHandle_GetTick::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetTrackDb
// 0x0008 (0x0008 - 0x0000)
struct MusicHandle_GetTrackDb final
{
public:
	int32                                         track;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetTrackDb) == 0x000004, "Wrong alignment on MusicHandle_GetTrackDb");
static_assert(sizeof(MusicHandle_GetTrackDb) == 0x000008, "Wrong size on MusicHandle_GetTrackDb");
static_assert(offsetof(MusicHandle_GetTrackDb, track) == 0x000000, "Member 'MusicHandle_GetTrackDb::track' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetTrackDb, ReturnValue) == 0x000004, "Member 'MusicHandle_GetTrackDb::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetTrackGain
// 0x0008 (0x0008 - 0x0000)
struct MusicHandle_GetTrackGain final
{
public:
	int32                                         track;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetTrackGain) == 0x000004, "Wrong alignment on MusicHandle_GetTrackGain");
static_assert(sizeof(MusicHandle_GetTrackGain) == 0x000008, "Wrong size on MusicHandle_GetTrackGain");
static_assert(offsetof(MusicHandle_GetTrackGain, track) == 0x000000, "Member 'MusicHandle_GetTrackGain::track' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetTrackGain, ReturnValue) == 0x000004, "Member 'MusicHandle_GetTrackGain::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetTrackMute
// 0x0008 (0x0008 - 0x0000)
struct MusicHandle_GetTrackMute final
{
public:
	int32                                         track;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicHandle_GetTrackMute) == 0x000004, "Wrong alignment on MusicHandle_GetTrackMute");
static_assert(sizeof(MusicHandle_GetTrackMute) == 0x000008, "Wrong size on MusicHandle_GetTrackMute");
static_assert(offsetof(MusicHandle_GetTrackMute, track) == 0x000000, "Member 'MusicHandle_GetTrackMute::track' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetTrackMute, ReturnValue) == 0x000004, "Member 'MusicHandle_GetTrackMute::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetTrackName
// 0x0018 (0x0018 - 0x0000)
struct MusicHandle_GetTrackName final
{
public:
	int32                                         TrackIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetTrackName) == 0x000008, "Wrong alignment on MusicHandle_GetTrackName");
static_assert(sizeof(MusicHandle_GetTrackName) == 0x000018, "Wrong size on MusicHandle_GetTrackName");
static_assert(offsetof(MusicHandle_GetTrackName, TrackIndex) == 0x000000, "Member 'MusicHandle_GetTrackName::TrackIndex' has a wrong offset!");
static_assert(offsetof(MusicHandle_GetTrackName, ReturnValue) == 0x000008, "Member 'MusicHandle_GetTrackName::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetTrackNames
// 0x0010 (0x0010 - 0x0000)
struct MusicHandle_GetTrackNames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetTrackNames) == 0x000008, "Wrong alignment on MusicHandle_GetTrackNames");
static_assert(sizeof(MusicHandle_GetTrackNames) == 0x000010, "Wrong size on MusicHandle_GetTrackNames");
static_assert(offsetof(MusicHandle_GetTrackNames, ReturnValue) == 0x000000, "Member 'MusicHandle_GetTrackNames::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.GetVideoLatencyMs
// 0x0004 (0x0004 - 0x0000)
struct MusicHandle_GetVideoLatencyMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_GetVideoLatencyMs) == 0x000004, "Wrong alignment on MusicHandle_GetVideoLatencyMs");
static_assert(sizeof(MusicHandle_GetVideoLatencyMs) == 0x000004, "Wrong size on MusicHandle_GetVideoLatencyMs");
static_assert(offsetof(MusicHandle_GetVideoLatencyMs, ReturnValue) == 0x000000, "Member 'MusicHandle_GetVideoLatencyMs::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.Loop
// 0x000C (0x000C - 0x0000)
struct MusicHandle_Loop final
{
public:
	int32                                         fromTick;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         toTick;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicHandle_Loop) == 0x000004, "Wrong alignment on MusicHandle_Loop");
static_assert(sizeof(MusicHandle_Loop) == 0x00000C, "Wrong size on MusicHandle_Loop");
static_assert(offsetof(MusicHandle_Loop, fromTick) == 0x000000, "Member 'MusicHandle_Loop::fromTick' has a wrong offset!");
static_assert(offsetof(MusicHandle_Loop, toTick) == 0x000004, "Member 'MusicHandle_Loop::toTick' has a wrong offset!");
static_assert(offsetof(MusicHandle_Loop, ReturnValue) == 0x000008, "Member 'MusicHandle_Loop::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.LoopSection
// 0x0008 (0x0008 - 0x0000)
struct MusicHandle_LoopSection final
{
public:
	int32                                         SectionIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicHandle_LoopSection) == 0x000004, "Wrong alignment on MusicHandle_LoopSection");
static_assert(sizeof(MusicHandle_LoopSection) == 0x000008, "Wrong size on MusicHandle_LoopSection");
static_assert(offsetof(MusicHandle_LoopSection, SectionIndex) == 0x000000, "Member 'MusicHandle_LoopSection::SectionIndex' has a wrong offset!");
static_assert(offsetof(MusicHandle_LoopSection, ReturnValue) == 0x000004, "Member 'MusicHandle_LoopSection::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.LoopWithCount
// 0x0010 (0x0010 - 0x0000)
struct MusicHandle_LoopWithCount final
{
public:
	int32                                         fromTick;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         toTick;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         numTimes;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicHandle_LoopWithCount) == 0x000004, "Wrong alignment on MusicHandle_LoopWithCount");
static_assert(sizeof(MusicHandle_LoopWithCount) == 0x000010, "Wrong size on MusicHandle_LoopWithCount");
static_assert(offsetof(MusicHandle_LoopWithCount, fromTick) == 0x000000, "Member 'MusicHandle_LoopWithCount::fromTick' has a wrong offset!");
static_assert(offsetof(MusicHandle_LoopWithCount, toTick) == 0x000004, "Member 'MusicHandle_LoopWithCount::toTick' has a wrong offset!");
static_assert(offsetof(MusicHandle_LoopWithCount, numTimes) == 0x000008, "Member 'MusicHandle_LoopWithCount::numTimes' has a wrong offset!");
static_assert(offsetof(MusicHandle_LoopWithCount, ReturnValue) == 0x00000C, "Member 'MusicHandle_LoopWithCount::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.SeekToContentTick
// 0x0004 (0x0004 - 0x0000)
struct MusicHandle_SeekToContentTick final
{
public:
	int32                                         Tick;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_SeekToContentTick) == 0x000004, "Wrong alignment on MusicHandle_SeekToContentTick");
static_assert(sizeof(MusicHandle_SeekToContentTick) == 0x000004, "Wrong size on MusicHandle_SeekToContentTick");
static_assert(offsetof(MusicHandle_SeekToContentTick, Tick) == 0x000000, "Member 'MusicHandle_SeekToContentTick::Tick' has a wrong offset!");

// Function HmxAudio.MusicHandle.SeekToSongTick
// 0x0004 (0x0004 - 0x0000)
struct MusicHandle_SeekToSongTick final
{
public:
	int32                                         Tick;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_SeekToSongTick) == 0x000004, "Wrong alignment on MusicHandle_SeekToSongTick");
static_assert(sizeof(MusicHandle_SeekToSongTick) == 0x000004, "Wrong size on MusicHandle_SeekToSongTick");
static_assert(offsetof(MusicHandle_SeekToSongTick, Tick) == 0x000000, "Member 'MusicHandle_SeekToSongTick::Tick' has a wrong offset!");

// Function HmxAudio.MusicHandle.SetFutureUnmute
// 0x0001 (0x0001 - 0x0000)
struct MusicHandle_SetFutureUnmute final
{
public:
	EFMusicUnmutePoint                            unmutePoint;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_SetFutureUnmute) == 0x000001, "Wrong alignment on MusicHandle_SetFutureUnmute");
static_assert(sizeof(MusicHandle_SetFutureUnmute) == 0x000001, "Wrong size on MusicHandle_SetFutureUnmute");
static_assert(offsetof(MusicHandle_SetFutureUnmute, unmutePoint) == 0x000000, "Member 'MusicHandle_SetFutureUnmute::unmutePoint' has a wrong offset!");

// Function HmxAudio.MusicHandle.SetFutureUnmuteByTick
// 0x0008 (0x0008 - 0x0000)
struct MusicHandle_SetFutureUnmuteByTick final
{
public:
	int32                                         Tick;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useTimeAuthoritysTick;                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicHandle_SetFutureUnmuteByTick) == 0x000004, "Wrong alignment on MusicHandle_SetFutureUnmuteByTick");
static_assert(sizeof(MusicHandle_SetFutureUnmuteByTick) == 0x000008, "Wrong size on MusicHandle_SetFutureUnmuteByTick");
static_assert(offsetof(MusicHandle_SetFutureUnmuteByTick, Tick) == 0x000000, "Member 'MusicHandle_SetFutureUnmuteByTick::Tick' has a wrong offset!");
static_assert(offsetof(MusicHandle_SetFutureUnmuteByTick, useTimeAuthoritysTick) == 0x000004, "Member 'MusicHandle_SetFutureUnmuteByTick::useTimeAuthoritysTick' has a wrong offset!");

// Function HmxAudio.MusicHandle.SetRawTransposition
// 0x0004 (0x0004 - 0x0000)
struct MusicHandle_SetRawTransposition final
{
public:
	int32                                         Semitones;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_SetRawTransposition) == 0x000004, "Wrong alignment on MusicHandle_SetRawTransposition");
static_assert(sizeof(MusicHandle_SetRawTransposition) == 0x000004, "Wrong size on MusicHandle_SetRawTransposition");
static_assert(offsetof(MusicHandle_SetRawTransposition, Semitones) == 0x000000, "Member 'MusicHandle_SetRawTransposition::Semitones' has a wrong offset!");

// Function HmxAudio.MusicHandle.SetSpeedToAchieveTempo
// 0x0008 (0x0008 - 0x0000)
struct MusicHandle_SetSpeedToAchieveTempo final
{
public:
	float                                         BPM;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          maintainPitch;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicHandle_SetSpeedToAchieveTempo) == 0x000004, "Wrong alignment on MusicHandle_SetSpeedToAchieveTempo");
static_assert(sizeof(MusicHandle_SetSpeedToAchieveTempo) == 0x000008, "Wrong size on MusicHandle_SetSpeedToAchieveTempo");
static_assert(offsetof(MusicHandle_SetSpeedToAchieveTempo, BPM) == 0x000000, "Member 'MusicHandle_SetSpeedToAchieveTempo::BPM' has a wrong offset!");
static_assert(offsetof(MusicHandle_SetSpeedToAchieveTempo, maintainPitch) == 0x000004, "Member 'MusicHandle_SetSpeedToAchieveTempo::maintainPitch' has a wrong offset!");

// Function HmxAudio.MusicHandle.SetTimeAuthority
// 0x0038 (0x0038 - 0x0000)
struct MusicHandle_SetTimeAuthority final
{
public:
	class UMusicHandle*                           authority;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMusicSyncConfig                       syncConfig;                                        // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicHandle_SetTimeAuthority) == 0x000008, "Wrong alignment on MusicHandle_SetTimeAuthority");
static_assert(sizeof(MusicHandle_SetTimeAuthority) == 0x000038, "Wrong size on MusicHandle_SetTimeAuthority");
static_assert(offsetof(MusicHandle_SetTimeAuthority, authority) == 0x000000, "Member 'MusicHandle_SetTimeAuthority::authority' has a wrong offset!");
static_assert(offsetof(MusicHandle_SetTimeAuthority, syncConfig) == 0x000008, "Member 'MusicHandle_SetTimeAuthority::syncConfig' has a wrong offset!");
static_assert(offsetof(MusicHandle_SetTimeAuthority, ReturnValue) == 0x000030, "Member 'MusicHandle_SetTimeAuthority::ReturnValue' has a wrong offset!");

// Function HmxAudio.MusicHandle.SetTrackDb
// 0x000C (0x000C - 0x0000)
struct MusicHandle_SetTrackDb final
{
public:
	int32                                         track;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         db;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         sec;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_SetTrackDb) == 0x000004, "Wrong alignment on MusicHandle_SetTrackDb");
static_assert(sizeof(MusicHandle_SetTrackDb) == 0x00000C, "Wrong size on MusicHandle_SetTrackDb");
static_assert(offsetof(MusicHandle_SetTrackDb, track) == 0x000000, "Member 'MusicHandle_SetTrackDb::track' has a wrong offset!");
static_assert(offsetof(MusicHandle_SetTrackDb, db) == 0x000004, "Member 'MusicHandle_SetTrackDb::db' has a wrong offset!");
static_assert(offsetof(MusicHandle_SetTrackDb, sec) == 0x000008, "Member 'MusicHandle_SetTrackDb::sec' has a wrong offset!");

// Function HmxAudio.MusicHandle.SetTrackGain
// 0x000C (0x000C - 0x0000)
struct MusicHandle_SetTrackGain final
{
public:
	int32                                         track;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gain;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         sec;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicHandle_SetTrackGain) == 0x000004, "Wrong alignment on MusicHandle_SetTrackGain");
static_assert(sizeof(MusicHandle_SetTrackGain) == 0x00000C, "Wrong size on MusicHandle_SetTrackGain");
static_assert(offsetof(MusicHandle_SetTrackGain, track) == 0x000000, "Member 'MusicHandle_SetTrackGain::track' has a wrong offset!");
static_assert(offsetof(MusicHandle_SetTrackGain, Gain) == 0x000004, "Member 'MusicHandle_SetTrackGain::Gain' has a wrong offset!");
static_assert(offsetof(MusicHandle_SetTrackGain, sec) == 0x000008, "Member 'MusicHandle_SetTrackGain::sec' has a wrong offset!");

// Function HmxAudio.MusicHandle.SetTrackMute
// 0x0008 (0x0008 - 0x0000)
struct MusicHandle_SetTrackMute final
{
public:
	int32                                         Tick;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          muted;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicHandle_SetTrackMute) == 0x000004, "Wrong alignment on MusicHandle_SetTrackMute");
static_assert(sizeof(MusicHandle_SetTrackMute) == 0x000008, "Wrong size on MusicHandle_SetTrackMute");
static_assert(offsetof(MusicHandle_SetTrackMute, Tick) == 0x000000, "Member 'MusicHandle_SetTrackMute::Tick' has a wrong offset!");
static_assert(offsetof(MusicHandle_SetTrackMute, muted) == 0x000004, "Member 'MusicHandle_SetTrackMute::muted' has a wrong offset!");

}

