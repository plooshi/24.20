#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SBDanceVolume

#include "Basic.hpp"

#include "HmxAudio_structs.hpp"
#include "SBDanceVolume_structs.hpp"


namespace SDK::Params
{

// Function SBDanceVolume.FMDanceSynchronizerComponent.GetOwnerFortPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct FMDanceSynchronizerComponent_GetOwnerFortPlayerPawn final
{
public:
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMDanceSynchronizerComponent_GetOwnerFortPlayerPawn) == 0x000008, "Wrong alignment on FMDanceSynchronizerComponent_GetOwnerFortPlayerPawn");
static_assert(sizeof(FMDanceSynchronizerComponent_GetOwnerFortPlayerPawn) == 0x000008, "Wrong size on FMDanceSynchronizerComponent_GetOwnerFortPlayerPawn");
static_assert(offsetof(FMDanceSynchronizerComponent_GetOwnerFortPlayerPawn, ReturnValue) == 0x000000, "Member 'FMDanceSynchronizerComponent_GetOwnerFortPlayerPawn::ReturnValue' has a wrong offset!");

// Function SBDanceVolume.FMDanceSynchronizerComponent.GetOwnerSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct FMDanceSynchronizerComponent_GetOwnerSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMDanceSynchronizerComponent_GetOwnerSkeletalMeshComponent) == 0x000008, "Wrong alignment on FMDanceSynchronizerComponent_GetOwnerSkeletalMeshComponent");
static_assert(sizeof(FMDanceSynchronizerComponent_GetOwnerSkeletalMeshComponent) == 0x000008, "Wrong size on FMDanceSynchronizerComponent_GetOwnerSkeletalMeshComponent");
static_assert(offsetof(FMDanceSynchronizerComponent_GetOwnerSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'FMDanceSynchronizerComponent_GetOwnerSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function SBDanceVolume.FMDanceSynchronizerComponent.IsMusisSyncEnabled
// 0x0001 (0x0001 - 0x0000)
struct FMDanceSynchronizerComponent_IsMusisSyncEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMDanceSynchronizerComponent_IsMusisSyncEnabled) == 0x000001, "Wrong alignment on FMDanceSynchronizerComponent_IsMusisSyncEnabled");
static_assert(sizeof(FMDanceSynchronizerComponent_IsMusisSyncEnabled) == 0x000001, "Wrong size on FMDanceSynchronizerComponent_IsMusisSyncEnabled");
static_assert(offsetof(FMDanceSynchronizerComponent_IsMusisSyncEnabled, ReturnValue) == 0x000000, "Member 'FMDanceSynchronizerComponent_IsMusisSyncEnabled::ReturnValue' has a wrong offset!");

// Function SBDanceVolume.FMDanceSynchronizerComponent.SetDanceMusicalTimeInfo
// 0x0010 (0x0010 - 0x0000)
struct FMDanceSynchronizerComponent_SetDanceMusicalTimeInfo final
{
public:
	struct FMusicalTimeSpan                       TimeSpanInfo;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMDanceSynchronizerComponent_SetDanceMusicalTimeInfo) == 0x000004, "Wrong alignment on FMDanceSynchronizerComponent_SetDanceMusicalTimeInfo");
static_assert(sizeof(FMDanceSynchronizerComponent_SetDanceMusicalTimeInfo) == 0x000010, "Wrong size on FMDanceSynchronizerComponent_SetDanceMusicalTimeInfo");
static_assert(offsetof(FMDanceSynchronizerComponent_SetDanceMusicalTimeInfo, TimeSpanInfo) == 0x000000, "Member 'FMDanceSynchronizerComponent_SetDanceMusicalTimeInfo::TimeSpanInfo' has a wrong offset!");

// Function SBDanceVolume.FMDanceSynchronizerComponent.SetMusicClockReference
// 0x0008 (0x0008 - 0x0000)
struct FMDanceSynchronizerComponent_SetMusicClockReference final
{
public:
	class UOldMusicClockComponent*                MusicClockComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMDanceSynchronizerComponent_SetMusicClockReference) == 0x000008, "Wrong alignment on FMDanceSynchronizerComponent_SetMusicClockReference");
static_assert(sizeof(FMDanceSynchronizerComponent_SetMusicClockReference) == 0x000008, "Wrong size on FMDanceSynchronizerComponent_SetMusicClockReference");
static_assert(offsetof(FMDanceSynchronizerComponent_SetMusicClockReference, MusicClockComponent) == 0x000000, "Member 'FMDanceSynchronizerComponent_SetMusicClockReference::MusicClockComponent' has a wrong offset!");

// Function SBDanceVolume.FMDanceSynchronizerComponent.SetMusicSyncEnabled
// 0x0001 (0x0001 - 0x0000)
struct FMDanceSynchronizerComponent_SetMusicSyncEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMDanceSynchronizerComponent_SetMusicSyncEnabled) == 0x000001, "Wrong alignment on FMDanceSynchronizerComponent_SetMusicSyncEnabled");
static_assert(sizeof(FMDanceSynchronizerComponent_SetMusicSyncEnabled) == 0x000001, "Wrong size on FMDanceSynchronizerComponent_SetMusicSyncEnabled");
static_assert(offsetof(FMDanceSynchronizerComponent_SetMusicSyncEnabled, Enabled) == 0x000000, "Member 'FMDanceSynchronizerComponent_SetMusicSyncEnabled::Enabled' has a wrong offset!");

// Function SBDanceVolume.SBDanceVolumeLibrary.CalculateDanceMontagePlayInfoWithMusicClock
// 0x0038 (0x0038 - 0x0000)
struct SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicClock final
{
public:
	class UOldMusicClockComponent*                MusicClock;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMusicalTimeSpan                       MontageTimeInfo;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FDanceMontagePlayInfo                  ReturnValue;                                       // 0x0020(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicClock) == 0x000008, "Wrong alignment on SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicClock");
static_assert(sizeof(SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicClock) == 0x000038, "Wrong size on SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicClock");
static_assert(offsetof(SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicClock, MusicClock) == 0x000000, "Member 'SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicClock::MusicClock' has a wrong offset!");
static_assert(offsetof(SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicClock, Montage) == 0x000008, "Member 'SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicClock::Montage' has a wrong offset!");
static_assert(offsetof(SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicClock, MontageTimeInfo) == 0x000010, "Member 'SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicClock::MontageTimeInfo' has a wrong offset!");
static_assert(offsetof(SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicClock, ReturnValue) == 0x000020, "Member 'SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicClock::ReturnValue' has a wrong offset!");

// Function SBDanceVolume.SBDanceVolumeLibrary.CalculateDanceMontagePlayInfoWithMusicPlayer
// 0x0038 (0x0038 - 0x0000)
struct SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicPlayer final
{
public:
	class UMusicPlayerComponentBase*              MusicPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMusicalTimeSpan                       MontageTimeInfo;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FDanceMontagePlayInfo                  ReturnValue;                                       // 0x0020(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicPlayer) == 0x000008, "Wrong alignment on SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicPlayer");
static_assert(sizeof(SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicPlayer) == 0x000038, "Wrong size on SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicPlayer");
static_assert(offsetof(SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicPlayer, MusicPlayer) == 0x000000, "Member 'SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicPlayer::MusicPlayer' has a wrong offset!");
static_assert(offsetof(SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicPlayer, Montage) == 0x000008, "Member 'SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicPlayer::Montage' has a wrong offset!");
static_assert(offsetof(SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicPlayer, MontageTimeInfo) == 0x000010, "Member 'SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicPlayer::MontageTimeInfo' has a wrong offset!");
static_assert(offsetof(SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicPlayer, ReturnValue) == 0x000020, "Member 'SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicPlayer::ReturnValue' has a wrong offset!");

// Function SBDanceVolume.SBDanceVolumeLibrary.CalculateDanceMontagePlayRateWithMusicClock
// 0x0018 (0x0018 - 0x0000)
struct SBDanceVolumeLibrary_CalculateDanceMontagePlayRateWithMusicClock final
{
public:
	class UOldMusicClockComponent*                MusicClock;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimMontage*                     Montage;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MontageBeatLength;                                 // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SBDanceVolumeLibrary_CalculateDanceMontagePlayRateWithMusicClock) == 0x000008, "Wrong alignment on SBDanceVolumeLibrary_CalculateDanceMontagePlayRateWithMusicClock");
static_assert(sizeof(SBDanceVolumeLibrary_CalculateDanceMontagePlayRateWithMusicClock) == 0x000018, "Wrong size on SBDanceVolumeLibrary_CalculateDanceMontagePlayRateWithMusicClock");
static_assert(offsetof(SBDanceVolumeLibrary_CalculateDanceMontagePlayRateWithMusicClock, MusicClock) == 0x000000, "Member 'SBDanceVolumeLibrary_CalculateDanceMontagePlayRateWithMusicClock::MusicClock' has a wrong offset!");
static_assert(offsetof(SBDanceVolumeLibrary_CalculateDanceMontagePlayRateWithMusicClock, Montage) == 0x000008, "Member 'SBDanceVolumeLibrary_CalculateDanceMontagePlayRateWithMusicClock::Montage' has a wrong offset!");
static_assert(offsetof(SBDanceVolumeLibrary_CalculateDanceMontagePlayRateWithMusicClock, MontageBeatLength) == 0x000010, "Member 'SBDanceVolumeLibrary_CalculateDanceMontagePlayRateWithMusicClock::MontageBeatLength' has a wrong offset!");
static_assert(offsetof(SBDanceVolumeLibrary_CalculateDanceMontagePlayRateWithMusicClock, ReturnValue) == 0x000014, "Member 'SBDanceVolumeLibrary_CalculateDanceMontagePlayRateWithMusicClock::ReturnValue' has a wrong offset!");

// Function SBDanceVolume.SBDanceVolumeLibrary.ForceStopMontage
// 0x0008 (0x0008 - 0x0000)
struct SBDanceVolumeLibrary_ForceStopMontage final
{
public:
	const class AFortPawn*                        FortPawn;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SBDanceVolumeLibrary_ForceStopMontage) == 0x000008, "Wrong alignment on SBDanceVolumeLibrary_ForceStopMontage");
static_assert(sizeof(SBDanceVolumeLibrary_ForceStopMontage) == 0x000008, "Wrong size on SBDanceVolumeLibrary_ForceStopMontage");
static_assert(offsetof(SBDanceVolumeLibrary_ForceStopMontage, FortPawn) == 0x000000, "Member 'SBDanceVolumeLibrary_ForceStopMontage::FortPawn' has a wrong offset!");

// Function SBDanceVolume.SBDanceVolumeLibrary.GetLastEmoteExecuted
// 0x0010 (0x0010 - 0x0000)
struct SBDanceVolumeLibrary_GetLastEmoteExecuted final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SBDanceVolumeLibrary_GetLastEmoteExecuted) == 0x000008, "Wrong alignment on SBDanceVolumeLibrary_GetLastEmoteExecuted");
static_assert(sizeof(SBDanceVolumeLibrary_GetLastEmoteExecuted) == 0x000010, "Wrong size on SBDanceVolumeLibrary_GetLastEmoteExecuted");
static_assert(offsetof(SBDanceVolumeLibrary_GetLastEmoteExecuted, Controller) == 0x000000, "Member 'SBDanceVolumeLibrary_GetLastEmoteExecuted::Controller' has a wrong offset!");
static_assert(offsetof(SBDanceVolumeLibrary_GetLastEmoteExecuted, ReturnValue) == 0x000008, "Member 'SBDanceVolumeLibrary_GetLastEmoteExecuted::ReturnValue' has a wrong offset!");

// Function SBDanceVolume.SBDanceVolumeLibrary.IsMontageSetupForDanceVolumeLooping
// 0x0010 (0x0010 - 0x0000)
struct SBDanceVolumeLibrary_IsMontageSetupForDanceVolumeLooping final
{
public:
	const class UAnimMontage*                     Montage;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SBDanceVolumeLibrary_IsMontageSetupForDanceVolumeLooping) == 0x000008, "Wrong alignment on SBDanceVolumeLibrary_IsMontageSetupForDanceVolumeLooping");
static_assert(sizeof(SBDanceVolumeLibrary_IsMontageSetupForDanceVolumeLooping) == 0x000010, "Wrong size on SBDanceVolumeLibrary_IsMontageSetupForDanceVolumeLooping");
static_assert(offsetof(SBDanceVolumeLibrary_IsMontageSetupForDanceVolumeLooping, Montage) == 0x000000, "Member 'SBDanceVolumeLibrary_IsMontageSetupForDanceVolumeLooping::Montage' has a wrong offset!");
static_assert(offsetof(SBDanceVolumeLibrary_IsMontageSetupForDanceVolumeLooping, ReturnValue) == 0x000008, "Member 'SBDanceVolumeLibrary_IsMontageSetupForDanceVolumeLooping::ReturnValue' has a wrong offset!");

// Function SBDanceVolume.SBDanceVolumeLibrary.SetWholeMontageLooping
// 0x0010 (0x0010 - 0x0000)
struct SBDanceVolumeLibrary_SetWholeMontageLooping final
{
public:
	class UAnimInstance*                          Anim;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SBDanceVolumeLibrary_SetWholeMontageLooping) == 0x000008, "Wrong alignment on SBDanceVolumeLibrary_SetWholeMontageLooping");
static_assert(sizeof(SBDanceVolumeLibrary_SetWholeMontageLooping) == 0x000010, "Wrong size on SBDanceVolumeLibrary_SetWholeMontageLooping");
static_assert(offsetof(SBDanceVolumeLibrary_SetWholeMontageLooping, Anim) == 0x000000, "Member 'SBDanceVolumeLibrary_SetWholeMontageLooping::Anim' has a wrong offset!");
static_assert(offsetof(SBDanceVolumeLibrary_SetWholeMontageLooping, Montage) == 0x000008, "Member 'SBDanceVolumeLibrary_SetWholeMontageLooping::Montage' has a wrong offset!");

}

