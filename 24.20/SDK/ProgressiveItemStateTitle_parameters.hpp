#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProgressiveItemStateTitle

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ProgressiveItemStateTitle.ProgressiveItemStateTitle_C.BP_OnSetHeaderInfo
// 0x0028 (0x0028 - 0x0000)
struct ProgressiveItemStateTitle_C_BP_OnSetHeaderInfo final
{
public:
	class FText                                   Subheading;                                        // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bSubscribed;                                       // 0x0018(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnlockedStages;                                    // 0x001C(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxStages;                                         // 0x0020(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressiveItemStateTitle_C_BP_OnSetHeaderInfo) == 0x000008, "Wrong alignment on ProgressiveItemStateTitle_C_BP_OnSetHeaderInfo");
static_assert(sizeof(ProgressiveItemStateTitle_C_BP_OnSetHeaderInfo) == 0x000028, "Wrong size on ProgressiveItemStateTitle_C_BP_OnSetHeaderInfo");
static_assert(offsetof(ProgressiveItemStateTitle_C_BP_OnSetHeaderInfo, Subheading) == 0x000000, "Member 'ProgressiveItemStateTitle_C_BP_OnSetHeaderInfo::Subheading' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_BP_OnSetHeaderInfo, bSubscribed) == 0x000018, "Member 'ProgressiveItemStateTitle_C_BP_OnSetHeaderInfo::bSubscribed' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_BP_OnSetHeaderInfo, UnlockedStages) == 0x00001C, "Member 'ProgressiveItemStateTitle_C_BP_OnSetHeaderInfo::UnlockedStages' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_BP_OnSetHeaderInfo, MaxStages) == 0x000020, "Member 'ProgressiveItemStateTitle_C_BP_OnSetHeaderInfo::MaxStages' has a wrong offset!");

// Function ProgressiveItemStateTitle.ProgressiveItemStateTitle_C.ExecuteUbergraph_ProgressiveItemStateTitle
// 0x0030 (0x0030 - 0x0000)
struct ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_Subheading;                           // 0x0008(0x0018)(ConstParm)
	bool                                          K2Node_Event_bSubscribed;                          // 0x0020(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_UnlockedStages;                       // 0x0024(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_MaxStages;                            // 0x0028(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle) == 0x000008, "Wrong alignment on ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle");
static_assert(sizeof(ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle) == 0x000030, "Wrong size on ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle");
static_assert(offsetof(ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle, EntryPoint) == 0x000000, "Member 'ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle::EntryPoint' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle, K2Node_Event_IsDesignTime) == 0x000004, "Member 'ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle, K2Node_Event_Subheading) == 0x000008, "Member 'ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle::K2Node_Event_Subheading' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle, K2Node_Event_bSubscribed) == 0x000020, "Member 'ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle::K2Node_Event_bSubscribed' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle, K2Node_Event_UnlockedStages) == 0x000024, "Member 'ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle::K2Node_Event_UnlockedStages' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle, K2Node_Event_MaxStages) == 0x000028, "Member 'ProgressiveItemStateTitle_C_ExecuteUbergraph_ProgressiveItemStateTitle::K2Node_Event_MaxStages' has a wrong offset!");

// Function ProgressiveItemStateTitle.ProgressiveItemStateTitle_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ProgressiveItemStateTitle_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressiveItemStateTitle_C_PreConstruct) == 0x000001, "Wrong alignment on ProgressiveItemStateTitle_C_PreConstruct");
static_assert(sizeof(ProgressiveItemStateTitle_C_PreConstruct) == 0x000001, "Wrong size on ProgressiveItemStateTitle_C_PreConstruct");
static_assert(offsetof(ProgressiveItemStateTitle_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ProgressiveItemStateTitle_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ProgressiveItemStateTitle.ProgressiveItemStateTitle_C.Update MultiBenefits Tag
// 0x0060 (0x0060 - 0x0000)
struct ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag final
{
public:
	bool                                          Index_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0030(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0048(0x0018)()
};
static_assert(alignof(ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag) == 0x000008, "Wrong alignment on ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag");
static_assert(sizeof(ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag) == 0x000060, "Wrong size on ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag, Index_0) == 0x000000, "Member 'ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag::Index_0' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag, Temp_bool_Variable) == 0x000001, "Member 'ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag, Temp_text_Variable) == 0x000008, "Member 'ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag, K2Node_MakeArray_Array) == 0x000020, "Member 'ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag, CallFunc_Format_ReturnValue) == 0x000030, "Member 'ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag, K2Node_Select_Default) == 0x000048, "Member 'ProgressiveItemStateTitle_C_Update_MultiBenefits_Tag::K2Node_Select_Default' has a wrong offset!");

// Function ProgressiveItemStateTitle.ProgressiveItemStateTitle_C.Update Stages Tag
// 0x0180 (0x0180 - 0x0000)
struct ProgressiveItemStateTitle_C_Update_Stages_Tag final
{
public:
	bool                                          Subscribed;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Current_Stage;                                     // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_Stage;                                         // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            Completed_Text_Color;                              // 0x000C(0x0014)(Edit, BlueprintVisible)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0024(0x0014)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0038(0x0014)()
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_1;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0060(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00B0(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0100(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0110(0x0018)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0130(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0140(0x0018)()
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default;                             // 0x016C(0x0014)()
};
static_assert(alignof(ProgressiveItemStateTitle_C_Update_Stages_Tag) == 0x000008, "Wrong alignment on ProgressiveItemStateTitle_C_Update_Stages_Tag");
static_assert(sizeof(ProgressiveItemStateTitle_C_Update_Stages_Tag) == 0x000180, "Wrong size on ProgressiveItemStateTitle_C_Update_Stages_Tag");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, Subscribed) == 0x000000, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::Subscribed' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, Current_Stage) == 0x000004, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::Current_Stage' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, Max_Stage) == 0x000008, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::Max_Stage' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, Completed_Text_Color) == 0x00000C, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::Completed_Text_Color' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000020, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, K2Node_MakeStruct_SlateColor) == 0x000024, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, K2Node_MakeStruct_SlateColor_1) == 0x000038, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000050, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, CallFunc_Conv_IntToInt64_ReturnValue_1) == 0x000058, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::CallFunc_Conv_IntToInt64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, K2Node_MakeStruct_FormatArgumentData) == 0x000060, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000B0, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, K2Node_MakeArray_Array) == 0x000100, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, CallFunc_Format_ReturnValue) == 0x000110, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000128, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, K2Node_MakeArray_Array_1) == 0x000130, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, CallFunc_Format_ReturnValue_1) == 0x000140, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, CallFunc_SelectColor_ReturnValue) == 0x000158, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, Temp_bool_Variable) == 0x000168, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Stages_Tag, K2Node_Select_Default) == 0x00016C, "Member 'ProgressiveItemStateTitle_C_Update_Stages_Tag::K2Node_Select_Default' has a wrong offset!");

// Function ProgressiveItemStateTitle.ProgressiveItemStateTitle_C.Update Subheading
// 0x0030 (0x0030 - 0x0000)
struct ProgressiveItemStateTitle_C_Update_Subheading final
{
public:
	class FText                                   Text_0;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Subscribed;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default;                             // 0x001C(0x0014)()
};
static_assert(alignof(ProgressiveItemStateTitle_C_Update_Subheading) == 0x000008, "Wrong alignment on ProgressiveItemStateTitle_C_Update_Subheading");
static_assert(sizeof(ProgressiveItemStateTitle_C_Update_Subheading) == 0x000030, "Wrong size on ProgressiveItemStateTitle_C_Update_Subheading");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Subheading, Text_0) == 0x000000, "Member 'ProgressiveItemStateTitle_C_Update_Subheading::Text_0' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Subheading, Subscribed) == 0x000018, "Member 'ProgressiveItemStateTitle_C_Update_Subheading::Subscribed' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Subheading, Temp_bool_Variable) == 0x000019, "Member 'ProgressiveItemStateTitle_C_Update_Subheading::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Subheading, K2Node_Select_Default) == 0x00001C, "Member 'ProgressiveItemStateTitle_C_Update_Subheading::K2Node_Select_Default' has a wrong offset!");

// Function ProgressiveItemStateTitle.ProgressiveItemStateTitle_C.Update Subscribed Tag
// 0x0060 (0x0060 - 0x0000)
struct ProgressiveItemStateTitle_C_Update_Subscribed_Tag final
{
public:
	bool                                          Subscribed;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0030(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0048(0x0018)()
};
static_assert(alignof(ProgressiveItemStateTitle_C_Update_Subscribed_Tag) == 0x000008, "Wrong alignment on ProgressiveItemStateTitle_C_Update_Subscribed_Tag");
static_assert(sizeof(ProgressiveItemStateTitle_C_Update_Subscribed_Tag) == 0x000060, "Wrong size on ProgressiveItemStateTitle_C_Update_Subscribed_Tag");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Subscribed_Tag, Subscribed) == 0x000000, "Member 'ProgressiveItemStateTitle_C_Update_Subscribed_Tag::Subscribed' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Subscribed_Tag, Temp_bool_Variable) == 0x000001, "Member 'ProgressiveItemStateTitle_C_Update_Subscribed_Tag::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Subscribed_Tag, Temp_text_Variable) == 0x000008, "Member 'ProgressiveItemStateTitle_C_Update_Subscribed_Tag::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Subscribed_Tag, K2Node_MakeArray_Array) == 0x000020, "Member 'ProgressiveItemStateTitle_C_Update_Subscribed_Tag::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Subscribed_Tag, CallFunc_Format_ReturnValue) == 0x000030, "Member 'ProgressiveItemStateTitle_C_Update_Subscribed_Tag::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressiveItemStateTitle_C_Update_Subscribed_Tag, K2Node_Select_Default) == 0x000048, "Member 'ProgressiveItemStateTitle_C_Update_Subscribed_Tag::K2Node_Select_Default' has a wrong offset!");

}

