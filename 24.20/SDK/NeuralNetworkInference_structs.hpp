#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NeuralNetworkInference

#include "Basic.hpp"


namespace SDK
{

// Enum NeuralNetworkInference.ENeuralDataType
// NumValues: 0x0007
enum class ENeuralDataType : uint8
{
	Float                                    = 0,
	Int32                                    = 1,
	Int64                                    = 2,
	UInt32                                   = 3,
	UInt64                                   = 4,
	None                                     = 5,
	ENeuralDataType_MAX                      = 6,
};

// Enum NeuralNetworkInference.ENeuralDeviceType
// NumValues: 0x0003
enum class ENeuralDeviceType : uint8
{
	CPU                                      = 0,
	GPU                                      = 1,
	ENeuralDeviceType_MAX                    = 2,
};

// Enum NeuralNetworkInference.ENeuralSynchronousMode
// NumValues: 0x0003
enum class ENeuralSynchronousMode : uint8
{
	Synchronous                              = 0,
	Asynchronous                             = 1,
	ENeuralSynchronousMode_MAX               = 2,
};

// Enum NeuralNetworkInference.ENeuralTensorType
// NumValues: 0x0007
enum class ENeuralTensorType : uint8
{
	Generic                                  = 0,
	Input                                    = 1,
	IntermediateNotInitialized               = 2,
	IntermediateInitialized                  = 3,
	Output                                   = 4,
	Weight                                   = 5,
	ENeuralTensorType_MAX                    = 6,
};

// Enum NeuralNetworkInference.ENeuralThreadMode
// NumValues: 0x0003
enum class ENeuralThreadMode : uint8
{
	GameThread                               = 0,
	AnyThread                                = 1,
	ENeuralThreadMode_MAX                    = 2,
};

// ScriptStruct NeuralNetworkInference.NeuralTensor
// 0x0080 (0x0080 - 0x0000)
struct FNeuralTensor final
{
public:
	ENeuralDataType                               DataType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int64>                                 Sizes;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	int64                                         Volume;                                            // 0x0018(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 Name;                                              // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENeuralTensorType                             TensorType;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 UnderlyingUInt8ArrayData;                          // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bEnableGPU;                                        // 0x0048(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49[0x37];                                      // 0x0049(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNeuralTensor) == 0x000008, "Wrong alignment on FNeuralTensor");
static_assert(sizeof(FNeuralTensor) == 0x000080, "Wrong size on FNeuralTensor");
static_assert(offsetof(FNeuralTensor, DataType) == 0x000000, "Member 'FNeuralTensor::DataType' has a wrong offset!");
static_assert(offsetof(FNeuralTensor, Sizes) == 0x000008, "Member 'FNeuralTensor::Sizes' has a wrong offset!");
static_assert(offsetof(FNeuralTensor, Volume) == 0x000018, "Member 'FNeuralTensor::Volume' has a wrong offset!");
static_assert(offsetof(FNeuralTensor, Name) == 0x000020, "Member 'FNeuralTensor::Name' has a wrong offset!");
static_assert(offsetof(FNeuralTensor, TensorType) == 0x000030, "Member 'FNeuralTensor::TensorType' has a wrong offset!");
static_assert(offsetof(FNeuralTensor, UnderlyingUInt8ArrayData) == 0x000038, "Member 'FNeuralTensor::UnderlyingUInt8ArrayData' has a wrong offset!");
static_assert(offsetof(FNeuralTensor, bEnableGPU) == 0x000048, "Member 'FNeuralTensor::bEnableGPU' has a wrong offset!");

}

