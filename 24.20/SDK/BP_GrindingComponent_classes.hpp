#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GrindingComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GrindRailRuntime_structs.hpp"
#include "GrindRailRuntime_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GrindingComponent.BP_GrindingComponent_C
// 0x0480 (0x10D0 - 0x0C50)
class UBP_GrindingComponent_C final : public UFortPawnComponent_GrindRail
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0C50(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class APlayerPawn_Athena_C*                   Player;                                            // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            MovementComponent;                                 // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Grinding;                                          // 0x0C68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C69[0x3];                                      // 0x0C69(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delta_Seconds;                                     // 0x0C6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTacticalSprintEnergyComponent_C*       SprintComponent;                                   // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Sprint;                                         // 0x0C78(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C7C[0x4];                                      // 0x0C7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 PlayerMesh;                                        // 0x0C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CurrentlyADS;                                      // 0x0C88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C89[0x7];                                      // 0x0C89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        _new__CurrentSidewaysLeanBoostAmount;              // 0x0C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _new__GoalSidewaysLeanBoostAmount;                 // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentMaxSpeed;                                   // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitObstacle;                                       // 0x0CA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AnimLayerActive;                                   // 0x0CA9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Turning;                                           // 0x0CAA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CAB[0x5];                                      // 0x0CAB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TurningAlpha;                                      // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TurningDirection;                                  // 0x0CB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastRailSwitchTime;                                // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              JumpedOff;                                         // 0x0CC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABGA_GrindRail_C*                       CurrentRail;                                       // 0x0CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MaximumAngleForSideJump;                           // 0x0CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SideJump_NumberOfNewLocationsToTry;                // 0x0CE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CEC[0x4];                                      // 0x0CEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SideJump_MinSpeedPercentToMaintain;                // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SideJump_MaxSpeedWithoutAnchor;                    // 0x0CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DrawAnchorDebug;                                   // 0x0D00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D01[0x7];                                      // 0x0D01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SF_SpeedHardCap;                                   // 0x0D08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SF_SprintingMaxSpeed;                              // 0x0D10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SF_BoosterMaxSpeed;                                // 0x0D14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SF_ShootingMaxSpeedMultiplier;                     // 0x0D18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SF_BaseMaxSpeed;                                   // 0x0D1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SF_IncreasedMaxSpeedFromLeaningIntoTurn;           // 0x0D20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D24[0x4];                                      // 0x0D24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SF_SpeedForMinBaseAcceleration;                    // 0x0D28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_SpeedForMaxBaseAcceleration;                    // 0x0D30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_MinBaseAcceleration;                            // 0x0D38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_MaxBaseAcceleration;                            // 0x0D40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_BaseGoalSpeed;                                  // 0x0D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_MaxDragForSpeedSoftCap;                         // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_GravityForceWhenGoingUp;                        // 0x0D58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_GravityForceWhenGoingDown;                      // 0x0D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_MinLeanAcceleration;                            // 0x0D68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_MaxLeanAcceleration;                            // 0x0D70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABuildingActor*>                 RailsIgnoredForMoving;                             // 0x0D78(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        SF_SpeedThresholdForTurn;                          // 0x0D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_TimeToTurnAround;                               // 0x0D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_SpeedForMaxLeanAcceleration;                    // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_SpeedForMinLeanAcceleration;                    // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_SprintingAcceleration;                          // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_Boosters_AccelerationOnSpeedUpBooster;          // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_Boosters_SprintingAccelerationWhenOnSlowDownBooster; // 0x0DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_Boosters_SlowDownBoostersDragMultiplier;        // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_Boosters_SlowDownBoosterGoalSpeed;              // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SF_AccelerateByLeaningIntoTurns;                   // 0x0DD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD1[0x7];                                      // 0x0DD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SF_LeanIntoTurnsMaxAcceleration;                   // 0x0DD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_CurvatureForMaxLeanIntoTurnsAcceleration;       // 0x0DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_MinSpeedAfterBouncedOffRailCap;                 // 0x0DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_SpeedMultiplierOnHitRailCap;                    // 0x0DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         SF_Sprinting_EnergyToUsePerSecond;                 // 0x0DF8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_MinStartSpeed;                                  // 0x0E20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_MaxStartSpeed;                                  // 0x0E48(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_LandingSpeedBoost;                              // 0x0E70(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_SameRailAnchoring_MaxForwardDistanceMultiplier; // 0x0E98(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_SameRailAnchoring_MaxAngle;                     // 0x0EC0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_InfluenceOfMomentumOnAnchorJump;                // 0x0EE8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_NoAnchorJumpDistanceMultiplier;                 // 0x0F10(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_MinJumpOffSpeed;                                // 0x0F38(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_JumpHeight;                                     // 0x0F60(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_JumpDistanceMultiplier;                         // 0x0F88(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_SpeedMultiplierWhenImpactedPlayer;              // 0x0FB0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        SF_AngleForMaxSpeedIncreaseFromDownwardSlope;      // 0x0FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_MaxSpeedIncreaseFromDownwardSlope;              // 0x0FE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SF_SideJump_HorizontalAngleMultiplier;             // 0x0FE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SF_JumpModifierFromAccelerationVec;                // 0x0FEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_MaxDistanceFromJumpGoalForSameRailAnchoring;    // 0x0FF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SF_HorizontalRailJumpHeight;                       // 0x0FF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _new__SF_SidewaysLeanBoostReductionRate;           // 0x1000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _New__SF_BaseGoalDecelerationSpeed;                // 0x1008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _New__SF_FrictionWhenNotLeaning;                   // 0x1010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        JumpOnAudio;                                       // 0x1018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackComponent*                ForceFeedback_Sprinting;                           // 0x1020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        LastJumpedTime;                                    // 0x1028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGrindRailBoosterMode                         _new__PreviousBoosterMode;                         // 0x1030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _new__GenerallyAccelerating;                       // 0x1031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1032[0x2];                                     // 0x1032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_GenerallyAccelerating;                          // 0x1034(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  BeginGrindBlockTags;                               // 0x1038(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                CameraLocationOnStartedGrinding;                   // 0x1058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortGrindRail*                         WaitingForCamera_SavedGrindRail;                   // 0x1070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitingForCamera;                                  // 0x1078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1079[0x7];                                     // 0x1079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraModifier_Grinding_C*             CameraModifier;                                    // 0x1080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          StartedGrindFromLand;                              // 0x1088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1089[0x7];                                     // 0x1089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnFeetLanded;                                      // 0x1090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FScalableFloat                         SF_MinBounceOffPlayerSpeed;                        // 0x10A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IgnoreStaticPlacedBuilding;                        // 0x10C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseNativizedGrindingIgnoreActors;                  // 0x10C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddCameraModifier();
	void AddMoveIgnoreActors();
	void ADSPressed();
	void ADSReleased();
	void AllowAnotherImpactEffect();
	void Anchor_Forward_Jump(const struct FVector& Planned_Velocity_Without_Jump, const struct FVector& AnchoredJumpDir, struct FVector* NewVelocity, bool* Anchored);
	void AnchorJump(struct FVector* New_Velocity, bool* Anchored);
	void CacheGrindRailActor();
	void CalculateVelocity(const float DeltaTime, const bool bReplayingMovement, struct FVector* OutVelocity);
	bool Can_Begin_Grinding_From_Land();
	bool CanBeginGrinding();
	void Change_Sprint_State(bool New);
	void CheckForTryingToJumpStraight(const struct FVector& PotentialAnchorPoint, const struct FVector& JumpTravelVector, bool* CancelAnchor);
	void ClearMoveIgnoreActors();
	void Dismount();
	void EndGrindingBP();
	void ExecuteUbergraph_BP_GrindingComponent(int32 EntryPoint);
	void Get_Rail_Jump_To_Location_Horizontal(class ABGA_GrindRail_C* InputPin, double VelMagnitude, const struct FVector& TriggerLocation, const struct FVector& DirectionToCheckAgainst, bool* Valid_Angle, struct FVector* Location, double* DistanceOnNewRail, double* TheDirectionSign);
	struct FVector GetLeanVectorInWorldSpace();
	void Handle_Player_Landed(const struct FHitResult& Hit);
	void HandleBoosterModeChanged(EGrindRailBoosterMode PreviousBoosterMode);
	void HandleGrindFinishedAfterJumping();
	void HandleGrindingBegun();
	void HandleGrindingEnded();
	void HandleGrindingEndedFromReplication();
	void HandleHitWhenGrinding(const struct FHitResult& Hit);
	void HandleJumpOffEnd();
	void HandleRailJump();
	void HandleSprintingStateChanged(bool bNewIsSprinting);
	bool IsOnSlowDownBooster();
	void Jumpoff(const struct FVector& JumpVelocity);
	void JumpOffEnd();
	void LinkAnimLayer();
	void OnBaseMeshReady(class AFortPlayerPawn* Pawn, class USkeletalMeshComponent* MeshComponent);
	void OnEnergyCompletelyDrained(class UFortComponent_Energy* EnergyComponent);
	void OnFeetLand();
	void PlayJumpOnSound(bool PlayAudio);
	void Rail_Jump();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RemoveCameraModifier();
	void SprintPressed();
	void SprintReleased();
	void StartedFastBoosting();
	void StartedSlowBoosting();
	void StoppedFastBoosting();
	void StoppedSlowBoosting();
	void StopSprinting();
	void WentDBNO();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GrindingComponent_C">();
	}
	static class UBP_GrindingComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GrindingComponent_C>();
	}
};
static_assert(alignof(UBP_GrindingComponent_C) == 0x000008, "Wrong alignment on UBP_GrindingComponent_C");
static_assert(sizeof(UBP_GrindingComponent_C) == 0x0010D0, "Wrong size on UBP_GrindingComponent_C");
static_assert(offsetof(UBP_GrindingComponent_C, UberGraphFrame) == 0x000C50, "Member 'UBP_GrindingComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, Player) == 0x000C58, "Member 'UBP_GrindingComponent_C::Player' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, MovementComponent) == 0x000C60, "Member 'UBP_GrindingComponent_C::MovementComponent' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, Grinding) == 0x000C68, "Member 'UBP_GrindingComponent_C::Grinding' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, Delta_Seconds) == 0x000C6C, "Member 'UBP_GrindingComponent_C::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SprintComponent) == 0x000C70, "Member 'UBP_GrindingComponent_C::SprintComponent' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, GC_Sprint) == 0x000C78, "Member 'UBP_GrindingComponent_C::GC_Sprint' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, PlayerMesh) == 0x000C80, "Member 'UBP_GrindingComponent_C::PlayerMesh' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, CurrentlyADS) == 0x000C88, "Member 'UBP_GrindingComponent_C::CurrentlyADS' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, _new__CurrentSidewaysLeanBoostAmount) == 0x000C90, "Member 'UBP_GrindingComponent_C::_new__CurrentSidewaysLeanBoostAmount' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, _new__GoalSidewaysLeanBoostAmount) == 0x000C98, "Member 'UBP_GrindingComponent_C::_new__GoalSidewaysLeanBoostAmount' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, CurrentMaxSpeed) == 0x000CA0, "Member 'UBP_GrindingComponent_C::CurrentMaxSpeed' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, HitObstacle) == 0x000CA8, "Member 'UBP_GrindingComponent_C::HitObstacle' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, AnimLayerActive) == 0x000CA9, "Member 'UBP_GrindingComponent_C::AnimLayerActive' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, Turning) == 0x000CAA, "Member 'UBP_GrindingComponent_C::Turning' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, TurningAlpha) == 0x000CB0, "Member 'UBP_GrindingComponent_C::TurningAlpha' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, TurningDirection) == 0x000CB8, "Member 'UBP_GrindingComponent_C::TurningDirection' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, LastRailSwitchTime) == 0x000CC0, "Member 'UBP_GrindingComponent_C::LastRailSwitchTime' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, JumpedOff) == 0x000CC8, "Member 'UBP_GrindingComponent_C::JumpedOff' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, CurrentRail) == 0x000CD8, "Member 'UBP_GrindingComponent_C::CurrentRail' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, MaximumAngleForSideJump) == 0x000CE0, "Member 'UBP_GrindingComponent_C::MaximumAngleForSideJump' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SideJump_NumberOfNewLocationsToTry) == 0x000CE8, "Member 'UBP_GrindingComponent_C::SideJump_NumberOfNewLocationsToTry' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SideJump_MinSpeedPercentToMaintain) == 0x000CF0, "Member 'UBP_GrindingComponent_C::SideJump_MinSpeedPercentToMaintain' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SideJump_MaxSpeedWithoutAnchor) == 0x000CF8, "Member 'UBP_GrindingComponent_C::SideJump_MaxSpeedWithoutAnchor' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, DrawAnchorDebug) == 0x000D00, "Member 'UBP_GrindingComponent_C::DrawAnchorDebug' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_SpeedHardCap) == 0x000D08, "Member 'UBP_GrindingComponent_C::SF_SpeedHardCap' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_SprintingMaxSpeed) == 0x000D10, "Member 'UBP_GrindingComponent_C::SF_SprintingMaxSpeed' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_BoosterMaxSpeed) == 0x000D14, "Member 'UBP_GrindingComponent_C::SF_BoosterMaxSpeed' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_ShootingMaxSpeedMultiplier) == 0x000D18, "Member 'UBP_GrindingComponent_C::SF_ShootingMaxSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_BaseMaxSpeed) == 0x000D1C, "Member 'UBP_GrindingComponent_C::SF_BaseMaxSpeed' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_IncreasedMaxSpeedFromLeaningIntoTurn) == 0x000D20, "Member 'UBP_GrindingComponent_C::SF_IncreasedMaxSpeedFromLeaningIntoTurn' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_SpeedForMinBaseAcceleration) == 0x000D28, "Member 'UBP_GrindingComponent_C::SF_SpeedForMinBaseAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_SpeedForMaxBaseAcceleration) == 0x000D30, "Member 'UBP_GrindingComponent_C::SF_SpeedForMaxBaseAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_MinBaseAcceleration) == 0x000D38, "Member 'UBP_GrindingComponent_C::SF_MinBaseAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_MaxBaseAcceleration) == 0x000D40, "Member 'UBP_GrindingComponent_C::SF_MaxBaseAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_BaseGoalSpeed) == 0x000D48, "Member 'UBP_GrindingComponent_C::SF_BaseGoalSpeed' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_MaxDragForSpeedSoftCap) == 0x000D50, "Member 'UBP_GrindingComponent_C::SF_MaxDragForSpeedSoftCap' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_GravityForceWhenGoingUp) == 0x000D58, "Member 'UBP_GrindingComponent_C::SF_GravityForceWhenGoingUp' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_GravityForceWhenGoingDown) == 0x000D60, "Member 'UBP_GrindingComponent_C::SF_GravityForceWhenGoingDown' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_MinLeanAcceleration) == 0x000D68, "Member 'UBP_GrindingComponent_C::SF_MinLeanAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_MaxLeanAcceleration) == 0x000D70, "Member 'UBP_GrindingComponent_C::SF_MaxLeanAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, RailsIgnoredForMoving) == 0x000D78, "Member 'UBP_GrindingComponent_C::RailsIgnoredForMoving' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_SpeedThresholdForTurn) == 0x000D88, "Member 'UBP_GrindingComponent_C::SF_SpeedThresholdForTurn' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_TimeToTurnAround) == 0x000D90, "Member 'UBP_GrindingComponent_C::SF_TimeToTurnAround' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_SpeedForMaxLeanAcceleration) == 0x000D98, "Member 'UBP_GrindingComponent_C::SF_SpeedForMaxLeanAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_SpeedForMinLeanAcceleration) == 0x000DA0, "Member 'UBP_GrindingComponent_C::SF_SpeedForMinLeanAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_SprintingAcceleration) == 0x000DA8, "Member 'UBP_GrindingComponent_C::SF_SprintingAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_Boosters_AccelerationOnSpeedUpBooster) == 0x000DB0, "Member 'UBP_GrindingComponent_C::SF_Boosters_AccelerationOnSpeedUpBooster' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_Boosters_SprintingAccelerationWhenOnSlowDownBooster) == 0x000DB8, "Member 'UBP_GrindingComponent_C::SF_Boosters_SprintingAccelerationWhenOnSlowDownBooster' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_Boosters_SlowDownBoostersDragMultiplier) == 0x000DC0, "Member 'UBP_GrindingComponent_C::SF_Boosters_SlowDownBoostersDragMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_Boosters_SlowDownBoosterGoalSpeed) == 0x000DC8, "Member 'UBP_GrindingComponent_C::SF_Boosters_SlowDownBoosterGoalSpeed' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_AccelerateByLeaningIntoTurns) == 0x000DD0, "Member 'UBP_GrindingComponent_C::SF_AccelerateByLeaningIntoTurns' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_LeanIntoTurnsMaxAcceleration) == 0x000DD8, "Member 'UBP_GrindingComponent_C::SF_LeanIntoTurnsMaxAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_CurvatureForMaxLeanIntoTurnsAcceleration) == 0x000DE0, "Member 'UBP_GrindingComponent_C::SF_CurvatureForMaxLeanIntoTurnsAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_MinSpeedAfterBouncedOffRailCap) == 0x000DE8, "Member 'UBP_GrindingComponent_C::SF_MinSpeedAfterBouncedOffRailCap' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_SpeedMultiplierOnHitRailCap) == 0x000DF0, "Member 'UBP_GrindingComponent_C::SF_SpeedMultiplierOnHitRailCap' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_Sprinting_EnergyToUsePerSecond) == 0x000DF8, "Member 'UBP_GrindingComponent_C::SF_Sprinting_EnergyToUsePerSecond' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_MinStartSpeed) == 0x000E20, "Member 'UBP_GrindingComponent_C::SF_MinStartSpeed' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_MaxStartSpeed) == 0x000E48, "Member 'UBP_GrindingComponent_C::SF_MaxStartSpeed' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_LandingSpeedBoost) == 0x000E70, "Member 'UBP_GrindingComponent_C::SF_LandingSpeedBoost' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_SameRailAnchoring_MaxForwardDistanceMultiplier) == 0x000E98, "Member 'UBP_GrindingComponent_C::SF_SameRailAnchoring_MaxForwardDistanceMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_SameRailAnchoring_MaxAngle) == 0x000EC0, "Member 'UBP_GrindingComponent_C::SF_SameRailAnchoring_MaxAngle' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_InfluenceOfMomentumOnAnchorJump) == 0x000EE8, "Member 'UBP_GrindingComponent_C::SF_InfluenceOfMomentumOnAnchorJump' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_NoAnchorJumpDistanceMultiplier) == 0x000F10, "Member 'UBP_GrindingComponent_C::SF_NoAnchorJumpDistanceMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_MinJumpOffSpeed) == 0x000F38, "Member 'UBP_GrindingComponent_C::SF_MinJumpOffSpeed' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_JumpHeight) == 0x000F60, "Member 'UBP_GrindingComponent_C::SF_JumpHeight' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_JumpDistanceMultiplier) == 0x000F88, "Member 'UBP_GrindingComponent_C::SF_JumpDistanceMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_SpeedMultiplierWhenImpactedPlayer) == 0x000FB0, "Member 'UBP_GrindingComponent_C::SF_SpeedMultiplierWhenImpactedPlayer' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_AngleForMaxSpeedIncreaseFromDownwardSlope) == 0x000FD8, "Member 'UBP_GrindingComponent_C::SF_AngleForMaxSpeedIncreaseFromDownwardSlope' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_MaxSpeedIncreaseFromDownwardSlope) == 0x000FE0, "Member 'UBP_GrindingComponent_C::SF_MaxSpeedIncreaseFromDownwardSlope' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_SideJump_HorizontalAngleMultiplier) == 0x000FE8, "Member 'UBP_GrindingComponent_C::SF_SideJump_HorizontalAngleMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_JumpModifierFromAccelerationVec) == 0x000FEC, "Member 'UBP_GrindingComponent_C::SF_JumpModifierFromAccelerationVec' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_MaxDistanceFromJumpGoalForSameRailAnchoring) == 0x000FF0, "Member 'UBP_GrindingComponent_C::SF_MaxDistanceFromJumpGoalForSameRailAnchoring' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_HorizontalRailJumpHeight) == 0x000FF8, "Member 'UBP_GrindingComponent_C::SF_HorizontalRailJumpHeight' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, _new__SF_SidewaysLeanBoostReductionRate) == 0x001000, "Member 'UBP_GrindingComponent_C::_new__SF_SidewaysLeanBoostReductionRate' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, _New__SF_BaseGoalDecelerationSpeed) == 0x001008, "Member 'UBP_GrindingComponent_C::_New__SF_BaseGoalDecelerationSpeed' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, _New__SF_FrictionWhenNotLeaning) == 0x001010, "Member 'UBP_GrindingComponent_C::_New__SF_FrictionWhenNotLeaning' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, JumpOnAudio) == 0x001018, "Member 'UBP_GrindingComponent_C::JumpOnAudio' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, ForceFeedback_Sprinting) == 0x001020, "Member 'UBP_GrindingComponent_C::ForceFeedback_Sprinting' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, LastJumpedTime) == 0x001028, "Member 'UBP_GrindingComponent_C::LastJumpedTime' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, _new__PreviousBoosterMode) == 0x001030, "Member 'UBP_GrindingComponent_C::_new__PreviousBoosterMode' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, _new__GenerallyAccelerating) == 0x001031, "Member 'UBP_GrindingComponent_C::_new__GenerallyAccelerating' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, GC_GenerallyAccelerating) == 0x001034, "Member 'UBP_GrindingComponent_C::GC_GenerallyAccelerating' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, BeginGrindBlockTags) == 0x001038, "Member 'UBP_GrindingComponent_C::BeginGrindBlockTags' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, CameraLocationOnStartedGrinding) == 0x001058, "Member 'UBP_GrindingComponent_C::CameraLocationOnStartedGrinding' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, WaitingForCamera_SavedGrindRail) == 0x001070, "Member 'UBP_GrindingComponent_C::WaitingForCamera_SavedGrindRail' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, WaitingForCamera) == 0x001078, "Member 'UBP_GrindingComponent_C::WaitingForCamera' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, CameraModifier) == 0x001080, "Member 'UBP_GrindingComponent_C::CameraModifier' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, StartedGrindFromLand) == 0x001088, "Member 'UBP_GrindingComponent_C::StartedGrindFromLand' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, OnFeetLanded) == 0x001090, "Member 'UBP_GrindingComponent_C::OnFeetLanded' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, SF_MinBounceOffPlayerSpeed) == 0x0010A0, "Member 'UBP_GrindingComponent_C::SF_MinBounceOffPlayerSpeed' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, IgnoreStaticPlacedBuilding) == 0x0010C8, "Member 'UBP_GrindingComponent_C::IgnoreStaticPlacedBuilding' has a wrong offset!");
static_assert(offsetof(UBP_GrindingComponent_C, UseNativizedGrindingIgnoreActors) == 0x0010C9, "Member 'UBP_GrindingComponent_C::UseNativizedGrindingIgnoreActors' has a wrong offset!");

}

