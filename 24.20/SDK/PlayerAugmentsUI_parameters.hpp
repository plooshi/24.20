#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerAugmentsUI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CommonInput_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function PlayerAugmentsUI.FortPlayerAugmentInventoryInfoWidget.OnItemNewOrBorrowedSet
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerAugmentInventoryInfoWidget_OnItemNewOrBorrowedSet final
{
public:
	bool                                          bIsNew;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBorrowed;                                       // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentInventoryInfoWidget_OnItemNewOrBorrowedSet) == 0x000001, "Wrong alignment on FortPlayerAugmentInventoryInfoWidget_OnItemNewOrBorrowedSet");
static_assert(sizeof(FortPlayerAugmentInventoryInfoWidget_OnItemNewOrBorrowedSet) == 0x000002, "Wrong size on FortPlayerAugmentInventoryInfoWidget_OnItemNewOrBorrowedSet");
static_assert(offsetof(FortPlayerAugmentInventoryInfoWidget_OnItemNewOrBorrowedSet, bIsNew) == 0x000000, "Member 'FortPlayerAugmentInventoryInfoWidget_OnItemNewOrBorrowedSet::bIsNew' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentInventoryInfoWidget_OnItemNewOrBorrowedSet, bIsBorrowed) == 0x000001, "Member 'FortPlayerAugmentInventoryInfoWidget_OnItemNewOrBorrowedSet::bIsBorrowed' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentInventoryInfoWidget.OnItemRaritySet
// 0x0088 (0x0088 - 0x0000)
struct FortPlayerAugmentInventoryInfoWidget_OnItemRaritySet final
{
public:
	EFortRarity                                   Rarity;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortRarityItemData                    RarityItemData;                                    // 0x0008(0x0080)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentInventoryInfoWidget_OnItemRaritySet) == 0x000008, "Wrong alignment on FortPlayerAugmentInventoryInfoWidget_OnItemRaritySet");
static_assert(sizeof(FortPlayerAugmentInventoryInfoWidget_OnItemRaritySet) == 0x000088, "Wrong size on FortPlayerAugmentInventoryInfoWidget_OnItemRaritySet");
static_assert(offsetof(FortPlayerAugmentInventoryInfoWidget_OnItemRaritySet, Rarity) == 0x000000, "Member 'FortPlayerAugmentInventoryInfoWidget_OnItemRaritySet::Rarity' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentInventoryInfoWidget_OnItemRaritySet, RarityItemData) == 0x000008, "Member 'FortPlayerAugmentInventoryInfoWidget_OnItemRaritySet::RarityItemData' has a wrong offset!");

// Function PlayerAugmentsUI.FortMobileButtonBehaviorComponent_AugmentsListIconPicker.OnAugmentToolViewSwap
// 0x0001 (0x0001 - 0x0000)
struct FortMobileButtonBehaviorComponent_AugmentsListIconPicker_OnAugmentToolViewSwap final
{
public:
	bool                                          bIsInInventoryView;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMobileButtonBehaviorComponent_AugmentsListIconPicker_OnAugmentToolViewSwap) == 0x000001, "Wrong alignment on FortMobileButtonBehaviorComponent_AugmentsListIconPicker_OnAugmentToolViewSwap");
static_assert(sizeof(FortMobileButtonBehaviorComponent_AugmentsListIconPicker_OnAugmentToolViewSwap) == 0x000001, "Wrong size on FortMobileButtonBehaviorComponent_AugmentsListIconPicker_OnAugmentToolViewSwap");
static_assert(offsetof(FortMobileButtonBehaviorComponent_AugmentsListIconPicker_OnAugmentToolViewSwap, bIsInInventoryView) == 0x000000, "Member 'FortMobileButtonBehaviorComponent_AugmentsListIconPicker_OnAugmentToolViewSwap::bIsInInventoryView' has a wrong offset!");

// Function PlayerAugmentsUI.FortMobileButtonBehaviorComponent_AugmentsListVisibility.HandleAugmentToolOpenedStatusChanged
// 0x0002 (0x0002 - 0x0000)
struct FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolOpenedStatusChanged final
{
public:
	bool                                          bIsOpened;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsInventoryView;                                // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolOpenedStatusChanged) == 0x000001, "Wrong alignment on FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolOpenedStatusChanged");
static_assert(sizeof(FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolOpenedStatusChanged) == 0x000002, "Wrong size on FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolOpenedStatusChanged");
static_assert(offsetof(FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolOpenedStatusChanged, bIsOpened) == 0x000000, "Member 'FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolOpenedStatusChanged::bIsOpened' has a wrong offset!");
static_assert(offsetof(FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolOpenedStatusChanged, bInIsInventoryView) == 0x000001, "Member 'FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolOpenedStatusChanged::bInIsInventoryView' has a wrong offset!");

// Function PlayerAugmentsUI.FortMobileButtonBehaviorComponent_AugmentsListVisibility.HandleAugmentToolViewSwap
// 0x0001 (0x0001 - 0x0000)
struct FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolViewSwap final
{
public:
	bool                                          bInIsInventoryView;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolViewSwap) == 0x000001, "Wrong alignment on FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolViewSwap");
static_assert(sizeof(FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolViewSwap) == 0x000001, "Wrong size on FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolViewSwap");
static_assert(offsetof(FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolViewSwap, bInIsInventoryView) == 0x000000, "Member 'FortMobileButtonBehaviorComponent_AugmentsListVisibility_HandleAugmentToolViewSwap::bInIsInventoryView' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentSpecialAcquiredNotificationWidget.OpenWidget
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentSpecialAcquiredNotificationWidget_OpenWidget final
{
public:
	const class UFortPlayerAugmentItemDefinition* ItemDef;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentSpecialAcquiredNotificationWidget_OpenWidget) == 0x000008, "Wrong alignment on FortPlayerAugmentSpecialAcquiredNotificationWidget_OpenWidget");
static_assert(sizeof(FortPlayerAugmentSpecialAcquiredNotificationWidget_OpenWidget) == 0x000008, "Wrong size on FortPlayerAugmentSpecialAcquiredNotificationWidget_OpenWidget");
static_assert(offsetof(FortPlayerAugmentSpecialAcquiredNotificationWidget_OpenWidget, ItemDef) == 0x000000, "Member 'FortPlayerAugmentSpecialAcquiredNotificationWidget_OpenWidget::ItemDef' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentSpecialAcquiredNotificationWidget.ConstructEventDescription
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerAugmentSpecialAcquiredNotificationWidget_ConstructEventDescription final
{
public:
	const class UFortPlayerAugmentItemDefinition* ItemDef;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentSpecialAcquiredNotificationWidget_ConstructEventDescription) == 0x000008, "Wrong alignment on FortPlayerAugmentSpecialAcquiredNotificationWidget_ConstructEventDescription");
static_assert(sizeof(FortPlayerAugmentSpecialAcquiredNotificationWidget_ConstructEventDescription) == 0x000020, "Wrong size on FortPlayerAugmentSpecialAcquiredNotificationWidget_ConstructEventDescription");
static_assert(offsetof(FortPlayerAugmentSpecialAcquiredNotificationWidget_ConstructEventDescription, ItemDef) == 0x000000, "Member 'FortPlayerAugmentSpecialAcquiredNotificationWidget_ConstructEventDescription::ItemDef' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentSpecialAcquiredNotificationWidget_ConstructEventDescription, ReturnValue) == 0x000008, "Member 'FortPlayerAugmentSpecialAcquiredNotificationWidget_ConstructEventDescription::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentSpecialAcquiredNotificationWidget.HasMoreAugmentEvents
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerAugmentSpecialAcquiredNotificationWidget_HasMoreAugmentEvents final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentSpecialAcquiredNotificationWidget_HasMoreAugmentEvents) == 0x000001, "Wrong alignment on FortPlayerAugmentSpecialAcquiredNotificationWidget_HasMoreAugmentEvents");
static_assert(sizeof(FortPlayerAugmentSpecialAcquiredNotificationWidget_HasMoreAugmentEvents) == 0x000001, "Wrong size on FortPlayerAugmentSpecialAcquiredNotificationWidget_HasMoreAugmentEvents");
static_assert(offsetof(FortPlayerAugmentSpecialAcquiredNotificationWidget_HasMoreAugmentEvents, ReturnValue) == 0x000000, "Member 'FortPlayerAugmentSpecialAcquiredNotificationWidget_HasMoreAugmentEvents::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsUI.FortMobilePlayerAugmentTimer.HandleAugmentSelectionMenuOpenedStatusChanged
// 0x0002 (0x0002 - 0x0000)
struct FortMobilePlayerAugmentTimer_HandleAugmentSelectionMenuOpenedStatusChanged final
{
public:
	bool                                          bIsOpened;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsInventoryView;                                // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMobilePlayerAugmentTimer_HandleAugmentSelectionMenuOpenedStatusChanged) == 0x000001, "Wrong alignment on FortMobilePlayerAugmentTimer_HandleAugmentSelectionMenuOpenedStatusChanged");
static_assert(sizeof(FortMobilePlayerAugmentTimer_HandleAugmentSelectionMenuOpenedStatusChanged) == 0x000002, "Wrong size on FortMobilePlayerAugmentTimer_HandleAugmentSelectionMenuOpenedStatusChanged");
static_assert(offsetof(FortMobilePlayerAugmentTimer_HandleAugmentSelectionMenuOpenedStatusChanged, bIsOpened) == 0x000000, "Member 'FortMobilePlayerAugmentTimer_HandleAugmentSelectionMenuOpenedStatusChanged::bIsOpened' has a wrong offset!");
static_assert(offsetof(FortMobilePlayerAugmentTimer_HandleAugmentSelectionMenuOpenedStatusChanged, bInIsInventoryView) == 0x000001, "Member 'FortMobilePlayerAugmentTimer_HandleAugmentSelectionMenuOpenedStatusChanged::bInIsInventoryView' has a wrong offset!");

// Function PlayerAugmentsUI.FortMobilePlayerAugmentTimer.HandlePlayerLandedAfterSkydive
// 0x0008 (0x0008 - 0x0000)
struct FortMobilePlayerAugmentTimer_HandlePlayerLandedAfterSkydive final
{
public:
	class AFortPlayerControllerZone*              FortPCZone;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMobilePlayerAugmentTimer_HandlePlayerLandedAfterSkydive) == 0x000008, "Wrong alignment on FortMobilePlayerAugmentTimer_HandlePlayerLandedAfterSkydive");
static_assert(sizeof(FortMobilePlayerAugmentTimer_HandlePlayerLandedAfterSkydive) == 0x000008, "Wrong size on FortMobilePlayerAugmentTimer_HandlePlayerLandedAfterSkydive");
static_assert(offsetof(FortMobilePlayerAugmentTimer_HandlePlayerLandedAfterSkydive, FortPCZone) == 0x000000, "Member 'FortMobilePlayerAugmentTimer_HandlePlayerLandedAfterSkydive::FortPCZone' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.HandleAugmentHighlighted
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAugmentGranterWidget_HandleAugmentHighlighted final
{
public:
	int32                                         HighlightedAugmentIndex;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_HandleAugmentHighlighted) == 0x000004, "Wrong alignment on FortPlayerAugmentGranterWidget_HandleAugmentHighlighted");
static_assert(sizeof(FortPlayerAugmentGranterWidget_HandleAugmentHighlighted) == 0x000004, "Wrong size on FortPlayerAugmentGranterWidget_HandleAugmentHighlighted");
static_assert(offsetof(FortPlayerAugmentGranterWidget_HandleAugmentHighlighted, HighlightedAugmentIndex) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_HandleAugmentHighlighted::HighlightedAugmentIndex' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.HandleAugmentSelectionStarted
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAugmentGranterWidget_HandleAugmentSelectionStarted final
{
public:
	int32                                         SelectedAugmentIndex;                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_HandleAugmentSelectionStarted) == 0x000004, "Wrong alignment on FortPlayerAugmentGranterWidget_HandleAugmentSelectionStarted");
static_assert(sizeof(FortPlayerAugmentGranterWidget_HandleAugmentSelectionStarted) == 0x000004, "Wrong size on FortPlayerAugmentGranterWidget_HandleAugmentSelectionStarted");
static_assert(offsetof(FortPlayerAugmentGranterWidget_HandleAugmentSelectionStarted, SelectedAugmentIndex) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_HandleAugmentSelectionStarted::SelectedAugmentIndex' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.HandleAugmentSelectorOpenedStatusChanged
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerAugmentGranterWidget_HandleAugmentSelectorOpenedStatusChanged final
{
public:
	bool                                          bIsOpened;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bViewingAugmentInventory;                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_HandleAugmentSelectorOpenedStatusChanged) == 0x000001, "Wrong alignment on FortPlayerAugmentGranterWidget_HandleAugmentSelectorOpenedStatusChanged");
static_assert(sizeof(FortPlayerAugmentGranterWidget_HandleAugmentSelectorOpenedStatusChanged) == 0x000002, "Wrong size on FortPlayerAugmentGranterWidget_HandleAugmentSelectorOpenedStatusChanged");
static_assert(offsetof(FortPlayerAugmentGranterWidget_HandleAugmentSelectorOpenedStatusChanged, bIsOpened) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_HandleAugmentSelectorOpenedStatusChanged::bIsOpened' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentGranterWidget_HandleAugmentSelectorOpenedStatusChanged, bViewingAugmentInventory) == 0x000001, "Member 'FortPlayerAugmentGranterWidget_HandleAugmentSelectorOpenedStatusChanged::bViewingAugmentInventory' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.HandleAugmentSelectorToolViewSwapped
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerAugmentGranterWidget_HandleAugmentSelectorToolViewSwapped final
{
public:
	bool                                          bViewingAugmentsInventory;                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_HandleAugmentSelectorToolViewSwapped) == 0x000001, "Wrong alignment on FortPlayerAugmentGranterWidget_HandleAugmentSelectorToolViewSwapped");
static_assert(sizeof(FortPlayerAugmentGranterWidget_HandleAugmentSelectorToolViewSwapped) == 0x000001, "Wrong size on FortPlayerAugmentGranterWidget_HandleAugmentSelectorToolViewSwapped");
static_assert(offsetof(FortPlayerAugmentGranterWidget_HandleAugmentSelectorToolViewSwapped, bViewingAugmentsInventory) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_HandleAugmentSelectorToolViewSwapped::bViewingAugmentsInventory' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.HandleAvailableAugmentsForGrantingUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentGranterWidget_HandleAvailableAugmentsForGrantingUpdated final
{
public:
	class UFortControllerComponent_AugmentGrantingSystem* GrantingComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_HandleAvailableAugmentsForGrantingUpdated) == 0x000008, "Wrong alignment on FortPlayerAugmentGranterWidget_HandleAvailableAugmentsForGrantingUpdated");
static_assert(sizeof(FortPlayerAugmentGranterWidget_HandleAvailableAugmentsForGrantingUpdated) == 0x000008, "Wrong size on FortPlayerAugmentGranterWidget_HandleAvailableAugmentsForGrantingUpdated");
static_assert(offsetof(FortPlayerAugmentGranterWidget_HandleAvailableAugmentsForGrantingUpdated, GrantingComponent) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_HandleAvailableAugmentsForGrantingUpdated::GrantingComponent' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.HandleCanSelectAugmentChanged
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerAugmentGranterWidget_HandleCanSelectAugmentChanged final
{
public:
	bool                                          bCanSelectAugment;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_HandleCanSelectAugmentChanged) == 0x000001, "Wrong alignment on FortPlayerAugmentGranterWidget_HandleCanSelectAugmentChanged");
static_assert(sizeof(FortPlayerAugmentGranterWidget_HandleCanSelectAugmentChanged) == 0x000001, "Wrong size on FortPlayerAugmentGranterWidget_HandleCanSelectAugmentChanged");
static_assert(offsetof(FortPlayerAugmentGranterWidget_HandleCanSelectAugmentChanged, bCanSelectAugment) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_HandleCanSelectAugmentChanged::bCanSelectAugment' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.HandleSelectedAugmentForGrant
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentGranterWidget_HandleSelectedAugmentForGrant final
{
public:
	class UFortPlayerAugmentItemDefinition*       SelectedAugment;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_HandleSelectedAugmentForGrant) == 0x000008, "Wrong alignment on FortPlayerAugmentGranterWidget_HandleSelectedAugmentForGrant");
static_assert(sizeof(FortPlayerAugmentGranterWidget_HandleSelectedAugmentForGrant) == 0x000008, "Wrong size on FortPlayerAugmentGranterWidget_HandleSelectedAugmentForGrant");
static_assert(offsetof(FortPlayerAugmentGranterWidget_HandleSelectedAugmentForGrant, SelectedAugment) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_HandleSelectedAugmentForGrant::SelectedAugment' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.HandleTimerUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentGranterWidget_HandleTimerUpdated final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimePercentage;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_HandleTimerUpdated) == 0x000004, "Wrong alignment on FortPlayerAugmentGranterWidget_HandleTimerUpdated");
static_assert(sizeof(FortPlayerAugmentGranterWidget_HandleTimerUpdated) == 0x000008, "Wrong size on FortPlayerAugmentGranterWidget_HandleTimerUpdated");
static_assert(offsetof(FortPlayerAugmentGranterWidget_HandleTimerUpdated, TimeRemaining) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_HandleTimerUpdated::TimeRemaining' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentGranterWidget_HandleTimerUpdated, TimePercentage) == 0x000004, "Member 'FortPlayerAugmentGranterWidget_HandleTimerUpdated::TimePercentage' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.OnAugmentHighlighted
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAugmentGranterWidget_OnAugmentHighlighted final
{
public:
	int32                                         HighlightedAugmentIndex;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_OnAugmentHighlighted) == 0x000004, "Wrong alignment on FortPlayerAugmentGranterWidget_OnAugmentHighlighted");
static_assert(sizeof(FortPlayerAugmentGranterWidget_OnAugmentHighlighted) == 0x000004, "Wrong size on FortPlayerAugmentGranterWidget_OnAugmentHighlighted");
static_assert(offsetof(FortPlayerAugmentGranterWidget_OnAugmentHighlighted, HighlightedAugmentIndex) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_OnAugmentHighlighted::HighlightedAugmentIndex' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.OnAugmentSelectionStarted
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAugmentGranterWidget_OnAugmentSelectionStarted final
{
public:
	int32                                         SelectedAugmentIndex;                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_OnAugmentSelectionStarted) == 0x000004, "Wrong alignment on FortPlayerAugmentGranterWidget_OnAugmentSelectionStarted");
static_assert(sizeof(FortPlayerAugmentGranterWidget_OnAugmentSelectionStarted) == 0x000004, "Wrong size on FortPlayerAugmentGranterWidget_OnAugmentSelectionStarted");
static_assert(offsetof(FortPlayerAugmentGranterWidget_OnAugmentSelectionStarted, SelectedAugmentIndex) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_OnAugmentSelectionStarted::SelectedAugmentIndex' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.OnAugmentSelectorOpenedStatusChanged
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerAugmentGranterWidget_OnAugmentSelectorOpenedStatusChanged final
{
public:
	bool                                          bIsOpened;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bViewingAugmentInventory;                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_OnAugmentSelectorOpenedStatusChanged) == 0x000001, "Wrong alignment on FortPlayerAugmentGranterWidget_OnAugmentSelectorOpenedStatusChanged");
static_assert(sizeof(FortPlayerAugmentGranterWidget_OnAugmentSelectorOpenedStatusChanged) == 0x000002, "Wrong size on FortPlayerAugmentGranterWidget_OnAugmentSelectorOpenedStatusChanged");
static_assert(offsetof(FortPlayerAugmentGranterWidget_OnAugmentSelectorOpenedStatusChanged, bIsOpened) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_OnAugmentSelectorOpenedStatusChanged::bIsOpened' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentGranterWidget_OnAugmentSelectorOpenedStatusChanged, bViewingAugmentInventory) == 0x000001, "Member 'FortPlayerAugmentGranterWidget_OnAugmentSelectorOpenedStatusChanged::bViewingAugmentInventory' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.OnAugmentSelectorToolViewSwapped
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerAugmentGranterWidget_OnAugmentSelectorToolViewSwapped final
{
public:
	bool                                          bViewingAugmentInventory;                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_OnAugmentSelectorToolViewSwapped) == 0x000001, "Wrong alignment on FortPlayerAugmentGranterWidget_OnAugmentSelectorToolViewSwapped");
static_assert(sizeof(FortPlayerAugmentGranterWidget_OnAugmentSelectorToolViewSwapped) == 0x000001, "Wrong size on FortPlayerAugmentGranterWidget_OnAugmentSelectorToolViewSwapped");
static_assert(offsetof(FortPlayerAugmentGranterWidget_OnAugmentSelectorToolViewSwapped, bViewingAugmentInventory) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_OnAugmentSelectorToolViewSwapped::bViewingAugmentInventory' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.OnCanSelectAugmentChanged
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerAugmentGranterWidget_OnCanSelectAugmentChanged final
{
public:
	bool                                          bCanSelectAugment;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_OnCanSelectAugmentChanged) == 0x000001, "Wrong alignment on FortPlayerAugmentGranterWidget_OnCanSelectAugmentChanged");
static_assert(sizeof(FortPlayerAugmentGranterWidget_OnCanSelectAugmentChanged) == 0x000001, "Wrong size on FortPlayerAugmentGranterWidget_OnCanSelectAugmentChanged");
static_assert(offsetof(FortPlayerAugmentGranterWidget_OnCanSelectAugmentChanged, bCanSelectAugment) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_OnCanSelectAugmentChanged::bCanSelectAugment' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.OnInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerAugmentGranterWidget_OnInputTypeChanged final
{
public:
	ECommonInputType                              NewInputType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_OnInputTypeChanged) == 0x000001, "Wrong alignment on FortPlayerAugmentGranterWidget_OnInputTypeChanged");
static_assert(sizeof(FortPlayerAugmentGranterWidget_OnInputTypeChanged) == 0x000001, "Wrong size on FortPlayerAugmentGranterWidget_OnInputTypeChanged");
static_assert(offsetof(FortPlayerAugmentGranterWidget_OnInputTypeChanged, NewInputType) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_OnInputTypeChanged::NewInputType' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.OnPopulateAvailableAugmentsHUD
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerAugmentGranterWidget_OnPopulateAvailableAugmentsHUD final
{
public:
	TArray<class UFortPlayerAugmentItemDefinition*> AugmentItemDefinition;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_OnPopulateAvailableAugmentsHUD) == 0x000008, "Wrong alignment on FortPlayerAugmentGranterWidget_OnPopulateAvailableAugmentsHUD");
static_assert(sizeof(FortPlayerAugmentGranterWidget_OnPopulateAvailableAugmentsHUD) == 0x000010, "Wrong size on FortPlayerAugmentGranterWidget_OnPopulateAvailableAugmentsHUD");
static_assert(offsetof(FortPlayerAugmentGranterWidget_OnPopulateAvailableAugmentsHUD, AugmentItemDefinition) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_OnPopulateAvailableAugmentsHUD::AugmentItemDefinition' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.OnSelectedAugmentForGrant
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentGranterWidget_OnSelectedAugmentForGrant final
{
public:
	class UFortPlayerAugmentItemDefinition*       HighlightedAugment;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_OnSelectedAugmentForGrant) == 0x000008, "Wrong alignment on FortPlayerAugmentGranterWidget_OnSelectedAugmentForGrant");
static_assert(sizeof(FortPlayerAugmentGranterWidget_OnSelectedAugmentForGrant) == 0x000008, "Wrong size on FortPlayerAugmentGranterWidget_OnSelectedAugmentForGrant");
static_assert(offsetof(FortPlayerAugmentGranterWidget_OnSelectedAugmentForGrant, HighlightedAugment) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_OnSelectedAugmentForGrant::HighlightedAugment' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.OnTimerUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentGranterWidget_OnTimerUpdated final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimePercentage;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_OnTimerUpdated) == 0x000004, "Wrong alignment on FortPlayerAugmentGranterWidget_OnTimerUpdated");
static_assert(sizeof(FortPlayerAugmentGranterWidget_OnTimerUpdated) == 0x000008, "Wrong size on FortPlayerAugmentGranterWidget_OnTimerUpdated");
static_assert(offsetof(FortPlayerAugmentGranterWidget_OnTimerUpdated, TimeRemaining) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_OnTimerUpdated::TimeRemaining' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentGranterWidget_OnTimerUpdated, TimePercentage) == 0x000004, "Member 'FortPlayerAugmentGranterWidget_OnTimerUpdated::TimePercentage' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentGranterWidget.GetPendingAugmentsToGrant
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAugmentGranterWidget_GetPendingAugmentsToGrant final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentGranterWidget_GetPendingAugmentsToGrant) == 0x000004, "Wrong alignment on FortPlayerAugmentGranterWidget_GetPendingAugmentsToGrant");
static_assert(sizeof(FortPlayerAugmentGranterWidget_GetPendingAugmentsToGrant) == 0x000004, "Wrong size on FortPlayerAugmentGranterWidget_GetPendingAugmentsToGrant");
static_assert(offsetof(FortPlayerAugmentGranterWidget_GetPendingAugmentsToGrant, ReturnValue) == 0x000000, "Member 'FortPlayerAugmentGranterWidget_GetPendingAugmentsToGrant::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDQuickbarWidget.OnAugmentsUpdated
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerAugmentHUDQuickbarWidget_OnAugmentsUpdated final
{
public:
	TArray<class UFortPlayerAugmentItemDefinition*> ActiveAugments;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDQuickbarWidget_OnAugmentsUpdated) == 0x000008, "Wrong alignment on FortPlayerAugmentHUDQuickbarWidget_OnAugmentsUpdated");
static_assert(sizeof(FortPlayerAugmentHUDQuickbarWidget_OnAugmentsUpdated) == 0x000010, "Wrong size on FortPlayerAugmentHUDQuickbarWidget_OnAugmentsUpdated");
static_assert(offsetof(FortPlayerAugmentHUDQuickbarWidget_OnAugmentsUpdated, ActiveAugments) == 0x000000, "Member 'FortPlayerAugmentHUDQuickbarWidget_OnAugmentsUpdated::ActiveAugments' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDRerollWidget.HandleFreeRerollsUpdated
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAugmentHUDRerollWidget_HandleFreeRerollsUpdated final
{
public:
	int32                                         NewNumFreeRerolls;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDRerollWidget_HandleFreeRerollsUpdated) == 0x000004, "Wrong alignment on FortPlayerAugmentHUDRerollWidget_HandleFreeRerollsUpdated");
static_assert(sizeof(FortPlayerAugmentHUDRerollWidget_HandleFreeRerollsUpdated) == 0x000004, "Wrong size on FortPlayerAugmentHUDRerollWidget_HandleFreeRerollsUpdated");
static_assert(offsetof(FortPlayerAugmentHUDRerollWidget_HandleFreeRerollsUpdated, NewNumFreeRerolls) == 0x000000, "Member 'FortPlayerAugmentHUDRerollWidget_HandleFreeRerollsUpdated::NewNumFreeRerolls' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDRerollWidget.OnFreeRerollsUpdated
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAugmentHUDRerollWidget_OnFreeRerollsUpdated final
{
public:
	int32                                         NewNumFreeRerolls;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDRerollWidget_OnFreeRerollsUpdated) == 0x000004, "Wrong alignment on FortPlayerAugmentHUDRerollWidget_OnFreeRerollsUpdated");
static_assert(sizeof(FortPlayerAugmentHUDRerollWidget_OnFreeRerollsUpdated) == 0x000004, "Wrong size on FortPlayerAugmentHUDRerollWidget_OnFreeRerollsUpdated");
static_assert(offsetof(FortPlayerAugmentHUDRerollWidget_OnFreeRerollsUpdated, NewNumFreeRerolls) == 0x000000, "Member 'FortPlayerAugmentHUDRerollWidget_OnFreeRerollsUpdated::NewNumFreeRerolls' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDRerollWidget.OnUpdateCurrency
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentHUDRerollWidget_OnUpdateCurrency final
{
public:
	int32                                         OwnedCurrency;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RerollCost;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDRerollWidget_OnUpdateCurrency) == 0x000004, "Wrong alignment on FortPlayerAugmentHUDRerollWidget_OnUpdateCurrency");
static_assert(sizeof(FortPlayerAugmentHUDRerollWidget_OnUpdateCurrency) == 0x000008, "Wrong size on FortPlayerAugmentHUDRerollWidget_OnUpdateCurrency");
static_assert(offsetof(FortPlayerAugmentHUDRerollWidget_OnUpdateCurrency, OwnedCurrency) == 0x000000, "Member 'FortPlayerAugmentHUDRerollWidget_OnUpdateCurrency::OwnedCurrency' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentHUDRerollWidget_OnUpdateCurrency, RerollCost) == 0x000004, "Member 'FortPlayerAugmentHUDRerollWidget_OnUpdateCurrency::RerollCost' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDRerollWidget.StartRerollHoldProgress
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAugmentHUDRerollWidget_StartRerollHoldProgress final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDRerollWidget_StartRerollHoldProgress) == 0x000004, "Wrong alignment on FortPlayerAugmentHUDRerollWidget_StartRerollHoldProgress");
static_assert(sizeof(FortPlayerAugmentHUDRerollWidget_StartRerollHoldProgress) == 0x000004, "Wrong size on FortPlayerAugmentHUDRerollWidget_StartRerollHoldProgress");
static_assert(offsetof(FortPlayerAugmentHUDRerollWidget_StartRerollHoldProgress, Duration) == 0x000000, "Member 'FortPlayerAugmentHUDRerollWidget_StartRerollHoldProgress::Duration' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.HandleAugmentSelectorOpenedStatusChanged
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_HandleAugmentSelectorOpenedStatusChanged final
{
public:
	bool                                          bIsOpened;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bViewingAugmentInventory;                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_HandleAugmentSelectorOpenedStatusChanged) == 0x000001, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_HandleAugmentSelectorOpenedStatusChanged");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_HandleAugmentSelectorOpenedStatusChanged) == 0x000002, "Wrong size on FortPlayerAugmentHUDTimerWidget_HandleAugmentSelectorOpenedStatusChanged");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_HandleAugmentSelectorOpenedStatusChanged, bIsOpened) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_HandleAugmentSelectorOpenedStatusChanged::bIsOpened' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_HandleAugmentSelectorOpenedStatusChanged, bViewingAugmentInventory) == 0x000001, "Member 'FortPlayerAugmentHUDTimerWidget_HandleAugmentSelectorOpenedStatusChanged::bViewingAugmentInventory' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.HandleCanSelectAugmentChanged
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_HandleCanSelectAugmentChanged final
{
public:
	bool                                          bCanSelectAugment;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_HandleCanSelectAugmentChanged) == 0x000001, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_HandleCanSelectAugmentChanged");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_HandleCanSelectAugmentChanged) == 0x000001, "Wrong size on FortPlayerAugmentHUDTimerWidget_HandleCanSelectAugmentChanged");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_HandleCanSelectAugmentChanged, bCanSelectAugment) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_HandleCanSelectAugmentChanged::bCanSelectAugment' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.HandleHUDElementVisibilityChanged
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_HandleHUDElementVisibilityChanged final
{
public:
	struct FGameplayTagContainer                  HiddenElementTagContainer;                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_HandleHUDElementVisibilityChanged) == 0x000008, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_HandleHUDElementVisibilityChanged");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_HandleHUDElementVisibilityChanged) == 0x000020, "Wrong size on FortPlayerAugmentHUDTimerWidget_HandleHUDElementVisibilityChanged");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_HandleHUDElementVisibilityChanged, HiddenElementTagContainer) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_HandleHUDElementVisibilityChanged::HiddenElementTagContainer' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.HandleMovementModeChanged
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_HandleMovementModeChanged final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PrevMovementMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_HandleMovementModeChanged) == 0x000008, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_HandleMovementModeChanged");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_HandleMovementModeChanged) == 0x000010, "Wrong size on FortPlayerAugmentHUDTimerWidget_HandleMovementModeChanged");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_HandleMovementModeChanged, Character) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_HandleMovementModeChanged::Character' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_HandleMovementModeChanged, PrevMovementMode) == 0x000008, "Member 'FortPlayerAugmentHUDTimerWidget_HandleMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_HandleMovementModeChanged, PreviousCustomMode) == 0x000009, "Member 'FortPlayerAugmentHUDTimerWidget_HandleMovementModeChanged::PreviousCustomMode' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.HandleNumPendingAugmentsToGrantUpdated
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_HandleNumPendingAugmentsToGrantUpdated final
{
public:
	int8                                          NumPendingAugmentsToGrant;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_HandleNumPendingAugmentsToGrantUpdated) == 0x000001, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_HandleNumPendingAugmentsToGrantUpdated");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_HandleNumPendingAugmentsToGrantUpdated) == 0x000001, "Wrong size on FortPlayerAugmentHUDTimerWidget_HandleNumPendingAugmentsToGrantUpdated");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_HandleNumPendingAugmentsToGrantUpdated, NumPendingAugmentsToGrant) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_HandleNumPendingAugmentsToGrantUpdated::NumPendingAugmentsToGrant' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.HandleSelectedAugmentForGrant
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_HandleSelectedAugmentForGrant final
{
public:
	class UFortPlayerAugmentItemDefinition*       SelectedAugment;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_HandleSelectedAugmentForGrant) == 0x000008, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_HandleSelectedAugmentForGrant");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_HandleSelectedAugmentForGrant) == 0x000008, "Wrong size on FortPlayerAugmentHUDTimerWidget_HandleSelectedAugmentForGrant");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_HandleSelectedAugmentForGrant, SelectedAugment) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_HandleSelectedAugmentForGrant::SelectedAugment' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.HandleTimerUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_HandleTimerUpdated final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimePercentage;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_HandleTimerUpdated) == 0x000004, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_HandleTimerUpdated");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_HandleTimerUpdated) == 0x000008, "Wrong size on FortPlayerAugmentHUDTimerWidget_HandleTimerUpdated");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_HandleTimerUpdated, TimeRemaining) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_HandleTimerUpdated::TimeRemaining' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_HandleTimerUpdated, TimePercentage) == 0x000004, "Member 'FortPlayerAugmentHUDTimerWidget_HandleTimerUpdated::TimePercentage' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.OnAugmentSelectorOpenedStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_OnAugmentSelectorOpenedStatusChanged final
{
public:
	bool                                          bIsOpened;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_OnAugmentSelectorOpenedStatusChanged) == 0x000001, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_OnAugmentSelectorOpenedStatusChanged");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_OnAugmentSelectorOpenedStatusChanged) == 0x000001, "Wrong size on FortPlayerAugmentHUDTimerWidget_OnAugmentSelectorOpenedStatusChanged");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_OnAugmentSelectorOpenedStatusChanged, bIsOpened) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_OnAugmentSelectorOpenedStatusChanged::bIsOpened' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.OnCanSelectAugmentChanged
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_OnCanSelectAugmentChanged final
{
public:
	bool                                          bCanSelectAugment;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_OnCanSelectAugmentChanged) == 0x000001, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_OnCanSelectAugmentChanged");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_OnCanSelectAugmentChanged) == 0x000001, "Wrong size on FortPlayerAugmentHUDTimerWidget_OnCanSelectAugmentChanged");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_OnCanSelectAugmentChanged, bCanSelectAugment) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_OnCanSelectAugmentChanged::bCanSelectAugment' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.OnHUDElementVisibilityChanged
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_OnHUDElementVisibilityChanged final
{
public:
	struct FGameplayTagContainer                  HiddenElementTagContainer;                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_OnHUDElementVisibilityChanged) == 0x000008, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_OnHUDElementVisibilityChanged");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_OnHUDElementVisibilityChanged) == 0x000020, "Wrong size on FortPlayerAugmentHUDTimerWidget_OnHUDElementVisibilityChanged");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_OnHUDElementVisibilityChanged, HiddenElementTagContainer) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_OnHUDElementVisibilityChanged::HiddenElementTagContainer' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.OnNumPendingAugmentsToGrantUpdated
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_OnNumPendingAugmentsToGrantUpdated final
{
public:
	int32                                         NumPendingAugmentsToGrant;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_OnNumPendingAugmentsToGrantUpdated) == 0x000004, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_OnNumPendingAugmentsToGrantUpdated");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_OnNumPendingAugmentsToGrantUpdated) == 0x000004, "Wrong size on FortPlayerAugmentHUDTimerWidget_OnNumPendingAugmentsToGrantUpdated");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_OnNumPendingAugmentsToGrantUpdated, NumPendingAugmentsToGrant) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_OnNumPendingAugmentsToGrantUpdated::NumPendingAugmentsToGrant' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.OnSelectedAugmentForGrant
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_OnSelectedAugmentForGrant final
{
public:
	class UFortPlayerAugmentItemDefinition*       HighlightedAugment;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_OnSelectedAugmentForGrant) == 0x000008, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_OnSelectedAugmentForGrant");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_OnSelectedAugmentForGrant) == 0x000008, "Wrong size on FortPlayerAugmentHUDTimerWidget_OnSelectedAugmentForGrant");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_OnSelectedAugmentForGrant, HighlightedAugment) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_OnSelectedAugmentForGrant::HighlightedAugment' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.OnTimerUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_OnTimerUpdated final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimePercentage;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_OnTimerUpdated) == 0x000004, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_OnTimerUpdated");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_OnTimerUpdated) == 0x000008, "Wrong size on FortPlayerAugmentHUDTimerWidget_OnTimerUpdated");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_OnTimerUpdated, TimeRemaining) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_OnTimerUpdated::TimeRemaining' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_OnTimerUpdated, TimePercentage) == 0x000004, "Member 'FortPlayerAugmentHUDTimerWidget_OnTimerUpdated::TimePercentage' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.CanEquipSelectionTool
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_CanEquipSelectionTool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_CanEquipSelectionTool) == 0x000001, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_CanEquipSelectionTool");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_CanEquipSelectionTool) == 0x000001, "Wrong size on FortPlayerAugmentHUDTimerWidget_CanEquipSelectionTool");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_CanEquipSelectionTool, ReturnValue) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_CanEquipSelectionTool::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.CanSelectAugment
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_CanSelectAugment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_CanSelectAugment) == 0x000001, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_CanSelectAugment");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_CanSelectAugment) == 0x000001, "Wrong size on FortPlayerAugmentHUDTimerWidget_CanSelectAugment");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_CanSelectAugment, ReturnValue) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_CanSelectAugment::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget.GetPendingAugmentsToGrant
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAugmentHUDTimerWidget_GetPendingAugmentsToGrant final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentHUDTimerWidget_GetPendingAugmentsToGrant) == 0x000004, "Wrong alignment on FortPlayerAugmentHUDTimerWidget_GetPendingAugmentsToGrant");
static_assert(sizeof(FortPlayerAugmentHUDTimerWidget_GetPendingAugmentsToGrant) == 0x000004, "Wrong size on FortPlayerAugmentHUDTimerWidget_GetPendingAugmentsToGrant");
static_assert(offsetof(FortPlayerAugmentHUDTimerWidget_GetPendingAugmentsToGrant, ReturnValue) == 0x000000, "Member 'FortPlayerAugmentHUDTimerWidget_GetPendingAugmentsToGrant::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentInfoEntryWidget.OnItemNewOrBorrowedSet
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerAugmentInfoEntryWidget_OnItemNewOrBorrowedSet final
{
public:
	bool                                          bIsNew;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBorrowed;                                       // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentInfoEntryWidget_OnItemNewOrBorrowedSet) == 0x000001, "Wrong alignment on FortPlayerAugmentInfoEntryWidget_OnItemNewOrBorrowedSet");
static_assert(sizeof(FortPlayerAugmentInfoEntryWidget_OnItemNewOrBorrowedSet) == 0x000002, "Wrong size on FortPlayerAugmentInfoEntryWidget_OnItemNewOrBorrowedSet");
static_assert(offsetof(FortPlayerAugmentInfoEntryWidget_OnItemNewOrBorrowedSet, bIsNew) == 0x000000, "Member 'FortPlayerAugmentInfoEntryWidget_OnItemNewOrBorrowedSet::bIsNew' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentInfoEntryWidget_OnItemNewOrBorrowedSet, bIsBorrowed) == 0x000001, "Member 'FortPlayerAugmentInfoEntryWidget_OnItemNewOrBorrowedSet::bIsBorrowed' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentInfoEntryWidget.OnItemPinColorSet
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerAugmentInfoEntryWidget_OnItemPinColorSet final
{
public:
	struct FLinearColor                           PinColor;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentInfoEntryWidget_OnItemPinColorSet) == 0x000004, "Wrong alignment on FortPlayerAugmentInfoEntryWidget_OnItemPinColorSet");
static_assert(sizeof(FortPlayerAugmentInfoEntryWidget_OnItemPinColorSet) == 0x000010, "Wrong size on FortPlayerAugmentInfoEntryWidget_OnItemPinColorSet");
static_assert(offsetof(FortPlayerAugmentInfoEntryWidget_OnItemPinColorSet, PinColor) == 0x000000, "Member 'FortPlayerAugmentInfoEntryWidget_OnItemPinColorSet::PinColor' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentInfoEntryWidget.OnItemRaritySet
// 0x0088 (0x0088 - 0x0000)
struct FortPlayerAugmentInfoEntryWidget_OnItemRaritySet final
{
public:
	EFortRarity                                   Rarity;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortRarityItemData                    RarityItemData;                                    // 0x0008(0x0080)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentInfoEntryWidget_OnItemRaritySet) == 0x000008, "Wrong alignment on FortPlayerAugmentInfoEntryWidget_OnItemRaritySet");
static_assert(sizeof(FortPlayerAugmentInfoEntryWidget_OnItemRaritySet) == 0x000088, "Wrong size on FortPlayerAugmentInfoEntryWidget_OnItemRaritySet");
static_assert(offsetof(FortPlayerAugmentInfoEntryWidget_OnItemRaritySet, Rarity) == 0x000000, "Member 'FortPlayerAugmentInfoEntryWidget_OnItemRaritySet::Rarity' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentInfoEntryWidget_OnItemRaritySet, RarityItemData) == 0x000008, "Member 'FortPlayerAugmentInfoEntryWidget_OnItemRaritySet::RarityItemData' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentInfoEntryWidget.UpdateAugment
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentInfoEntryWidget_UpdateAugment final
{
public:
	const class UFortPlayerAugmentItemDefinition* AugmentItemDefinition;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentInfoEntryWidget_UpdateAugment) == 0x000008, "Wrong alignment on FortPlayerAugmentInfoEntryWidget_UpdateAugment");
static_assert(sizeof(FortPlayerAugmentInfoEntryWidget_UpdateAugment) == 0x000008, "Wrong size on FortPlayerAugmentInfoEntryWidget_UpdateAugment");
static_assert(offsetof(FortPlayerAugmentInfoEntryWidget_UpdateAugment, AugmentItemDefinition) == 0x000000, "Member 'FortPlayerAugmentInfoEntryWidget_UpdateAugment::AugmentItemDefinition' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentInGameCarriedWidget.HandleExitBus
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentInGameCarriedWidget_HandleExitBus final
{
public:
	class AFortPlayerControllerZone*              FortPCZone;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentInGameCarriedWidget_HandleExitBus) == 0x000008, "Wrong alignment on FortPlayerAugmentInGameCarriedWidget_HandleExitBus");
static_assert(sizeof(FortPlayerAugmentInGameCarriedWidget_HandleExitBus) == 0x000008, "Wrong size on FortPlayerAugmentInGameCarriedWidget_HandleExitBus");
static_assert(offsetof(FortPlayerAugmentInGameCarriedWidget_HandleExitBus, FortPCZone) == 0x000000, "Member 'FortPlayerAugmentInGameCarriedWidget_HandleExitBus::FortPCZone' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentInGameCarriedWidget.OnShowInitialAugment
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentInGameCarriedWidget_OnShowInitialAugment final
{
public:
	const class UFortPlayerAugmentItemDefinition* PlayerAugmentItemDefinition;                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentInGameCarriedWidget_OnShowInitialAugment) == 0x000008, "Wrong alignment on FortPlayerAugmentInGameCarriedWidget_OnShowInitialAugment");
static_assert(sizeof(FortPlayerAugmentInGameCarriedWidget_OnShowInitialAugment) == 0x000008, "Wrong size on FortPlayerAugmentInGameCarriedWidget_OnShowInitialAugment");
static_assert(offsetof(FortPlayerAugmentInGameCarriedWidget_OnShowInitialAugment, PlayerAugmentItemDefinition) == 0x000000, "Member 'FortPlayerAugmentInGameCarriedWidget_OnShowInitialAugment::PlayerAugmentItemDefinition' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentInventoryListEntry.OnAugmentListItemSet
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentInventoryListEntry_OnAugmentListItemSet final
{
public:
	const class UFortItemDefinition*              ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentInventoryListEntry_OnAugmentListItemSet) == 0x000008, "Wrong alignment on FortPlayerAugmentInventoryListEntry_OnAugmentListItemSet");
static_assert(sizeof(FortPlayerAugmentInventoryListEntry_OnAugmentListItemSet) == 0x000008, "Wrong size on FortPlayerAugmentInventoryListEntry_OnAugmentListItemSet");
static_assert(offsetof(FortPlayerAugmentInventoryListEntry_OnAugmentListItemSet, ItemDefinition) == 0x000000, "Member 'FortPlayerAugmentInventoryListEntry_OnAugmentListItemSet::ItemDefinition' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentInventoryTab.HandleNumPendingAugmentsToGrantUpdated
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerAugmentInventoryTab_HandleNumPendingAugmentsToGrantUpdated final
{
public:
	int8                                          NumPendingAugmentsToGrant;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentInventoryTab_HandleNumPendingAugmentsToGrantUpdated) == 0x000001, "Wrong alignment on FortPlayerAugmentInventoryTab_HandleNumPendingAugmentsToGrantUpdated");
static_assert(sizeof(FortPlayerAugmentInventoryTab_HandleNumPendingAugmentsToGrantUpdated) == 0x000001, "Wrong size on FortPlayerAugmentInventoryTab_HandleNumPendingAugmentsToGrantUpdated");
static_assert(offsetof(FortPlayerAugmentInventoryTab_HandleNumPendingAugmentsToGrantUpdated, NumPendingAugmentsToGrant) == 0x000000, "Member 'FortPlayerAugmentInventoryTab_HandleNumPendingAugmentsToGrantUpdated::NumPendingAugmentsToGrant' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentInventoryTab.HandleTimerUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentInventoryTab_HandleTimerUpdated final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimePercentage;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentInventoryTab_HandleTimerUpdated) == 0x000004, "Wrong alignment on FortPlayerAugmentInventoryTab_HandleTimerUpdated");
static_assert(sizeof(FortPlayerAugmentInventoryTab_HandleTimerUpdated) == 0x000008, "Wrong size on FortPlayerAugmentInventoryTab_HandleTimerUpdated");
static_assert(offsetof(FortPlayerAugmentInventoryTab_HandleTimerUpdated, TimeRemaining) == 0x000000, "Member 'FortPlayerAugmentInventoryTab_HandleTimerUpdated::TimeRemaining' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentInventoryTab_HandleTimerUpdated, TimePercentage) == 0x000004, "Member 'FortPlayerAugmentInventoryTab_HandleTimerUpdated::TimePercentage' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentInventoryTab.OnAugmentListUpdated
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAugmentInventoryTab_OnAugmentListUpdated final
{
public:
	int32                                         NumAugments;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentInventoryTab_OnAugmentListUpdated) == 0x000004, "Wrong alignment on FortPlayerAugmentInventoryTab_OnAugmentListUpdated");
static_assert(sizeof(FortPlayerAugmentInventoryTab_OnAugmentListUpdated) == 0x000004, "Wrong size on FortPlayerAugmentInventoryTab_OnAugmentListUpdated");
static_assert(offsetof(FortPlayerAugmentInventoryTab_OnAugmentListUpdated, NumAugments) == 0x000000, "Member 'FortPlayerAugmentInventoryTab_OnAugmentListUpdated::NumAugments' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentInventoryTab.OnNumPendingAugmentsToGrantUpdated
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAugmentInventoryTab_OnNumPendingAugmentsToGrantUpdated final
{
public:
	int32                                         NumPendingAugmentsToGrant;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentInventoryTab_OnNumPendingAugmentsToGrantUpdated) == 0x000004, "Wrong alignment on FortPlayerAugmentInventoryTab_OnNumPendingAugmentsToGrantUpdated");
static_assert(sizeof(FortPlayerAugmentInventoryTab_OnNumPendingAugmentsToGrantUpdated) == 0x000004, "Wrong size on FortPlayerAugmentInventoryTab_OnNumPendingAugmentsToGrantUpdated");
static_assert(offsetof(FortPlayerAugmentInventoryTab_OnNumPendingAugmentsToGrantUpdated, NumPendingAugmentsToGrant) == 0x000000, "Member 'FortPlayerAugmentInventoryTab_OnNumPendingAugmentsToGrantUpdated::NumPendingAugmentsToGrant' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentInventoryTab.OnTimerUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentInventoryTab_OnTimerUpdated final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimePercentage;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentInventoryTab_OnTimerUpdated) == 0x000004, "Wrong alignment on FortPlayerAugmentInventoryTab_OnTimerUpdated");
static_assert(sizeof(FortPlayerAugmentInventoryTab_OnTimerUpdated) == 0x000008, "Wrong size on FortPlayerAugmentInventoryTab_OnTimerUpdated");
static_assert(offsetof(FortPlayerAugmentInventoryTab_OnTimerUpdated, TimeRemaining) == 0x000000, "Member 'FortPlayerAugmentInventoryTab_OnTimerUpdated::TimeRemaining' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentInventoryTab_OnTimerUpdated, TimePercentage) == 0x000004, "Member 'FortPlayerAugmentInventoryTab_OnTimerUpdated::TimePercentage' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentInventoryTab.GetPendingAugmentsToGrant
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAugmentInventoryTab_GetPendingAugmentsToGrant final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentInventoryTab_GetPendingAugmentsToGrant) == 0x000004, "Wrong alignment on FortPlayerAugmentInventoryTab_GetPendingAugmentsToGrant");
static_assert(sizeof(FortPlayerAugmentInventoryTab_GetPendingAugmentsToGrant) == 0x000004, "Wrong size on FortPlayerAugmentInventoryTab_GetPendingAugmentsToGrant");
static_assert(offsetof(FortPlayerAugmentInventoryTab_GetPendingAugmentsToGrant, ReturnValue) == 0x000000, "Member 'FortPlayerAugmentInventoryTab_GetPendingAugmentsToGrant::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentLobbyWidget.OnShowInitialAugment
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAugmentLobbyWidget_OnShowInitialAugment final
{
public:
	const class UFortPlayerAugmentItemDefinition* CarriedAugment;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentLobbyWidget_OnShowInitialAugment) == 0x000008, "Wrong alignment on FortPlayerAugmentLobbyWidget_OnShowInitialAugment");
static_assert(sizeof(FortPlayerAugmentLobbyWidget_OnShowInitialAugment) == 0x000008, "Wrong size on FortPlayerAugmentLobbyWidget_OnShowInitialAugment");
static_assert(offsetof(FortPlayerAugmentLobbyWidget_OnShowInitialAugment, CarriedAugment) == 0x000000, "Member 'FortPlayerAugmentLobbyWidget_OnShowInitialAugment::CarriedAugment' has a wrong offset!");

// Function PlayerAugmentsUI.FortPlayerAugmentPostMatchUnlocksWidget.OnShowUnlockedAugments
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerAugmentPostMatchUnlocksWidget_OnShowUnlockedAugments final
{
public:
	TArray<class UFortPlayerAugmentItemDefinition*> UnlockedAugments;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentPostMatchUnlocksWidget_OnShowUnlockedAugments) == 0x000008, "Wrong alignment on FortPlayerAugmentPostMatchUnlocksWidget_OnShowUnlockedAugments");
static_assert(sizeof(FortPlayerAugmentPostMatchUnlocksWidget_OnShowUnlockedAugments) == 0x000010, "Wrong size on FortPlayerAugmentPostMatchUnlocksWidget_OnShowUnlockedAugments");
static_assert(offsetof(FortPlayerAugmentPostMatchUnlocksWidget_OnShowUnlockedAugments, UnlockedAugments) == 0x000000, "Member 'FortPlayerAugmentPostMatchUnlocksWidget_OnShowUnlockedAugments::UnlockedAugments' has a wrong offset!");

}

