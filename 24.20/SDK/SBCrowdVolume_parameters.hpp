#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SBCrowdVolume

#include "Basic.hpp"


namespace SDK::Params
{

// Function SBCrowdVolume.SBCrowdSpawner.SpawnCrowd
// 0x0020 (0x0020 - 0x0000)
struct SBCrowdSpawner_SpawnCrowd final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Depth;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Precision;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterScaleRandomness;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterAngleRandomness;                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BatchSize;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SBCrowdSpawner_SpawnCrowd) == 0x000004, "Wrong alignment on SBCrowdSpawner_SpawnCrowd");
static_assert(sizeof(SBCrowdSpawner_SpawnCrowd) == 0x000020, "Wrong size on SBCrowdSpawner_SpawnCrowd");
static_assert(offsetof(SBCrowdSpawner_SpawnCrowd, Width) == 0x000000, "Member 'SBCrowdSpawner_SpawnCrowd::Width' has a wrong offset!");
static_assert(offsetof(SBCrowdSpawner_SpawnCrowd, Depth) == 0x000004, "Member 'SBCrowdSpawner_SpawnCrowd::Depth' has a wrong offset!");
static_assert(offsetof(SBCrowdSpawner_SpawnCrowd, Height) == 0x000008, "Member 'SBCrowdSpawner_SpawnCrowd::Height' has a wrong offset!");
static_assert(offsetof(SBCrowdSpawner_SpawnCrowd, Precision) == 0x00000C, "Member 'SBCrowdSpawner_SpawnCrowd::Precision' has a wrong offset!");
static_assert(offsetof(SBCrowdSpawner_SpawnCrowd, CharacterScaleRandomness) == 0x000010, "Member 'SBCrowdSpawner_SpawnCrowd::CharacterScaleRandomness' has a wrong offset!");
static_assert(offsetof(SBCrowdSpawner_SpawnCrowd, CharacterAngleRandomness) == 0x000014, "Member 'SBCrowdSpawner_SpawnCrowd::CharacterAngleRandomness' has a wrong offset!");
static_assert(offsetof(SBCrowdSpawner_SpawnCrowd, Density) == 0x000018, "Member 'SBCrowdSpawner_SpawnCrowd::Density' has a wrong offset!");
static_assert(offsetof(SBCrowdSpawner_SpawnCrowd, BatchSize) == 0x00001C, "Member 'SBCrowdSpawner_SpawnCrowd::BatchSize' has a wrong offset!");

}

