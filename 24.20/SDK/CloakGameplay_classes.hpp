#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CloakGameplay

#include "Basic.hpp"

#include "CloakGameplay_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class CloakGameplay.FortGameCueNotifyLoop_Cloak
// 0x0078 (0x09D8 - 0x0960)
class AFortGameCueNotifyLoop_Cloak final : public AFortGameplayCueNotify_Loop
{
public:
	class AFortPlayerPawn*                        TargetPlayer;                                      // 0x0960(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VisibilityLevel;                                   // 0x0968(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StationaryVisMult;                                 // 0x096C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxSpeedVisMult;                                   // 0x0970(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedForMaxVis;                                    // 0x0974(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VisibilityMinFriendly;                             // 0x0978(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VisibilityMinNonfriendly;                          // 0x097C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VisibilityLevelChangeRate;                         // 0x0980(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_984[0x4];                                      // 0x0984(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FFortGameCueCloakModifier> CloakModifiersByNameMap;                           // 0x0988(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	bool SetModifierCanBeEnabled(const class FName& ModifierName, const bool bNewCanBeEnabled);
	bool SetModifierEnabled(const class FName& ModifierName, const bool bNewEnabled);
	float TickVisibilityLevel(const float DeltaSeconds);

	bool GetCurrentModifierValues(float* OutVisibilityMultiplier, float* OutVisibilityAddition, const class FName& ModifierName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameCueNotifyLoop_Cloak">();
	}
	static class AFortGameCueNotifyLoop_Cloak* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortGameCueNotifyLoop_Cloak>();
	}
};
static_assert(alignof(AFortGameCueNotifyLoop_Cloak) == 0x000008, "Wrong alignment on AFortGameCueNotifyLoop_Cloak");
static_assert(sizeof(AFortGameCueNotifyLoop_Cloak) == 0x0009D8, "Wrong size on AFortGameCueNotifyLoop_Cloak");
static_assert(offsetof(AFortGameCueNotifyLoop_Cloak, TargetPlayer) == 0x000960, "Member 'AFortGameCueNotifyLoop_Cloak::TargetPlayer' has a wrong offset!");
static_assert(offsetof(AFortGameCueNotifyLoop_Cloak, VisibilityLevel) == 0x000968, "Member 'AFortGameCueNotifyLoop_Cloak::VisibilityLevel' has a wrong offset!");
static_assert(offsetof(AFortGameCueNotifyLoop_Cloak, StationaryVisMult) == 0x00096C, "Member 'AFortGameCueNotifyLoop_Cloak::StationaryVisMult' has a wrong offset!");
static_assert(offsetof(AFortGameCueNotifyLoop_Cloak, MaxSpeedVisMult) == 0x000970, "Member 'AFortGameCueNotifyLoop_Cloak::MaxSpeedVisMult' has a wrong offset!");
static_assert(offsetof(AFortGameCueNotifyLoop_Cloak, SpeedForMaxVis) == 0x000974, "Member 'AFortGameCueNotifyLoop_Cloak::SpeedForMaxVis' has a wrong offset!");
static_assert(offsetof(AFortGameCueNotifyLoop_Cloak, VisibilityMinFriendly) == 0x000978, "Member 'AFortGameCueNotifyLoop_Cloak::VisibilityMinFriendly' has a wrong offset!");
static_assert(offsetof(AFortGameCueNotifyLoop_Cloak, VisibilityMinNonfriendly) == 0x00097C, "Member 'AFortGameCueNotifyLoop_Cloak::VisibilityMinNonfriendly' has a wrong offset!");
static_assert(offsetof(AFortGameCueNotifyLoop_Cloak, VisibilityLevelChangeRate) == 0x000980, "Member 'AFortGameCueNotifyLoop_Cloak::VisibilityLevelChangeRate' has a wrong offset!");
static_assert(offsetof(AFortGameCueNotifyLoop_Cloak, CloakModifiersByNameMap) == 0x000988, "Member 'AFortGameCueNotifyLoop_Cloak::CloakModifiersByNameMap' has a wrong offset!");

}

