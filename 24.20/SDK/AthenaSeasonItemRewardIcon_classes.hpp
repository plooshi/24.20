#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AthenaSeasonItemRewardIcon

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass AthenaSeasonItemRewardIcon.AthenaSeasonItemRewardIcon_C
// 0x00C0 (0x0328 - 0x0268)
class UAthenaSeasonItemRewardIcon_C final : public UAthenaSeasonItemRewardIcon
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0268(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AdjustRewardFillSize;                              // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Selected;                                          // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HoverState;                                        // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Image_BattlePassIcon;                              // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Image_RewardContainer;                             // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               RewardContainer_Size;                              // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UFortLazyImage*                         RewardTile;                                        // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_BattlePassIcon;                            // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_Styles;                                    // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Styles_Count;                                      // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Styles_Backing;                                    // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       StylesLabel;                                       // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                StylesWrapper;                                     // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text_Count;                                        // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        Width;                                             // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Height;                                            // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowStyle;                                         // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowCount;                                         // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BattlePassIconSize;                                // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BattlePassIconEnabled;                             // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BattlePassIconPositionOffsetMultiplier;            // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FillSize;                                          // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        DesiredPixelSize;                                  // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsEmoji;                                          // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DeselectedAnim();
	void ExecuteUbergraph_AthenaSeasonItemRewardIcon(int32 EntryPoint);
	void HandleMultipleRewardSelctedAnim(bool bLeftRewardSelected);
	void Hover();
	void OnInitializeReward(const class UFortItem* RewardItem, const TSoftObjectPtr<class UTexture2D>& RewardTexture, bool bHasAdditionalStylesToDisplay, int32 RewardLevel, bool bRequiresBattlePass);
	void OnInitializeSeriesReward(const class UFortItemSeriesDefinition* SeriesData);
	void PreConstruct(bool IsDesignTime);
	void SelectedAnim();
	void SetRarityColors(const struct FLinearColor& Color1, const struct FLinearColor& Color2, const struct FLinearColor& Color3, const struct FLinearColor& Color4, const struct FLinearColor& Color5);
	void SetupItemCardStyle(class UFortItem* RewardItem);
	void Unhover();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AthenaSeasonItemRewardIcon_C">();
	}
	static class UAthenaSeasonItemRewardIcon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaSeasonItemRewardIcon_C>();
	}
};
static_assert(alignof(UAthenaSeasonItemRewardIcon_C) == 0x000008, "Wrong alignment on UAthenaSeasonItemRewardIcon_C");
static_assert(sizeof(UAthenaSeasonItemRewardIcon_C) == 0x000328, "Wrong size on UAthenaSeasonItemRewardIcon_C");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, UberGraphFrame) == 0x000268, "Member 'UAthenaSeasonItemRewardIcon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, AdjustRewardFillSize) == 0x000270, "Member 'UAthenaSeasonItemRewardIcon_C::AdjustRewardFillSize' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, Selected) == 0x000278, "Member 'UAthenaSeasonItemRewardIcon_C::Selected' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, HoverState) == 0x000280, "Member 'UAthenaSeasonItemRewardIcon_C::HoverState' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, Image_BattlePassIcon) == 0x000288, "Member 'UAthenaSeasonItemRewardIcon_C::Image_BattlePassIcon' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, Image_RewardContainer) == 0x000290, "Member 'UAthenaSeasonItemRewardIcon_C::Image_RewardContainer' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, RewardContainer_Size) == 0x000298, "Member 'UAthenaSeasonItemRewardIcon_C::RewardContainer_Size' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, RewardTile) == 0x0002A0, "Member 'UAthenaSeasonItemRewardIcon_C::RewardTile' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, SizeBox_BattlePassIcon) == 0x0002A8, "Member 'UAthenaSeasonItemRewardIcon_C::SizeBox_BattlePassIcon' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, SizeBox_Styles) == 0x0002B0, "Member 'UAthenaSeasonItemRewardIcon_C::SizeBox_Styles' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, Styles_Count) == 0x0002B8, "Member 'UAthenaSeasonItemRewardIcon_C::Styles_Count' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, Styles_Backing) == 0x0002C0, "Member 'UAthenaSeasonItemRewardIcon_C::Styles_Backing' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, StylesLabel) == 0x0002C8, "Member 'UAthenaSeasonItemRewardIcon_C::StylesLabel' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, StylesWrapper) == 0x0002D0, "Member 'UAthenaSeasonItemRewardIcon_C::StylesWrapper' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, Text_Count) == 0x0002D8, "Member 'UAthenaSeasonItemRewardIcon_C::Text_Count' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, Width) == 0x0002E0, "Member 'UAthenaSeasonItemRewardIcon_C::Width' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, Height) == 0x0002E8, "Member 'UAthenaSeasonItemRewardIcon_C::Height' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, ShowStyle) == 0x0002F0, "Member 'UAthenaSeasonItemRewardIcon_C::ShowStyle' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, ShowCount) == 0x0002F1, "Member 'UAthenaSeasonItemRewardIcon_C::ShowCount' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, BattlePassIconSize) == 0x0002F8, "Member 'UAthenaSeasonItemRewardIcon_C::BattlePassIconSize' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, BattlePassIconEnabled) == 0x000300, "Member 'UAthenaSeasonItemRewardIcon_C::BattlePassIconEnabled' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, BattlePassIconPositionOffsetMultiplier) == 0x000308, "Member 'UAthenaSeasonItemRewardIcon_C::BattlePassIconPositionOffsetMultiplier' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, FillSize) == 0x000310, "Member 'UAthenaSeasonItemRewardIcon_C::FillSize' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, DesiredPixelSize) == 0x000318, "Member 'UAthenaSeasonItemRewardIcon_C::DesiredPixelSize' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonItemRewardIcon_C, bIsEmoji) == 0x000320, "Member 'UAthenaSeasonItemRewardIcon_C::bIsEmoji' has a wrong offset!");

}

