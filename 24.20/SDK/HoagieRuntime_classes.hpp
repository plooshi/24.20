#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HoagieRuntime

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "HoagieRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class HoagieRuntime.FortHoagieDriverAnimInstance
// 0x0080 (0x0890 - 0x0810)
class UFortHoagieDriverAnimInstance final : public UFortVehicleOccupantAnimInstance
{
public:
	struct FVector                                LeftHandIKPositionOffset;                          // 0x0808(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightHandIKPositionOffset;                         // 0x0820(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LeftHandIKRotationOffset;                          // 0x0838(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RightHandIKRotationOffset;                         // 0x0850(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortCardinalDirection                        BoostCardinalDirection;                            // 0x0868(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_869[0x3];                                      // 0x0869(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NormalizedAcceleration;                            // 0x086C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleRoll;                                       // 0x0870(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleYaw;                                        // 0x0874(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardSpeed;                                      // 0x0878(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMovingAnyDirection;                             // 0x087C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMovingFastAnyDirection;                         // 0x087D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReverse;                                    // 0x087E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldGoBackToIdle;                               // 0x087F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransition_Default_ReverseStart;                  // 0x0880(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransition_BoostLoop_Reverse;                     // 0x0881(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_882[0xE];                                      // 0x0882(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHoagieDriverAnimInstance">();
	}
	static class UFortHoagieDriverAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHoagieDriverAnimInstance>();
	}
};
static_assert(alignof(UFortHoagieDriverAnimInstance) == 0x000010, "Wrong alignment on UFortHoagieDriverAnimInstance");
static_assert(sizeof(UFortHoagieDriverAnimInstance) == 0x000890, "Wrong size on UFortHoagieDriverAnimInstance");
static_assert(offsetof(UFortHoagieDriverAnimInstance, LeftHandIKPositionOffset) == 0x000808, "Member 'UFortHoagieDriverAnimInstance::LeftHandIKPositionOffset' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, RightHandIKPositionOffset) == 0x000820, "Member 'UFortHoagieDriverAnimInstance::RightHandIKPositionOffset' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, LeftHandIKRotationOffset) == 0x000838, "Member 'UFortHoagieDriverAnimInstance::LeftHandIKRotationOffset' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, RightHandIKRotationOffset) == 0x000850, "Member 'UFortHoagieDriverAnimInstance::RightHandIKRotationOffset' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, BoostCardinalDirection) == 0x000868, "Member 'UFortHoagieDriverAnimInstance::BoostCardinalDirection' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, NormalizedAcceleration) == 0x00086C, "Member 'UFortHoagieDriverAnimInstance::NormalizedAcceleration' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, VehicleRoll) == 0x000870, "Member 'UFortHoagieDriverAnimInstance::VehicleRoll' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, VehicleYaw) == 0x000874, "Member 'UFortHoagieDriverAnimInstance::VehicleYaw' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, ForwardSpeed) == 0x000878, "Member 'UFortHoagieDriverAnimInstance::ForwardSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, bIsMovingAnyDirection) == 0x00087C, "Member 'UFortHoagieDriverAnimInstance::bIsMovingAnyDirection' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, bIsMovingFastAnyDirection) == 0x00087D, "Member 'UFortHoagieDriverAnimInstance::bIsMovingFastAnyDirection' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, bShouldReverse) == 0x00087E, "Member 'UFortHoagieDriverAnimInstance::bShouldReverse' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, bShouldGoBackToIdle) == 0x00087F, "Member 'UFortHoagieDriverAnimInstance::bShouldGoBackToIdle' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, bTransition_Default_ReverseStart) == 0x000880, "Member 'UFortHoagieDriverAnimInstance::bTransition_Default_ReverseStart' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, bTransition_BoostLoop_Reverse) == 0x000881, "Member 'UFortHoagieDriverAnimInstance::bTransition_BoostLoop_Reverse' has a wrong offset!");

// Class HoagieRuntime.FortHoagieVehicleAnimInstance
// 0x01F0 (0x07E0 - 0x05F0)
class UFortHoagieVehicleAnimInstance final : public UFortVehicleAnimInstance
{
public:
	uint8                                         Pad_5F0[0x130];                                    // 0x05F0(0x0130)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               EngineRotation;                                    // 0x0720(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MainRotorRotation;                                 // 0x0738(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               TailRotorRotaton;                                  // 0x0750(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               BoosterFanRotation;                                // 0x0768(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortCardinalDirection                        BoostCardinalDirection;                            // 0x0780(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_781[0x1B];                                     // 0x0781(0x001B)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EngineRotationInterpSpeed;                         // 0x079C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineRotationDuringBoostInterpSpeed;              // 0x07A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineFlipSpeedThreshold;                          // 0x07A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostDirectionDeadzone;                            // 0x07A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineFlipDeadzone;                                // 0x07AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriverRoll;                                        // 0x07B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriverYaw;                                         // 0x07B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalSpeed;                                     // 0x07B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FwdSpeed;                                          // 0x07BC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalBoostDirection;                               // 0x07C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawBlendSpaceInput;                                // 0x07C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizedAcceleration;                            // 0x07C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7CC[0x1];                                      // 0x07CC(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShouldHideBlades;                                 // 0x07CD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBoostOnCD;                                      // 0x07CE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBoostReady;                                     // 0x07CF(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMovingForward;                                  // 0x07D0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReversing;                                      // 0x07D1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMovingAnyDirection;                             // 0x07D2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBoosting;                                       // 0x07D3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReverse;                                    // 0x07D4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldGoBackToIdle;                               // 0x07D5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldApplyBoostAdditive;                         // 0x07D6(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEngineShuttingOff;                              // 0x07D7(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransition_Default_ReverseStart;                  // 0x07D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransition_BoostLoop_Reverse;                     // 0x07D9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7DA[0x6];                                      // 0x07DA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHoagieVehicleAnimInstance">();
	}
	static class UFortHoagieVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHoagieVehicleAnimInstance>();
	}
};
static_assert(alignof(UFortHoagieVehicleAnimInstance) == 0x000010, "Wrong alignment on UFortHoagieVehicleAnimInstance");
static_assert(sizeof(UFortHoagieVehicleAnimInstance) == 0x0007E0, "Wrong size on UFortHoagieVehicleAnimInstance");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, EngineRotation) == 0x000720, "Member 'UFortHoagieVehicleAnimInstance::EngineRotation' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, MainRotorRotation) == 0x000738, "Member 'UFortHoagieVehicleAnimInstance::MainRotorRotation' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, TailRotorRotaton) == 0x000750, "Member 'UFortHoagieVehicleAnimInstance::TailRotorRotaton' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, BoosterFanRotation) == 0x000768, "Member 'UFortHoagieVehicleAnimInstance::BoosterFanRotation' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, BoostCardinalDirection) == 0x000780, "Member 'UFortHoagieVehicleAnimInstance::BoostCardinalDirection' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, EngineRotationInterpSpeed) == 0x00079C, "Member 'UFortHoagieVehicleAnimInstance::EngineRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, EngineRotationDuringBoostInterpSpeed) == 0x0007A0, "Member 'UFortHoagieVehicleAnimInstance::EngineRotationDuringBoostInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, EngineFlipSpeedThreshold) == 0x0007A4, "Member 'UFortHoagieVehicleAnimInstance::EngineFlipSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, BoostDirectionDeadzone) == 0x0007A8, "Member 'UFortHoagieVehicleAnimInstance::BoostDirectionDeadzone' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, EngineFlipDeadzone) == 0x0007AC, "Member 'UFortHoagieVehicleAnimInstance::EngineFlipDeadzone' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, DriverRoll) == 0x0007B0, "Member 'UFortHoagieVehicleAnimInstance::DriverRoll' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, DriverYaw) == 0x0007B4, "Member 'UFortHoagieVehicleAnimInstance::DriverYaw' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, VerticalSpeed) == 0x0007B8, "Member 'UFortHoagieVehicleAnimInstance::VerticalSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, FwdSpeed) == 0x0007BC, "Member 'UFortHoagieVehicleAnimInstance::FwdSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, LocalBoostDirection) == 0x0007C0, "Member 'UFortHoagieVehicleAnimInstance::LocalBoostDirection' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, YawBlendSpaceInput) == 0x0007C4, "Member 'UFortHoagieVehicleAnimInstance::YawBlendSpaceInput' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, NormalizedAcceleration) == 0x0007C8, "Member 'UFortHoagieVehicleAnimInstance::NormalizedAcceleration' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bShouldHideBlades) == 0x0007CD, "Member 'UFortHoagieVehicleAnimInstance::bShouldHideBlades' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bIsBoostOnCD) == 0x0007CE, "Member 'UFortHoagieVehicleAnimInstance::bIsBoostOnCD' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bIsBoostReady) == 0x0007CF, "Member 'UFortHoagieVehicleAnimInstance::bIsBoostReady' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bIsMovingForward) == 0x0007D0, "Member 'UFortHoagieVehicleAnimInstance::bIsMovingForward' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bIsReversing) == 0x0007D1, "Member 'UFortHoagieVehicleAnimInstance::bIsReversing' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bIsMovingAnyDirection) == 0x0007D2, "Member 'UFortHoagieVehicleAnimInstance::bIsMovingAnyDirection' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bIsBoosting) == 0x0007D3, "Member 'UFortHoagieVehicleAnimInstance::bIsBoosting' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bShouldReverse) == 0x0007D4, "Member 'UFortHoagieVehicleAnimInstance::bShouldReverse' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bShouldGoBackToIdle) == 0x0007D5, "Member 'UFortHoagieVehicleAnimInstance::bShouldGoBackToIdle' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bShouldApplyBoostAdditive) == 0x0007D6, "Member 'UFortHoagieVehicleAnimInstance::bShouldApplyBoostAdditive' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bIsEngineShuttingOff) == 0x0007D7, "Member 'UFortHoagieVehicleAnimInstance::bIsEngineShuttingOff' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bTransition_Default_ReverseStart) == 0x0007D8, "Member 'UFortHoagieVehicleAnimInstance::bTransition_Default_ReverseStart' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bTransition_BoostLoop_Reverse) == 0x0007D9, "Member 'UFortHoagieVehicleAnimInstance::bTransition_BoostLoop_Reverse' has a wrong offset!");

// Class HoagieRuntime.FortCameraMode_Hoagie
// 0x0070 (0x1BA0 - 0x1B30)
class UFortCameraMode_Hoagie final : public UFortCameraMode_AthenaVehicle
{
public:
	float                                         CurrentRollMultiplier;                             // 0x1B30(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentPitchMultiplier;                            // 0x1B34(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LastOrigin;                                        // 0x1B38(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CurrentInterpSpeed;                                // 0x1B50(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                BoostInterpSpeed;                                  // 0x1B68(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BaseRollMultiplier;                                // 0x1B80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BasePitchMultiplier;                               // 0x1B84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostRollMultiplier;                               // 0x1B88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostPitchMultiplier;                              // 0x1B8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostRollDampFactor;                               // 0x1B90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostRollRecoveryDampFactor;                       // 0x1B94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostRecoveryInterpSpeed;                          // 0x1B98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B9C[0x4];                                     // 0x1B9C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCameraMode_Hoagie">();
	}
	static class UFortCameraMode_Hoagie* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCameraMode_Hoagie>();
	}
};
static_assert(alignof(UFortCameraMode_Hoagie) == 0x000010, "Wrong alignment on UFortCameraMode_Hoagie");
static_assert(sizeof(UFortCameraMode_Hoagie) == 0x001BA0, "Wrong size on UFortCameraMode_Hoagie");
static_assert(offsetof(UFortCameraMode_Hoagie, CurrentRollMultiplier) == 0x001B30, "Member 'UFortCameraMode_Hoagie::CurrentRollMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, CurrentPitchMultiplier) == 0x001B34, "Member 'UFortCameraMode_Hoagie::CurrentPitchMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, LastOrigin) == 0x001B38, "Member 'UFortCameraMode_Hoagie::LastOrigin' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, CurrentInterpSpeed) == 0x001B50, "Member 'UFortCameraMode_Hoagie::CurrentInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BoostInterpSpeed) == 0x001B68, "Member 'UFortCameraMode_Hoagie::BoostInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BaseRollMultiplier) == 0x001B80, "Member 'UFortCameraMode_Hoagie::BaseRollMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BasePitchMultiplier) == 0x001B84, "Member 'UFortCameraMode_Hoagie::BasePitchMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BoostRollMultiplier) == 0x001B88, "Member 'UFortCameraMode_Hoagie::BoostRollMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BoostPitchMultiplier) == 0x001B8C, "Member 'UFortCameraMode_Hoagie::BoostPitchMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BoostRollDampFactor) == 0x001B90, "Member 'UFortCameraMode_Hoagie::BoostRollDampFactor' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BoostRollRecoveryDampFactor) == 0x001B94, "Member 'UFortCameraMode_Hoagie::BoostRollRecoveryDampFactor' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BoostRecoveryInterpSpeed) == 0x001B98, "Member 'UFortCameraMode_Hoagie::BoostRecoveryInterpSpeed' has a wrong offset!");

// Class HoagieRuntime.FortHoagieAudioController
// 0x0068 (0x02F0 - 0x0288)
class AFortHoagieAudioController final : public AActor
{
public:
	bool                                          bHighQualityOverride;                              // 0x0288(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLocalPlayerInHoagie;                              // 0x0289(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCriticalDamageNative;                             // 0x028A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRotorHitNative;                                   // 0x028B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsRotorWashActiveNative;                          // 0x028C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotorWashRelativeZOffset;                          // 0x0290(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortHoagieVehicle>      Vehicle;                                           // 0x0294(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortLayeredAudioComponent*             EngineAudio;                                       // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLayeredAudioComponent*             RotorAudio;                                        // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B0[0x40];                                     // 0x02B0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CacheAudioComponents(class UFortLayeredAudioComponent* InEngine, class UFortLayeredAudioComponent* InRotor);
	void CacheHoagieVehicle(class AFortHoagieVehicle* InVehicle);
	void Update();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHoagieAudioController">();
	}
	static class AFortHoagieAudioController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortHoagieAudioController>();
	}
};
static_assert(alignof(AFortHoagieAudioController) == 0x000008, "Wrong alignment on AFortHoagieAudioController");
static_assert(sizeof(AFortHoagieAudioController) == 0x0002F0, "Wrong size on AFortHoagieAudioController");
static_assert(offsetof(AFortHoagieAudioController, bHighQualityOverride) == 0x000288, "Member 'AFortHoagieAudioController::bHighQualityOverride' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, bLocalPlayerInHoagie) == 0x000289, "Member 'AFortHoagieAudioController::bLocalPlayerInHoagie' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, bCriticalDamageNative) == 0x00028A, "Member 'AFortHoagieAudioController::bCriticalDamageNative' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, bRotorHitNative) == 0x00028B, "Member 'AFortHoagieAudioController::bRotorHitNative' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, bIsRotorWashActiveNative) == 0x00028C, "Member 'AFortHoagieAudioController::bIsRotorWashActiveNative' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, RotorWashRelativeZOffset) == 0x000290, "Member 'AFortHoagieAudioController::RotorWashRelativeZOffset' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, Vehicle) == 0x000294, "Member 'AFortHoagieAudioController::Vehicle' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, EngineAudio) == 0x0002A0, "Member 'AFortHoagieAudioController::EngineAudio' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, RotorAudio) == 0x0002A8, "Member 'AFortHoagieAudioController::RotorAudio' has a wrong offset!");

// Class HoagieRuntime.FortHoagieVehicle
// 0x0620 (0x20D0 - 0x1AB0)
class AFortHoagieVehicle final : public AFortAthenaSKVehicle
{
public:
	class FName                                   PassengerCollision;                                // 0x1AB0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraBoomDistance;                                // 0x1AB4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraBoomHeight;                                  // 0x1AB8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ABC[0x4];                                     // 0x1ABC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EHoagieBoostState State)> OnBoostStateChanged;                               // 0x1AC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAltimeterTraceUpdated;                           // 0x1AD0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCrashingStateEntered;                            // 0x1AE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bEngineAudioDisabled;                              // 0x1AF0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF1[0x3];                                     // 0x1AF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LiftRumbleTimer;                                   // 0x1AF4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLiftUp;                                           // 0x1AF8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1AF9[0x7];                                     // 0x1AF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        LiftForceFeedbackHandle;                           // 0x1B00(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        PassiveForceFeedbackHandle;                        // 0x1B08(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Theta_Native;                                      // 0x1B10(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WashAltAlpha_Native;                               // 0x1B14(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RotorWashTickTimer;                                // 0x1B18(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B1C[0x4];                                     // 0x1B1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        RotorTraceArray;                                   // 0x1B20(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<EObjectTypeQuery>                      RotorWashObjectsTypes;                             // 0x1B30(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UFortHoagieVehicleConfigs*              FortHoagieVehicleConfigs;                          // 0x1B40(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            RumbleIntensity;                                   // 0x1B48(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFortHeliFlightModel                   FlightModel;                                       // 0x1B50(0x01E8)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bClearPitchInput;                                  // 0x1D38(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D39[0x3];                                     // 0x1D39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoostTimeLeft;                                     // 0x1D3C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostBrakingTimeLeft;                              // 0x1D40(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostCooldown;                                     // 0x1D44(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShutdownTimer;                                     // 0x1D48(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FoliageDestructionTimer;                           // 0x1D4C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CrashingScrapingTimer;                             // 0x1D50(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CrashingNotMovingTimer;                            // 0x1D54(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanSleep;                                         // 0x1D58(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasAppliedCrashDamage;                            // 0x1D59(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOrientedForLanding;                               // 0x1D5A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceNegativeLift;                                // 0x1D5B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AltimeterTraceTimer;                               // 0x1D5C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastRotorImpulseTime;                              // 0x1D60(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CriticalExplodeTimer;                              // 0x1D64(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCriticalExplosionPlayed;                          // 0x1D68(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D69[0x3];                                     // 0x1D69(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeWhileCritical;                                 // 0x1D6C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeWhileLanding;                                  // 0x1D70(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LiftFromOverrideButton;                            // 0x1D74(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                BoostDirection;                                    // 0x1D78(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LastRotorSweepDirection;                           // 0x1D90(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHitResult                             AltimeterTraceResult;                              // 0x1DA8(0x00E0)(Transient, IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	int32                                         HoagieStateRep;                                    // 0x1E88(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHoagieState                                  CurrentHoagieState;                                // 0x1E8C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentRotorSpeed;                                 // 0x1E90(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentRotorAngle;                                 // 0x1E94(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RotorImpactTraceAngle;                             // 0x1E98(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVehicleGamepadLiftInputs              LiftInputs;                                        // 0x1E9C(0x0008)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1EA4[0x4];                                     // 0x1EA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRotorHit>                      RotorHits;                                         // 0x1EA8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FCachedSeatCollision>           CachedSeatCollision;                               // 0x1EB8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	struct FVector                                RotorHitLinearImpulse;                             // 0x1EC8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                RotorHitAngularImpulse;                            // 0x1EE0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      HoagieIdleFX_Native;                               // 0x1EF8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      DamageFX_Native;                                   // 0x1F00(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      RotorWashFX_Native;                                // 0x1F08(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortHoagieVehicleAnimInstance*         HoagieAnimBP_Native;                               // 0x1F10(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AltimeterTraceSocketName;                          // 0x1F18(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RotorDamageTraceSocketName;                        // 0x1F1C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MainRotorCritSocketName;                           // 0x1F20(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TailRotorCritSocketName;                           // 0x1F24(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                           SeatTransition_ToDriver;                           // 0x1F28(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                           SeatTransition_ToPassenger;                        // 0x1F30(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RotorTraceProfile;                                 // 0x1F38(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FoliageOverlapsBoxTag;                             // 0x1F3C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FReplicatedHeliControlState            ControlState;                                      // 0x1F40(0x0030)(Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         CurrentViewDistanceScale;                          // 0x1F70(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentHLODDistanceOverrideScale;                  // 0x1F74(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentHLODMaxDrawDistanceScale;                   // 0x1F78(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F7C[0xC];                                     // 0x1F7C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHoagieDeathEffectInfo                 CachedDeathEffectInfo;                             // 0x1F88(0x0148)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void MulticastRotorImpulse(const struct FHitResult& RotorHit);
	void OnBoostFailed();
	void OnBoostFinished();
	void OnBoostReady();
	void OnBoostStarted();
	void OnCritRotor(float Damage, const struct FVector& ImpactLocation, class AController* DamageInstigator, class AActor* DamageCauser, bool bMainRotor);
	void OnImpactOtherHoagie(const struct FVector& HitLocation, const struct FVector& NormalImpulse);
	void OnImpactWhileCritical();
	void OnRefueledFromEmpty();
	void OnRep_ControlState();
	void OnRep_HoagieState();
	void OnRotorDamageDealt(const struct FHitResult& Impact, bool bInner);
	void OnRotorDamageDealtInner(const struct FHitResult& Impact);
	void OnRotorDamageDealtOuter(const struct FHitResult& Impact);
	void OnRotorDamagePlayer(const struct FHitResult& Impact);
	void OnRotorsStop();
	void OnStartupBegin();
	void OnStartupEnd();
	void OnTickRotors(float RotorAngleDegrees);
	void ServerUpdateControlState(const struct FReplicatedHeliControlState& InControlState);
	void SetMainRotorRotation(float Degrees);
	void SetRotorWashActive(bool bActive);
	void SetTailRotorRotation(float Degrees);
	void ShowCooldownCue(class AFortPlayerPawn* Pawn, float Duration);
	void UpdateDamageStateNative(float Damage);
	void UpdateHoagieAnimBP();

	float GetAltitude() const;
	float GetBoostCooldown() const;
	struct FVector GetBoostDirection() const;
	float GetBoostDuration() const;
	float GetBoostTimeLeft() const;
	float GetDistanceToGround() const;
	float GetForwardAlpha() const;
	bool GetIsEngineOn() const;
	float GetLiftAlpha() const;
	float GetMaxAltitude() const;
	float GetMaxBoostCooldown() const;
	float GetRotorAngleDegrees() const;
	struct FVector GetRotorCenterPosition() const;
	float GetRotorSpeed() const;
	float GetRotorSpeedPercent() const;
	float GetShutdownTimeLeft() const;
	float GetSteerAlpha() const;
	float GetStrafeAlpha() const;
	struct FVector GetThrustDirection(bool bWorldSpace) const;
	float GetVerticalSpeedKmh() const;
	bool IsScrapingBottom() const;
	bool IsShuttingDown() const;
	bool IsStartingUp() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHoagieVehicle">();
	}
	static class AFortHoagieVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortHoagieVehicle>();
	}
};
static_assert(alignof(AFortHoagieVehicle) == 0x000010, "Wrong alignment on AFortHoagieVehicle");
static_assert(sizeof(AFortHoagieVehicle) == 0x0020D0, "Wrong size on AFortHoagieVehicle");
static_assert(offsetof(AFortHoagieVehicle, PassengerCollision) == 0x001AB0, "Member 'AFortHoagieVehicle::PassengerCollision' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CameraBoomDistance) == 0x001AB4, "Member 'AFortHoagieVehicle::CameraBoomDistance' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CameraBoomHeight) == 0x001AB8, "Member 'AFortHoagieVehicle::CameraBoomHeight' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, OnBoostStateChanged) == 0x001AC0, "Member 'AFortHoagieVehicle::OnBoostStateChanged' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, OnAltimeterTraceUpdated) == 0x001AD0, "Member 'AFortHoagieVehicle::OnAltimeterTraceUpdated' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, OnCrashingStateEntered) == 0x001AE0, "Member 'AFortHoagieVehicle::OnCrashingStateEntered' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bEngineAudioDisabled) == 0x001AF0, "Member 'AFortHoagieVehicle::bEngineAudioDisabled' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, LiftRumbleTimer) == 0x001AF4, "Member 'AFortHoagieVehicle::LiftRumbleTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bLiftUp) == 0x001AF8, "Member 'AFortHoagieVehicle::bLiftUp' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, LiftForceFeedbackHandle) == 0x001B00, "Member 'AFortHoagieVehicle::LiftForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, PassiveForceFeedbackHandle) == 0x001B08, "Member 'AFortHoagieVehicle::PassiveForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, Theta_Native) == 0x001B10, "Member 'AFortHoagieVehicle::Theta_Native' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, WashAltAlpha_Native) == 0x001B14, "Member 'AFortHoagieVehicle::WashAltAlpha_Native' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorWashTickTimer) == 0x001B18, "Member 'AFortHoagieVehicle::RotorWashTickTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorTraceArray) == 0x001B20, "Member 'AFortHoagieVehicle::RotorTraceArray' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorWashObjectsTypes) == 0x001B30, "Member 'AFortHoagieVehicle::RotorWashObjectsTypes' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, FortHoagieVehicleConfigs) == 0x001B40, "Member 'AFortHoagieVehicle::FortHoagieVehicleConfigs' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RumbleIntensity) == 0x001B48, "Member 'AFortHoagieVehicle::RumbleIntensity' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, FlightModel) == 0x001B50, "Member 'AFortHoagieVehicle::FlightModel' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bClearPitchInput) == 0x001D38, "Member 'AFortHoagieVehicle::bClearPitchInput' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, BoostTimeLeft) == 0x001D3C, "Member 'AFortHoagieVehicle::BoostTimeLeft' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, BoostBrakingTimeLeft) == 0x001D40, "Member 'AFortHoagieVehicle::BoostBrakingTimeLeft' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, BoostCooldown) == 0x001D44, "Member 'AFortHoagieVehicle::BoostCooldown' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, ShutdownTimer) == 0x001D48, "Member 'AFortHoagieVehicle::ShutdownTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, FoliageDestructionTimer) == 0x001D4C, "Member 'AFortHoagieVehicle::FoliageDestructionTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CrashingScrapingTimer) == 0x001D50, "Member 'AFortHoagieVehicle::CrashingScrapingTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CrashingNotMovingTimer) == 0x001D54, "Member 'AFortHoagieVehicle::CrashingNotMovingTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bCanSleep) == 0x001D58, "Member 'AFortHoagieVehicle::bCanSleep' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bHasAppliedCrashDamage) == 0x001D59, "Member 'AFortHoagieVehicle::bHasAppliedCrashDamage' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bOrientedForLanding) == 0x001D5A, "Member 'AFortHoagieVehicle::bOrientedForLanding' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bForceNegativeLift) == 0x001D5B, "Member 'AFortHoagieVehicle::bForceNegativeLift' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, AltimeterTraceTimer) == 0x001D5C, "Member 'AFortHoagieVehicle::AltimeterTraceTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, LastRotorImpulseTime) == 0x001D60, "Member 'AFortHoagieVehicle::LastRotorImpulseTime' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CriticalExplodeTimer) == 0x001D64, "Member 'AFortHoagieVehicle::CriticalExplodeTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bCriticalExplosionPlayed) == 0x001D68, "Member 'AFortHoagieVehicle::bCriticalExplosionPlayed' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, TimeWhileCritical) == 0x001D6C, "Member 'AFortHoagieVehicle::TimeWhileCritical' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, TimeWhileLanding) == 0x001D70, "Member 'AFortHoagieVehicle::TimeWhileLanding' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, LiftFromOverrideButton) == 0x001D74, "Member 'AFortHoagieVehicle::LiftFromOverrideButton' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, BoostDirection) == 0x001D78, "Member 'AFortHoagieVehicle::BoostDirection' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, LastRotorSweepDirection) == 0x001D90, "Member 'AFortHoagieVehicle::LastRotorSweepDirection' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, AltimeterTraceResult) == 0x001DA8, "Member 'AFortHoagieVehicle::AltimeterTraceResult' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, HoagieStateRep) == 0x001E88, "Member 'AFortHoagieVehicle::HoagieStateRep' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CurrentHoagieState) == 0x001E8C, "Member 'AFortHoagieVehicle::CurrentHoagieState' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CurrentRotorSpeed) == 0x001E90, "Member 'AFortHoagieVehicle::CurrentRotorSpeed' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CurrentRotorAngle) == 0x001E94, "Member 'AFortHoagieVehicle::CurrentRotorAngle' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorImpactTraceAngle) == 0x001E98, "Member 'AFortHoagieVehicle::RotorImpactTraceAngle' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, LiftInputs) == 0x001E9C, "Member 'AFortHoagieVehicle::LiftInputs' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorHits) == 0x001EA8, "Member 'AFortHoagieVehicle::RotorHits' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CachedSeatCollision) == 0x001EB8, "Member 'AFortHoagieVehicle::CachedSeatCollision' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorHitLinearImpulse) == 0x001EC8, "Member 'AFortHoagieVehicle::RotorHitLinearImpulse' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorHitAngularImpulse) == 0x001EE0, "Member 'AFortHoagieVehicle::RotorHitAngularImpulse' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, HoagieIdleFX_Native) == 0x001EF8, "Member 'AFortHoagieVehicle::HoagieIdleFX_Native' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, DamageFX_Native) == 0x001F00, "Member 'AFortHoagieVehicle::DamageFX_Native' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorWashFX_Native) == 0x001F08, "Member 'AFortHoagieVehicle::RotorWashFX_Native' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, HoagieAnimBP_Native) == 0x001F10, "Member 'AFortHoagieVehicle::HoagieAnimBP_Native' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, AltimeterTraceSocketName) == 0x001F18, "Member 'AFortHoagieVehicle::AltimeterTraceSocketName' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorDamageTraceSocketName) == 0x001F1C, "Member 'AFortHoagieVehicle::RotorDamageTraceSocketName' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, MainRotorCritSocketName) == 0x001F20, "Member 'AFortHoagieVehicle::MainRotorCritSocketName' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, TailRotorCritSocketName) == 0x001F24, "Member 'AFortHoagieVehicle::TailRotorCritSocketName' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, SeatTransition_ToDriver) == 0x001F28, "Member 'AFortHoagieVehicle::SeatTransition_ToDriver' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, SeatTransition_ToPassenger) == 0x001F30, "Member 'AFortHoagieVehicle::SeatTransition_ToPassenger' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorTraceProfile) == 0x001F38, "Member 'AFortHoagieVehicle::RotorTraceProfile' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, FoliageOverlapsBoxTag) == 0x001F3C, "Member 'AFortHoagieVehicle::FoliageOverlapsBoxTag' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, ControlState) == 0x001F40, "Member 'AFortHoagieVehicle::ControlState' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CurrentViewDistanceScale) == 0x001F70, "Member 'AFortHoagieVehicle::CurrentViewDistanceScale' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CurrentHLODDistanceOverrideScale) == 0x001F74, "Member 'AFortHoagieVehicle::CurrentHLODDistanceOverrideScale' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CurrentHLODMaxDrawDistanceScale) == 0x001F78, "Member 'AFortHoagieVehicle::CurrentHLODMaxDrawDistanceScale' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CachedDeathEffectInfo) == 0x001F88, "Member 'AFortHoagieVehicle::CachedDeathEffectInfo' has a wrong offset!");

// Class HoagieRuntime.FortHoagieVehicleConfigs
// 0x0238 (0x0AE0 - 0x08A8)
class UFortHoagieVehicleConfigs final : public UFortPhysicsVehicleConfigs
{
public:
	float                                         StrafeForce;                                       // 0x08A8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrafeForceMin;                                    // 0x08AC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStrafeSpeedKmh;                                 // 0x08B0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrafeTooFastBrakeForce;                           // 0x08B4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandedBrakeForce;                                  // 0x08B8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftForce;                                         // 0x08BC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLiftSpeedKmh;                                   // 0x08C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftTooFastBrakeForce;                             // 0x08C4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateralDragCoefficient;                            // 0x08C8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateralDragCoefficient2;                           // 0x08CC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftDragCoefficient;                               // 0x08D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftDragCoefficient2;                              // 0x08D4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPitchForCameraYaw;                              // 0x08D8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCameraYawAngle;                                 // 0x08DC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraYawStiff;                                    // 0x08E0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraYawDamp;                                     // 0x08E4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraYawStrength;                                 // 0x08E8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UprightStiff;                                      // 0x08EC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UprightDamp;                                       // 0x08F0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVehiclePivotForCameraPitch;                    // 0x08F4(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F5[0x3];                                      // 0x08F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThrustTorqueAnglePercent;                          // 0x08F8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostThrustTorqueAnglePercent;                     // 0x08FC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrustTorqueStiff;                                 // 0x0900(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrustTorqueDamp;                                  // 0x0904(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrustTorqueMaxAccel;                              // 0x0908(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrustTorque;                                      // 0x090C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawTorque;                                         // 0x0910(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawTorqueDampingSpeed;                             // 0x0914(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostForce;                                        // 0x0918(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostMaxSpeedKmh;                                  // 0x091C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostDuration;                                     // 0x0920(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostCooldown;                                     // 0x0924(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTorqueStiff;                                  // 0x0928(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTorqueDamp;                                   // 0x092C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterBoostBrakingForce;                            // 0x0930(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterBoostBrakingDuration;                         // 0x0934(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterBoostBrakingMinSpeed;                         // 0x0938(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAngleRequiredForFullThrust;                   // 0x093C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToGroundForLanding;                        // 0x0940(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartupDelay;                                      // 0x0944(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingSequenceDelay;                              // 0x0948(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorsRadius;                                      // 0x094C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorsRadiusInner;                                 // 0x0950(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoDriverBrakeForce;                                // 0x0954(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetweenRotorDamageTicks;                       // 0x0958(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoLandingForce;                                  // 0x095C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorDamageBoxSweepLength;                         // 0x0960(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalStateLiftForce;                            // 0x0964(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleRotationMultiplier;                            // 0x0968(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftPitchDegrees;                                  // 0x096C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAltitudeForIdleNoise;                           // 0x0970(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultLinearDamp;                                 // 0x0974(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultAngularDamp;                                // 0x0978(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingLinearDamp;                                 // 0x097C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingAngularDamp;                                // 0x0980(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingLiftAlpha;                                  // 0x0984(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalStateThrustMultiplier;                     // 0x0988(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyUpDotThresholdForLanding;                      // 0x098C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalHealthThreshold;                           // 0x0990(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamagePerImpulseWhileCritical;                     // 0x0994(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorImpulseLinear;                                // 0x0998(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorImpulseAngular;                               // 0x099C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorImpulseCooldown;                              // 0x09A0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartupLift;                                       // 0x09A4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartupLiftTime;                                   // 0x09A8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAltitude;                                       // 0x09AC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AltitudeForSpinning;                               // 0x09B0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorMaxSpeed;                                     // 0x09B4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorAccel;                                        // 0x09B8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorDecel;                                        // 0x09BC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplodeRotorDecel;                                 // 0x09C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRotorSpeedForSkippingStartup;                   // 0x09C4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorSpeedForStartupLift;                          // 0x09C8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalLiftForceDecay;                            // 0x09CC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalYawTorqueMin;                              // 0x09D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalYawTorqueMax;                              // 0x09D4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalYawTorqueRampDuration;                     // 0x09D8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorTraceRotationSpeed;                           // 0x09DC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorTraceBoxSize;                                 // 0x09E0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorTraceBoxHeight;                               // 0x09E4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCriticalFallForce;                              // 0x09E8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostFOV;                                          // 0x09EC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GentleCrashTimeToExplode;                          // 0x09F0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalTimeForGentleCrash;                        // 0x09F4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoLandingYawTorque;                              // 0x09F8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHeightForAutoLandingYawTorque;                  // 0x09FC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedForScrapingBottom;                         // 0x0A00(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallDamageHeightBuffer;                            // 0x0A04(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetweenRotorPlayerDamage;                      // 0x0A08(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorMoveSpeedRequiredToUpdateTraceDirSqr;         // 0x0A0C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoliageTraceRate;                                  // 0x0A10(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorWashTicksPerFrame;                            // 0x0A14(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalHitRadius;                                 // 0x0A18(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleNormalUpForLockMovement;                      // 0x0A1C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAutoLandingTime;                                // 0x0A20(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedThresholdForCrashed;                          // 0x0A24(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CritMultiplier;                                    // 0x0A28(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AltitudeForSprings;                                // 0x0A2C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCrashingTime;                                   // 0x0A30(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCrashingScrapingTime;                           // 0x0A34(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCrashingTimeSpentNotMoving;                     // 0x0A38(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandscapeRotorImpulseMag;                          // 0x0A3C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthThresholdForLandscapeRotorImpulse;           // 0x0A40(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeightBuffer;                                   // 0x0A44(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpulseOnOuterRotorHitLandscape;                  // 0x0A48(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipRotorImpulses;                                // 0x0A49(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCVarScaling;                                // 0x0A4A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4B[0x1];                                      // 0x0A4B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CVarScalingInterp;                                 // 0x0A4C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FoliageTraceBoxSize;                               // 0x0A50(0x0018)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaterBoxSize;                                      // 0x0A68(0x0018)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaterBoxOffset;                                    // 0x0A80(0x0018)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotorOffsetFromActorLocationOnServer;              // 0x0A98(0x0018)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipContactRotations;                             // 0x0AB0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AB1[0x7];                                      // 0x0AB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxAutoLandHeightWhenOutOfFuel;                    // 0x0AB8(0x0028)(Edit, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHoagieVehicleConfigs">();
	}
	static class UFortHoagieVehicleConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHoagieVehicleConfigs>();
	}
};
static_assert(alignof(UFortHoagieVehicleConfigs) == 0x000008, "Wrong alignment on UFortHoagieVehicleConfigs");
static_assert(sizeof(UFortHoagieVehicleConfigs) == 0x000AE0, "Wrong size on UFortHoagieVehicleConfigs");
static_assert(offsetof(UFortHoagieVehicleConfigs, StrafeForce) == 0x0008A8, "Member 'UFortHoagieVehicleConfigs::StrafeForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, StrafeForceMin) == 0x0008AC, "Member 'UFortHoagieVehicleConfigs::StrafeForceMin' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxStrafeSpeedKmh) == 0x0008B0, "Member 'UFortHoagieVehicleConfigs::MaxStrafeSpeedKmh' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, StrafeTooFastBrakeForce) == 0x0008B4, "Member 'UFortHoagieVehicleConfigs::StrafeTooFastBrakeForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LandedBrakeForce) == 0x0008B8, "Member 'UFortHoagieVehicleConfigs::LandedBrakeForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LiftForce) == 0x0008BC, "Member 'UFortHoagieVehicleConfigs::LiftForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxLiftSpeedKmh) == 0x0008C0, "Member 'UFortHoagieVehicleConfigs::MaxLiftSpeedKmh' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LiftTooFastBrakeForce) == 0x0008C4, "Member 'UFortHoagieVehicleConfigs::LiftTooFastBrakeForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LateralDragCoefficient) == 0x0008C8, "Member 'UFortHoagieVehicleConfigs::LateralDragCoefficient' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LateralDragCoefficient2) == 0x0008CC, "Member 'UFortHoagieVehicleConfigs::LateralDragCoefficient2' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LiftDragCoefficient) == 0x0008D0, "Member 'UFortHoagieVehicleConfigs::LiftDragCoefficient' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LiftDragCoefficient2) == 0x0008D4, "Member 'UFortHoagieVehicleConfigs::LiftDragCoefficient2' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxPitchForCameraYaw) == 0x0008D8, "Member 'UFortHoagieVehicleConfigs::MaxPitchForCameraYaw' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxCameraYawAngle) == 0x0008DC, "Member 'UFortHoagieVehicleConfigs::MaxCameraYawAngle' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CameraYawStiff) == 0x0008E0, "Member 'UFortHoagieVehicleConfigs::CameraYawStiff' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CameraYawDamp) == 0x0008E4, "Member 'UFortHoagieVehicleConfigs::CameraYawDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CameraYawStrength) == 0x0008E8, "Member 'UFortHoagieVehicleConfigs::CameraYawStrength' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, UprightStiff) == 0x0008EC, "Member 'UFortHoagieVehicleConfigs::UprightStiff' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, UprightDamp) == 0x0008F0, "Member 'UFortHoagieVehicleConfigs::UprightDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, bUseVehiclePivotForCameraPitch) == 0x0008F4, "Member 'UFortHoagieVehicleConfigs::bUseVehiclePivotForCameraPitch' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, ThrustTorqueAnglePercent) == 0x0008F8, "Member 'UFortHoagieVehicleConfigs::ThrustTorqueAnglePercent' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostThrustTorqueAnglePercent) == 0x0008FC, "Member 'UFortHoagieVehicleConfigs::BoostThrustTorqueAnglePercent' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, ThrustTorqueStiff) == 0x000900, "Member 'UFortHoagieVehicleConfigs::ThrustTorqueStiff' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, ThrustTorqueDamp) == 0x000904, "Member 'UFortHoagieVehicleConfigs::ThrustTorqueDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, ThrustTorqueMaxAccel) == 0x000908, "Member 'UFortHoagieVehicleConfigs::ThrustTorqueMaxAccel' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, ThrustTorque) == 0x00090C, "Member 'UFortHoagieVehicleConfigs::ThrustTorque' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, YawTorque) == 0x000910, "Member 'UFortHoagieVehicleConfigs::YawTorque' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, YawTorqueDampingSpeed) == 0x000914, "Member 'UFortHoagieVehicleConfigs::YawTorqueDampingSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostForce) == 0x000918, "Member 'UFortHoagieVehicleConfigs::BoostForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostMaxSpeedKmh) == 0x00091C, "Member 'UFortHoagieVehicleConfigs::BoostMaxSpeedKmh' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostDuration) == 0x000920, "Member 'UFortHoagieVehicleConfigs::BoostDuration' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostCooldown) == 0x000924, "Member 'UFortHoagieVehicleConfigs::BoostCooldown' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostTorqueStiff) == 0x000928, "Member 'UFortHoagieVehicleConfigs::BoostTorqueStiff' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostTorqueDamp) == 0x00092C, "Member 'UFortHoagieVehicleConfigs::BoostTorqueDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AfterBoostBrakingForce) == 0x000930, "Member 'UFortHoagieVehicleConfigs::AfterBoostBrakingForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AfterBoostBrakingDuration) == 0x000934, "Member 'UFortHoagieVehicleConfigs::AfterBoostBrakingDuration' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AfterBoostBrakingMinSpeed) == 0x000938, "Member 'UFortHoagieVehicleConfigs::AfterBoostBrakingMinSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, PitchAngleRequiredForFullThrust) == 0x00093C, "Member 'UFortHoagieVehicleConfigs::PitchAngleRequiredForFullThrust' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, DistanceToGroundForLanding) == 0x000940, "Member 'UFortHoagieVehicleConfigs::DistanceToGroundForLanding' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, StartupDelay) == 0x000944, "Member 'UFortHoagieVehicleConfigs::StartupDelay' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LandingSequenceDelay) == 0x000948, "Member 'UFortHoagieVehicleConfigs::LandingSequenceDelay' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorsRadius) == 0x00094C, "Member 'UFortHoagieVehicleConfigs::RotorsRadius' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorsRadiusInner) == 0x000950, "Member 'UFortHoagieVehicleConfigs::RotorsRadiusInner' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, NoDriverBrakeForce) == 0x000954, "Member 'UFortHoagieVehicleConfigs::NoDriverBrakeForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, TimeBetweenRotorDamageTicks) == 0x000958, "Member 'UFortHoagieVehicleConfigs::TimeBetweenRotorDamageTicks' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AutoLandingForce) == 0x00095C, "Member 'UFortHoagieVehicleConfigs::AutoLandingForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorDamageBoxSweepLength) == 0x000960, "Member 'UFortHoagieVehicleConfigs::RotorDamageBoxSweepLength' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalStateLiftForce) == 0x000964, "Member 'UFortHoagieVehicleConfigs::CriticalStateLiftForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, IdleRotationMultiplier) == 0x000968, "Member 'UFortHoagieVehicleConfigs::IdleRotationMultiplier' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LiftPitchDegrees) == 0x00096C, "Member 'UFortHoagieVehicleConfigs::LiftPitchDegrees' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MinAltitudeForIdleNoise) == 0x000970, "Member 'UFortHoagieVehicleConfigs::MinAltitudeForIdleNoise' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, DefaultLinearDamp) == 0x000974, "Member 'UFortHoagieVehicleConfigs::DefaultLinearDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, DefaultAngularDamp) == 0x000978, "Member 'UFortHoagieVehicleConfigs::DefaultAngularDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LandingLinearDamp) == 0x00097C, "Member 'UFortHoagieVehicleConfigs::LandingLinearDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LandingAngularDamp) == 0x000980, "Member 'UFortHoagieVehicleConfigs::LandingAngularDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LandingLiftAlpha) == 0x000984, "Member 'UFortHoagieVehicleConfigs::LandingLiftAlpha' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalStateThrustMultiplier) == 0x000988, "Member 'UFortHoagieVehicleConfigs::CriticalStateThrustMultiplier' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BodyUpDotThresholdForLanding) == 0x00098C, "Member 'UFortHoagieVehicleConfigs::BodyUpDotThresholdForLanding' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalHealthThreshold) == 0x000990, "Member 'UFortHoagieVehicleConfigs::CriticalHealthThreshold' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, DamagePerImpulseWhileCritical) == 0x000994, "Member 'UFortHoagieVehicleConfigs::DamagePerImpulseWhileCritical' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorImpulseLinear) == 0x000998, "Member 'UFortHoagieVehicleConfigs::RotorImpulseLinear' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorImpulseAngular) == 0x00099C, "Member 'UFortHoagieVehicleConfigs::RotorImpulseAngular' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorImpulseCooldown) == 0x0009A0, "Member 'UFortHoagieVehicleConfigs::RotorImpulseCooldown' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, StartupLift) == 0x0009A4, "Member 'UFortHoagieVehicleConfigs::StartupLift' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, StartupLiftTime) == 0x0009A8, "Member 'UFortHoagieVehicleConfigs::StartupLiftTime' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxAltitude) == 0x0009AC, "Member 'UFortHoagieVehicleConfigs::MaxAltitude' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AltitudeForSpinning) == 0x0009B0, "Member 'UFortHoagieVehicleConfigs::AltitudeForSpinning' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorMaxSpeed) == 0x0009B4, "Member 'UFortHoagieVehicleConfigs::RotorMaxSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorAccel) == 0x0009B8, "Member 'UFortHoagieVehicleConfigs::RotorAccel' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorDecel) == 0x0009BC, "Member 'UFortHoagieVehicleConfigs::RotorDecel' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, ExplodeRotorDecel) == 0x0009C0, "Member 'UFortHoagieVehicleConfigs::ExplodeRotorDecel' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MinRotorSpeedForSkippingStartup) == 0x0009C4, "Member 'UFortHoagieVehicleConfigs::MinRotorSpeedForSkippingStartup' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorSpeedForStartupLift) == 0x0009C8, "Member 'UFortHoagieVehicleConfigs::RotorSpeedForStartupLift' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalLiftForceDecay) == 0x0009CC, "Member 'UFortHoagieVehicleConfigs::CriticalLiftForceDecay' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalYawTorqueMin) == 0x0009D0, "Member 'UFortHoagieVehicleConfigs::CriticalYawTorqueMin' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalYawTorqueMax) == 0x0009D4, "Member 'UFortHoagieVehicleConfigs::CriticalYawTorqueMax' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalYawTorqueRampDuration) == 0x0009D8, "Member 'UFortHoagieVehicleConfigs::CriticalYawTorqueRampDuration' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorTraceRotationSpeed) == 0x0009DC, "Member 'UFortHoagieVehicleConfigs::RotorTraceRotationSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorTraceBoxSize) == 0x0009E0, "Member 'UFortHoagieVehicleConfigs::RotorTraceBoxSize' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorTraceBoxHeight) == 0x0009E4, "Member 'UFortHoagieVehicleConfigs::RotorTraceBoxHeight' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxCriticalFallForce) == 0x0009E8, "Member 'UFortHoagieVehicleConfigs::MaxCriticalFallForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostFOV) == 0x0009EC, "Member 'UFortHoagieVehicleConfigs::BoostFOV' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, GentleCrashTimeToExplode) == 0x0009F0, "Member 'UFortHoagieVehicleConfigs::GentleCrashTimeToExplode' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalTimeForGentleCrash) == 0x0009F4, "Member 'UFortHoagieVehicleConfigs::CriticalTimeForGentleCrash' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AutoLandingYawTorque) == 0x0009F8, "Member 'UFortHoagieVehicleConfigs::AutoLandingYawTorque' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MinHeightForAutoLandingYawTorque) == 0x0009FC, "Member 'UFortHoagieVehicleConfigs::MinHeightForAutoLandingYawTorque' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MinSpeedForScrapingBottom) == 0x000A00, "Member 'UFortHoagieVehicleConfigs::MinSpeedForScrapingBottom' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, FallDamageHeightBuffer) == 0x000A04, "Member 'UFortHoagieVehicleConfigs::FallDamageHeightBuffer' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, TimeBetweenRotorPlayerDamage) == 0x000A08, "Member 'UFortHoagieVehicleConfigs::TimeBetweenRotorPlayerDamage' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorMoveSpeedRequiredToUpdateTraceDirSqr) == 0x000A0C, "Member 'UFortHoagieVehicleConfigs::RotorMoveSpeedRequiredToUpdateTraceDirSqr' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, FoliageTraceRate) == 0x000A10, "Member 'UFortHoagieVehicleConfigs::FoliageTraceRate' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorWashTicksPerFrame) == 0x000A14, "Member 'UFortHoagieVehicleConfigs::RotorWashTicksPerFrame' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalHitRadius) == 0x000A18, "Member 'UFortHoagieVehicleConfigs::CriticalHitRadius' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AngleNormalUpForLockMovement) == 0x000A1C, "Member 'UFortHoagieVehicleConfigs::AngleNormalUpForLockMovement' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxAutoLandingTime) == 0x000A20, "Member 'UFortHoagieVehicleConfigs::MaxAutoLandingTime' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, SpeedThresholdForCrashed) == 0x000A24, "Member 'UFortHoagieVehicleConfigs::SpeedThresholdForCrashed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CritMultiplier) == 0x000A28, "Member 'UFortHoagieVehicleConfigs::CritMultiplier' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AltitudeForSprings) == 0x000A2C, "Member 'UFortHoagieVehicleConfigs::AltitudeForSprings' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxCrashingTime) == 0x000A30, "Member 'UFortHoagieVehicleConfigs::MaxCrashingTime' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxCrashingScrapingTime) == 0x000A34, "Member 'UFortHoagieVehicleConfigs::MaxCrashingScrapingTime' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxCrashingTimeSpentNotMoving) == 0x000A38, "Member 'UFortHoagieVehicleConfigs::MaxCrashingTimeSpentNotMoving' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LandscapeRotorImpulseMag) == 0x000A3C, "Member 'UFortHoagieVehicleConfigs::LandscapeRotorImpulseMag' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, HealthThresholdForLandscapeRotorImpulse) == 0x000A40, "Member 'UFortHoagieVehicleConfigs::HealthThresholdForLandscapeRotorImpulse' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxHeightBuffer) == 0x000A44, "Member 'UFortHoagieVehicleConfigs::MaxHeightBuffer' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, bImpulseOnOuterRotorHitLandscape) == 0x000A48, "Member 'UFortHoagieVehicleConfigs::bImpulseOnOuterRotorHitLandscape' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, bSkipRotorImpulses) == 0x000A49, "Member 'UFortHoagieVehicleConfigs::bSkipRotorImpulses' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, bEnableCVarScaling) == 0x000A4A, "Member 'UFortHoagieVehicleConfigs::bEnableCVarScaling' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CVarScalingInterp) == 0x000A4C, "Member 'UFortHoagieVehicleConfigs::CVarScalingInterp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, FoliageTraceBoxSize) == 0x000A50, "Member 'UFortHoagieVehicleConfigs::FoliageTraceBoxSize' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, WaterBoxSize) == 0x000A68, "Member 'UFortHoagieVehicleConfigs::WaterBoxSize' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, WaterBoxOffset) == 0x000A80, "Member 'UFortHoagieVehicleConfigs::WaterBoxOffset' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorOffsetFromActorLocationOnServer) == 0x000A98, "Member 'UFortHoagieVehicleConfigs::RotorOffsetFromActorLocationOnServer' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, bSkipContactRotations) == 0x000AB0, "Member 'UFortHoagieVehicleConfigs::bSkipContactRotations' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxAutoLandHeightWhenOutOfFuel) == 0x000AB8, "Member 'UFortHoagieVehicleConfigs::MaxAutoLandHeightWhenOutOfFuel' has a wrong offset!");

}

