#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EpicMediaBasePlayer

#include "Basic.hpp"

#include "EpicStreamMediaSource_structs.hpp"
#include "MediaUtils_structs.hpp"


namespace SDK::Params
{

// Function EpicMediaBasePlayer.EpicBaseStreamingVideo.GetMediaPlayer
// 0x0008 (0x0008 - 0x0000)
struct EpicBaseStreamingVideo_GetMediaPlayer final
{
public:
	class UMediaPlayer*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicBaseStreamingVideo_GetMediaPlayer) == 0x000008, "Wrong alignment on EpicBaseStreamingVideo_GetMediaPlayer");
static_assert(sizeof(EpicBaseStreamingVideo_GetMediaPlayer) == 0x000008, "Wrong size on EpicBaseStreamingVideo_GetMediaPlayer");
static_assert(offsetof(EpicBaseStreamingVideo_GetMediaPlayer, ReturnValue) == 0x000000, "Member 'EpicBaseStreamingVideo_GetMediaPlayer::ReturnValue' has a wrong offset!");

// Function EpicMediaBasePlayer.EpicBaseStreamingVideo.GetMediaPlayerOptions
// 0x0030 (0x0030 - 0x0000)
struct EpicBaseStreamingVideo_GetMediaPlayerOptions final
{
public:
	struct FMediaPlayerOptions                    ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicBaseStreamingVideo_GetMediaPlayerOptions) == 0x000008, "Wrong alignment on EpicBaseStreamingVideo_GetMediaPlayerOptions");
static_assert(sizeof(EpicBaseStreamingVideo_GetMediaPlayerOptions) == 0x000030, "Wrong size on EpicBaseStreamingVideo_GetMediaPlayerOptions");
static_assert(offsetof(EpicBaseStreamingVideo_GetMediaPlayerOptions, ReturnValue) == 0x000000, "Member 'EpicBaseStreamingVideo_GetMediaPlayerOptions::ReturnValue' has a wrong offset!");

// Function EpicMediaBasePlayer.EpicBaseStreamingVideo.GetMediaSource
// 0x0008 (0x0008 - 0x0000)
struct EpicBaseStreamingVideo_GetMediaSource final
{
public:
	class UEpicStreamMediaSource*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicBaseStreamingVideo_GetMediaSource) == 0x000008, "Wrong alignment on EpicBaseStreamingVideo_GetMediaSource");
static_assert(sizeof(EpicBaseStreamingVideo_GetMediaSource) == 0x000008, "Wrong size on EpicBaseStreamingVideo_GetMediaSource");
static_assert(offsetof(EpicBaseStreamingVideo_GetMediaSource, ReturnValue) == 0x000000, "Member 'EpicBaseStreamingVideo_GetMediaSource::ReturnValue' has a wrong offset!");

// Function EpicMediaBasePlayer.EpicBaseStreamingVideo.HandleLicensedAudioTreatmentChanged
// 0x0001 (0x0001 - 0x0000)
struct EpicBaseStreamingVideo_HandleLicensedAudioTreatmentChanged final
{
public:
	EUCPTypes                                     UCPType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicBaseStreamingVideo_HandleLicensedAudioTreatmentChanged) == 0x000001, "Wrong alignment on EpicBaseStreamingVideo_HandleLicensedAudioTreatmentChanged");
static_assert(sizeof(EpicBaseStreamingVideo_HandleLicensedAudioTreatmentChanged) == 0x000001, "Wrong size on EpicBaseStreamingVideo_HandleLicensedAudioTreatmentChanged");
static_assert(offsetof(EpicBaseStreamingVideo_HandleLicensedAudioTreatmentChanged, UCPType) == 0x000000, "Member 'EpicBaseStreamingVideo_HandleLicensedAudioTreatmentChanged::UCPType' has a wrong offset!");

// Function EpicMediaBasePlayer.EpicBaseStreamingVideo.HandleMediaOpenedFailed
// 0x0010 (0x0010 - 0x0000)
struct EpicBaseStreamingVideo_HandleMediaOpenedFailed final
{
public:
	class FString                                 FailedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicBaseStreamingVideo_HandleMediaOpenedFailed) == 0x000008, "Wrong alignment on EpicBaseStreamingVideo_HandleMediaOpenedFailed");
static_assert(sizeof(EpicBaseStreamingVideo_HandleMediaOpenedFailed) == 0x000010, "Wrong size on EpicBaseStreamingVideo_HandleMediaOpenedFailed");
static_assert(offsetof(EpicBaseStreamingVideo_HandleMediaOpenedFailed, FailedUrl) == 0x000000, "Member 'EpicBaseStreamingVideo_HandleMediaOpenedFailed::FailedUrl' has a wrong offset!");

// Function EpicMediaBasePlayer.EpicBaseStreamingVideo.Init
// 0x0020 (0x0020 - 0x0000)
struct EpicBaseStreamingVideo_Init final
{
public:
	class UMediaTexture*                          InVideoTexture;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaPlayer*                           InMediaPlayer;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEpicStreamMediaSource*                 InMediaSource;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCDNFailover;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicBaseStreamingVideo_Init) == 0x000008, "Wrong alignment on EpicBaseStreamingVideo_Init");
static_assert(sizeof(EpicBaseStreamingVideo_Init) == 0x000020, "Wrong size on EpicBaseStreamingVideo_Init");
static_assert(offsetof(EpicBaseStreamingVideo_Init, InVideoTexture) == 0x000000, "Member 'EpicBaseStreamingVideo_Init::InVideoTexture' has a wrong offset!");
static_assert(offsetof(EpicBaseStreamingVideo_Init, InMediaPlayer) == 0x000008, "Member 'EpicBaseStreamingVideo_Init::InMediaPlayer' has a wrong offset!");
static_assert(offsetof(EpicBaseStreamingVideo_Init, InMediaSource) == 0x000010, "Member 'EpicBaseStreamingVideo_Init::InMediaSource' has a wrong offset!");
static_assert(offsetof(EpicBaseStreamingVideo_Init, InCDNFailover) == 0x000018, "Member 'EpicBaseStreamingVideo_Init::InCDNFailover' has a wrong offset!");
static_assert(offsetof(EpicBaseStreamingVideo_Init, ReturnValue) == 0x000019, "Member 'EpicBaseStreamingVideo_Init::ReturnValue' has a wrong offset!");

// Function EpicMediaBasePlayer.EpicBaseStreamingVideo.OnFailedURL
// 0x0010 (0x0010 - 0x0000)
struct EpicBaseStreamingVideo_OnFailedURL final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicBaseStreamingVideo_OnFailedURL) == 0x000008, "Wrong alignment on EpicBaseStreamingVideo_OnFailedURL");
static_assert(sizeof(EpicBaseStreamingVideo_OnFailedURL) == 0x000010, "Wrong size on EpicBaseStreamingVideo_OnFailedURL");
static_assert(offsetof(EpicBaseStreamingVideo_OnFailedURL, URL) == 0x000000, "Member 'EpicBaseStreamingVideo_OnFailedURL::URL' has a wrong offset!");

// Function EpicMediaBasePlayer.EpicBaseStreamingVideo.OnSuccessfulURL
// 0x0010 (0x0010 - 0x0000)
struct EpicBaseStreamingVideo_OnSuccessfulURL final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicBaseStreamingVideo_OnSuccessfulURL) == 0x000008, "Wrong alignment on EpicBaseStreamingVideo_OnSuccessfulURL");
static_assert(sizeof(EpicBaseStreamingVideo_OnSuccessfulURL) == 0x000010, "Wrong size on EpicBaseStreamingVideo_OnSuccessfulURL");
static_assert(offsetof(EpicBaseStreamingVideo_OnSuccessfulURL, URL) == 0x000000, "Member 'EpicBaseStreamingVideo_OnSuccessfulURL::URL' has a wrong offset!");

// Function EpicMediaBasePlayer.EpicBaseStreamingVideo.Open
// 0x0038 (0x0038 - 0x0000)
struct EpicBaseStreamingVideo_Open final
{
public:
	struct FMediaPlayerOptions                    InMediaOptions;                                    // 0x0000(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicBaseStreamingVideo_Open) == 0x000008, "Wrong alignment on EpicBaseStreamingVideo_Open");
static_assert(sizeof(EpicBaseStreamingVideo_Open) == 0x000038, "Wrong size on EpicBaseStreamingVideo_Open");
static_assert(offsetof(EpicBaseStreamingVideo_Open, InMediaOptions) == 0x000000, "Member 'EpicBaseStreamingVideo_Open::InMediaOptions' has a wrong offset!");
static_assert(offsetof(EpicBaseStreamingVideo_Open, ReturnValue) == 0x000030, "Member 'EpicBaseStreamingVideo_Open::ReturnValue' has a wrong offset!");

// Function EpicMediaBasePlayer.EpicBaseStreamingVideo.RetryOnError
// 0x0001 (0x0001 - 0x0000)
struct EpicBaseStreamingVideo_RetryOnError final
{
public:
	bool                                          bFromPlayer;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicBaseStreamingVideo_RetryOnError) == 0x000001, "Wrong alignment on EpicBaseStreamingVideo_RetryOnError");
static_assert(sizeof(EpicBaseStreamingVideo_RetryOnError) == 0x000001, "Wrong size on EpicBaseStreamingVideo_RetryOnError");
static_assert(offsetof(EpicBaseStreamingVideo_RetryOnError, bFromPlayer) == 0x000000, "Member 'EpicBaseStreamingVideo_RetryOnError::bFromPlayer' has a wrong offset!");

// Function EpicMediaBasePlayer.EpicBaseStreamingVideo.SetSoundSubmixes
// 0x0018 (0x0018 - 0x0000)
struct EpicBaseStreamingVideo_SetSoundSubmixes final
{
public:
	class UMediaSoundComponent*                   InSoundComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmixBase*                       InDefault;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmixBase*                       InLicensed;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicBaseStreamingVideo_SetSoundSubmixes) == 0x000008, "Wrong alignment on EpicBaseStreamingVideo_SetSoundSubmixes");
static_assert(sizeof(EpicBaseStreamingVideo_SetSoundSubmixes) == 0x000018, "Wrong size on EpicBaseStreamingVideo_SetSoundSubmixes");
static_assert(offsetof(EpicBaseStreamingVideo_SetSoundSubmixes, InSoundComponent) == 0x000000, "Member 'EpicBaseStreamingVideo_SetSoundSubmixes::InSoundComponent' has a wrong offset!");
static_assert(offsetof(EpicBaseStreamingVideo_SetSoundSubmixes, InDefault) == 0x000008, "Member 'EpicBaseStreamingVideo_SetSoundSubmixes::InDefault' has a wrong offset!");
static_assert(offsetof(EpicBaseStreamingVideo_SetSoundSubmixes, InLicensed) == 0x000010, "Member 'EpicBaseStreamingVideo_SetSoundSubmixes::InLicensed' has a wrong offset!");

// Function EpicMediaBasePlayer.EpicBaseStreamingVideo.SetVideoSize
// 0x0008 (0x0008 - 0x0000)
struct EpicBaseStreamingVideo_SetVideoSize final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicBaseStreamingVideo_SetVideoSize) == 0x000004, "Wrong alignment on EpicBaseStreamingVideo_SetVideoSize");
static_assert(sizeof(EpicBaseStreamingVideo_SetVideoSize) == 0x000008, "Wrong size on EpicBaseStreamingVideo_SetVideoSize");
static_assert(offsetof(EpicBaseStreamingVideo_SetVideoSize, Width) == 0x000000, "Member 'EpicBaseStreamingVideo_SetVideoSize::Width' has a wrong offset!");
static_assert(offsetof(EpicBaseStreamingVideo_SetVideoSize, Height) == 0x000004, "Member 'EpicBaseStreamingVideo_SetVideoSize::Height' has a wrong offset!");

// Function EpicMediaBasePlayer.EpicBaseStreamingVideo.Start
// 0x0018 (0x0018 - 0x0000)
struct EpicBaseStreamingVideo_Start final
{
public:
	class FString                                 InVUID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaTexture*                          InVideoTexture;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicBaseStreamingVideo_Start) == 0x000008, "Wrong alignment on EpicBaseStreamingVideo_Start");
static_assert(sizeof(EpicBaseStreamingVideo_Start) == 0x000018, "Wrong size on EpicBaseStreamingVideo_Start");
static_assert(offsetof(EpicBaseStreamingVideo_Start, InVUID) == 0x000000, "Member 'EpicBaseStreamingVideo_Start::InVUID' has a wrong offset!");
static_assert(offsetof(EpicBaseStreamingVideo_Start, InVideoTexture) == 0x000010, "Member 'EpicBaseStreamingVideo_Start::InVideoTexture' has a wrong offset!");

// Function EpicMediaBasePlayer.EpicBaseStreamingVideo.Stop
// 0x0001 (0x0001 - 0x0000)
struct EpicBaseStreamingVideo_Stop final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicBaseStreamingVideo_Stop) == 0x000001, "Wrong alignment on EpicBaseStreamingVideo_Stop");
static_assert(sizeof(EpicBaseStreamingVideo_Stop) == 0x000001, "Wrong size on EpicBaseStreamingVideo_Stop");
static_assert(offsetof(EpicBaseStreamingVideo_Stop, bRelease) == 0x000000, "Member 'EpicBaseStreamingVideo_Stop::bRelease' has a wrong offset!");

}

