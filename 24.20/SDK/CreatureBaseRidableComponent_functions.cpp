#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CreatureBaseRidableComponent

#include "Basic.hpp"

#include "CreatureBaseRidableComponent_classes.hpp"
#include "CreatureBaseRidableComponent_parameters.hpp"


namespace SDK
{

// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.Activate Regen
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::Activate_Regen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "Activate Regen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.Added_FBD936634BCC61A726DA279226E2F4BE
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::Added_FBD936634BCC61A726DA279226E2F4BE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "Added_FBD936634BCC61A726DA279226E2F4BE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.ApplyCollisionResponse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<ECollisionChannel>               Channels                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// ECollisionResponse                      Response                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::ApplyCollisionResponse(TArray<ECollisionChannel>& Channels, ECollisionResponse Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "ApplyCollisionResponse");

	Params::CreatureBaseRidableComponent_C_ApplyCollisionResponse Parms{};

	Parms.Channels = std::move(Channels);
	Parms.Response = Response;

	UObject::ProcessEvent(Func, &Parms);

	Channels = std::move(Parms.Channels);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.ApplyGEToSelf
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffectClass                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// bool                                    IsValidClass                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::ApplyGEToSelf(TSubclassOf<class UGameplayEffect> GameplayEffectClass, bool* IsValidClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "ApplyGEToSelf");

	Params::CreatureBaseRidableComponent_C_ApplyGEToSelf Parms{};

	Parms.GameplayEffectClass = GameplayEffectClass;

	UObject::ProcessEvent(Func, &Parms);

	if (IsValidClass != nullptr)
		*IsValidClass = Parms.IsValidClass;
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.CanJumpExit
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    CanJumpExit_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::CanJumpExit(bool* CanJumpExit_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "CanJumpExit");

	Params::CreatureBaseRidableComponent_C_CanJumpExit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanJumpExit_0 != nullptr)
		*CanJumpExit_0 = Parms.CanJumpExit_0;
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.CheatSetStaminaPercent
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// float                                   StaminaPercent                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::CheatSetStaminaPercent(const float StaminaPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "CheatSetStaminaPercent");

	Params::CreatureBaseRidableComponent_C_CheatSetStaminaPercent Parms{};

	Parms.StaminaPercent = StaminaPercent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.Check Regen on Started Riding
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::Check_Regen_on_Started_Riding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "Check Regen on Started Riding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.Check Regen on Stopped Riding
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::Check_Regen_on_Stopped_Riding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "Check Regen on Stopped Riding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.CommitEnergyCosts
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RequireAllEnergy                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  EnergyCost                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::CommitEnergyCosts(bool RequireAllEnergy, double EnergyCost, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "CommitEnergyCosts");

	Params::CreatureBaseRidableComponent_C_CommitEnergyCosts Parms{};

	Parms.RequireAllEnergy = RequireAllEnergy;
	Parms.EnergyCost = EnergyCost;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.ConvertedDispatcher_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Converted                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AFortPawn*                        InstigatorPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::ConvertedDispatcher_Event_0(bool Converted, class AFortPawn* InstigatorPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "ConvertedDispatcher_Event_0");

	Params::CreatureBaseRidableComponent_C_ConvertedDispatcher_Event_0 Parms{};

	Parms.Converted = Converted;
	Parms.InstigatorPawn = InstigatorPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.Deactivate Regen
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::Deactivate_Regen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "Deactivate Regen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.DetermineRateOfChange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  rateOfChange                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::DetermineRateOfChange(double* rateOfChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "DetermineRateOfChange");

	Params::CreatureBaseRidableComponent_C_DetermineRateOfChange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (rateOfChange != nullptr)
		*rateOfChange = Parms.rateOfChange;
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.EnergyTrackingStart
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::EnergyTrackingStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "EnergyTrackingStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.EnergyTrackingStop
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::EnergyTrackingStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "EnergyTrackingStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.ExecuteUbergraph_CreatureBaseRidableComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::ExecuteUbergraph_CreatureBaseRidableComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "ExecuteUbergraph_CreatureBaseRidableComponent");

	Params::CreatureBaseRidableComponent_C_ExecuteUbergraph_CreatureBaseRidableComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.GetRiderLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::GetRiderLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "GetRiderLocation");

	Params::CreatureBaseRidableComponent_C_GetRiderLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.GetRidingInfoFromTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  JumpAttachGroundHeightMin                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  JumpAttachGroundHeightBuffer                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsesAltRidingMessage                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::GetRidingInfoFromTarget(double* JumpAttachGroundHeightMin, double* JumpAttachGroundHeightBuffer, bool* UsesAltRidingMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "GetRidingInfoFromTarget");

	Params::CreatureBaseRidableComponent_C_GetRidingInfoFromTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (JumpAttachGroundHeightMin != nullptr)
		*JumpAttachGroundHeightMin = Parms.JumpAttachGroundHeightMin;

	if (JumpAttachGroundHeightBuffer != nullptr)
		*JumpAttachGroundHeightBuffer = Parms.JumpAttachGroundHeightBuffer;

	if (UsesAltRidingMessage != nullptr)
		*UsesAltRidingMessage = Parms.UsesAltRidingMessage;
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.HandleAbilityHeld
// (Event, Public, BlueprintEvent)

void UCreatureBaseRidableComponent_C::HandleAbilityHeld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "HandleAbilityHeld");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.HandleAbilityStarted
// (Event, Public, BlueprintEvent)

void UCreatureBaseRidableComponent_C::HandleAbilityStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "HandleAbilityStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.HandleAbilityStopped
// (Event, Public, BlueprintEvent)

void UCreatureBaseRidableComponent_C::HandleAbilityStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "HandleAbilityStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.HandleCancelSprint
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bAbilityInputHeld                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bForceCancel                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::HandleCancelSprint(const bool bAbilityInputHeld, const bool bForceCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "HandleCancelSprint");

	Params::CreatureBaseRidableComponent_C_HandleCancelSprint Parms{};

	Parms.bAbilityInputHeld = bAbilityInputHeld;
	Parms.bForceCancel = bForceCancel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.HandleEnemyFoleySoundLibrary
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  Rider                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsRiding                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::HandleEnemyFoleySoundLibrary(class UActorComponent* Rider, bool bIsRiding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "HandleEnemyFoleySoundLibrary");

	Params::CreatureBaseRidableComponent_C_HandleEnemyFoleySoundLibrary Parms{};

	Parms.Rider = Rider;
	Parms.bIsRiding = bIsRiding;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.HandleJumpStarted
// (Event, Public, BlueprintEvent)

void UCreatureBaseRidableComponent_C::HandleJumpStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "HandleJumpStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.HandleJumpStopped
// (Event, Public, BlueprintEvent)

void UCreatureBaseRidableComponent_C::HandleJumpStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "HandleJumpStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.HandleRiderStartedRiding
// (Event, Protected, BlueprintEvent)
// Parameters:
// class URiderComponent*                  Rider                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::HandleRiderStartedRiding(class URiderComponent* Rider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "HandleRiderStartedRiding");

	Params::CreatureBaseRidableComponent_C_HandleRiderStartedRiding Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.HandleRiderStoppedRiding
// (Event, Protected, BlueprintEvent)
// Parameters:
// class URiderComponent*                  Rider                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::HandleRiderStoppedRiding(class URiderComponent* Rider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "HandleRiderStoppedRiding");

	Params::CreatureBaseRidableComponent_C_HandleRiderStoppedRiding Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.KickRiderOffSelf
// (Public, BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::KickRiderOffSelf()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "KickRiderOffSelf");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.ManualEnergyDepleted
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::ManualEnergyDepleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "ManualEnergyDepleted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.NPCPawnInteractWithDispatcher_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           AIPawn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AFortPlayerPawn*                  InteractingPlayerPawn                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::NPCPawnInteractWithDispatcher_Event_0(class AActor* AIPawn, class AFortPlayerPawn* InteractingPlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "NPCPawnInteractWithDispatcher_Event_0");

	Params::CreatureBaseRidableComponent_C_NPCPawnInteractWithDispatcher_Event_0 Parms{};

	Parms.AIPawn = AIPawn;
	Parms.InteractingPlayerPawn = InteractingPlayerPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.OnEatToRefuel
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  EnergyCost                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::OnEatToRefuel(double EnergyCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "OnEatToRefuel");

	Params::CreatureBaseRidableComponent_C_OnEatToRefuel Parms{};

	Parms.EnergyCost = EnergyCost;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.OnEnergyDepletedClient
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::OnEnergyDepletedClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "OnEnergyDepletedClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.OnEnergyUpdate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Energy                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bWarningActive                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::OnEnergyUpdate(double Energy, bool bWarningActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "OnEnergyUpdate");

	Params::CreatureBaseRidableComponent_C_OnEnergyUpdate Parms{};

	Parms.Energy = Energy;
	Parms.bWarningActive = bWarningActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.OnJumping
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  JumpPitchInterpSpeed                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::OnJumping(double JumpPitchInterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "OnJumping");

	Params::CreatureBaseRidableComponent_C_OnJumping Parms{};

	Parms.JumpPitchInterpSpeed = JumpPitchInterpSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.OnJumpingApex
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::OnJumpingApex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "OnJumpingApex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.OnMovementModeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PreviousCustomMode                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "OnMovementModeChanged");

	Params::CreatureBaseRidableComponent_C_OnMovementModeChanged Parms{};

	Parms.Character = Character;
	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.OnPawnHealthChanged_Event_0
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::OnPawnHealthChanged_Event_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "OnPawnHealthChanged_Event_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.OnRep_currentEnergyValue
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::OnRep_currentEnergyValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "OnRep_currentEnergyValue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.OnRep_IdleAnim_Add
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::OnRep_IdleAnim_Add()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "OnRep_IdleAnim_Add");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.OnSprintStarted
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::OnSprintStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "OnSprintStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.Propagate Immunity Fall Damage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::Propagate_Immunity_Fall_Damage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "Propagate Immunity Fall Damage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UCreatureBaseRidableComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "ReceiveEndPlay");

	Params::CreatureBaseRidableComponent_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.Removed_AD51144144164FD235EE5BA4F6E87456
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::Removed_AD51144144164FD235EE5BA4F6E87456()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "Removed_AD51144144164FD235EE5BA4F6E87456");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.Removed_C4C6E29B4217C014B9DE0E80B7134D6E
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::Removed_C4C6E29B4217C014B9DE0E80B7134D6E()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "Removed_C4C6E29B4217C014B9DE0E80B7134D6E");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.RemoveGEByTag
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTagContainer            Tags                                                   (BlueprintVisible, BlueprintReadOnly, Parm)

void UCreatureBaseRidableComponent_C::RemoveGEByTag(const struct FGameplayTagContainer& Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "RemoveGEByTag");

	Params::CreatureBaseRidableComponent_C_RemoveGEByTag Parms{};

	Parms.Tags = std::move(Tags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.RestoreCollisionResponses
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::RestoreCollisionResponses()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "RestoreCollisionResponses");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.ReTryJumpExit
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::ReTryJumpExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "ReTryJumpExit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.SetInfiniteStaminaBuff
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::SetInfiniteStaminaBuff(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "SetInfiniteStaminaBuff");

	Params::CreatureBaseRidableComponent_C_SetInfiniteStaminaBuff Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.SetWildlifeHealth
// (Public, BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::SetWildlifeHealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "SetWildlifeHealth");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.StopSprinting
// (Public, BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::StopSprinting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "StopSprinting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.TestThreshold
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isDecaying                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  CurrentValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  testTreshold                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    PreviousState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    crossedThreshold                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::TestThreshold(bool isDecaying, double CurrentValue, double testTreshold, bool PreviousState, bool* crossedThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "TestThreshold");

	Params::CreatureBaseRidableComponent_C_TestThreshold Parms{};

	Parms.isDecaying = isDecaying;
	Parms.CurrentValue = CurrentValue;
	Parms.testTreshold = testTreshold;
	Parms.PreviousState = PreviousState;

	UObject::ProcessEvent(Func, &Parms);

	if (crossedThreshold != nullptr)
		*crossedThreshold = Parms.crossedThreshold;
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.ToggleRiding
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ShouldRide                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bChangedRiding                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::ToggleRiding(class AActor* PlayerPawn, class AActor* Target, bool ShouldRide, bool* bChangedRiding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "ToggleRiding");

	Params::CreatureBaseRidableComponent_C_ToggleRiding Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.Target = Target;
	Parms.ShouldRide = ShouldRide;

	UObject::ProcessEvent(Func, &Parms);

	if (bChangedRiding != nullptr)
		*bChangedRiding = Parms.bChangedRiding;
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.ToggleRidingAlternative
// (Public, BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::ToggleRidingAlternative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "ToggleRidingAlternative");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.UpdateAnimInputBool
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPawn*                        FortPawn                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBeingRidden_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::UpdateAnimInputBool(class AFortPawn* FortPawn, bool IsBeingRidden_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "UpdateAnimInputBool");

	Params::CreatureBaseRidableComponent_C_UpdateAnimInputBool Parms{};

	Parms.FortPawn = FortPawn;
	Parms.IsBeingRidden_0 = IsBeingRidden_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.UpdateDebug
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::UpdateDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "UpdateDebug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.UpdateEnergy
// (BlueprintCallable, BlueprintEvent)

void UCreatureBaseRidableComponent_C::UpdateEnergy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "UpdateEnergy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.UpdateLootAnimalGlow
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::UpdateLootAnimalGlow(double Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "UpdateLootAnimalGlow");

	Params::CreatureBaseRidableComponent_C_UpdateLootAnimalGlow Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.UpdateValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TargetValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  rateOfChange                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  updatedValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnergyDepleted                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::UpdateValue(double TargetValue, double rateOfChange, double DeltaTime, double* updatedValue, bool* EnergyDepleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "UpdateValue");

	Params::CreatureBaseRidableComponent_C_UpdateValue Parms{};

	Parms.TargetValue = TargetValue;
	Parms.rateOfChange = rateOfChange;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	if (updatedValue != nullptr)
		*updatedValue = Parms.updatedValue;

	if (EnergyDepleted != nullptr)
		*EnergyDepleted = Parms.EnergyDepleted;
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.UseEnergyAmountServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  EnergyCost                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::UseEnergyAmountServer(double EnergyCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "UseEnergyAmountServer");

	Params::CreatureBaseRidableComponent_C_UseEnergyAmountServer Parms{};

	Parms.EnergyCost = EnergyCost;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.CanBePet
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class URiderComponent*                  Rider                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UCreatureBaseRidableComponent_C::CanBePet(class URiderComponent* Rider) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "CanBePet");

	Params::CreatureBaseRidableComponent_C_CanBePet Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.CanRiderPlayEmote
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class URiderComponent*                  Rider                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UCreatureBaseRidableComponent_C::CanRiderPlayEmote(const class URiderComponent* Rider) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "CanRiderPlayEmote");

	Params::CreatureBaseRidableComponent_C_CanRiderPlayEmote Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.GetRiderCapsuleSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class URiderComponent*                  Rider                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  RiderCapsuleRadius                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RiderCapsuleHH                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::GetRiderCapsuleSize(class URiderComponent* Rider, double* RiderCapsuleRadius, double* RiderCapsuleHH) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "GetRiderCapsuleSize");

	Params::CreatureBaseRidableComponent_C_GetRiderCapsuleSize Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);

	if (RiderCapsuleRadius != nullptr)
		*RiderCapsuleRadius = Parms.RiderCapsuleRadius;

	if (RiderCapsuleHH != nullptr)
		*RiderCapsuleHH = Parms.RiderCapsuleHH;
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.GetRidingCapsuleSize
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class URiderComponent*                  Rider                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// float                                   OriginalRadius                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OriginalHalfHeight                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutRadius                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutHalfHeight                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::GetRidingCapsuleSize(const class URiderComponent* Rider, float OriginalRadius, float OriginalHalfHeight, float* OutRadius, float* OutHalfHeight) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "GetRidingCapsuleSize");

	Params::CreatureBaseRidableComponent_C_GetRidingCapsuleSize Parms{};

	Parms.Rider = Rider;
	Parms.OriginalRadius = OriginalRadius;
	Parms.OriginalHalfHeight = OriginalHalfHeight;

	UObject::ProcessEvent(Func, &Parms);

	if (OutRadius != nullptr)
		*OutRadius = Parms.OutRadius;

	if (OutHalfHeight != nullptr)
		*OutHalfHeight = Parms.OutHalfHeight;
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.GetRidingEmoteCapsuleSize
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class URiderComponent*                  Rider                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// float                                   OriginalRadius                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OriginalHalfHeight                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutRadius                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutHalfHeight                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::GetRidingEmoteCapsuleSize(const class URiderComponent* Rider, float OriginalRadius, float OriginalHalfHeight, float* OutRadius, float* OutHalfHeight) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "GetRidingEmoteCapsuleSize");

	Params::CreatureBaseRidableComponent_C_GetRidingEmoteCapsuleSize Parms{};

	Parms.Rider = Rider;
	Parms.OriginalRadius = OriginalRadius;
	Parms.OriginalHalfHeight = OriginalHalfHeight;

	UObject::ProcessEvent(Func, &Parms);

	if (OutRadius != nullptr)
		*OutRadius = Parms.OutRadius;

	if (OutHalfHeight != nullptr)
		*OutHalfHeight = Parms.OutHalfHeight;
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.IsSwimming
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    IsSwimming_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCreatureBaseRidableComponent_C::IsSwimming(bool* IsSwimming_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "IsSwimming");

	Params::CreatureBaseRidableComponent_C_IsSwimming Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsSwimming_0 != nullptr)
		*IsSwimming_0 = Parms.IsSwimming_0;
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.ShouldCameraFocusOnRidable
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class URiderComponent*                  Rider                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UCreatureBaseRidableComponent_C::ShouldCameraFocusOnRidable(const class URiderComponent* Rider) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "ShouldCameraFocusOnRidable");

	Params::CreatureBaseRidableComponent_C_ShouldCameraFocusOnRidable Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CreatureBaseRidableComponent.CreatureBaseRidableComponent_C.ShouldSetAsViewTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class URiderComponent*                  Rider                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UCreatureBaseRidableComponent_C::ShouldSetAsViewTarget(const class URiderComponent* Rider) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreatureBaseRidableComponent_C", "ShouldSetAsViewTarget");

	Params::CreatureBaseRidableComponent_C_ShouldSetAsViewTarget Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

