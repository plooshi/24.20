#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Solaris

#include "Basic.hpp"

#include "Solaris_structs.hpp"
#include "VerseNative_structs.hpp"


namespace SDK::Params
{

// Function Solaris.SolarisArrayLibrary.Add
// 0x0020 (0x0020 - 0x0000)
struct SolarisArrayLibrary_Add final
{
public:
	TArray<struct FGenericElementType>            Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGenericElementType                    new_item;                                          // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisArrayLibrary_Add) == 0x000008, "Wrong alignment on SolarisArrayLibrary_Add");
static_assert(sizeof(SolarisArrayLibrary_Add) == 0x000020, "Wrong size on SolarisArrayLibrary_Add");
static_assert(offsetof(SolarisArrayLibrary_Add, Array) == 0x000000, "Member 'SolarisArrayLibrary_Add::Array' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Add, new_item) == 0x000010, "Member 'SolarisArrayLibrary_Add::new_item' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Add, ReturnValue) == 0x000018, "Member 'SolarisArrayLibrary_Add::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisArrayLibrary.Call
// 0x0018 (0x0018 - 0x0000)
struct SolarisArrayLibrary_Call final
{
public:
	TArray<struct FGenericElementType>            Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         Index_0;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisArrayLibrary_Call) == 0x000008, "Wrong alignment on SolarisArrayLibrary_Call");
static_assert(sizeof(SolarisArrayLibrary_Call) == 0x000018, "Wrong size on SolarisArrayLibrary_Call");
static_assert(offsetof(SolarisArrayLibrary_Call, Array) == 0x000000, "Member 'SolarisArrayLibrary_Call::Array' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Call, Index_0) == 0x000010, "Member 'SolarisArrayLibrary_Call::Index_0' has a wrong offset!");

// Function Solaris.SolarisArrayLibrary.Concat
// 0x0030 (0x0030 - 0x0000)
struct SolarisArrayLibrary_Concat final
{
public:
	TArray<struct FGenericElementType>            LHS;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FGenericElementType>            RHS;                                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FGenericElementType>            ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisArrayLibrary_Concat) == 0x000008, "Wrong alignment on SolarisArrayLibrary_Concat");
static_assert(sizeof(SolarisArrayLibrary_Concat) == 0x000030, "Wrong size on SolarisArrayLibrary_Concat");
static_assert(offsetof(SolarisArrayLibrary_Concat, LHS) == 0x000000, "Member 'SolarisArrayLibrary_Concat::LHS' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Concat, RHS) == 0x000010, "Member 'SolarisArrayLibrary_Concat::RHS' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Concat, ReturnValue) == 0x000020, "Member 'SolarisArrayLibrary_Concat::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisArrayLibrary.ConcatEquals
// 0x0030 (0x0030 - 0x0000)
struct SolarisArrayLibrary_ConcatEquals final
{
public:
	TArray<struct FGenericElementType>            LHS;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGenericElementType>            RHS;                                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FGenericElementType>            ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisArrayLibrary_ConcatEquals) == 0x000008, "Wrong alignment on SolarisArrayLibrary_ConcatEquals");
static_assert(sizeof(SolarisArrayLibrary_ConcatEquals) == 0x000030, "Wrong size on SolarisArrayLibrary_ConcatEquals");
static_assert(offsetof(SolarisArrayLibrary_ConcatEquals, LHS) == 0x000000, "Member 'SolarisArrayLibrary_ConcatEquals::LHS' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_ConcatEquals, RHS) == 0x000010, "Member 'SolarisArrayLibrary_ConcatEquals::RHS' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_ConcatEquals, ReturnValue) == 0x000020, "Member 'SolarisArrayLibrary_ConcatEquals::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisArrayLibrary.Empty
// 0x0010 (0x0010 - 0x0000)
struct SolarisArrayLibrary_Empty final
{
public:
	TArray<struct FGenericElementType>            Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisArrayLibrary_Empty) == 0x000008, "Wrong alignment on SolarisArrayLibrary_Empty");
static_assert(sizeof(SolarisArrayLibrary_Empty) == 0x000010, "Wrong size on SolarisArrayLibrary_Empty");
static_assert(offsetof(SolarisArrayLibrary_Empty, Array) == 0x000000, "Member 'SolarisArrayLibrary_Empty::Array' has a wrong offset!");

// Function Solaris.SolarisArrayLibrary.Length
// 0x0018 (0x0018 - 0x0000)
struct SolarisArrayLibrary_Length final
{
public:
	TArray<struct FGenericElementType>            Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisArrayLibrary_Length) == 0x000008, "Wrong alignment on SolarisArrayLibrary_Length");
static_assert(sizeof(SolarisArrayLibrary_Length) == 0x000018, "Wrong size on SolarisArrayLibrary_Length");
static_assert(offsetof(SolarisArrayLibrary_Length, Array) == 0x000000, "Member 'SolarisArrayLibrary_Length::Array' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Length, ReturnValue) == 0x000010, "Member 'SolarisArrayLibrary_Length::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisArrayLibrary.Move
// 0x0020 (0x0020 - 0x0000)
struct SolarisArrayLibrary_Move final
{
public:
	TArray<struct FGenericElementType>            Target;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FGenericElementType>            Source;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisArrayLibrary_Move) == 0x000008, "Wrong alignment on SolarisArrayLibrary_Move");
static_assert(sizeof(SolarisArrayLibrary_Move) == 0x000020, "Wrong size on SolarisArrayLibrary_Move");
static_assert(offsetof(SolarisArrayLibrary_Move, Target) == 0x000000, "Member 'SolarisArrayLibrary_Move::Target' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Move, Source) == 0x000010, "Member 'SolarisArrayLibrary_Move::Source' has a wrong offset!");

// Function Solaris.SolarisArrayLibrary.RefCall
// 0x0018 (0x0018 - 0x0000)
struct SolarisArrayLibrary_RefCall final
{
public:
	TArray<struct FGenericElementType>            Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         Index_0;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisArrayLibrary_RefCall) == 0x000008, "Wrong alignment on SolarisArrayLibrary_RefCall");
static_assert(sizeof(SolarisArrayLibrary_RefCall) == 0x000018, "Wrong size on SolarisArrayLibrary_RefCall");
static_assert(offsetof(SolarisArrayLibrary_RefCall, Array) == 0x000000, "Member 'SolarisArrayLibrary_RefCall::Array' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_RefCall, Index_0) == 0x000010, "Member 'SolarisArrayLibrary_RefCall::Index_0' has a wrong offset!");

// Function Solaris.SolarisArrayLibrary.UnsafeCall
// 0x0018 (0x0018 - 0x0000)
struct SolarisArrayLibrary_UnsafeCall final
{
public:
	TArray<struct FGenericElementType>            Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         Index_0;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisArrayLibrary_UnsafeCall) == 0x000008, "Wrong alignment on SolarisArrayLibrary_UnsafeCall");
static_assert(sizeof(SolarisArrayLibrary_UnsafeCall) == 0x000018, "Wrong size on SolarisArrayLibrary_UnsafeCall");
static_assert(offsetof(SolarisArrayLibrary_UnsafeCall, Array) == 0x000000, "Member 'SolarisArrayLibrary_UnsafeCall::Array' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_UnsafeCall, Index_0) == 0x000010, "Member 'SolarisArrayLibrary_UnsafeCall::Index_0' has a wrong offset!");

// Function Solaris.SolarisCoroutineLibrary.TaskCancel
// 0x0008 (0x0008 - 0x0000)
struct SolarisCoroutineLibrary_TaskCancel final
{
public:
	class UObject*                                Task;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisCoroutineLibrary_TaskCancel) == 0x000008, "Wrong alignment on SolarisCoroutineLibrary_TaskCancel");
static_assert(sizeof(SolarisCoroutineLibrary_TaskCancel) == 0x000008, "Wrong size on SolarisCoroutineLibrary_TaskCancel");
static_assert(offsetof(SolarisCoroutineLibrary_TaskCancel, Task) == 0x000000, "Member 'SolarisCoroutineLibrary_TaskCancel::Task' has a wrong offset!");

// Function Solaris.SolarisCoroutineLibrary.TaskFree
// 0x0008 (0x0008 - 0x0000)
struct SolarisCoroutineLibrary_TaskFree final
{
public:
	class UObject*                                Task;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisCoroutineLibrary_TaskFree) == 0x000008, "Wrong alignment on SolarisCoroutineLibrary_TaskFree");
static_assert(sizeof(SolarisCoroutineLibrary_TaskFree) == 0x000008, "Wrong size on SolarisCoroutineLibrary_TaskFree");
static_assert(offsetof(SolarisCoroutineLibrary_TaskFree, Task) == 0x000000, "Member 'SolarisCoroutineLibrary_TaskFree::Task' has a wrong offset!");

// Function Solaris.SolarisCoroutineLibrary.TaskGetReturnProperty
// 0x0008 (0x0008 - 0x0000)
struct SolarisCoroutineLibrary_TaskGetReturnProperty final
{
public:
	class UObject*                                Task;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisCoroutineLibrary_TaskGetReturnProperty) == 0x000008, "Wrong alignment on SolarisCoroutineLibrary_TaskGetReturnProperty");
static_assert(sizeof(SolarisCoroutineLibrary_TaskGetReturnProperty) == 0x000008, "Wrong size on SolarisCoroutineLibrary_TaskGetReturnProperty");
static_assert(offsetof(SolarisCoroutineLibrary_TaskGetReturnProperty, Task) == 0x000000, "Member 'SolarisCoroutineLibrary_TaskGetReturnProperty::Task' has a wrong offset!");

// Function Solaris.SolarisCoroutineLibrary.TaskGetState
// 0x0010 (0x0010 - 0x0000)
struct SolarisCoroutineLibrary_TaskGetState final
{
public:
	class UObject*                                Task;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisCoroutineLibrary_TaskGetState) == 0x000008, "Wrong alignment on SolarisCoroutineLibrary_TaskGetState");
static_assert(sizeof(SolarisCoroutineLibrary_TaskGetState) == 0x000010, "Wrong size on SolarisCoroutineLibrary_TaskGetState");
static_assert(offsetof(SolarisCoroutineLibrary_TaskGetState, Task) == 0x000000, "Member 'SolarisCoroutineLibrary_TaskGetState::Task' has a wrong offset!");
static_assert(offsetof(SolarisCoroutineLibrary_TaskGetState, ReturnValue) == 0x000008, "Member 'SolarisCoroutineLibrary_TaskGetState::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisCoroutineLibrary.TaskMake
// 0x0030 (0x0030 - 0x0000)
struct SolarisCoroutineLibrary_TaskMake final
{
public:
	class UClass*                                 Type;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Caller;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CallerResumeState;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CallerCancelState;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OwnerInstance;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisCoroutineLibrary_TaskMake) == 0x000008, "Wrong alignment on SolarisCoroutineLibrary_TaskMake");
static_assert(sizeof(SolarisCoroutineLibrary_TaskMake) == 0x000030, "Wrong size on SolarisCoroutineLibrary_TaskMake");
static_assert(offsetof(SolarisCoroutineLibrary_TaskMake, Type) == 0x000000, "Member 'SolarisCoroutineLibrary_TaskMake::Type' has a wrong offset!");
static_assert(offsetof(SolarisCoroutineLibrary_TaskMake, Caller) == 0x000008, "Member 'SolarisCoroutineLibrary_TaskMake::Caller' has a wrong offset!");
static_assert(offsetof(SolarisCoroutineLibrary_TaskMake, CallerResumeState) == 0x000010, "Member 'SolarisCoroutineLibrary_TaskMake::CallerResumeState' has a wrong offset!");
static_assert(offsetof(SolarisCoroutineLibrary_TaskMake, CallerCancelState) == 0x000018, "Member 'SolarisCoroutineLibrary_TaskMake::CallerCancelState' has a wrong offset!");
static_assert(offsetof(SolarisCoroutineLibrary_TaskMake, OwnerInstance) == 0x000020, "Member 'SolarisCoroutineLibrary_TaskMake::OwnerInstance' has a wrong offset!");
static_assert(offsetof(SolarisCoroutineLibrary_TaskMake, ReturnValue) == 0x000028, "Member 'SolarisCoroutineLibrary_TaskMake::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMapLibrary.Add
// 0x0058 (0x0058 - 0x0000)
struct SolarisMapLibrary_Add final
{
public:
	TMap<struct FGenericKeyType, struct FGenericValueType> Map;                                               // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGenericKeyType                        Key;                                               // 0x0050(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericValueType                      Value;                                             // 0x0051(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMapLibrary_Add) == 0x000008, "Wrong alignment on SolarisMapLibrary_Add");
static_assert(sizeof(SolarisMapLibrary_Add) == 0x000058, "Wrong size on SolarisMapLibrary_Add");
static_assert(offsetof(SolarisMapLibrary_Add, Map) == 0x000000, "Member 'SolarisMapLibrary_Add::Map' has a wrong offset!");
static_assert(offsetof(SolarisMapLibrary_Add, Key) == 0x000050, "Member 'SolarisMapLibrary_Add::Key' has a wrong offset!");
static_assert(offsetof(SolarisMapLibrary_Add, Value) == 0x000051, "Member 'SolarisMapLibrary_Add::Value' has a wrong offset!");

// Function Solaris.SolarisMapLibrary.Call
// 0x0058 (0x0058 - 0x0000)
struct SolarisMapLibrary_Call final
{
public:
	TMap<struct FGenericKeyType, struct FGenericValueType> Map;                                               // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGenericKeyType                        Key;                                               // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMapLibrary_Call) == 0x000008, "Wrong alignment on SolarisMapLibrary_Call");
static_assert(sizeof(SolarisMapLibrary_Call) == 0x000058, "Wrong size on SolarisMapLibrary_Call");
static_assert(offsetof(SolarisMapLibrary_Call, Map) == 0x000000, "Member 'SolarisMapLibrary_Call::Map' has a wrong offset!");
static_assert(offsetof(SolarisMapLibrary_Call, Key) == 0x000050, "Member 'SolarisMapLibrary_Call::Key' has a wrong offset!");

// Function Solaris.SolarisMapLibrary.CompletelyAssignedRefCall
// 0x0058 (0x0058 - 0x0000)
struct SolarisMapLibrary_CompletelyAssignedRefCall final
{
public:
	TMap<struct FGenericKeyType, struct FGenericValueType> Map;                                               // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGenericKeyType                        Key;                                               // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMapLibrary_CompletelyAssignedRefCall) == 0x000008, "Wrong alignment on SolarisMapLibrary_CompletelyAssignedRefCall");
static_assert(sizeof(SolarisMapLibrary_CompletelyAssignedRefCall) == 0x000058, "Wrong size on SolarisMapLibrary_CompletelyAssignedRefCall");
static_assert(offsetof(SolarisMapLibrary_CompletelyAssignedRefCall, Map) == 0x000000, "Member 'SolarisMapLibrary_CompletelyAssignedRefCall::Map' has a wrong offset!");
static_assert(offsetof(SolarisMapLibrary_CompletelyAssignedRefCall, Key) == 0x000050, "Member 'SolarisMapLibrary_CompletelyAssignedRefCall::Key' has a wrong offset!");

// Function Solaris.SolarisMapLibrary.Concat
// 0x00F0 (0x00F0 - 0x0000)
struct SolarisMapLibrary_Concat final
{
public:
	TMap<struct FGenericKeyType, struct FGenericValueType> LHS;                                               // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<struct FGenericKeyType, struct FGenericValueType> RHS;                                               // 0x0050(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<struct FGenericKeyType, struct FGenericValueType> ReturnValue;                                       // 0x00A0(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMapLibrary_Concat) == 0x000008, "Wrong alignment on SolarisMapLibrary_Concat");
static_assert(sizeof(SolarisMapLibrary_Concat) == 0x0000F0, "Wrong size on SolarisMapLibrary_Concat");
static_assert(offsetof(SolarisMapLibrary_Concat, LHS) == 0x000000, "Member 'SolarisMapLibrary_Concat::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMapLibrary_Concat, RHS) == 0x000050, "Member 'SolarisMapLibrary_Concat::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMapLibrary_Concat, ReturnValue) == 0x0000A0, "Member 'SolarisMapLibrary_Concat::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMapLibrary.GetKeyByIndex
// 0x0060 (0x0060 - 0x0000)
struct SolarisMapLibrary_GetKeyByIndex final
{
public:
	TMap<struct FGenericKeyType, struct FGenericValueType> Map;                                               // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         Index_0;                                           // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericKeyType                        ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMapLibrary_GetKeyByIndex) == 0x000008, "Wrong alignment on SolarisMapLibrary_GetKeyByIndex");
static_assert(sizeof(SolarisMapLibrary_GetKeyByIndex) == 0x000060, "Wrong size on SolarisMapLibrary_GetKeyByIndex");
static_assert(offsetof(SolarisMapLibrary_GetKeyByIndex, Map) == 0x000000, "Member 'SolarisMapLibrary_GetKeyByIndex::Map' has a wrong offset!");
static_assert(offsetof(SolarisMapLibrary_GetKeyByIndex, Index_0) == 0x000050, "Member 'SolarisMapLibrary_GetKeyByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(SolarisMapLibrary_GetKeyByIndex, ReturnValue) == 0x000058, "Member 'SolarisMapLibrary_GetKeyByIndex::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMapLibrary.GetNextValidIndex
// 0x0060 (0x0060 - 0x0000)
struct SolarisMapLibrary_GetNextValidIndex final
{
public:
	TMap<struct FGenericKeyType, struct FGenericValueType> Map;                                               // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         InitialIndex;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMapLibrary_GetNextValidIndex) == 0x000008, "Wrong alignment on SolarisMapLibrary_GetNextValidIndex");
static_assert(sizeof(SolarisMapLibrary_GetNextValidIndex) == 0x000060, "Wrong size on SolarisMapLibrary_GetNextValidIndex");
static_assert(offsetof(SolarisMapLibrary_GetNextValidIndex, Map) == 0x000000, "Member 'SolarisMapLibrary_GetNextValidIndex::Map' has a wrong offset!");
static_assert(offsetof(SolarisMapLibrary_GetNextValidIndex, InitialIndex) == 0x000050, "Member 'SolarisMapLibrary_GetNextValidIndex::InitialIndex' has a wrong offset!");
static_assert(offsetof(SolarisMapLibrary_GetNextValidIndex, ReturnValue) == 0x000058, "Member 'SolarisMapLibrary_GetNextValidIndex::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMapLibrary.GetValueByIndex
// 0x0060 (0x0060 - 0x0000)
struct SolarisMapLibrary_GetValueByIndex final
{
public:
	TMap<struct FGenericKeyType, struct FGenericValueType> Map;                                               // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         Index_0;                                           // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericValueType                      ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMapLibrary_GetValueByIndex) == 0x000008, "Wrong alignment on SolarisMapLibrary_GetValueByIndex");
static_assert(sizeof(SolarisMapLibrary_GetValueByIndex) == 0x000060, "Wrong size on SolarisMapLibrary_GetValueByIndex");
static_assert(offsetof(SolarisMapLibrary_GetValueByIndex, Map) == 0x000000, "Member 'SolarisMapLibrary_GetValueByIndex::Map' has a wrong offset!");
static_assert(offsetof(SolarisMapLibrary_GetValueByIndex, Index_0) == 0x000050, "Member 'SolarisMapLibrary_GetValueByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(SolarisMapLibrary_GetValueByIndex, ReturnValue) == 0x000058, "Member 'SolarisMapLibrary_GetValueByIndex::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMapLibrary.InitMap
// 0x0050 (0x0050 - 0x0000)
struct SolarisMapLibrary_InitMap final
{
public:
	TMap<struct FGenericKeyType, struct FGenericValueType> Map;                                               // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMapLibrary_InitMap) == 0x000008, "Wrong alignment on SolarisMapLibrary_InitMap");
static_assert(sizeof(SolarisMapLibrary_InitMap) == 0x000050, "Wrong size on SolarisMapLibrary_InitMap");
static_assert(offsetof(SolarisMapLibrary_InitMap, Map) == 0x000000, "Member 'SolarisMapLibrary_InitMap::Map' has a wrong offset!");

// Function Solaris.SolarisMapLibrary.Length
// 0x0058 (0x0058 - 0x0000)
struct SolarisMapLibrary_Length final
{
public:
	TMap<struct FGenericKeyType, struct FGenericValueType> Map;                                               // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMapLibrary_Length) == 0x000008, "Wrong alignment on SolarisMapLibrary_Length");
static_assert(sizeof(SolarisMapLibrary_Length) == 0x000058, "Wrong size on SolarisMapLibrary_Length");
static_assert(offsetof(SolarisMapLibrary_Length, Map) == 0x000000, "Member 'SolarisMapLibrary_Length::Map' has a wrong offset!");
static_assert(offsetof(SolarisMapLibrary_Length, ReturnValue) == 0x000050, "Member 'SolarisMapLibrary_Length::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMapLibrary.Move
// 0x00A0 (0x00A0 - 0x0000)
struct SolarisMapLibrary_Move final
{
public:
	TMap<struct FGenericKeyType, struct FGenericValueType> Dest;                                              // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	TMap<struct FGenericKeyType, struct FGenericValueType> Src;                                               // 0x0050(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMapLibrary_Move) == 0x000008, "Wrong alignment on SolarisMapLibrary_Move");
static_assert(sizeof(SolarisMapLibrary_Move) == 0x0000A0, "Wrong size on SolarisMapLibrary_Move");
static_assert(offsetof(SolarisMapLibrary_Move, Dest) == 0x000000, "Member 'SolarisMapLibrary_Move::Dest' has a wrong offset!");
static_assert(offsetof(SolarisMapLibrary_Move, Src) == 0x000050, "Member 'SolarisMapLibrary_Move::Src' has a wrong offset!");

// Function Solaris.SolarisMapLibrary.RefCall
// 0x0058 (0x0058 - 0x0000)
struct SolarisMapLibrary_RefCall final
{
public:
	TMap<struct FGenericKeyType, struct FGenericValueType> Map;                                               // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGenericKeyType                        Key;                                               // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMapLibrary_RefCall) == 0x000008, "Wrong alignment on SolarisMapLibrary_RefCall");
static_assert(sizeof(SolarisMapLibrary_RefCall) == 0x000058, "Wrong size on SolarisMapLibrary_RefCall");
static_assert(offsetof(SolarisMapLibrary_RefCall, Map) == 0x000000, "Member 'SolarisMapLibrary_RefCall::Map' has a wrong offset!");
static_assert(offsetof(SolarisMapLibrary_RefCall, Key) == 0x000050, "Member 'SolarisMapLibrary_RefCall::Key' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.abs
// 0x0008 (0x0008 - 0x0000)
struct SolarisMathLibrary_Int_abs final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_abs) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_abs");
static_assert(sizeof(SolarisMathLibrary_Int_abs) == 0x000008, "Wrong size on SolarisMathLibrary_Int_abs");
static_assert(offsetof(SolarisMathLibrary_Int_abs, Value) == 0x000000, "Member 'SolarisMathLibrary_Int_abs::Value' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.Add
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Int_Add final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Add) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_Add");
static_assert(sizeof(SolarisMathLibrary_Int_Add) == 0x000010, "Wrong size on SolarisMathLibrary_Int_Add");
static_assert(offsetof(SolarisMathLibrary_Int_Add, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_Add::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Add, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_Add::RHS' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.AddEquals
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Int_AddEquals final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_AddEquals) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_AddEquals");
static_assert(sizeof(SolarisMathLibrary_Int_AddEquals) == 0x000010, "Wrong size on SolarisMathLibrary_Int_AddEquals");
static_assert(offsetof(SolarisMathLibrary_Int_AddEquals, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_AddEquals::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_AddEquals, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_AddEquals::RHS' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.CheckConstrainedInt
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Int_CheckConstrainedInt final
{
public:
	int64                                         min_0;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         max_0;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Value;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_CheckConstrainedInt) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_CheckConstrainedInt");
static_assert(sizeof(SolarisMathLibrary_Int_CheckConstrainedInt) == 0x000018, "Wrong size on SolarisMathLibrary_Int_CheckConstrainedInt");
static_assert(offsetof(SolarisMathLibrary_Int_CheckConstrainedInt, min_0) == 0x000000, "Member 'SolarisMathLibrary_Int_CheckConstrainedInt::min_0' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_CheckConstrainedInt, max_0) == 0x000008, "Member 'SolarisMathLibrary_Int_CheckConstrainedInt::max_0' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_CheckConstrainedInt, Value) == 0x000010, "Member 'SolarisMathLibrary_Int_CheckConstrainedInt::Value' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.Divide
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Int_Divide final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Divide) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_Divide");
static_assert(sizeof(SolarisMathLibrary_Int_Divide) == 0x000010, "Wrong size on SolarisMathLibrary_Int_Divide");
static_assert(offsetof(SolarisMathLibrary_Int_Divide, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_Divide::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Divide, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_Divide::RHS' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.Greater
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Int_Greater final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Greater) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_Greater");
static_assert(sizeof(SolarisMathLibrary_Int_Greater) == 0x000010, "Wrong size on SolarisMathLibrary_Int_Greater");
static_assert(offsetof(SolarisMathLibrary_Int_Greater, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_Greater::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Greater, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_Greater::RHS' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.GreaterEqual
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Int_GreaterEqual final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_GreaterEqual) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_GreaterEqual");
static_assert(sizeof(SolarisMathLibrary_Int_GreaterEqual) == 0x000010, "Wrong size on SolarisMathLibrary_Int_GreaterEqual");
static_assert(offsetof(SolarisMathLibrary_Int_GreaterEqual, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_GreaterEqual::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_GreaterEqual, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_GreaterEqual::RHS' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.Less
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Int_Less final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Less) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_Less");
static_assert(sizeof(SolarisMathLibrary_Int_Less) == 0x000010, "Wrong size on SolarisMathLibrary_Int_Less");
static_assert(offsetof(SolarisMathLibrary_Int_Less, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_Less::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Less, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_Less::RHS' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.LessEqual
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Int_LessEqual final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_LessEqual) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_LessEqual");
static_assert(sizeof(SolarisMathLibrary_Int_LessEqual) == 0x000010, "Wrong size on SolarisMathLibrary_Int_LessEqual");
static_assert(offsetof(SolarisMathLibrary_Int_LessEqual, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_LessEqual::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_LessEqual, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_LessEqual::RHS' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.Multiply
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Int_Multiply final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Multiply) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_Multiply");
static_assert(sizeof(SolarisMathLibrary_Int_Multiply) == 0x000010, "Wrong size on SolarisMathLibrary_Int_Multiply");
static_assert(offsetof(SolarisMathLibrary_Int_Multiply, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_Multiply::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Multiply, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_Multiply::RHS' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.MultiplyEquals
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Int_MultiplyEquals final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_MultiplyEquals) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_MultiplyEquals");
static_assert(sizeof(SolarisMathLibrary_Int_MultiplyEquals) == 0x000010, "Wrong size on SolarisMathLibrary_Int_MultiplyEquals");
static_assert(offsetof(SolarisMathLibrary_Int_MultiplyEquals, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_MultiplyEquals::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_MultiplyEquals, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_MultiplyEquals::RHS' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.Negate
// 0x0008 (0x0008 - 0x0000)
struct SolarisMathLibrary_Int_Negate final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Negate) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_Negate");
static_assert(sizeof(SolarisMathLibrary_Int_Negate) == 0x000008, "Wrong size on SolarisMathLibrary_Int_Negate");
static_assert(offsetof(SolarisMathLibrary_Int_Negate, Value) == 0x000000, "Member 'SolarisMathLibrary_Int_Negate::Value' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.PredicateEqual
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Int_PredicateEqual final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_PredicateEqual) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_PredicateEqual");
static_assert(sizeof(SolarisMathLibrary_Int_PredicateEqual) == 0x000018, "Wrong size on SolarisMathLibrary_Int_PredicateEqual");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateEqual, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_PredicateEqual::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateEqual, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_PredicateEqual::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateEqual, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Int_PredicateEqual::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.PredicateGreater
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Int_PredicateGreater final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_PredicateGreater) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_PredicateGreater");
static_assert(sizeof(SolarisMathLibrary_Int_PredicateGreater) == 0x000018, "Wrong size on SolarisMathLibrary_Int_PredicateGreater");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateGreater, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_PredicateGreater::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateGreater, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_PredicateGreater::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateGreater, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Int_PredicateGreater::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.PredicateGreaterEqual
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Int_PredicateGreaterEqual final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_PredicateGreaterEqual) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_PredicateGreaterEqual");
static_assert(sizeof(SolarisMathLibrary_Int_PredicateGreaterEqual) == 0x000018, "Wrong size on SolarisMathLibrary_Int_PredicateGreaterEqual");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateGreaterEqual, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_PredicateGreaterEqual::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateGreaterEqual, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_PredicateGreaterEqual::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateGreaterEqual, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Int_PredicateGreaterEqual::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.PredicateLess
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Int_PredicateLess final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_PredicateLess) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_PredicateLess");
static_assert(sizeof(SolarisMathLibrary_Int_PredicateLess) == 0x000018, "Wrong size on SolarisMathLibrary_Int_PredicateLess");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateLess, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_PredicateLess::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateLess, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_PredicateLess::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateLess, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Int_PredicateLess::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.PredicateLessEqual
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Int_PredicateLessEqual final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_PredicateLessEqual) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_PredicateLessEqual");
static_assert(sizeof(SolarisMathLibrary_Int_PredicateLessEqual) == 0x000018, "Wrong size on SolarisMathLibrary_Int_PredicateLessEqual");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateLessEqual, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_PredicateLessEqual::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateLessEqual, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_PredicateLessEqual::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateLessEqual, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Int_PredicateLessEqual::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.PredicateNotEqual
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Int_PredicateNotEqual final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_PredicateNotEqual) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_PredicateNotEqual");
static_assert(sizeof(SolarisMathLibrary_Int_PredicateNotEqual) == 0x000018, "Wrong size on SolarisMathLibrary_Int_PredicateNotEqual");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateNotEqual, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_PredicateNotEqual::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateNotEqual, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_PredicateNotEqual::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_PredicateNotEqual, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Int_PredicateNotEqual::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.Subtract
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Int_Subtract final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Subtract) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_Subtract");
static_assert(sizeof(SolarisMathLibrary_Int_Subtract) == 0x000010, "Wrong size on SolarisMathLibrary_Int_Subtract");
static_assert(offsetof(SolarisMathLibrary_Int_Subtract, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_Subtract::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Subtract, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_Subtract::RHS' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.SubtractEquals
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Int_SubtractEquals final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_SubtractEquals) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_SubtractEquals");
static_assert(sizeof(SolarisMathLibrary_Int_SubtractEquals) == 0x000010, "Wrong size on SolarisMathLibrary_Int_SubtractEquals");
static_assert(offsetof(SolarisMathLibrary_Int_SubtractEquals, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_SubtractEquals::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_SubtractEquals, RHS) == 0x000008, "Member 'SolarisMathLibrary_Int_SubtractEquals::RHS' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.UncheckedConvertI32I64
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Int_UncheckedConvertI32I64 final
{
public:
	int64                                         RHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_UncheckedConvertI32I64) == 0x000008, "Wrong alignment on SolarisMathLibrary_Int_UncheckedConvertI32I64");
static_assert(sizeof(SolarisMathLibrary_Int_UncheckedConvertI32I64) == 0x000010, "Wrong size on SolarisMathLibrary_Int_UncheckedConvertI32I64");
static_assert(offsetof(SolarisMathLibrary_Int_UncheckedConvertI32I64, RHS) == 0x000000, "Member 'SolarisMathLibrary_Int_UncheckedConvertI32I64::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_UncheckedConvertI32I64, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_UncheckedConvertI32I64::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Rational.ceil
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Rational_ceil final
{
public:
	struct FVerseRational                         Val;                                               // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Rational_ceil) == 0x000008, "Wrong alignment on SolarisMathLibrary_Rational_ceil");
static_assert(sizeof(SolarisMathLibrary_Rational_ceil) == 0x000010, "Wrong size on SolarisMathLibrary_Rational_ceil");
static_assert(offsetof(SolarisMathLibrary_Rational_ceil, Val) == 0x000000, "Member 'SolarisMathLibrary_Rational_ceil::Val' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Rational.floor
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Rational_floor final
{
public:
	struct FVerseRational                         Val;                                               // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Rational_floor) == 0x000008, "Wrong alignment on SolarisMathLibrary_Rational_floor");
static_assert(sizeof(SolarisMathLibrary_Rational_floor) == 0x000010, "Wrong size on SolarisMathLibrary_Rational_floor");
static_assert(offsetof(SolarisMathLibrary_Rational_floor, Val) == 0x000000, "Member 'SolarisMathLibrary_Rational_floor::Val' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.abs
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Float_abs final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_abs) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_abs");
static_assert(sizeof(SolarisMathLibrary_Float_abs) == 0x000010, "Wrong size on SolarisMathLibrary_Float_abs");
static_assert(offsetof(SolarisMathLibrary_Float_abs, Value) == 0x000000, "Member 'SolarisMathLibrary_Float_abs::Value' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_abs, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_abs::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.Add
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Float_Add final
{
public:
	double                                        LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Add) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_Add");
static_assert(sizeof(SolarisMathLibrary_Float_Add) == 0x000018, "Wrong size on SolarisMathLibrary_Float_Add");
static_assert(offsetof(SolarisMathLibrary_Float_Add, LHS) == 0x000000, "Member 'SolarisMathLibrary_Float_Add::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Add, RHS) == 0x000008, "Member 'SolarisMathLibrary_Float_Add::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Add, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Float_Add::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.AddEquals
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Float_AddEquals final
{
public:
	double                                        LHS;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_AddEquals) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_AddEquals");
static_assert(sizeof(SolarisMathLibrary_Float_AddEquals) == 0x000018, "Wrong size on SolarisMathLibrary_Float_AddEquals");
static_assert(offsetof(SolarisMathLibrary_Float_AddEquals, LHS) == 0x000000, "Member 'SolarisMathLibrary_Float_AddEquals::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_AddEquals, RHS) == 0x000008, "Member 'SolarisMathLibrary_Float_AddEquals::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_AddEquals, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Float_AddEquals::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.CheckConstrainedFloat
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Float_CheckConstrainedFloat final
{
public:
	double                                        min_0;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        max_0;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Value;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_CheckConstrainedFloat) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_CheckConstrainedFloat");
static_assert(sizeof(SolarisMathLibrary_Float_CheckConstrainedFloat) == 0x000018, "Wrong size on SolarisMathLibrary_Float_CheckConstrainedFloat");
static_assert(offsetof(SolarisMathLibrary_Float_CheckConstrainedFloat, min_0) == 0x000000, "Member 'SolarisMathLibrary_Float_CheckConstrainedFloat::min_0' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_CheckConstrainedFloat, max_0) == 0x000008, "Member 'SolarisMathLibrary_Float_CheckConstrainedFloat::max_0' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_CheckConstrainedFloat, Value) == 0x000010, "Member 'SolarisMathLibrary_Float_CheckConstrainedFloat::Value' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.Divide
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Float_Divide final
{
public:
	double                                        LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Divide) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_Divide");
static_assert(sizeof(SolarisMathLibrary_Float_Divide) == 0x000018, "Wrong size on SolarisMathLibrary_Float_Divide");
static_assert(offsetof(SolarisMathLibrary_Float_Divide, LHS) == 0x000000, "Member 'SolarisMathLibrary_Float_Divide::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Divide, RHS) == 0x000008, "Member 'SolarisMathLibrary_Float_Divide::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Divide, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Float_Divide::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.DivideEquals
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Float_DivideEquals final
{
public:
	double                                        LHS;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_DivideEquals) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_DivideEquals");
static_assert(sizeof(SolarisMathLibrary_Float_DivideEquals) == 0x000018, "Wrong size on SolarisMathLibrary_Float_DivideEquals");
static_assert(offsetof(SolarisMathLibrary_Float_DivideEquals, LHS) == 0x000000, "Member 'SolarisMathLibrary_Float_DivideEquals::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_DivideEquals, RHS) == 0x000008, "Member 'SolarisMathLibrary_Float_DivideEquals::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_DivideEquals, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Float_DivideEquals::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.Greater
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Float_Greater final
{
public:
	double                                        LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Greater) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_Greater");
static_assert(sizeof(SolarisMathLibrary_Float_Greater) == 0x000010, "Wrong size on SolarisMathLibrary_Float_Greater");
static_assert(offsetof(SolarisMathLibrary_Float_Greater, LHS) == 0x000000, "Member 'SolarisMathLibrary_Float_Greater::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Greater, RHS) == 0x000008, "Member 'SolarisMathLibrary_Float_Greater::RHS' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.GreaterEqual
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Float_GreaterEqual final
{
public:
	double                                        LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_GreaterEqual) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_GreaterEqual");
static_assert(sizeof(SolarisMathLibrary_Float_GreaterEqual) == 0x000010, "Wrong size on SolarisMathLibrary_Float_GreaterEqual");
static_assert(offsetof(SolarisMathLibrary_Float_GreaterEqual, LHS) == 0x000000, "Member 'SolarisMathLibrary_Float_GreaterEqual::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_GreaterEqual, RHS) == 0x000008, "Member 'SolarisMathLibrary_Float_GreaterEqual::RHS' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.Less
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Float_Less final
{
public:
	double                                        LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Less) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_Less");
static_assert(sizeof(SolarisMathLibrary_Float_Less) == 0x000010, "Wrong size on SolarisMathLibrary_Float_Less");
static_assert(offsetof(SolarisMathLibrary_Float_Less, LHS) == 0x000000, "Member 'SolarisMathLibrary_Float_Less::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Less, RHS) == 0x000008, "Member 'SolarisMathLibrary_Float_Less::RHS' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.LessEqual
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Float_LessEqual final
{
public:
	double                                        LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_LessEqual) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_LessEqual");
static_assert(sizeof(SolarisMathLibrary_Float_LessEqual) == 0x000010, "Wrong size on SolarisMathLibrary_Float_LessEqual");
static_assert(offsetof(SolarisMathLibrary_Float_LessEqual, LHS) == 0x000000, "Member 'SolarisMathLibrary_Float_LessEqual::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_LessEqual, RHS) == 0x000008, "Member 'SolarisMathLibrary_Float_LessEqual::RHS' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.Multiply
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Float_Multiply final
{
public:
	double                                        LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Multiply) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_Multiply");
static_assert(sizeof(SolarisMathLibrary_Float_Multiply) == 0x000018, "Wrong size on SolarisMathLibrary_Float_Multiply");
static_assert(offsetof(SolarisMathLibrary_Float_Multiply, LHS) == 0x000000, "Member 'SolarisMathLibrary_Float_Multiply::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Multiply, RHS) == 0x000008, "Member 'SolarisMathLibrary_Float_Multiply::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Multiply, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Float_Multiply::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.MultiplyEquals
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Float_MultiplyEquals final
{
public:
	double                                        LHS;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_MultiplyEquals) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_MultiplyEquals");
static_assert(sizeof(SolarisMathLibrary_Float_MultiplyEquals) == 0x000018, "Wrong size on SolarisMathLibrary_Float_MultiplyEquals");
static_assert(offsetof(SolarisMathLibrary_Float_MultiplyEquals, LHS) == 0x000000, "Member 'SolarisMathLibrary_Float_MultiplyEquals::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_MultiplyEquals, RHS) == 0x000008, "Member 'SolarisMathLibrary_Float_MultiplyEquals::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_MultiplyEquals, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Float_MultiplyEquals::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.MultiplyFloatInt
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Float_MultiplyFloatInt final
{
public:
	double                                        LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_MultiplyFloatInt) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_MultiplyFloatInt");
static_assert(sizeof(SolarisMathLibrary_Float_MultiplyFloatInt) == 0x000018, "Wrong size on SolarisMathLibrary_Float_MultiplyFloatInt");
static_assert(offsetof(SolarisMathLibrary_Float_MultiplyFloatInt, LHS) == 0x000000, "Member 'SolarisMathLibrary_Float_MultiplyFloatInt::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_MultiplyFloatInt, RHS) == 0x000008, "Member 'SolarisMathLibrary_Float_MultiplyFloatInt::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_MultiplyFloatInt, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Float_MultiplyFloatInt::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.MultiplyIntFloat
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Float_MultiplyIntFloat final
{
public:
	int64                                         LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_MultiplyIntFloat) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_MultiplyIntFloat");
static_assert(sizeof(SolarisMathLibrary_Float_MultiplyIntFloat) == 0x000018, "Wrong size on SolarisMathLibrary_Float_MultiplyIntFloat");
static_assert(offsetof(SolarisMathLibrary_Float_MultiplyIntFloat, LHS) == 0x000000, "Member 'SolarisMathLibrary_Float_MultiplyIntFloat::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_MultiplyIntFloat, RHS) == 0x000008, "Member 'SolarisMathLibrary_Float_MultiplyIntFloat::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_MultiplyIntFloat, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Float_MultiplyIntFloat::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.Negate
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_Float_Negate final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Negate) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_Negate");
static_assert(sizeof(SolarisMathLibrary_Float_Negate) == 0x000010, "Wrong size on SolarisMathLibrary_Float_Negate");
static_assert(offsetof(SolarisMathLibrary_Float_Negate, Value) == 0x000000, "Member 'SolarisMathLibrary_Float_Negate::Value' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Negate, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Negate::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.Subtract
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Float_Subtract final
{
public:
	double                                        LHS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Subtract) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_Subtract");
static_assert(sizeof(SolarisMathLibrary_Float_Subtract) == 0x000018, "Wrong size on SolarisMathLibrary_Float_Subtract");
static_assert(offsetof(SolarisMathLibrary_Float_Subtract, LHS) == 0x000000, "Member 'SolarisMathLibrary_Float_Subtract::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Subtract, RHS) == 0x000008, "Member 'SolarisMathLibrary_Float_Subtract::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Subtract, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Float_Subtract::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.SubtractEquals
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Float_SubtractEquals final
{
public:
	double                                        LHS;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RHS;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_SubtractEquals) == 0x000008, "Wrong alignment on SolarisMathLibrary_Float_SubtractEquals");
static_assert(sizeof(SolarisMathLibrary_Float_SubtractEquals) == 0x000018, "Wrong size on SolarisMathLibrary_Float_SubtractEquals");
static_assert(offsetof(SolarisMathLibrary_Float_SubtractEquals, LHS) == 0x000000, "Member 'SolarisMathLibrary_Float_SubtractEquals::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_SubtractEquals, RHS) == 0x000008, "Member 'SolarisMathLibrary_Float_SubtractEquals::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_SubtractEquals, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Float_SubtractEquals::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_String.Add
// 0x0008 (0x0008 - 0x0000)
struct SolarisMathLibrary_String_Add final
{
public:
	int32                                         String;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Character;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_String_Add) == 0x000004, "Wrong alignment on SolarisMathLibrary_String_Add");
static_assert(sizeof(SolarisMathLibrary_String_Add) == 0x000008, "Wrong size on SolarisMathLibrary_String_Add");
static_assert(offsetof(SolarisMathLibrary_String_Add, String) == 0x000000, "Member 'SolarisMathLibrary_String_Add::String' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_String_Add, Character) == 0x000004, "Member 'SolarisMathLibrary_String_Add::Character' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_String.Call
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_String_Call final
{
public:
	int32                                         String;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Index_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_String_Call) == 0x000008, "Wrong alignment on SolarisMathLibrary_String_Call");
static_assert(sizeof(SolarisMathLibrary_String_Call) == 0x000010, "Wrong size on SolarisMathLibrary_String_Call");
static_assert(offsetof(SolarisMathLibrary_String_Call, String) == 0x000000, "Member 'SolarisMathLibrary_String_Call::String' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_String_Call, Index_0) == 0x000008, "Member 'SolarisMathLibrary_String_Call::Index_0' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_String.Concat
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_String_Concat final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_String_Concat) == 0x000004, "Wrong alignment on SolarisMathLibrary_String_Concat");
static_assert(sizeof(SolarisMathLibrary_String_Concat) == 0x00000C, "Wrong size on SolarisMathLibrary_String_Concat");
static_assert(offsetof(SolarisMathLibrary_String_Concat, LHS) == 0x000000, "Member 'SolarisMathLibrary_String_Concat::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_String_Concat, RHS) == 0x000004, "Member 'SolarisMathLibrary_String_Concat::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_String_Concat, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_String_Concat::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_String.ConcatEquals
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_String_ConcatEquals final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_String_ConcatEquals) == 0x000004, "Wrong alignment on SolarisMathLibrary_String_ConcatEquals");
static_assert(sizeof(SolarisMathLibrary_String_ConcatEquals) == 0x00000C, "Wrong size on SolarisMathLibrary_String_ConcatEquals");
static_assert(offsetof(SolarisMathLibrary_String_ConcatEquals, LHS) == 0x000000, "Member 'SolarisMathLibrary_String_ConcatEquals::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_String_ConcatEquals, RHS) == 0x000004, "Member 'SolarisMathLibrary_String_ConcatEquals::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_String_ConcatEquals, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_String_ConcatEquals::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_String.Length
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_String_Length final
{
public:
	int32                                         Array;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_String_Length) == 0x000008, "Wrong alignment on SolarisMathLibrary_String_Length");
static_assert(sizeof(SolarisMathLibrary_String_Length) == 0x000010, "Wrong size on SolarisMathLibrary_String_Length");
static_assert(offsetof(SolarisMathLibrary_String_Length, Array) == 0x000000, "Member 'SolarisMathLibrary_String_Length::Array' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_String_Length, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_String_Length::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_String.MakeLiteral
// 0x0004 (0x0004 - 0x0000)
struct SolarisMathLibrary_String_MakeLiteral final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_String_MakeLiteral) == 0x000004, "Wrong alignment on SolarisMathLibrary_String_MakeLiteral");
static_assert(sizeof(SolarisMathLibrary_String_MakeLiteral) == 0x000004, "Wrong size on SolarisMathLibrary_String_MakeLiteral");
static_assert(offsetof(SolarisMathLibrary_String_MakeLiteral, ReturnValue) == 0x000000, "Member 'SolarisMathLibrary_String_MakeLiteral::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_String.Move
// 0x0008 (0x0008 - 0x0000)
struct SolarisMathLibrary_String_Move final
{
public:
	int32                                         Destination;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Source;                                            // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_String_Move) == 0x000004, "Wrong alignment on SolarisMathLibrary_String_Move");
static_assert(sizeof(SolarisMathLibrary_String_Move) == 0x000008, "Wrong size on SolarisMathLibrary_String_Move");
static_assert(offsetof(SolarisMathLibrary_String_Move, Destination) == 0x000000, "Member 'SolarisMathLibrary_String_Move::Destination' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_String_Move, Source) == 0x000004, "Member 'SolarisMathLibrary_String_Move::Source' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_String.RefCall
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_String_RefCall final
{
public:
	int32                                         String;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Index_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_String_RefCall) == 0x000008, "Wrong alignment on SolarisMathLibrary_String_RefCall");
static_assert(sizeof(SolarisMathLibrary_String_RefCall) == 0x000010, "Wrong size on SolarisMathLibrary_String_RefCall");
static_assert(offsetof(SolarisMathLibrary_String_RefCall, String) == 0x000000, "Member 'SolarisMathLibrary_String_RefCall::String' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_String_RefCall, Index_0) == 0x000008, "Member 'SolarisMathLibrary_String_RefCall::Index_0' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_String.UncheckedCall
// 0x0010 (0x0010 - 0x0000)
struct SolarisMathLibrary_String_UncheckedCall final
{
public:
	int32                                         String;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Index_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_String_UncheckedCall) == 0x000008, "Wrong alignment on SolarisMathLibrary_String_UncheckedCall");
static_assert(sizeof(SolarisMathLibrary_String_UncheckedCall) == 0x000010, "Wrong size on SolarisMathLibrary_String_UncheckedCall");
static_assert(offsetof(SolarisMathLibrary_String_UncheckedCall, String) == 0x000000, "Member 'SolarisMathLibrary_String_UncheckedCall::String' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_String_UncheckedCall, Index_0) == 0x000008, "Member 'SolarisMathLibrary_String_UncheckedCall::Index_0' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.AddPropertyToSubobjectExclusionList
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_AddPropertyToSubobjectExclusionList final
{
public:
	int64                                         InstancingGraph;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Property;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisUtilLibrary_AddPropertyToSubobjectExclusionList) == 0x000008, "Wrong alignment on SolarisUtilLibrary_AddPropertyToSubobjectExclusionList");
static_assert(sizeof(SolarisUtilLibrary_AddPropertyToSubobjectExclusionList) == 0x000010, "Wrong size on SolarisUtilLibrary_AddPropertyToSubobjectExclusionList");
static_assert(offsetof(SolarisUtilLibrary_AddPropertyToSubobjectExclusionList, InstancingGraph) == 0x000000, "Member 'SolarisUtilLibrary_AddPropertyToSubobjectExclusionList::InstancingGraph' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_AddPropertyToSubobjectExclusionList, Property) == 0x000008, "Member 'SolarisUtilLibrary_AddPropertyToSubobjectExclusionList::Property' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.Dereference
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_Dereference final
{
public:
	int64                                         Reference;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisUtilLibrary_Dereference) == 0x000008, "Wrong alignment on SolarisUtilLibrary_Dereference");
static_assert(sizeof(SolarisUtilLibrary_Dereference) == 0x000010, "Wrong size on SolarisUtilLibrary_Dereference");
static_assert(offsetof(SolarisUtilLibrary_Dereference, Reference) == 0x000000, "Member 'SolarisUtilLibrary_Dereference::Reference' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_Dereference, ReturnValue) == 0x000008, "Member 'SolarisUtilLibrary_Dereference::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.GetCurrentlyInstantiatedObject
// 0x0008 (0x0008 - 0x0000)
struct SolarisUtilLibrary_GetCurrentlyInstantiatedObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisUtilLibrary_GetCurrentlyInstantiatedObject) == 0x000008, "Wrong alignment on SolarisUtilLibrary_GetCurrentlyInstantiatedObject");
static_assert(sizeof(SolarisUtilLibrary_GetCurrentlyInstantiatedObject) == 0x000008, "Wrong size on SolarisUtilLibrary_GetCurrentlyInstantiatedObject");
static_assert(offsetof(SolarisUtilLibrary_GetCurrentlyInstantiatedObject, ReturnValue) == 0x000000, "Member 'SolarisUtilLibrary_GetCurrentlyInstantiatedObject::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.GetFunctionForInterfaceMethod
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_GetFunctionForInterfaceMethod final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MethodName;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisUtilLibrary_GetFunctionForInterfaceMethod) == 0x000008, "Wrong alignment on SolarisUtilLibrary_GetFunctionForInterfaceMethod");
static_assert(sizeof(SolarisUtilLibrary_GetFunctionForInterfaceMethod) == 0x000010, "Wrong size on SolarisUtilLibrary_GetFunctionForInterfaceMethod");
static_assert(offsetof(SolarisUtilLibrary_GetFunctionForInterfaceMethod, Object) == 0x000000, "Member 'SolarisUtilLibrary_GetFunctionForInterfaceMethod::Object' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_GetFunctionForInterfaceMethod, MethodName) == 0x000008, "Member 'SolarisUtilLibrary_GetFunctionForInterfaceMethod::MethodName' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.GetOptionValue
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_GetOptionValue final
{
public:
	int64                                         Option;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisUtilLibrary_GetOptionValue) == 0x000008, "Wrong alignment on SolarisUtilLibrary_GetOptionValue");
static_assert(sizeof(SolarisUtilLibrary_GetOptionValue) == 0x000010, "Wrong size on SolarisUtilLibrary_GetOptionValue");
static_assert(offsetof(SolarisUtilLibrary_GetOptionValue, Option) == 0x000000, "Member 'SolarisUtilLibrary_GetOptionValue::Option' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_GetOptionValue, ReturnValue) == 0x000008, "Member 'SolarisUtilLibrary_GetOptionValue::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.HasInterface
// 0x0018 (0x0018 - 0x0000)
struct SolarisUtilLibrary_HasInterface final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 InterfaceClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisUtilLibrary_HasInterface) == 0x000008, "Wrong alignment on SolarisUtilLibrary_HasInterface");
static_assert(sizeof(SolarisUtilLibrary_HasInterface) == 0x000018, "Wrong size on SolarisUtilLibrary_HasInterface");
static_assert(offsetof(SolarisUtilLibrary_HasInterface, Object) == 0x000000, "Member 'SolarisUtilLibrary_HasInterface::Object' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_HasInterface, InterfaceClass) == 0x000008, "Member 'SolarisUtilLibrary_HasInterface::InterfaceClass' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_HasInterface, ReturnValue) == 0x000010, "Member 'SolarisUtilLibrary_HasInterface::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.InstanceFunction
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_InstanceFunction final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MethodName;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisUtilLibrary_InstanceFunction) == 0x000008, "Wrong alignment on SolarisUtilLibrary_InstanceFunction");
static_assert(sizeof(SolarisUtilLibrary_InstanceFunction) == 0x000010, "Wrong size on SolarisUtilLibrary_InstanceFunction");
static_assert(offsetof(SolarisUtilLibrary_InstanceFunction, Object) == 0x000000, "Member 'SolarisUtilLibrary_InstanceFunction::Object' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_InstanceFunction, MethodName) == 0x000008, "Member 'SolarisUtilLibrary_InstanceFunction::MethodName' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.InstantiateObject
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_InstantiateObject final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InstancingGraph;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisUtilLibrary_InstantiateObject) == 0x000008, "Wrong alignment on SolarisUtilLibrary_InstantiateObject");
static_assert(sizeof(SolarisUtilLibrary_InstantiateObject) == 0x000010, "Wrong size on SolarisUtilLibrary_InstantiateObject");
static_assert(offsetof(SolarisUtilLibrary_InstantiateObject, Class_0) == 0x000000, "Member 'SolarisUtilLibrary_InstantiateObject::Class_0' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_InstantiateObject, InstancingGraph) == 0x000008, "Member 'SolarisUtilLibrary_InstantiateObject::InstancingGraph' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.IsNonNullObject
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_IsNonNullObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisUtilLibrary_IsNonNullObject) == 0x000008, "Wrong alignment on SolarisUtilLibrary_IsNonNullObject");
static_assert(sizeof(SolarisUtilLibrary_IsNonNullObject) == 0x000010, "Wrong size on SolarisUtilLibrary_IsNonNullObject");
static_assert(offsetof(SolarisUtilLibrary_IsNonNullObject, Object) == 0x000000, "Member 'SolarisUtilLibrary_IsNonNullObject::Object' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_IsNonNullObject, ReturnValue) == 0x000008, "Member 'SolarisUtilLibrary_IsNonNullObject::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.IsOptionSet
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_IsOptionSet final
{
public:
	int64                                         Option;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisUtilLibrary_IsOptionSet) == 0x000008, "Wrong alignment on SolarisUtilLibrary_IsOptionSet");
static_assert(sizeof(SolarisUtilLibrary_IsOptionSet) == 0x000010, "Wrong size on SolarisUtilLibrary_IsOptionSet");
static_assert(offsetof(SolarisUtilLibrary_IsOptionSet, Option) == 0x000000, "Member 'SolarisUtilLibrary_IsOptionSet::Option' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_IsOptionSet, ReturnValue) == 0x000008, "Member 'SolarisUtilLibrary_IsOptionSet::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.MakeOptionFromValue
// 0x0018 (0x0018 - 0x0000)
struct SolarisUtilLibrary_MakeOptionFromValue final
{
public:
	class UObject*                                Property;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisUtilLibrary_MakeOptionFromValue) == 0x000008, "Wrong alignment on SolarisUtilLibrary_MakeOptionFromValue");
static_assert(sizeof(SolarisUtilLibrary_MakeOptionFromValue) == 0x000018, "Wrong size on SolarisUtilLibrary_MakeOptionFromValue");
static_assert(offsetof(SolarisUtilLibrary_MakeOptionFromValue, Property) == 0x000000, "Member 'SolarisUtilLibrary_MakeOptionFromValue::Property' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_MakeOptionFromValue, Value) == 0x000008, "Member 'SolarisUtilLibrary_MakeOptionFromValue::Value' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_MakeOptionFromValue, ReturnValue) == 0x000010, "Member 'SolarisUtilLibrary_MakeOptionFromValue::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.MakeUnsetOption
// 0x0008 (0x0008 - 0x0000)
struct SolarisUtilLibrary_MakeUnsetOption final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisUtilLibrary_MakeUnsetOption) == 0x000008, "Wrong alignment on SolarisUtilLibrary_MakeUnsetOption");
static_assert(sizeof(SolarisUtilLibrary_MakeUnsetOption) == 0x000008, "Wrong size on SolarisUtilLibrary_MakeUnsetOption");
static_assert(offsetof(SolarisUtilLibrary_MakeUnsetOption, ReturnValue) == 0x000000, "Member 'SolarisUtilLibrary_MakeUnsetOption::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.ObjectHasNoFlags
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_ObjectHasNoFlags final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Flags_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisUtilLibrary_ObjectHasNoFlags) == 0x000008, "Wrong alignment on SolarisUtilLibrary_ObjectHasNoFlags");
static_assert(sizeof(SolarisUtilLibrary_ObjectHasNoFlags) == 0x000010, "Wrong size on SolarisUtilLibrary_ObjectHasNoFlags");
static_assert(offsetof(SolarisUtilLibrary_ObjectHasNoFlags, Object) == 0x000000, "Member 'SolarisUtilLibrary_ObjectHasNoFlags::Object' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_ObjectHasNoFlags, Flags_0) == 0x000008, "Member 'SolarisUtilLibrary_ObjectHasNoFlags::Flags_0' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_ObjectHasNoFlags, ReturnValue) == 0x00000C, "Member 'SolarisUtilLibrary_ObjectHasNoFlags::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.ReferenceIsValid
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_ReferenceIsValid final
{
public:
	int64                                         Reference;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisUtilLibrary_ReferenceIsValid) == 0x000008, "Wrong alignment on SolarisUtilLibrary_ReferenceIsValid");
static_assert(sizeof(SolarisUtilLibrary_ReferenceIsValid) == 0x000010, "Wrong size on SolarisUtilLibrary_ReferenceIsValid");
static_assert(offsetof(SolarisUtilLibrary_ReferenceIsValid, Reference) == 0x000000, "Member 'SolarisUtilLibrary_ReferenceIsValid::Reference' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_ReferenceIsValid, ReturnValue) == 0x000008, "Member 'SolarisUtilLibrary_ReferenceIsValid::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.ReplaceOptionValue
// 0x0020 (0x0020 - 0x0000)
struct SolarisUtilLibrary_ReplaceOptionValue final
{
public:
	int64                                         ResultProperty;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Option;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Value;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisUtilLibrary_ReplaceOptionValue) == 0x000008, "Wrong alignment on SolarisUtilLibrary_ReplaceOptionValue");
static_assert(sizeof(SolarisUtilLibrary_ReplaceOptionValue) == 0x000020, "Wrong size on SolarisUtilLibrary_ReplaceOptionValue");
static_assert(offsetof(SolarisUtilLibrary_ReplaceOptionValue, ResultProperty) == 0x000000, "Member 'SolarisUtilLibrary_ReplaceOptionValue::ResultProperty' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_ReplaceOptionValue, Option) == 0x000008, "Member 'SolarisUtilLibrary_ReplaceOptionValue::Option' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_ReplaceOptionValue, Value) == 0x000010, "Member 'SolarisUtilLibrary_ReplaceOptionValue::Value' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_ReplaceOptionValue, ReturnValue) == 0x000018, "Member 'SolarisUtilLibrary_ReplaceOptionValue::ReturnValue' has a wrong offset!");

// Function Solaris.VerseDynamicallyTypedValueLibrary.ConvertFromDynamicallyTypedValue
// 0x0008 (0x0008 - 0x0000)
struct VerseDynamicallyTypedValueLibrary_ConvertFromDynamicallyTypedValue final
{
public:
	int32                                         RuntimeType;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseDynamicallyTypedValueLibrary_ConvertFromDynamicallyTypedValue) == 0x000004, "Wrong alignment on VerseDynamicallyTypedValueLibrary_ConvertFromDynamicallyTypedValue");
static_assert(sizeof(VerseDynamicallyTypedValueLibrary_ConvertFromDynamicallyTypedValue) == 0x000008, "Wrong size on VerseDynamicallyTypedValueLibrary_ConvertFromDynamicallyTypedValue");
static_assert(offsetof(VerseDynamicallyTypedValueLibrary_ConvertFromDynamicallyTypedValue, RuntimeType) == 0x000000, "Member 'VerseDynamicallyTypedValueLibrary_ConvertFromDynamicallyTypedValue::RuntimeType' has a wrong offset!");
static_assert(offsetof(VerseDynamicallyTypedValueLibrary_ConvertFromDynamicallyTypedValue, Value) == 0x000004, "Member 'VerseDynamicallyTypedValueLibrary_ConvertFromDynamicallyTypedValue::Value' has a wrong offset!");

// Function Solaris.VerseDynamicallyTypedValueLibrary.ConvertToDynamicallyTypedValue
// 0x0008 (0x0008 - 0x0000)
struct VerseDynamicallyTypedValueLibrary_ConvertToDynamicallyTypedValue final
{
public:
	int32                                         RuntimeType;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseDynamicallyTypedValueLibrary_ConvertToDynamicallyTypedValue) == 0x000004, "Wrong alignment on VerseDynamicallyTypedValueLibrary_ConvertToDynamicallyTypedValue");
static_assert(sizeof(VerseDynamicallyTypedValueLibrary_ConvertToDynamicallyTypedValue) == 0x000008, "Wrong size on VerseDynamicallyTypedValueLibrary_ConvertToDynamicallyTypedValue");
static_assert(offsetof(VerseDynamicallyTypedValueLibrary_ConvertToDynamicallyTypedValue, RuntimeType) == 0x000000, "Member 'VerseDynamicallyTypedValueLibrary_ConvertToDynamicallyTypedValue::RuntimeType' has a wrong offset!");
static_assert(offsetof(VerseDynamicallyTypedValueLibrary_ConvertToDynamicallyTypedValue, Value) == 0x000004, "Member 'VerseDynamicallyTypedValueLibrary_ConvertToDynamicallyTypedValue::Value' has a wrong offset!");

// Function Solaris.VerseDynamicallyTypedValueLibrary.Equal
// 0x0008 (0x0008 - 0x0000)
struct VerseDynamicallyTypedValueLibrary_Equal final
{
public:
	int32                                         Left;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Right;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseDynamicallyTypedValueLibrary_Equal) == 0x000004, "Wrong alignment on VerseDynamicallyTypedValueLibrary_Equal");
static_assert(sizeof(VerseDynamicallyTypedValueLibrary_Equal) == 0x000008, "Wrong size on VerseDynamicallyTypedValueLibrary_Equal");
static_assert(offsetof(VerseDynamicallyTypedValueLibrary_Equal, Left) == 0x000000, "Member 'VerseDynamicallyTypedValueLibrary_Equal::Left' has a wrong offset!");
static_assert(offsetof(VerseDynamicallyTypedValueLibrary_Equal, Right) == 0x000004, "Member 'VerseDynamicallyTypedValueLibrary_Equal::Right' has a wrong offset!");

// Function Solaris.VerseDynamicallyTypedValueLibrary.MakeRuntimeTypeArray
// 0x0004 (0x0004 - 0x0000)
struct VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeArray final
{
public:
	int32                                         ElementType;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeArray) == 0x000004, "Wrong alignment on VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeArray");
static_assert(sizeof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeArray) == 0x000004, "Wrong size on VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeArray");
static_assert(offsetof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeArray, ElementType) == 0x000000, "Member 'VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeArray::ElementType' has a wrong offset!");

// Function Solaris.VerseDynamicallyTypedValueLibrary.MakeRuntimeTypeEnum
// 0x0004 (0x0004 - 0x0000)
struct VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeEnum final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeEnum) == 0x000004, "Wrong alignment on VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeEnum");
static_assert(sizeof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeEnum) == 0x000004, "Wrong size on VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeEnum");
static_assert(offsetof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeEnum, Name_0) == 0x000000, "Member 'VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeEnum::Name_0' has a wrong offset!");

// Function Solaris.VerseDynamicallyTypedValueLibrary.MakeRuntimeTypeMap
// 0x0008 (0x0008 - 0x0000)
struct VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeMap final
{
public:
	int32                                         KeyType;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueType;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeMap) == 0x000004, "Wrong alignment on VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeMap");
static_assert(sizeof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeMap) == 0x000008, "Wrong size on VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeMap");
static_assert(offsetof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeMap, KeyType) == 0x000000, "Member 'VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeMap::KeyType' has a wrong offset!");
static_assert(offsetof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeMap, ValueType) == 0x000004, "Member 'VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeMap::ValueType' has a wrong offset!");

// Function Solaris.VerseDynamicallyTypedValueLibrary.MakeRuntimeTypeOption
// 0x0004 (0x0004 - 0x0000)
struct VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeOption final
{
public:
	int32                                         ValueType;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeOption) == 0x000004, "Wrong alignment on VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeOption");
static_assert(sizeof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeOption) == 0x000004, "Wrong size on VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeOption");
static_assert(offsetof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeOption, ValueType) == 0x000000, "Member 'VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeOption::ValueType' has a wrong offset!");

// Function Solaris.VerseDynamicallyTypedValueLibrary.MakeRuntimeTypeStruct
// 0x0008 (0x0008 - 0x0000)
struct VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeStruct final
{
public:
	class UStruct*                                Struct;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeStruct) == 0x000008, "Wrong alignment on VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeStruct");
static_assert(sizeof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeStruct) == 0x000008, "Wrong size on VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeStruct");
static_assert(offsetof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeStruct, Struct) == 0x000000, "Member 'VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeStruct::Struct' has a wrong offset!");

// Function Solaris.VerseDynamicallyTypedValueLibrary.MakeRuntimeTypeTuple
// 0x0010 (0x0010 - 0x0000)
struct VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeTuple final
{
public:
	TArray<int32>                                 ValueType;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeTuple) == 0x000008, "Wrong alignment on VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeTuple");
static_assert(sizeof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeTuple) == 0x000010, "Wrong size on VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeTuple");
static_assert(offsetof(VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeTuple, ValueType) == 0x000000, "Member 'VerseDynamicallyTypedValueLibrary_MakeRuntimeTypeTuple::ValueType' has a wrong offset!");

// Function Solaris.VerseDynamicallyTypedValueLibrary.NotEqual
// 0x0008 (0x0008 - 0x0000)
struct VerseDynamicallyTypedValueLibrary_NotEqual final
{
public:
	int32                                         Left;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Right;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseDynamicallyTypedValueLibrary_NotEqual) == 0x000004, "Wrong alignment on VerseDynamicallyTypedValueLibrary_NotEqual");
static_assert(sizeof(VerseDynamicallyTypedValueLibrary_NotEqual) == 0x000008, "Wrong size on VerseDynamicallyTypedValueLibrary_NotEqual");
static_assert(offsetof(VerseDynamicallyTypedValueLibrary_NotEqual, Left) == 0x000000, "Member 'VerseDynamicallyTypedValueLibrary_NotEqual::Left' has a wrong offset!");
static_assert(offsetof(VerseDynamicallyTypedValueLibrary_NotEqual, Right) == 0x000004, "Member 'VerseDynamicallyTypedValueLibrary_NotEqual::Right' has a wrong offset!");

}

