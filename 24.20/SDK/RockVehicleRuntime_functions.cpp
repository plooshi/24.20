#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RockVehicleRuntime

#include "Basic.hpp"

#include "RockVehicleRuntime_classes.hpp"
#include "RockVehicleRuntime_parameters.hpp"


namespace SDK
{

// Function RockVehicleRuntime.FortCheatManager_RockVehicle.RockVehicleSetBalboaVelocity
// (Final, Exec, Native, Public)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RockVehicle::RockVehicleSetBalboaVelocity(float X, float Y, float Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RockVehicle", "RockVehicleSetBalboaVelocity");

	Params::FortCheatManager_RockVehicle_RockVehicleSetBalboaVelocity Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.FortCheatManager_RockVehicle.RockVehicleSetLocation
// (Final, Exec, Native, Public)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RockVehicle::RockVehicleSetLocation(float X, float Y, float Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RockVehicle", "RockVehicleSetLocation");

	Params::FortCheatManager_RockVehicle_RockVehicleSetLocation Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.FortCheatManager_RockVehicle.RockVehicleSetRotation
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Pitch                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Yaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Roll                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RockVehicle::RockVehicleSetRotation(float Pitch, float Yaw, float Roll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RockVehicle", "RockVehicleSetRotation");

	Params::FortCheatManager_RockVehicle_RockVehicleSetRotation Parms{};

	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;
	Parms.Roll = Roll;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.FortCheatManager_RockVehicle.RockVehicleSetVelocity
// (Final, Exec, Native, Public)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RockVehicle::RockVehicleSetVelocity(float X, float Y, float Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RockVehicle", "RockVehicleSetVelocity");

	Params::FortCheatManager_RockVehicle_RockVehicleSetVelocity Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicle.OnRep_FreeLookCamera
// (Final, Native, Public)

void ARockVehicle::OnRep_FreeLookCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicle", "OnRep_FreeLookCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicle.ServerSetLegacyDamageValues
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bDamageFriendlyVehicles                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDamageOtherVehicles                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDamageOwnVehicle                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDamageAllowedFromOtherVehicle                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARockVehicle::ServerSetLegacyDamageValues(bool bDamageFriendlyVehicles, bool bDamageOtherVehicles, bool bDamageOwnVehicle, bool bDamageAllowedFromOtherVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicle", "ServerSetLegacyDamageValues");

	Params::RockVehicle_ServerSetLegacyDamageValues Parms{};

	Parms.bDamageFriendlyVehicles = bDamageFriendlyVehicles;
	Parms.bDamageOtherVehicles = bDamageOtherVehicles;
	Parms.bDamageOwnVehicle = bDamageOwnVehicle;
	Parms.bDamageAllowedFromOtherVehicle = bDamageAllowedFromOtherVehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicle.ServerToggleFreeCam
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ARockVehicle::ServerToggleFreeCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicle", "ServerToggleFreeCam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicle.GetCurrentRockRuntimeConfigOverrides
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FRockRuntimeConfigOverridesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FRockRuntimeConfigOverrides ARockVehicle::GetCurrentRockRuntimeConfigOverrides() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicle", "GetCurrentRockRuntimeConfigOverrides");

	Params::RockVehicle_GetCurrentRockRuntimeConfigOverrides Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RockVehicleRuntime.RockVehicle.GetDriverInput
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FFortAthenaVehicleInputState     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FFortAthenaVehicleInputState ARockVehicle::GetDriverInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicle", "GetDriverInput");

	Params::RockVehicle_GetDriverInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RockVehicleRuntime.RockVehicle.GetThrottleState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ARockVehicle::GetThrottleState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicle", "GetThrottleState");

	Params::RockVehicle_GetThrottleState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RockVehicleRuntime.RockVehicleAbility.GetActiveSeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float URockVehicleAbility::GetActiveSeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAbility", "GetActiveSeconds");

	Params::RockVehicleAbility_GetActiveSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RockVehicleRuntime.RockVehicleAbility.GetInactiveSeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float URockVehicleAbility::GetInactiveSeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAbility", "GetInactiveSeconds");

	Params::RockVehicleAbility_GetInactiveSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RockVehicleRuntime.RockVehicleAbility.GetVehicle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ARockVehicle*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ARockVehicle* URockVehicleAbility::GetVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAbility", "GetVehicle");

	Params::RockVehicleAbility_GetVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RockVehicleRuntime.RockVehicleBoostTank.GiveBoost
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URockVehicleBoostTank::GiveBoost(float Seconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleBoostTank", "GiveBoost");

	Params::RockVehicleBoostTank_GiveBoost Parms{};

	Parms.Seconds = Seconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicleBoostTank.OnRep_SecondsRemaining
// (Final, Native, Protected)
// Parameters:
// float                                   PrevValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URockVehicleBoostTank::OnRep_SecondsRemaining(float PrevValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleBoostTank", "OnRep_SecondsRemaining");

	Params::RockVehicleBoostTank_OnRep_SecondsRemaining Parms{};

	Parms.PrevValue = PrevValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicleBoostTank.GetMaxBoostInSeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float URockVehicleBoostTank::GetMaxBoostInSeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleBoostTank", "GetMaxBoostInSeconds");

	Params::RockVehicleBoostTank_GetMaxBoostInSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RockVehicleRuntime.RockVehicleBoostTank.GetPercentRemaining
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float URockVehicleBoostTank::GetPercentRemaining() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleBoostTank", "GetPercentRemaining");

	Params::RockVehicleBoostTank_GetPercentRemaining Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RockVehicleRuntime.RockVehicleBoostTank.HasBoost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URockVehicleBoostTank::HasBoost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleBoostTank", "HasBoost");

	Params::RockVehicleBoostTank_HasBoost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RockVehicleRuntime.RockVehicleBoostTank.IsBoostFull
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URockVehicleBoostTank::IsBoostFull() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleBoostTank", "IsBoostFull");

	Params::RockVehicleBoostTank_IsBoostFull Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RockVehicleRuntime.RockVehicleAbility_GroundTrails.OnSurfaceChanged
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EPhysicalSurface                        NewSurface                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URockVehicleAbility_GroundTrails::OnSurfaceChanged(EPhysicalSurface NewSurface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAbility_GroundTrails", "OnSurfaceChanged");

	Params::RockVehicleAbility_GroundTrails_OnSurfaceChanged Parms{};

	Parms.NewSurface = NewSurface;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicleAbility_GroundTrails.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URockVehicleAbility_GroundTrails::SetEnabled(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAbility_GroundTrails", "SetEnabled");

	Params::RockVehicleAbility_GroundTrails_SetEnabled Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicleAnalyticsComponent.OnDodged
// (Final, Native, Private)
// Parameters:
// class UActorComponent*                  InComp                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInReset                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URockVehicleAnalyticsComponent::OnDodged(class UActorComponent* InComp, bool bInReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAnalyticsComponent", "OnDodged");

	Params::RockVehicleAnalyticsComponent_OnDodged Parms{};

	Parms.InComp = InComp;
	Parms.bInReset = bInReset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicleAnalyticsComponent.OnDoubleJumped
// (Final, Native, Private)
// Parameters:
// class UActorComponent*                  InComp                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInReset                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URockVehicleAnalyticsComponent::OnDoubleJumped(class UActorComponent* InComp, bool bInReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAnalyticsComponent", "OnDoubleJumped");

	Params::RockVehicleAnalyticsComponent_OnDoubleJumped Parms{};

	Parms.InComp = InComp;
	Parms.bInReset = bInReset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicleAnalyticsComponent.OnJumped
// (Final, Native, Private)
// Parameters:
// class UActorComponent*                  InComp                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInReset                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URockVehicleAnalyticsComponent::OnJumped(class UActorComponent* InComp, bool bInReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAnalyticsComponent", "OnJumped");

	Params::RockVehicleAnalyticsComponent_OnJumped Parms{};

	Parms.InComp = InComp;
	Parms.bInReset = bInReset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicleAnalyticsComponent.OnPawnEnteredSeat
// (Final, Native, Private, HasOutParams)
// Parameters:
// TScriptInterface<class IFortVehicleInterface>InVehicle                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPawn*                        InPlayerPawn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSeatIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URockVehicleAnalyticsComponent::OnPawnEnteredSeat(const TScriptInterface<class IFortVehicleInterface>& InVehicle, class AFortPawn* InPlayerPawn, int32 InSeatIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAnalyticsComponent", "OnPawnEnteredSeat");

	Params::RockVehicleAnalyticsComponent_OnPawnEnteredSeat Parms{};

	Parms.InVehicle = InVehicle;
	Parms.InPlayerPawn = InPlayerPawn;
	Parms.InSeatIndex = InSeatIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicleAnalyticsComponent.OnPawnExitedSeat
// (Final, Native, Private, HasOutParams)
// Parameters:
// TScriptInterface<class IFortVehicleInterface>InVehicle                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPawn*                        InPlayerPawn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSeatIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URockVehicleAnalyticsComponent::OnPawnExitedSeat(const TScriptInterface<class IFortVehicleInterface>& InVehicle, class AFortPawn* InPlayerPawn, int32 InSeatIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAnalyticsComponent", "OnPawnExitedSeat");

	Params::RockVehicleAnalyticsComponent_OnPawnExitedSeat Parms{};

	Parms.InVehicle = InVehicle;
	Parms.InPlayerPawn = InPlayerPawn;
	Parms.InSeatIndex = InSeatIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicleAnalyticsComponent.OnSupersonicEnd
// (Final, Native, Private)
// Parameters:
// class UActorComponent*                  InComp                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URockVehicleAnalyticsComponent::OnSupersonicEnd(class UActorComponent* InComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAnalyticsComponent", "OnSupersonicEnd");

	Params::RockVehicleAnalyticsComponent_OnSupersonicEnd Parms{};

	Parms.InComp = InComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicleAnalyticsComponent.OnSupersonicStart
// (Final, Native, Private)
// Parameters:
// class UActorComponent*                  InComp                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInReset                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URockVehicleAnalyticsComponent::OnSupersonicStart(class UActorComponent* InComp, bool bInReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAnalyticsComponent", "OnSupersonicStart");

	Params::RockVehicleAnalyticsComponent_OnSupersonicStart Parms{};

	Parms.InComp = InComp;
	Parms.bInReset = bInReset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicleAudioController.OnInAirUpdated
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewInAir                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARockVehicleAudioController::OnInAirUpdated(const bool bNewInAir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAudioController", "OnInAirUpdated");

	Params::RockVehicleAudioController_OnInAirUpdated Parms{};

	Parms.bNewInAir = bNewInAir;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RockVehicleRuntime.RockVehicleAudioController.SetBoosting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewBoosting                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARockVehicleAudioController::SetBoosting(const bool bNewBoosting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAudioController", "SetBoosting");

	Params::RockVehicleAudioController_SetBoosting Parms{};

	Parms.bNewBoosting = bNewBoosting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicleAudioController.SetSurfaceTypeParam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSurfaceParam                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARockVehicleAudioController::SetSurfaceTypeParam(const float NewSurfaceParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAudioController", "SetSurfaceTypeParam");

	Params::RockVehicleAudioController_SetSurfaceTypeParam Parms{};

	Parms.NewSurfaceParam = NewSurfaceParam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RockVehicleRuntime.RockVehicleAudioController.GetMotorSimComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAudioMotorModelComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAudioMotorModelComponent* ARockVehicleAudioController::GetMotorSimComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RockVehicleAudioController", "GetMotorSimComponent");

	Params::RockVehicleAudioController_GetMotorSimComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RockVehicleRuntime.StreamingRadioPlayerComponent_Rock.VehicleExploded
// (Final, Native, Protected)
// Parameters:
// class AController*                      LastDamageInstigator                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortAthenaVehicle*               Vehicle                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStreamingRadioPlayerComponent_Rock::VehicleExploded(const class AController* LastDamageInstigator, class AFortAthenaVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingRadioPlayerComponent_Rock", "VehicleExploded");

	Params::StreamingRadioPlayerComponent_Rock_VehicleExploded Parms{};

	Parms.LastDamageInstigator = LastDamageInstigator;
	Parms.Vehicle = Vehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

