#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DaySequence

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK::Params
{

// Function DaySequence.DaySequenceModifierComponent.AddBoolOverride
// 0x0010 (0x0010 - 0x0000)
struct DaySequenceModifierComponent_AddBoolOverride final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaySequenceModifierComponent_AddBoolOverride) == 0x000008, "Wrong alignment on DaySequenceModifierComponent_AddBoolOverride");
static_assert(sizeof(DaySequenceModifierComponent_AddBoolOverride) == 0x000010, "Wrong size on DaySequenceModifierComponent_AddBoolOverride");
static_assert(offsetof(DaySequenceModifierComponent_AddBoolOverride, Object) == 0x000000, "Member 'DaySequenceModifierComponent_AddBoolOverride::Object' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddBoolOverride, PropertyName) == 0x000008, "Member 'DaySequenceModifierComponent_AddBoolOverride::PropertyName' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddBoolOverride, bValue) == 0x00000C, "Member 'DaySequenceModifierComponent_AddBoolOverride::bValue' has a wrong offset!");

// Function DaySequence.DaySequenceModifierComponent.AddColorMaterialParameterOverride
// 0x0020 (0x0020 - 0x0000)
struct DaySequenceModifierComponent_AddColorMaterialParameterOverride final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceModifierComponent_AddColorMaterialParameterOverride) == 0x000008, "Wrong alignment on DaySequenceModifierComponent_AddColorMaterialParameterOverride");
static_assert(sizeof(DaySequenceModifierComponent_AddColorMaterialParameterOverride) == 0x000020, "Wrong size on DaySequenceModifierComponent_AddColorMaterialParameterOverride");
static_assert(offsetof(DaySequenceModifierComponent_AddColorMaterialParameterOverride, Object) == 0x000000, "Member 'DaySequenceModifierComponent_AddColorMaterialParameterOverride::Object' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddColorMaterialParameterOverride, MaterialIndex) == 0x000008, "Member 'DaySequenceModifierComponent_AddColorMaterialParameterOverride::MaterialIndex' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddColorMaterialParameterOverride, ParameterName) == 0x00000C, "Member 'DaySequenceModifierComponent_AddColorMaterialParameterOverride::ParameterName' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddColorMaterialParameterOverride, Value) == 0x000010, "Member 'DaySequenceModifierComponent_AddColorMaterialParameterOverride::Value' has a wrong offset!");

// Function DaySequence.DaySequenceModifierComponent.AddColorOverride
// 0x0020 (0x0020 - 0x0000)
struct DaySequenceModifierComponent_AddColorOverride final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x000C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaySequenceModifierComponent_AddColorOverride) == 0x000008, "Wrong alignment on DaySequenceModifierComponent_AddColorOverride");
static_assert(sizeof(DaySequenceModifierComponent_AddColorOverride) == 0x000020, "Wrong size on DaySequenceModifierComponent_AddColorOverride");
static_assert(offsetof(DaySequenceModifierComponent_AddColorOverride, Object) == 0x000000, "Member 'DaySequenceModifierComponent_AddColorOverride::Object' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddColorOverride, PropertyName) == 0x000008, "Member 'DaySequenceModifierComponent_AddColorOverride::PropertyName' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddColorOverride, Value) == 0x00000C, "Member 'DaySequenceModifierComponent_AddColorOverride::Value' has a wrong offset!");

// Function DaySequence.DaySequenceModifierComponent.AddMaterialOverride
// 0x0018 (0x0018 - 0x0000)
struct DaySequenceModifierComponent_AddMaterialOverride final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Value;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceModifierComponent_AddMaterialOverride) == 0x000008, "Wrong alignment on DaySequenceModifierComponent_AddMaterialOverride");
static_assert(sizeof(DaySequenceModifierComponent_AddMaterialOverride) == 0x000018, "Wrong size on DaySequenceModifierComponent_AddMaterialOverride");
static_assert(offsetof(DaySequenceModifierComponent_AddMaterialOverride, Object) == 0x000000, "Member 'DaySequenceModifierComponent_AddMaterialOverride::Object' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddMaterialOverride, MaterialIndex) == 0x000008, "Member 'DaySequenceModifierComponent_AddMaterialOverride::MaterialIndex' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddMaterialOverride, Value) == 0x000010, "Member 'DaySequenceModifierComponent_AddMaterialOverride::Value' has a wrong offset!");

// Function DaySequence.DaySequenceModifierComponent.AddScalarMaterialParameterOverride
// 0x0018 (0x0018 - 0x0000)
struct DaySequenceModifierComponent_AddScalarMaterialParameterOverride final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaySequenceModifierComponent_AddScalarMaterialParameterOverride) == 0x000008, "Wrong alignment on DaySequenceModifierComponent_AddScalarMaterialParameterOverride");
static_assert(sizeof(DaySequenceModifierComponent_AddScalarMaterialParameterOverride) == 0x000018, "Wrong size on DaySequenceModifierComponent_AddScalarMaterialParameterOverride");
static_assert(offsetof(DaySequenceModifierComponent_AddScalarMaterialParameterOverride, Object) == 0x000000, "Member 'DaySequenceModifierComponent_AddScalarMaterialParameterOverride::Object' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddScalarMaterialParameterOverride, MaterialIndex) == 0x000008, "Member 'DaySequenceModifierComponent_AddScalarMaterialParameterOverride::MaterialIndex' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddScalarMaterialParameterOverride, ParameterName) == 0x00000C, "Member 'DaySequenceModifierComponent_AddScalarMaterialParameterOverride::ParameterName' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddScalarMaterialParameterOverride, Value) == 0x000010, "Member 'DaySequenceModifierComponent_AddScalarMaterialParameterOverride::Value' has a wrong offset!");

// Function DaySequence.DaySequenceModifierComponent.AddScalarOverride
// 0x0018 (0x0018 - 0x0000)
struct DaySequenceModifierComponent_AddScalarOverride final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Value;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceModifierComponent_AddScalarOverride) == 0x000008, "Wrong alignment on DaySequenceModifierComponent_AddScalarOverride");
static_assert(sizeof(DaySequenceModifierComponent_AddScalarOverride) == 0x000018, "Wrong size on DaySequenceModifierComponent_AddScalarOverride");
static_assert(offsetof(DaySequenceModifierComponent_AddScalarOverride, Object) == 0x000000, "Member 'DaySequenceModifierComponent_AddScalarOverride::Object' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddScalarOverride, PropertyName) == 0x000008, "Member 'DaySequenceModifierComponent_AddScalarOverride::PropertyName' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddScalarOverride, Value) == 0x000010, "Member 'DaySequenceModifierComponent_AddScalarOverride::Value' has a wrong offset!");

// Function DaySequence.DaySequenceModifierComponent.AddStaticTimeOfDayOverride
// 0x0010 (0x0010 - 0x0000)
struct DaySequenceModifierComponent_AddStaticTimeOfDayOverride final
{
public:
	class ADaySequenceActor*                      Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hours;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaySequenceModifierComponent_AddStaticTimeOfDayOverride) == 0x000008, "Wrong alignment on DaySequenceModifierComponent_AddStaticTimeOfDayOverride");
static_assert(sizeof(DaySequenceModifierComponent_AddStaticTimeOfDayOverride) == 0x000010, "Wrong size on DaySequenceModifierComponent_AddStaticTimeOfDayOverride");
static_assert(offsetof(DaySequenceModifierComponent_AddStaticTimeOfDayOverride, Actor) == 0x000000, "Member 'DaySequenceModifierComponent_AddStaticTimeOfDayOverride::Actor' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddStaticTimeOfDayOverride, Hours) == 0x000008, "Member 'DaySequenceModifierComponent_AddStaticTimeOfDayOverride::Hours' has a wrong offset!");

// Function DaySequence.DaySequenceModifierComponent.AddTransformOverride
// 0x0070 (0x0070 - 0x0000)
struct DaySequenceModifierComponent_AddTransformOverride final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceModifierComponent_AddTransformOverride) == 0x000010, "Wrong alignment on DaySequenceModifierComponent_AddTransformOverride");
static_assert(sizeof(DaySequenceModifierComponent_AddTransformOverride) == 0x000070, "Wrong size on DaySequenceModifierComponent_AddTransformOverride");
static_assert(offsetof(DaySequenceModifierComponent_AddTransformOverride, Object) == 0x000000, "Member 'DaySequenceModifierComponent_AddTransformOverride::Object' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddTransformOverride, Value) == 0x000010, "Member 'DaySequenceModifierComponent_AddTransformOverride::Value' has a wrong offset!");

// Function DaySequence.DaySequenceModifierComponent.AddVectorOverride
// 0x0028 (0x0028 - 0x0000)
struct DaySequenceModifierComponent_AddVectorOverride final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Value;                                             // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceModifierComponent_AddVectorOverride) == 0x000008, "Wrong alignment on DaySequenceModifierComponent_AddVectorOverride");
static_assert(sizeof(DaySequenceModifierComponent_AddVectorOverride) == 0x000028, "Wrong size on DaySequenceModifierComponent_AddVectorOverride");
static_assert(offsetof(DaySequenceModifierComponent_AddVectorOverride, Object) == 0x000000, "Member 'DaySequenceModifierComponent_AddVectorOverride::Object' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddVectorOverride, PropertyName) == 0x000008, "Member 'DaySequenceModifierComponent_AddVectorOverride::PropertyName' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddVectorOverride, Value) == 0x000010, "Member 'DaySequenceModifierComponent_AddVectorOverride::Value' has a wrong offset!");

// Function DaySequence.DaySequenceModifierComponent.AddVisibilityOverride
// 0x0010 (0x0010 - 0x0000)
struct DaySequenceModifierComponent_AddVisibilityOverride final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaySequenceModifierComponent_AddVisibilityOverride) == 0x000008, "Wrong alignment on DaySequenceModifierComponent_AddVisibilityOverride");
static_assert(sizeof(DaySequenceModifierComponent_AddVisibilityOverride) == 0x000010, "Wrong size on DaySequenceModifierComponent_AddVisibilityOverride");
static_assert(offsetof(DaySequenceModifierComponent_AddVisibilityOverride, Object) == 0x000000, "Member 'DaySequenceModifierComponent_AddVisibilityOverride::Object' has a wrong offset!");
static_assert(offsetof(DaySequenceModifierComponent_AddVisibilityOverride, bValue) == 0x000008, "Member 'DaySequenceModifierComponent_AddVisibilityOverride::bValue' has a wrong offset!");

// Function DaySequence.DaySequenceModifierComponent.BindToDaySequenceActor
// 0x0008 (0x0008 - 0x0000)
struct DaySequenceModifierComponent_BindToDaySequenceActor final
{
public:
	class ADaySequenceActor*                      DaySequenceActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceModifierComponent_BindToDaySequenceActor) == 0x000008, "Wrong alignment on DaySequenceModifierComponent_BindToDaySequenceActor");
static_assert(sizeof(DaySequenceModifierComponent_BindToDaySequenceActor) == 0x000008, "Wrong size on DaySequenceModifierComponent_BindToDaySequenceActor");
static_assert(offsetof(DaySequenceModifierComponent_BindToDaySequenceActor, DaySequenceActor) == 0x000000, "Member 'DaySequenceModifierComponent_BindToDaySequenceActor::DaySequenceActor' has a wrong offset!");

// Function DaySequence.DaySequenceActor.ContainsDaySequence
// 0x0010 (0x0010 - 0x0000)
struct DaySequenceActor_ContainsDaySequence final
{
public:
	const class UDaySequence*                     InDaySequence;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaySequenceActor_ContainsDaySequence) == 0x000008, "Wrong alignment on DaySequenceActor_ContainsDaySequence");
static_assert(sizeof(DaySequenceActor_ContainsDaySequence) == 0x000010, "Wrong size on DaySequenceActor_ContainsDaySequence");
static_assert(offsetof(DaySequenceActor_ContainsDaySequence, InDaySequence) == 0x000000, "Member 'DaySequenceActor_ContainsDaySequence::InDaySequence' has a wrong offset!");
static_assert(offsetof(DaySequenceActor_ContainsDaySequence, ReturnValue) == 0x000008, "Member 'DaySequenceActor_ContainsDaySequence::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceActor.GetBias
// 0x0008 (0x0008 - 0x0000)
struct DaySequenceActor_GetBias final
{
public:
	class FName                                   SequenceKey;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_GetBias) == 0x000004, "Wrong alignment on DaySequenceActor_GetBias");
static_assert(sizeof(DaySequenceActor_GetBias) == 0x000008, "Wrong size on DaySequenceActor_GetBias");
static_assert(offsetof(DaySequenceActor_GetBias, SequenceKey) == 0x000000, "Member 'DaySequenceActor_GetBias::SequenceKey' has a wrong offset!");
static_assert(offsetof(DaySequenceActor_GetBias, ReturnValue) == 0x000004, "Member 'DaySequenceActor_GetBias::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceActor.IsMuteSequence
// 0x0008 (0x0008 - 0x0000)
struct DaySequenceActor_IsMuteSequence final
{
public:
	class FName                                   SequenceKey;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaySequenceActor_IsMuteSequence) == 0x000004, "Wrong alignment on DaySequenceActor_IsMuteSequence");
static_assert(sizeof(DaySequenceActor_IsMuteSequence) == 0x000008, "Wrong size on DaySequenceActor_IsMuteSequence");
static_assert(offsetof(DaySequenceActor_IsMuteSequence, SequenceKey) == 0x000000, "Member 'DaySequenceActor_IsMuteSequence::SequenceKey' has a wrong offset!");
static_assert(offsetof(DaySequenceActor_IsMuteSequence, ReturnValue) == 0x000004, "Member 'DaySequenceActor_IsMuteSequence::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceActor.Multicast_SetTimePerCycle
// 0x0004 (0x0004 - 0x0000)
struct DaySequenceActor_Multicast_SetTimePerCycle final
{
public:
	float                                         InHours;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_Multicast_SetTimePerCycle) == 0x000004, "Wrong alignment on DaySequenceActor_Multicast_SetTimePerCycle");
static_assert(sizeof(DaySequenceActor_Multicast_SetTimePerCycle) == 0x000004, "Wrong size on DaySequenceActor_Multicast_SetTimePerCycle");
static_assert(offsetof(DaySequenceActor_Multicast_SetTimePerCycle, InHours) == 0x000000, "Member 'DaySequenceActor_Multicast_SetTimePerCycle::InHours' has a wrong offset!");

// Function DaySequence.DaySequenceActor.MuteSequence
// 0x0008 (0x0008 - 0x0000)
struct DaySequenceActor_MuteSequence final
{
public:
	class FName                                   SequenceKey;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bState;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaySequenceActor_MuteSequence) == 0x000004, "Wrong alignment on DaySequenceActor_MuteSequence");
static_assert(sizeof(DaySequenceActor_MuteSequence) == 0x000008, "Wrong size on DaySequenceActor_MuteSequence");
static_assert(offsetof(DaySequenceActor_MuteSequence, SequenceKey) == 0x000000, "Member 'DaySequenceActor_MuteSequence::SequenceKey' has a wrong offset!");
static_assert(offsetof(DaySequenceActor_MuteSequence, bState) == 0x000004, "Member 'DaySequenceActor_MuteSequence::bState' has a wrong offset!");

// Function DaySequence.DaySequenceActor.RemoveStaticTimeOfDay
// 0x0001 (0x0001 - 0x0000)
struct DaySequenceActor_RemoveStaticTimeOfDay final
{
public:
	bool                                          bResumeFromStaticTime;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_RemoveStaticTimeOfDay) == 0x000001, "Wrong alignment on DaySequenceActor_RemoveStaticTimeOfDay");
static_assert(sizeof(DaySequenceActor_RemoveStaticTimeOfDay) == 0x000001, "Wrong size on DaySequenceActor_RemoveStaticTimeOfDay");
static_assert(offsetof(DaySequenceActor_RemoveStaticTimeOfDay, bResumeFromStaticTime) == 0x000000, "Member 'DaySequenceActor_RemoveStaticTimeOfDay::bResumeFromStaticTime' has a wrong offset!");

// Function DaySequence.DaySequenceActor.SetBias
// 0x0008 (0x0008 - 0x0000)
struct DaySequenceActor_SetBias final
{
public:
	class FName                                   SequenceKey;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bias;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_SetBias) == 0x000004, "Wrong alignment on DaySequenceActor_SetBias");
static_assert(sizeof(DaySequenceActor_SetBias) == 0x000008, "Wrong size on DaySequenceActor_SetBias");
static_assert(offsetof(DaySequenceActor_SetBias, SequenceKey) == 0x000000, "Member 'DaySequenceActor_SetBias::SequenceKey' has a wrong offset!");
static_assert(offsetof(DaySequenceActor_SetBias, Bias) == 0x000004, "Member 'DaySequenceActor_SetBias::Bias' has a wrong offset!");

// Function DaySequence.DaySequenceActor.SetDaySequence
// 0x0010 (0x0010 - 0x0000)
struct DaySequenceActor_SetDaySequence final
{
public:
	class FName                                   SequenceName;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDaySequence*                           InDaySequence;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_SetDaySequence) == 0x000008, "Wrong alignment on DaySequenceActor_SetDaySequence");
static_assert(sizeof(DaySequenceActor_SetDaySequence) == 0x000010, "Wrong size on DaySequenceActor_SetDaySequence");
static_assert(offsetof(DaySequenceActor_SetDaySequence, SequenceName) == 0x000000, "Member 'DaySequenceActor_SetDaySequence::SequenceName' has a wrong offset!");
static_assert(offsetof(DaySequenceActor_SetDaySequence, InDaySequence) == 0x000008, "Member 'DaySequenceActor_SetDaySequence::InDaySequence' has a wrong offset!");

// Function DaySequence.DaySequenceActor.SetReplicatePlayback
// 0x0001 (0x0001 - 0x0000)
struct DaySequenceActor_SetReplicatePlayback final
{
public:
	bool                                          ReplicatePlayback;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_SetReplicatePlayback) == 0x000001, "Wrong alignment on DaySequenceActor_SetReplicatePlayback");
static_assert(sizeof(DaySequenceActor_SetReplicatePlayback) == 0x000001, "Wrong size on DaySequenceActor_SetReplicatePlayback");
static_assert(offsetof(DaySequenceActor_SetReplicatePlayback, ReplicatePlayback) == 0x000000, "Member 'DaySequenceActor_SetReplicatePlayback::ReplicatePlayback' has a wrong offset!");

// Function DaySequence.DaySequenceActor.SetStaticTimeOfDay
// 0x0004 (0x0004 - 0x0000)
struct DaySequenceActor_SetStaticTimeOfDay final
{
public:
	float                                         InHours;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_SetStaticTimeOfDay) == 0x000004, "Wrong alignment on DaySequenceActor_SetStaticTimeOfDay");
static_assert(sizeof(DaySequenceActor_SetStaticTimeOfDay) == 0x000004, "Wrong size on DaySequenceActor_SetStaticTimeOfDay");
static_assert(offsetof(DaySequenceActor_SetStaticTimeOfDay, InHours) == 0x000000, "Member 'DaySequenceActor_SetStaticTimeOfDay::InHours' has a wrong offset!");

// Function DaySequence.DaySequenceActor.SetTimeOfDay
// 0x0008 (0x0008 - 0x0000)
struct DaySequenceActor_SetTimeOfDay final
{
public:
	float                                         InHours;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaySequenceActor_SetTimeOfDay) == 0x000004, "Wrong alignment on DaySequenceActor_SetTimeOfDay");
static_assert(sizeof(DaySequenceActor_SetTimeOfDay) == 0x000008, "Wrong size on DaySequenceActor_SetTimeOfDay");
static_assert(offsetof(DaySequenceActor_SetTimeOfDay, InHours) == 0x000000, "Member 'DaySequenceActor_SetTimeOfDay::InHours' has a wrong offset!");
static_assert(offsetof(DaySequenceActor_SetTimeOfDay, ReturnValue) == 0x000004, "Member 'DaySequenceActor_SetTimeOfDay::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceActor.GetDayLength
// 0x0004 (0x0004 - 0x0000)
struct DaySequenceActor_GetDayLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_GetDayLength) == 0x000004, "Wrong alignment on DaySequenceActor_GetDayLength");
static_assert(sizeof(DaySequenceActor_GetDayLength) == 0x000004, "Wrong size on DaySequenceActor_GetDayLength");
static_assert(offsetof(DaySequenceActor_GetDayLength, ReturnValue) == 0x000000, "Member 'DaySequenceActor_GetDayLength::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceActor.GetDaySequence
// 0x0010 (0x0010 - 0x0000)
struct DaySequenceActor_GetDaySequence final
{
public:
	class FName                                   SequenceName;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDaySequence*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_GetDaySequence) == 0x000008, "Wrong alignment on DaySequenceActor_GetDaySequence");
static_assert(sizeof(DaySequenceActor_GetDaySequence) == 0x000010, "Wrong size on DaySequenceActor_GetDaySequence");
static_assert(offsetof(DaySequenceActor_GetDaySequence, SequenceName) == 0x000000, "Member 'DaySequenceActor_GetDaySequence::SequenceName' has a wrong offset!");
static_assert(offsetof(DaySequenceActor_GetDaySequence, ReturnValue) == 0x000008, "Member 'DaySequenceActor_GetDaySequence::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceActor.GetFirstDaySequence
// 0x0008 (0x0008 - 0x0000)
struct DaySequenceActor_GetFirstDaySequence final
{
public:
	class UDaySequence*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_GetFirstDaySequence) == 0x000008, "Wrong alignment on DaySequenceActor_GetFirstDaySequence");
static_assert(sizeof(DaySequenceActor_GetFirstDaySequence) == 0x000008, "Wrong size on DaySequenceActor_GetFirstDaySequence");
static_assert(offsetof(DaySequenceActor_GetFirstDaySequence, ReturnValue) == 0x000000, "Member 'DaySequenceActor_GetFirstDaySequence::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceActor.GetInitialTimeOfDay
// 0x0004 (0x0004 - 0x0000)
struct DaySequenceActor_GetInitialTimeOfDay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_GetInitialTimeOfDay) == 0x000004, "Wrong alignment on DaySequenceActor_GetInitialTimeOfDay");
static_assert(sizeof(DaySequenceActor_GetInitialTimeOfDay) == 0x000004, "Wrong size on DaySequenceActor_GetInitialTimeOfDay");
static_assert(offsetof(DaySequenceActor_GetInitialTimeOfDay, ReturnValue) == 0x000000, "Member 'DaySequenceActor_GetInitialTimeOfDay::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceActor.GetSequencePlayer
// 0x0008 (0x0008 - 0x0000)
struct DaySequenceActor_GetSequencePlayer final
{
public:
	class UDaySequencePlayer*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_GetSequencePlayer) == 0x000008, "Wrong alignment on DaySequenceActor_GetSequencePlayer");
static_assert(sizeof(DaySequenceActor_GetSequencePlayer) == 0x000008, "Wrong size on DaySequenceActor_GetSequencePlayer");
static_assert(offsetof(DaySequenceActor_GetSequencePlayer, ReturnValue) == 0x000000, "Member 'DaySequenceActor_GetSequencePlayer::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceActor.GetStaticTimeOfDay
// 0x0004 (0x0004 - 0x0000)
struct DaySequenceActor_GetStaticTimeOfDay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_GetStaticTimeOfDay) == 0x000004, "Wrong alignment on DaySequenceActor_GetStaticTimeOfDay");
static_assert(sizeof(DaySequenceActor_GetStaticTimeOfDay) == 0x000004, "Wrong size on DaySequenceActor_GetStaticTimeOfDay");
static_assert(offsetof(DaySequenceActor_GetStaticTimeOfDay, ReturnValue) == 0x000000, "Member 'DaySequenceActor_GetStaticTimeOfDay::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceActor.GetTimeOfDay
// 0x0004 (0x0004 - 0x0000)
struct DaySequenceActor_GetTimeOfDay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_GetTimeOfDay) == 0x000004, "Wrong alignment on DaySequenceActor_GetTimeOfDay");
static_assert(sizeof(DaySequenceActor_GetTimeOfDay) == 0x000004, "Wrong size on DaySequenceActor_GetTimeOfDay");
static_assert(offsetof(DaySequenceActor_GetTimeOfDay, ReturnValue) == 0x000000, "Member 'DaySequenceActor_GetTimeOfDay::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceActor.GetTimePerCycle
// 0x0004 (0x0004 - 0x0000)
struct DaySequenceActor_GetTimePerCycle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_GetTimePerCycle) == 0x000004, "Wrong alignment on DaySequenceActor_GetTimePerCycle");
static_assert(sizeof(DaySequenceActor_GetTimePerCycle) == 0x000004, "Wrong size on DaySequenceActor_GetTimePerCycle");
static_assert(offsetof(DaySequenceActor_GetTimePerCycle, ReturnValue) == 0x000000, "Member 'DaySequenceActor_GetTimePerCycle::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceActor.HasStaticTimeOfDay
// 0x0001 (0x0001 - 0x0000)
struct DaySequenceActor_HasStaticTimeOfDay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_HasStaticTimeOfDay) == 0x000001, "Wrong alignment on DaySequenceActor_HasStaticTimeOfDay");
static_assert(sizeof(DaySequenceActor_HasStaticTimeOfDay) == 0x000001, "Wrong size on DaySequenceActor_HasStaticTimeOfDay");
static_assert(offsetof(DaySequenceActor_HasStaticTimeOfDay, ReturnValue) == 0x000000, "Member 'DaySequenceActor_HasStaticTimeOfDay::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceActor.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct DaySequenceActor_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_IsPaused) == 0x000001, "Wrong alignment on DaySequenceActor_IsPaused");
static_assert(sizeof(DaySequenceActor_IsPaused) == 0x000001, "Wrong size on DaySequenceActor_IsPaused");
static_assert(offsetof(DaySequenceActor_IsPaused, ReturnValue) == 0x000000, "Member 'DaySequenceActor_IsPaused::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceActor.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct DaySequenceActor_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceActor_IsPlaying) == 0x000001, "Wrong alignment on DaySequenceActor_IsPlaying");
static_assert(sizeof(DaySequenceActor_IsPlaying) == 0x000001, "Wrong size on DaySequenceActor_IsPlaying");
static_assert(offsetof(DaySequenceActor_IsPlaying, ReturnValue) == 0x000000, "Member 'DaySequenceActor_IsPlaying::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceDirector.GetBoundActor
// 0x0020 (0x0020 - 0x0000)
struct DaySequenceDirector_GetBoundActor final
{
public:
	struct FMovieSceneObjectBindingID             ObjectBinding;                                     // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceDirector_GetBoundActor) == 0x000008, "Wrong alignment on DaySequenceDirector_GetBoundActor");
static_assert(sizeof(DaySequenceDirector_GetBoundActor) == 0x000020, "Wrong size on DaySequenceDirector_GetBoundActor");
static_assert(offsetof(DaySequenceDirector_GetBoundActor, ObjectBinding) == 0x000000, "Member 'DaySequenceDirector_GetBoundActor::ObjectBinding' has a wrong offset!");
static_assert(offsetof(DaySequenceDirector_GetBoundActor, ReturnValue) == 0x000018, "Member 'DaySequenceDirector_GetBoundActor::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceDirector.GetBoundActors
// 0x0028 (0x0028 - 0x0000)
struct DaySequenceDirector_GetBoundActors final
{
public:
	struct FMovieSceneObjectBindingID             ObjectBinding;                                     // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceDirector_GetBoundActors) == 0x000008, "Wrong alignment on DaySequenceDirector_GetBoundActors");
static_assert(sizeof(DaySequenceDirector_GetBoundActors) == 0x000028, "Wrong size on DaySequenceDirector_GetBoundActors");
static_assert(offsetof(DaySequenceDirector_GetBoundActors, ObjectBinding) == 0x000000, "Member 'DaySequenceDirector_GetBoundActors::ObjectBinding' has a wrong offset!");
static_assert(offsetof(DaySequenceDirector_GetBoundActors, ReturnValue) == 0x000018, "Member 'DaySequenceDirector_GetBoundActors::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceDirector.GetBoundObject
// 0x0020 (0x0020 - 0x0000)
struct DaySequenceDirector_GetBoundObject final
{
public:
	struct FMovieSceneObjectBindingID             ObjectBinding;                                     // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceDirector_GetBoundObject) == 0x000008, "Wrong alignment on DaySequenceDirector_GetBoundObject");
static_assert(sizeof(DaySequenceDirector_GetBoundObject) == 0x000020, "Wrong size on DaySequenceDirector_GetBoundObject");
static_assert(offsetof(DaySequenceDirector_GetBoundObject, ObjectBinding) == 0x000000, "Member 'DaySequenceDirector_GetBoundObject::ObjectBinding' has a wrong offset!");
static_assert(offsetof(DaySequenceDirector_GetBoundObject, ReturnValue) == 0x000018, "Member 'DaySequenceDirector_GetBoundObject::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceDirector.GetBoundObjects
// 0x0028 (0x0028 - 0x0000)
struct DaySequenceDirector_GetBoundObjects final
{
public:
	struct FMovieSceneObjectBindingID             ObjectBinding;                                     // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceDirector_GetBoundObjects) == 0x000008, "Wrong alignment on DaySequenceDirector_GetBoundObjects");
static_assert(sizeof(DaySequenceDirector_GetBoundObjects) == 0x000028, "Wrong size on DaySequenceDirector_GetBoundObjects");
static_assert(offsetof(DaySequenceDirector_GetBoundObjects, ObjectBinding) == 0x000000, "Member 'DaySequenceDirector_GetBoundObjects::ObjectBinding' has a wrong offset!");
static_assert(offsetof(DaySequenceDirector_GetBoundObjects, ReturnValue) == 0x000018, "Member 'DaySequenceDirector_GetBoundObjects::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceDirector.GetSequence
// 0x0008 (0x0008 - 0x0000)
struct DaySequenceDirector_GetSequence final
{
public:
	class UMovieSceneSequence*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceDirector_GetSequence) == 0x000008, "Wrong alignment on DaySequenceDirector_GetSequence");
static_assert(sizeof(DaySequenceDirector_GetSequence) == 0x000008, "Wrong size on DaySequenceDirector_GetSequence");
static_assert(offsetof(DaySequenceDirector_GetSequence, ReturnValue) == 0x000000, "Member 'DaySequenceDirector_GetSequence::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceDirector.GetCurrentTime
// 0x0010 (0x0010 - 0x0000)
struct DaySequenceDirector_GetCurrentTime final
{
public:
	struct FQualifiedFrameTime                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceDirector_GetCurrentTime) == 0x000004, "Wrong alignment on DaySequenceDirector_GetCurrentTime");
static_assert(sizeof(DaySequenceDirector_GetCurrentTime) == 0x000010, "Wrong size on DaySequenceDirector_GetCurrentTime");
static_assert(offsetof(DaySequenceDirector_GetCurrentTime, ReturnValue) == 0x000000, "Member 'DaySequenceDirector_GetCurrentTime::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceDirector.GetMasterSequenceTime
// 0x0010 (0x0010 - 0x0000)
struct DaySequenceDirector_GetMasterSequenceTime final
{
public:
	struct FQualifiedFrameTime                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceDirector_GetMasterSequenceTime) == 0x000004, "Wrong alignment on DaySequenceDirector_GetMasterSequenceTime");
static_assert(sizeof(DaySequenceDirector_GetMasterSequenceTime) == 0x000010, "Wrong size on DaySequenceDirector_GetMasterSequenceTime");
static_assert(offsetof(DaySequenceDirector_GetMasterSequenceTime, ReturnValue) == 0x000000, "Member 'DaySequenceDirector_GetMasterSequenceTime::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceDirector.GetRootSequenceTime
// 0x0010 (0x0010 - 0x0000)
struct DaySequenceDirector_GetRootSequenceTime final
{
public:
	struct FQualifiedFrameTime                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceDirector_GetRootSequenceTime) == 0x000004, "Wrong alignment on DaySequenceDirector_GetRootSequenceTime");
static_assert(sizeof(DaySequenceDirector_GetRootSequenceTime) == 0x000010, "Wrong size on DaySequenceDirector_GetRootSequenceTime");
static_assert(offsetof(DaySequenceDirector_GetRootSequenceTime, ReturnValue) == 0x000000, "Member 'DaySequenceDirector_GetRootSequenceTime::ReturnValue' has a wrong offset!");

// Function DaySequence.DaySequenceSubsystem.GetDaySequenceActor
// 0x0008 (0x0008 - 0x0000)
struct DaySequenceSubsystem_GetDaySequenceActor final
{
public:
	class ADaySequenceActor*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaySequenceSubsystem_GetDaySequenceActor) == 0x000008, "Wrong alignment on DaySequenceSubsystem_GetDaySequenceActor");
static_assert(sizeof(DaySequenceSubsystem_GetDaySequenceActor) == 0x000008, "Wrong size on DaySequenceSubsystem_GetDaySequenceActor");
static_assert(offsetof(DaySequenceSubsystem_GetDaySequenceActor, ReturnValue) == 0x000000, "Member 'DaySequenceSubsystem_GetDaySequenceActor::ReturnValue' has a wrong offset!");

}

