#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DanceVolume

#include "Basic.hpp"

#include "DanceVolume_structs.hpp"


namespace SDK::Params
{

// Function DanceVolume.DanceSynchronizerComponent.CalculateDanceMontagePlayRate
// 0x0020 (0x0020 - 0x0000)
struct DanceSynchronizerComponent_CalculateDanceMontagePlayRate final
{
public:
	float                                         CurrentTempo;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAnimMontage*                     Montage;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDanceBeatInfo                         DanceBeatInfo;                                     // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DanceSynchronizerComponent_CalculateDanceMontagePlayRate) == 0x000008, "Wrong alignment on DanceSynchronizerComponent_CalculateDanceMontagePlayRate");
static_assert(sizeof(DanceSynchronizerComponent_CalculateDanceMontagePlayRate) == 0x000020, "Wrong size on DanceSynchronizerComponent_CalculateDanceMontagePlayRate");
static_assert(offsetof(DanceSynchronizerComponent_CalculateDanceMontagePlayRate, CurrentTempo) == 0x000000, "Member 'DanceSynchronizerComponent_CalculateDanceMontagePlayRate::CurrentTempo' has a wrong offset!");
static_assert(offsetof(DanceSynchronizerComponent_CalculateDanceMontagePlayRate, Montage) == 0x000008, "Member 'DanceSynchronizerComponent_CalculateDanceMontagePlayRate::Montage' has a wrong offset!");
static_assert(offsetof(DanceSynchronizerComponent_CalculateDanceMontagePlayRate, DanceBeatInfo) == 0x000010, "Member 'DanceSynchronizerComponent_CalculateDanceMontagePlayRate::DanceBeatInfo' has a wrong offset!");
static_assert(offsetof(DanceSynchronizerComponent_CalculateDanceMontagePlayRate, ReturnValue) == 0x000018, "Member 'DanceSynchronizerComponent_CalculateDanceMontagePlayRate::ReturnValue' has a wrong offset!");

// Function DanceVolume.DanceSynchronizerComponent.GetOwnerFortPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct DanceSynchronizerComponent_GetOwnerFortPlayerPawn final
{
public:
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DanceSynchronizerComponent_GetOwnerFortPlayerPawn) == 0x000008, "Wrong alignment on DanceSynchronizerComponent_GetOwnerFortPlayerPawn");
static_assert(sizeof(DanceSynchronizerComponent_GetOwnerFortPlayerPawn) == 0x000008, "Wrong size on DanceSynchronizerComponent_GetOwnerFortPlayerPawn");
static_assert(offsetof(DanceSynchronizerComponent_GetOwnerFortPlayerPawn, ReturnValue) == 0x000000, "Member 'DanceSynchronizerComponent_GetOwnerFortPlayerPawn::ReturnValue' has a wrong offset!");

// Function DanceVolume.DanceSynchronizerComponent.GetOwnerSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct DanceSynchronizerComponent_GetOwnerSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DanceSynchronizerComponent_GetOwnerSkeletalMeshComponent) == 0x000008, "Wrong alignment on DanceSynchronizerComponent_GetOwnerSkeletalMeshComponent");
static_assert(sizeof(DanceSynchronizerComponent_GetOwnerSkeletalMeshComponent) == 0x000008, "Wrong size on DanceSynchronizerComponent_GetOwnerSkeletalMeshComponent");
static_assert(offsetof(DanceSynchronizerComponent_GetOwnerSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'DanceSynchronizerComponent_GetOwnerSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function DanceVolume.DanceSynchronizerComponent.IsTempoSyncEnabled
// 0x0001 (0x0001 - 0x0000)
struct DanceSynchronizerComponent_IsTempoSyncEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DanceSynchronizerComponent_IsTempoSyncEnabled) == 0x000001, "Wrong alignment on DanceSynchronizerComponent_IsTempoSyncEnabled");
static_assert(sizeof(DanceSynchronizerComponent_IsTempoSyncEnabled) == 0x000001, "Wrong size on DanceSynchronizerComponent_IsTempoSyncEnabled");
static_assert(offsetof(DanceSynchronizerComponent_IsTempoSyncEnabled, ReturnValue) == 0x000000, "Member 'DanceSynchronizerComponent_IsTempoSyncEnabled::ReturnValue' has a wrong offset!");

// Function DanceVolume.DanceSynchronizerComponent.SetBeatSyncMode
// 0x0001 (0x0001 - 0x0000)
struct DanceSynchronizerComponent_SetBeatSyncMode final
{
public:
	EDanceBeatSyncMode                            NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DanceSynchronizerComponent_SetBeatSyncMode) == 0x000001, "Wrong alignment on DanceSynchronizerComponent_SetBeatSyncMode");
static_assert(sizeof(DanceSynchronizerComponent_SetBeatSyncMode) == 0x000001, "Wrong size on DanceSynchronizerComponent_SetBeatSyncMode");
static_assert(offsetof(DanceSynchronizerComponent_SetBeatSyncMode, NewMode) == 0x000000, "Member 'DanceSynchronizerComponent_SetBeatSyncMode::NewMode' has a wrong offset!");

// Function DanceVolume.DanceSynchronizerComponent.SetDanceBeatInfo
// 0x0008 (0x0008 - 0x0000)
struct DanceSynchronizerComponent_SetDanceBeatInfo final
{
public:
	struct FDanceBeatInfo                         NewDanceBeatInfo;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DanceSynchronizerComponent_SetDanceBeatInfo) == 0x000004, "Wrong alignment on DanceSynchronizerComponent_SetDanceBeatInfo");
static_assert(sizeof(DanceSynchronizerComponent_SetDanceBeatInfo) == 0x000008, "Wrong size on DanceSynchronizerComponent_SetDanceBeatInfo");
static_assert(offsetof(DanceSynchronizerComponent_SetDanceBeatInfo, NewDanceBeatInfo) == 0x000000, "Member 'DanceSynchronizerComponent_SetDanceBeatInfo::NewDanceBeatInfo' has a wrong offset!");

// Function DanceVolume.DanceSynchronizerComponent.SetTempo
// 0x0004 (0x0004 - 0x0000)
struct DanceSynchronizerComponent_SetTempo final
{
public:
	float                                         newTempo;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DanceSynchronizerComponent_SetTempo) == 0x000004, "Wrong alignment on DanceSynchronizerComponent_SetTempo");
static_assert(sizeof(DanceSynchronizerComponent_SetTempo) == 0x000004, "Wrong size on DanceSynchronizerComponent_SetTempo");
static_assert(offsetof(DanceSynchronizerComponent_SetTempo, newTempo) == 0x000000, "Member 'DanceSynchronizerComponent_SetTempo::newTempo' has a wrong offset!");

// Function DanceVolume.DanceVolumeLibrary.ForceStopMontage
// 0x0008 (0x0008 - 0x0000)
struct DanceVolumeLibrary_ForceStopMontage final
{
public:
	const class AFortPawn*                        FortPawn;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DanceVolumeLibrary_ForceStopMontage) == 0x000008, "Wrong alignment on DanceVolumeLibrary_ForceStopMontage");
static_assert(sizeof(DanceVolumeLibrary_ForceStopMontage) == 0x000008, "Wrong size on DanceVolumeLibrary_ForceStopMontage");
static_assert(offsetof(DanceVolumeLibrary_ForceStopMontage, FortPawn) == 0x000000, "Member 'DanceVolumeLibrary_ForceStopMontage::FortPawn' has a wrong offset!");

// Function DanceVolume.DanceVolumeLibrary.GetLastEmoteExecuted
// 0x0010 (0x0010 - 0x0000)
struct DanceVolumeLibrary_GetLastEmoteExecuted final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DanceVolumeLibrary_GetLastEmoteExecuted) == 0x000008, "Wrong alignment on DanceVolumeLibrary_GetLastEmoteExecuted");
static_assert(sizeof(DanceVolumeLibrary_GetLastEmoteExecuted) == 0x000010, "Wrong size on DanceVolumeLibrary_GetLastEmoteExecuted");
static_assert(offsetof(DanceVolumeLibrary_GetLastEmoteExecuted, Controller) == 0x000000, "Member 'DanceVolumeLibrary_GetLastEmoteExecuted::Controller' has a wrong offset!");
static_assert(offsetof(DanceVolumeLibrary_GetLastEmoteExecuted, ReturnValue) == 0x000008, "Member 'DanceVolumeLibrary_GetLastEmoteExecuted::ReturnValue' has a wrong offset!");

}

