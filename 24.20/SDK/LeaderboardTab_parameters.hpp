#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LeaderboardTab

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function LeaderboardTab.LeaderboardTab_C.Colorize
// 0x01D0 (0x01D0 - 0x0000)
struct LeaderboardTab_C_Colorize final
{
public:
	struct FFortTournamentDisplayInfo             Color_Info;                                        // 0x0000(0x01D0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(LeaderboardTab_C_Colorize) == 0x000008, "Wrong alignment on LeaderboardTab_C_Colorize");
static_assert(sizeof(LeaderboardTab_C_Colorize) == 0x0001D0, "Wrong size on LeaderboardTab_C_Colorize");
static_assert(offsetof(LeaderboardTab_C_Colorize, Color_Info) == 0x000000, "Member 'LeaderboardTab_C_Colorize::Color_Info' has a wrong offset!");

// Function LeaderboardTab.LeaderboardTab_C.ExecuteUbergraph_LeaderboardTab
// 0x0230 (0x0230 - 0x0000)
struct LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortTournamentDisplayInfo             K2Node_CustomEvent_Color_Info;                     // 0x0008(0x01D0)(ConstParm)
	class FString                                 K2Node_CustomEvent_EventId;                        // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_EventWindowId;                  // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F9[0x3];                                      // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x01FC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x020D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x020E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x020F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULeaderboardListViewWrapper_C*          K2Node_DynamicCast_AsLeaderboard_List_View_Wrapper; // 0x0210(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21A[0x6];                                      // 0x021A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULeaderboardListViewWrapper_C*          K2Node_DynamicCast_AsLeaderboard_List_View_Wrapper_1; // 0x0220(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab) == 0x000008, "Wrong alignment on LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab");
static_assert(sizeof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab) == 0x000230, "Wrong size on LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, EntryPoint) == 0x000000, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::EntryPoint' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, Temp_byte_Variable) == 0x000004, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, K2Node_CustomEvent_Color_Info) == 0x000008, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::K2Node_CustomEvent_Color_Info' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, K2Node_CustomEvent_EventId) == 0x0001D8, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::K2Node_CustomEvent_EventId' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, K2Node_CustomEvent_EventWindowId) == 0x0001E8, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::K2Node_CustomEvent_EventWindowId' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, CallFunc_IsEmpty_ReturnValue) == 0x0001F8, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, K2Node_MakeStruct_LinearColor) == 0x0001FC, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, CallFunc_Not_PreBool_ReturnValue) == 0x00020C, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, CallFunc_BooleanAND_ReturnValue) == 0x00020D, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, Temp_byte_Variable_1) == 0x00020E, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, Temp_bool_Variable) == 0x00020F, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, K2Node_DynamicCast_AsLeaderboard_List_View_Wrapper) == 0x000210, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::K2Node_DynamicCast_AsLeaderboard_List_View_Wrapper' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, K2Node_DynamicCast_bSuccess) == 0x000218, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, K2Node_Select_Default) == 0x000219, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, K2Node_DynamicCast_AsLeaderboard_List_View_Wrapper_1) == 0x000220, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::K2Node_DynamicCast_AsLeaderboard_List_View_Wrapper_1' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab, K2Node_DynamicCast_bSuccess_1) == 0x000228, "Member 'LeaderboardTab_C_ExecuteUbergraph_LeaderboardTab::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function LeaderboardTab.LeaderboardTab_C.Set Event
// 0x0020 (0x0020 - 0x0000)
struct LeaderboardTab_C_Set_Event final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 EventWindowId;                                     // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(LeaderboardTab_C_Set_Event) == 0x000008, "Wrong alignment on LeaderboardTab_C_Set_Event");
static_assert(sizeof(LeaderboardTab_C_Set_Event) == 0x000020, "Wrong size on LeaderboardTab_C_Set_Event");
static_assert(offsetof(LeaderboardTab_C_Set_Event, EventId) == 0x000000, "Member 'LeaderboardTab_C_Set_Event::EventId' has a wrong offset!");
static_assert(offsetof(LeaderboardTab_C_Set_Event, EventWindowId) == 0x000010, "Member 'LeaderboardTab_C_Set_Event::EventWindowId' has a wrong offset!");

}

