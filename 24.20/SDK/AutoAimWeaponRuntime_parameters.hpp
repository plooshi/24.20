#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AutoAimWeaponRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AutoAimWeaponRuntime.AutoAimWeaponKismetLibrary.DoesAutoAimWeaponHaveLineOfSight
// 0x0018 (0x0018 - 0x0000)
struct AutoAimWeaponKismetLibrary_DoesAutoAimWeaponHaveLineOfSight final
{
public:
	class AFortPawn*                              SourcePawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              TargetPawn;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutoAimWeaponKismetLibrary_DoesAutoAimWeaponHaveLineOfSight) == 0x000008, "Wrong alignment on AutoAimWeaponKismetLibrary_DoesAutoAimWeaponHaveLineOfSight");
static_assert(sizeof(AutoAimWeaponKismetLibrary_DoesAutoAimWeaponHaveLineOfSight) == 0x000018, "Wrong size on AutoAimWeaponKismetLibrary_DoesAutoAimWeaponHaveLineOfSight");
static_assert(offsetof(AutoAimWeaponKismetLibrary_DoesAutoAimWeaponHaveLineOfSight, SourcePawn) == 0x000000, "Member 'AutoAimWeaponKismetLibrary_DoesAutoAimWeaponHaveLineOfSight::SourcePawn' has a wrong offset!");
static_assert(offsetof(AutoAimWeaponKismetLibrary_DoesAutoAimWeaponHaveLineOfSight, TargetPawn) == 0x000008, "Member 'AutoAimWeaponKismetLibrary_DoesAutoAimWeaponHaveLineOfSight::TargetPawn' has a wrong offset!");
static_assert(offsetof(AutoAimWeaponKismetLibrary_DoesAutoAimWeaponHaveLineOfSight, ReturnValue) == 0x000010, "Member 'AutoAimWeaponKismetLibrary_DoesAutoAimWeaponHaveLineOfSight::ReturnValue' has a wrong offset!");

// Function AutoAimWeaponRuntime.AutoAimWeaponKismetLibrary.DoesAutoAimWeaponReticleIntersectTarget
// 0x0020 (0x0020 - 0x0000)
struct AutoAimWeaponKismetLibrary_DoesAutoAimWeaponReticleIntersectTarget final
{
public:
	float                                         OutReticleDistance;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              SourcePawn;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              TargetPawn;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReticleSize;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutoAimWeaponKismetLibrary_DoesAutoAimWeaponReticleIntersectTarget) == 0x000008, "Wrong alignment on AutoAimWeaponKismetLibrary_DoesAutoAimWeaponReticleIntersectTarget");
static_assert(sizeof(AutoAimWeaponKismetLibrary_DoesAutoAimWeaponReticleIntersectTarget) == 0x000020, "Wrong size on AutoAimWeaponKismetLibrary_DoesAutoAimWeaponReticleIntersectTarget");
static_assert(offsetof(AutoAimWeaponKismetLibrary_DoesAutoAimWeaponReticleIntersectTarget, OutReticleDistance) == 0x000000, "Member 'AutoAimWeaponKismetLibrary_DoesAutoAimWeaponReticleIntersectTarget::OutReticleDistance' has a wrong offset!");
static_assert(offsetof(AutoAimWeaponKismetLibrary_DoesAutoAimWeaponReticleIntersectTarget, SourcePawn) == 0x000008, "Member 'AutoAimWeaponKismetLibrary_DoesAutoAimWeaponReticleIntersectTarget::SourcePawn' has a wrong offset!");
static_assert(offsetof(AutoAimWeaponKismetLibrary_DoesAutoAimWeaponReticleIntersectTarget, TargetPawn) == 0x000010, "Member 'AutoAimWeaponKismetLibrary_DoesAutoAimWeaponReticleIntersectTarget::TargetPawn' has a wrong offset!");
static_assert(offsetof(AutoAimWeaponKismetLibrary_DoesAutoAimWeaponReticleIntersectTarget, ReticleSize) == 0x000018, "Member 'AutoAimWeaponKismetLibrary_DoesAutoAimWeaponReticleIntersectTarget::ReticleSize' has a wrong offset!");
static_assert(offsetof(AutoAimWeaponKismetLibrary_DoesAutoAimWeaponReticleIntersectTarget, ReturnValue) == 0x00001C, "Member 'AutoAimWeaponKismetLibrary_DoesAutoAimWeaponReticleIntersectTarget::ReturnValue' has a wrong offset!");

// Function AutoAimWeaponRuntime.AutoAimWeaponKismetLibrary.FindBestAutoAimTarget
// 0x0020 (0x0020 - 0x0000)
struct AutoAimWeaponKismetLibrary_FindBestAutoAimTarget final
{
public:
	class AFortPawn*                              OutTargetPawn;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutReticleDistance;                                // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        SourcePawn;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReticleSize;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAimWeaponKismetLibrary_FindBestAutoAimTarget) == 0x000008, "Wrong alignment on AutoAimWeaponKismetLibrary_FindBestAutoAimTarget");
static_assert(sizeof(AutoAimWeaponKismetLibrary_FindBestAutoAimTarget) == 0x000020, "Wrong size on AutoAimWeaponKismetLibrary_FindBestAutoAimTarget");
static_assert(offsetof(AutoAimWeaponKismetLibrary_FindBestAutoAimTarget, OutTargetPawn) == 0x000000, "Member 'AutoAimWeaponKismetLibrary_FindBestAutoAimTarget::OutTargetPawn' has a wrong offset!");
static_assert(offsetof(AutoAimWeaponKismetLibrary_FindBestAutoAimTarget, OutReticleDistance) == 0x000008, "Member 'AutoAimWeaponKismetLibrary_FindBestAutoAimTarget::OutReticleDistance' has a wrong offset!");
static_assert(offsetof(AutoAimWeaponKismetLibrary_FindBestAutoAimTarget, SourcePawn) == 0x000010, "Member 'AutoAimWeaponKismetLibrary_FindBestAutoAimTarget::SourcePawn' has a wrong offset!");
static_assert(offsetof(AutoAimWeaponKismetLibrary_FindBestAutoAimTarget, ReticleSize) == 0x000018, "Member 'AutoAimWeaponKismetLibrary_FindBestAutoAimTarget::ReticleSize' has a wrong offset!");
static_assert(offsetof(AutoAimWeaponKismetLibrary_FindBestAutoAimTarget, Range) == 0x00001C, "Member 'AutoAimWeaponKismetLibrary_FindBestAutoAimTarget::Range' has a wrong offset!");

// Function AutoAimWeaponRuntime.AutoAimWeaponKismetLibrary.GetAutoAimWeaponPawnComponent
// 0x0010 (0x0010 - 0x0000)
struct AutoAimWeaponKismetLibrary_GetAutoAimWeaponPawnComponent final
{
public:
	class AFortPawn*                              SourcePawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAutoAimWeaponPawnComponent*            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAimWeaponKismetLibrary_GetAutoAimWeaponPawnComponent) == 0x000008, "Wrong alignment on AutoAimWeaponKismetLibrary_GetAutoAimWeaponPawnComponent");
static_assert(sizeof(AutoAimWeaponKismetLibrary_GetAutoAimWeaponPawnComponent) == 0x000010, "Wrong size on AutoAimWeaponKismetLibrary_GetAutoAimWeaponPawnComponent");
static_assert(offsetof(AutoAimWeaponKismetLibrary_GetAutoAimWeaponPawnComponent, SourcePawn) == 0x000000, "Member 'AutoAimWeaponKismetLibrary_GetAutoAimWeaponPawnComponent::SourcePawn' has a wrong offset!");
static_assert(offsetof(AutoAimWeaponKismetLibrary_GetAutoAimWeaponPawnComponent, ReturnValue) == 0x000008, "Member 'AutoAimWeaponKismetLibrary_GetAutoAimWeaponPawnComponent::ReturnValue' has a wrong offset!");

// Function AutoAimWeaponRuntime.AutoAimWeaponPawnComponent.GetCurrentLockOnCount
// 0x0004 (0x0004 - 0x0000)
struct AutoAimWeaponPawnComponent_GetCurrentLockOnCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAimWeaponPawnComponent_GetCurrentLockOnCount) == 0x000004, "Wrong alignment on AutoAimWeaponPawnComponent_GetCurrentLockOnCount");
static_assert(sizeof(AutoAimWeaponPawnComponent_GetCurrentLockOnCount) == 0x000004, "Wrong size on AutoAimWeaponPawnComponent_GetCurrentLockOnCount");
static_assert(offsetof(AutoAimWeaponPawnComponent_GetCurrentLockOnCount, ReturnValue) == 0x000000, "Member 'AutoAimWeaponPawnComponent_GetCurrentLockOnCount::ReturnValue' has a wrong offset!");

// Function AutoAimWeaponRuntime.AutoAimWeaponPawnComponent.GetLockOnProgress
// 0x0004 (0x0004 - 0x0000)
struct AutoAimWeaponPawnComponent_GetLockOnProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAimWeaponPawnComponent_GetLockOnProgress) == 0x000004, "Wrong alignment on AutoAimWeaponPawnComponent_GetLockOnProgress");
static_assert(sizeof(AutoAimWeaponPawnComponent_GetLockOnProgress) == 0x000004, "Wrong size on AutoAimWeaponPawnComponent_GetLockOnProgress");
static_assert(offsetof(AutoAimWeaponPawnComponent_GetLockOnProgress, ReturnValue) == 0x000000, "Member 'AutoAimWeaponPawnComponent_GetLockOnProgress::ReturnValue' has a wrong offset!");

// Function AutoAimWeaponRuntime.AutoAimWeaponPawnComponent.GetLockOnTargetLocation
// 0x0020 (0x0020 - 0x0000)
struct AutoAimWeaponPawnComponent_GetLockOnTargetLocation final
{
public:
	struct FVector                                OutLockTargetLocation;                             // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutoAimWeaponPawnComponent_GetLockOnTargetLocation) == 0x000008, "Wrong alignment on AutoAimWeaponPawnComponent_GetLockOnTargetLocation");
static_assert(sizeof(AutoAimWeaponPawnComponent_GetLockOnTargetLocation) == 0x000020, "Wrong size on AutoAimWeaponPawnComponent_GetLockOnTargetLocation");
static_assert(offsetof(AutoAimWeaponPawnComponent_GetLockOnTargetLocation, OutLockTargetLocation) == 0x000000, "Member 'AutoAimWeaponPawnComponent_GetLockOnTargetLocation::OutLockTargetLocation' has a wrong offset!");
static_assert(offsetof(AutoAimWeaponPawnComponent_GetLockOnTargetLocation, ReturnValue) == 0x000018, "Member 'AutoAimWeaponPawnComponent_GetLockOnTargetLocation::ReturnValue' has a wrong offset!");

// Function AutoAimWeaponRuntime.AutoAimWeaponPawnComponent.GetTargetToReticleDistanceNormalized
// 0x0004 (0x0004 - 0x0000)
struct AutoAimWeaponPawnComponent_GetTargetToReticleDistanceNormalized final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAimWeaponPawnComponent_GetTargetToReticleDistanceNormalized) == 0x000004, "Wrong alignment on AutoAimWeaponPawnComponent_GetTargetToReticleDistanceNormalized");
static_assert(sizeof(AutoAimWeaponPawnComponent_GetTargetToReticleDistanceNormalized) == 0x000004, "Wrong size on AutoAimWeaponPawnComponent_GetTargetToReticleDistanceNormalized");
static_assert(offsetof(AutoAimWeaponPawnComponent_GetTargetToReticleDistanceNormalized, ReturnValue) == 0x000000, "Member 'AutoAimWeaponPawnComponent_GetTargetToReticleDistanceNormalized::ReturnValue' has a wrong offset!");

}

