#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MeshCosmetics

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function MeshCosmetics.FortCustomizableObjectParameterVariant.ApplyVariants
// 0x0180 (0x0180 - 0x0000)
struct FortCustomizableObjectParameterVariant_ApplyVariants final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAthenaLoadout                     Loadout;                                           // 0x0008(0x0178)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCustomizableObjectParameterVariant_ApplyVariants) == 0x000008, "Wrong alignment on FortCustomizableObjectParameterVariant_ApplyVariants");
static_assert(sizeof(FortCustomizableObjectParameterVariant_ApplyVariants) == 0x000180, "Wrong size on FortCustomizableObjectParameterVariant_ApplyVariants");
static_assert(offsetof(FortCustomizableObjectParameterVariant_ApplyVariants, Actor) == 0x000000, "Member 'FortCustomizableObjectParameterVariant_ApplyVariants::Actor' has a wrong offset!");
static_assert(offsetof(FortCustomizableObjectParameterVariant_ApplyVariants, Loadout) == 0x000008, "Member 'FortCustomizableObjectParameterVariant_ApplyVariants::Loadout' has a wrong offset!");

// Function MeshCosmetics.InstanceCache_FortGameInstance.OnGameInstanceWorldChanged
// 0x0010 (0x0010 - 0x0000)
struct InstanceCache_FortGameInstance_OnGameInstanceWorldChanged final
{
public:
	class UWorld*                                 OldWorld;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 NewWorld;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstanceCache_FortGameInstance_OnGameInstanceWorldChanged) == 0x000008, "Wrong alignment on InstanceCache_FortGameInstance_OnGameInstanceWorldChanged");
static_assert(sizeof(InstanceCache_FortGameInstance_OnGameInstanceWorldChanged) == 0x000010, "Wrong size on InstanceCache_FortGameInstance_OnGameInstanceWorldChanged");
static_assert(offsetof(InstanceCache_FortGameInstance_OnGameInstanceWorldChanged, OldWorld) == 0x000000, "Member 'InstanceCache_FortGameInstance_OnGameInstanceWorldChanged::OldWorld' has a wrong offset!");
static_assert(offsetof(InstanceCache_FortGameInstance_OnGameInstanceWorldChanged, NewWorld) == 0x000008, "Member 'InstanceCache_FortGameInstance_OnGameInstanceWorldChanged::NewWorld' has a wrong offset!");

// Function MeshCosmetics.InstanceCache_FortGameInstance.OnGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct InstanceCache_FortGameInstance_OnGamePhaseChanged final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstanceCache_FortGameInstance_OnGamePhaseChanged) == 0x000001, "Wrong alignment on InstanceCache_FortGameInstance_OnGamePhaseChanged");
static_assert(sizeof(InstanceCache_FortGameInstance_OnGamePhaseChanged) == 0x000001, "Wrong size on InstanceCache_FortGameInstance_OnGamePhaseChanged");
static_assert(offsetof(InstanceCache_FortGameInstance_OnGamePhaseChanged, GamePhase) == 0x000000, "Member 'InstanceCache_FortGameInstance_OnGamePhaseChanged::GamePhase' has a wrong offset!");

// Function MeshCosmetics.InstanceCache_FortGameInstance.OnGameStateChanged
// 0x0008 (0x0008 - 0x0000)
struct InstanceCache_FortGameInstance_OnGameStateChanged final
{
public:
	class AGameStateBase*                         InGameState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstanceCache_FortGameInstance_OnGameStateChanged) == 0x000008, "Wrong alignment on InstanceCache_FortGameInstance_OnGameStateChanged");
static_assert(sizeof(InstanceCache_FortGameInstance_OnGameStateChanged) == 0x000008, "Wrong size on InstanceCache_FortGameInstance_OnGameStateChanged");
static_assert(offsetof(InstanceCache_FortGameInstance_OnGameStateChanged, InGameState) == 0x000000, "Member 'InstanceCache_FortGameInstance_OnGameStateChanged::InGameState' has a wrong offset!");

// Function MeshCosmetics.InstanceCache_FortGameInstance.OnPreLoadMap
// 0x02D0 (0x02D0 - 0x0000)
struct InstanceCache_FortGameInstance_OnPreLoadMap final
{
public:
	struct FWorldContext                          WorldContext;                                      // 0x0000(0x02C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x02C0(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InstanceCache_FortGameInstance_OnPreLoadMap) == 0x000008, "Wrong alignment on InstanceCache_FortGameInstance_OnPreLoadMap");
static_assert(sizeof(InstanceCache_FortGameInstance_OnPreLoadMap) == 0x0002D0, "Wrong size on InstanceCache_FortGameInstance_OnPreLoadMap");
static_assert(offsetof(InstanceCache_FortGameInstance_OnPreLoadMap, WorldContext) == 0x000000, "Member 'InstanceCache_FortGameInstance_OnPreLoadMap::WorldContext' has a wrong offset!");
static_assert(offsetof(InstanceCache_FortGameInstance_OnPreLoadMap, MapName) == 0x0002C0, "Member 'InstanceCache_FortGameInstance_OnPreLoadMap::MapName' has a wrong offset!");

// Function MeshCosmetics.MeshCosmeticTagInterface.OnPostCustomizationAnimGameplayTags_BP
// 0x0020 (0x0020 - 0x0000)
struct MeshCosmeticTagInterface_OnPostCustomizationAnimGameplayTags_BP final
{
public:
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshCosmeticTagInterface_OnPostCustomizationAnimGameplayTags_BP) == 0x000008, "Wrong alignment on MeshCosmeticTagInterface_OnPostCustomizationAnimGameplayTags_BP");
static_assert(sizeof(MeshCosmeticTagInterface_OnPostCustomizationAnimGameplayTags_BP) == 0x000020, "Wrong size on MeshCosmeticTagInterface_OnPostCustomizationAnimGameplayTags_BP");
static_assert(offsetof(MeshCosmeticTagInterface_OnPostCustomizationAnimGameplayTags_BP, GameplayTags) == 0x000000, "Member 'MeshCosmeticTagInterface_OnPostCustomizationAnimGameplayTags_BP::GameplayTags' has a wrong offset!");

}

