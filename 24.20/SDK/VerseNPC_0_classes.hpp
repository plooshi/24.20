#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseNPC_0

#include "Basic.hpp"

#include "VerseAIBase_classes.hpp"
#include "FortniteAIServer_classes.hpp"
#include "EntityCore_classes.hpp"


namespace SDK
{

// Class VerseNPC.FortAthenaBTTask_VerseNPCMoveTo
// 0x0018 (0x00D8 - 0x00C0)
class UFortAthenaBTTask_VerseNPCMoveTo final : public UFortAthenaBTTask_MoveTo
{
public:
	class FName                                   AcceptableRadiusKeyName;                           // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AllowStrafeKeyName;                                // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AllowPartialPathName;                              // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CC[0xC];                                       // 0x00CC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaBTTask_VerseNPCMoveTo">();
	}
	static class UFortAthenaBTTask_VerseNPCMoveTo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaBTTask_VerseNPCMoveTo>();
	}
};
static_assert(alignof(UFortAthenaBTTask_VerseNPCMoveTo) == 0x000008, "Wrong alignment on UFortAthenaBTTask_VerseNPCMoveTo");
static_assert(sizeof(UFortAthenaBTTask_VerseNPCMoveTo) == 0x0000D8, "Wrong size on UFortAthenaBTTask_VerseNPCMoveTo");
static_assert(offsetof(UFortAthenaBTTask_VerseNPCMoveTo, AcceptableRadiusKeyName) == 0x0000C0, "Member 'UFortAthenaBTTask_VerseNPCMoveTo::AcceptableRadiusKeyName' has a wrong offset!");
static_assert(offsetof(UFortAthenaBTTask_VerseNPCMoveTo, AllowStrafeKeyName) == 0x0000C4, "Member 'UFortAthenaBTTask_VerseNPCMoveTo::AllowStrafeKeyName' has a wrong offset!");
static_assert(offsetof(UFortAthenaBTTask_VerseNPCMoveTo, AllowPartialPathName) == 0x0000C8, "Member 'UFortAthenaBTTask_VerseNPCMoveTo::AllowPartialPathName' has a wrong offset!");

// Class VerseNPC.InventoryComponentBase
// 0x0030 (0x0090 - 0x0060)
class UInventoryComponentBase : public UEntityComponent
{
public:
	uint8                                         Pad_60[0x18];                                      // 0x0060(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortInventory*                         CachedFortInventory;                               // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortPawn*                              CachedFortPawn;                                    // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlackboardComponent*                   CachedBlackboardComponent;                         // 0x0088(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InventoryComponentBase">();
	}
	static class UInventoryComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInventoryComponentBase>();
	}
};
static_assert(alignof(UInventoryComponentBase) == 0x000008, "Wrong alignment on UInventoryComponentBase");
static_assert(sizeof(UInventoryComponentBase) == 0x000090, "Wrong size on UInventoryComponentBase");
static_assert(offsetof(UInventoryComponentBase, CachedFortInventory) == 0x000078, "Member 'UInventoryComponentBase::CachedFortInventory' has a wrong offset!");
static_assert(offsetof(UInventoryComponentBase, CachedFortPawn) == 0x000080, "Member 'UInventoryComponentBase::CachedFortPawn' has a wrong offset!");
static_assert(offsetof(UInventoryComponentBase, CachedBlackboardComponent) == 0x000088, "Member 'UInventoryComponentBase::CachedBlackboardComponent' has a wrong offset!");

// Class VerseNPC.LeashComponentBase
// 0x0010 (0x00A8 - 0x0098)
class ULeashComponentBase : public UAIComponent
{
public:
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LeashComponentBase">();
	}
	static class ULeashComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULeashComponentBase>();
	}
};
static_assert(alignof(ULeashComponentBase) == 0x000008, "Wrong alignment on ULeashComponentBase");
static_assert(sizeof(ULeashComponentBase) == 0x0000A8, "Wrong size on ULeashComponentBase");

}

