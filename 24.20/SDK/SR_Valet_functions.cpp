#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SR_Valet

#include "Basic.hpp"

#include "SR_Valet_classes.hpp"
#include "SR_Valet_parameters.hpp"


namespace SDK
{

// Function SR_Valet.SR_Valet_C.ExecuteUbergraph_SR_Valet
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USR_Valet_C::ExecuteUbergraph_SR_Valet(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SR_Valet_C", "ExecuteUbergraph_SR_Valet");

	Params::SR_Valet_C_ExecuteUbergraph_SR_Valet Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SR_Valet.SR_Valet_C.On Source Played
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStreamingRadioPlayerComponent*   Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FAthenaRadioStation              AffectedSource                                         (BlueprintVisible, BlueprintReadOnly, Parm)

void USR_Valet_C::On_Source_Played(class UStreamingRadioPlayerComponent* Component, const struct FAthenaRadioStation& AffectedSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SR_Valet_C", "On Source Played");

	Params::SR_Valet_C_On_Source_Played Parms{};

	Parms.Component = Component;
	Parms.AffectedSource = std::move(AffectedSource);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SR_Valet.SR_Valet_C.On Source Stopped
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStreamingRadioPlayerComponent*   Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FAthenaRadioStation              AffectedSource                                         (BlueprintVisible, BlueprintReadOnly, Parm)

void USR_Valet_C::On_Source_Stopped(class UStreamingRadioPlayerComponent* Component, const struct FAthenaRadioStation& AffectedSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SR_Valet_C", "On Source Stopped");

	Params::SR_Valet_C_On_Source_Stopped Parms{};

	Parms.Component = Component;
	Parms.AffectedSource = std::move(AffectedSource);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SR_Valet.SR_Valet_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void USR_Valet_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SR_Valet_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SR_Valet.SR_Valet_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USR_Valet_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SR_Valet_C", "ReceiveEndPlay");

	Params::SR_Valet_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SR_Valet.SR_Valet_C.CanApplyHolster
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FName                             HolsterId                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool USR_Valet_C::CanApplyHolster(const class FName& HolsterId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SR_Valet_C", "CanApplyHolster");

	Params::SR_Valet_C_CanApplyHolster Parms{};

	Parms.HolsterId = HolsterId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

