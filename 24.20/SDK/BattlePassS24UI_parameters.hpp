#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePassS24UI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "CommonInput_structs.hpp"
#include "SlateCore_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "BattlePassS24UI_structs.hpp"


namespace SDK::Params
{

// Function BattlePassS24UI.BattlePassLandingPageS24.OnBattlePassSubscriptionAllowed
// 0x0001 (0x0001 - 0x0000)
struct BattlePassLandingPageS24_OnBattlePassSubscriptionAllowed final
{
public:
	bool                                          bSubscriptionAllowed;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassLandingPageS24_OnBattlePassSubscriptionAllowed) == 0x000001, "Wrong alignment on BattlePassLandingPageS24_OnBattlePassSubscriptionAllowed");
static_assert(sizeof(BattlePassLandingPageS24_OnBattlePassSubscriptionAllowed) == 0x000001, "Wrong size on BattlePassLandingPageS24_OnBattlePassSubscriptionAllowed");
static_assert(offsetof(BattlePassLandingPageS24_OnBattlePassSubscriptionAllowed, bSubscriptionAllowed) == 0x000000, "Member 'BattlePassLandingPageS24_OnBattlePassSubscriptionAllowed::bSubscriptionAllowed' has a wrong offset!");

// Function BattlePassS24UI.BattlePassRewardPageS24.HandleRewardTracksBoundaryNavigation
// 0x0010 (0x0010 - 0x0000)
struct BattlePassRewardPageS24_HandleRewardTracksBoundaryNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS24_HandleRewardTracksBoundaryNavigation) == 0x000008, "Wrong alignment on BattlePassRewardPageS24_HandleRewardTracksBoundaryNavigation");
static_assert(sizeof(BattlePassRewardPageS24_HandleRewardTracksBoundaryNavigation) == 0x000010, "Wrong size on BattlePassRewardPageS24_HandleRewardTracksBoundaryNavigation");
static_assert(offsetof(BattlePassRewardPageS24_HandleRewardTracksBoundaryNavigation, InNavigation) == 0x000000, "Member 'BattlePassRewardPageS24_HandleRewardTracksBoundaryNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(BattlePassRewardPageS24_HandleRewardTracksBoundaryNavigation, ReturnValue) == 0x000008, "Member 'BattlePassRewardPageS24_HandleRewardTracksBoundaryNavigation::ReturnValue' has a wrong offset!");

// Function BattlePassS24UI.BattlePassRewardPageS24.OnInitForPageType
// 0x0001 (0x0001 - 0x0000)
struct BattlePassRewardPageS24_OnInitForPageType final
{
public:
	ERewardPageType                               InRewardPageType;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS24_OnInitForPageType) == 0x000001, "Wrong alignment on BattlePassRewardPageS24_OnInitForPageType");
static_assert(sizeof(BattlePassRewardPageS24_OnInitForPageType) == 0x000001, "Wrong size on BattlePassRewardPageS24_OnInitForPageType");
static_assert(offsetof(BattlePassRewardPageS24_OnInitForPageType, InRewardPageType) == 0x000000, "Member 'BattlePassRewardPageS24_OnInitForPageType::InRewardPageType' has a wrong offset!");

// Function BattlePassS24UI.BattlePassRewardPageS24.OnInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct BattlePassRewardPageS24_OnInputMethodChanged final
{
public:
	ECommonInputType                              InputType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS24_OnInputMethodChanged) == 0x000001, "Wrong alignment on BattlePassRewardPageS24_OnInputMethodChanged");
static_assert(sizeof(BattlePassRewardPageS24_OnInputMethodChanged) == 0x000001, "Wrong size on BattlePassRewardPageS24_OnInputMethodChanged");
static_assert(offsetof(BattlePassRewardPageS24_OnInputMethodChanged, InputType) == 0x000000, "Member 'BattlePassRewardPageS24_OnInputMethodChanged::InputType' has a wrong offset!");

// Function BattlePassS24UI.BattlePassRewardPageS24.OnLoadingScreenSelectedChanged
// 0x0001 (0x0001 - 0x0000)
struct BattlePassRewardPageS24_OnLoadingScreenSelectedChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS24_OnLoadingScreenSelectedChanged) == 0x000001, "Wrong alignment on BattlePassRewardPageS24_OnLoadingScreenSelectedChanged");
static_assert(sizeof(BattlePassRewardPageS24_OnLoadingScreenSelectedChanged) == 0x000001, "Wrong size on BattlePassRewardPageS24_OnLoadingScreenSelectedChanged");
static_assert(offsetof(BattlePassRewardPageS24_OnLoadingScreenSelectedChanged, bIsSelected) == 0x000000, "Member 'BattlePassRewardPageS24_OnLoadingScreenSelectedChanged::bIsSelected' has a wrong offset!");

// Function BattlePassS24UI.BattlePassRewardPageS24.OnPageChanged
// 0x0008 (0x0008 - 0x0000)
struct BattlePassRewardPageS24_OnPageChanged final
{
public:
	int32                                         PageNumber;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardPageTotal;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS24_OnPageChanged) == 0x000004, "Wrong alignment on BattlePassRewardPageS24_OnPageChanged");
static_assert(sizeof(BattlePassRewardPageS24_OnPageChanged) == 0x000008, "Wrong size on BattlePassRewardPageS24_OnPageChanged");
static_assert(offsetof(BattlePassRewardPageS24_OnPageChanged, PageNumber) == 0x000000, "Member 'BattlePassRewardPageS24_OnPageChanged::PageNumber' has a wrong offset!");
static_assert(offsetof(BattlePassRewardPageS24_OnPageChanged, RewardPageTotal) == 0x000004, "Member 'BattlePassRewardPageS24_OnPageChanged::RewardPageTotal' has a wrong offset!");

// Function BattlePassS24UI.BattlePassRewardPageS24.GetRewardPageBackgroundData
// 0x0060 (0x0060 - 0x0000)
struct BattlePassRewardPageS24_GetRewardPageBackgroundData final
{
public:
	struct FVaultWorldBackgroundData              ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS24_GetRewardPageBackgroundData) == 0x000008, "Wrong alignment on BattlePassRewardPageS24_GetRewardPageBackgroundData");
static_assert(sizeof(BattlePassRewardPageS24_GetRewardPageBackgroundData) == 0x000060, "Wrong size on BattlePassRewardPageS24_GetRewardPageBackgroundData");
static_assert(offsetof(BattlePassRewardPageS24_GetRewardPageBackgroundData, ReturnValue) == 0x000000, "Member 'BattlePassRewardPageS24_GetRewardPageBackgroundData::ReturnValue' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.HandleClaimRewardComplete
// 0x0018 (0x0018 - 0x0000)
struct BattlePassScreenS24_HandleClaimRewardComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OfferTemplateIdList;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_HandleClaimRewardComplete) == 0x000008, "Wrong alignment on BattlePassScreenS24_HandleClaimRewardComplete");
static_assert(sizeof(BattlePassScreenS24_HandleClaimRewardComplete) == 0x000018, "Wrong size on BattlePassScreenS24_HandleClaimRewardComplete");
static_assert(offsetof(BattlePassScreenS24_HandleClaimRewardComplete, bSuccess) == 0x000000, "Member 'BattlePassScreenS24_HandleClaimRewardComplete::bSuccess' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_HandleClaimRewardComplete, OfferTemplateIdList) == 0x000008, "Member 'BattlePassScreenS24_HandleClaimRewardComplete::OfferTemplateIdList' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.HandleFullScreenMapToggled
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS24_HandleFullScreenMapToggled final
{
public:
	bool                                          bMapVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_HandleFullScreenMapToggled) == 0x000001, "Wrong alignment on BattlePassScreenS24_HandleFullScreenMapToggled");
static_assert(sizeof(BattlePassScreenS24_HandleFullScreenMapToggled) == 0x000001, "Wrong size on BattlePassScreenS24_HandleFullScreenMapToggled");
static_assert(offsetof(BattlePassScreenS24_HandleFullScreenMapToggled, bMapVisible) == 0x000000, "Member 'BattlePassScreenS24_HandleFullScreenMapToggled::bMapVisible' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnBattlePassGiftingAllowed
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS24_OnBattlePassGiftingAllowed final
{
public:
	bool                                          bGiftingAllowed;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_OnBattlePassGiftingAllowed) == 0x000001, "Wrong alignment on BattlePassScreenS24_OnBattlePassGiftingAllowed");
static_assert(sizeof(BattlePassScreenS24_OnBattlePassGiftingAllowed) == 0x000001, "Wrong size on BattlePassScreenS24_OnBattlePassGiftingAllowed");
static_assert(offsetof(BattlePassScreenS24_OnBattlePassGiftingAllowed, bGiftingAllowed) == 0x000000, "Member 'BattlePassScreenS24_OnBattlePassGiftingAllowed::bGiftingAllowed' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnInsufficientFunds
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS24_OnInsufficientFunds final
{
public:
	EBattlePassCurrencyType                       CurrencyType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_OnInsufficientFunds) == 0x000001, "Wrong alignment on BattlePassScreenS24_OnInsufficientFunds");
static_assert(sizeof(BattlePassScreenS24_OnInsufficientFunds) == 0x000001, "Wrong size on BattlePassScreenS24_OnInsufficientFunds");
static_assert(offsetof(BattlePassScreenS24_OnInsufficientFunds, CurrencyType) == 0x000000, "Member 'BattlePassScreenS24_OnInsufficientFunds::CurrencyType' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnInsufficientResource
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS24_OnInsufficientResource final
{
public:
	const class UFortPersistentResourceItemDefinition* PersistentResource;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_OnInsufficientResource) == 0x000008, "Wrong alignment on BattlePassScreenS24_OnInsufficientResource");
static_assert(sizeof(BattlePassScreenS24_OnInsufficientResource) == 0x000008, "Wrong size on BattlePassScreenS24_OnInsufficientResource");
static_assert(offsetof(BattlePassScreenS24_OnInsufficientResource, PersistentResource) == 0x000000, "Member 'BattlePassScreenS24_OnInsufficientResource::PersistentResource' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnItemDelayed
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS24_OnItemDelayed final
{
public:
	struct FTimespan                              Delay;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_OnItemDelayed) == 0x000008, "Wrong alignment on BattlePassScreenS24_OnItemDelayed");
static_assert(sizeof(BattlePassScreenS24_OnItemDelayed) == 0x000008, "Wrong size on BattlePassScreenS24_OnItemDelayed");
static_assert(offsetof(BattlePassScreenS24_OnItemDelayed, Delay) == 0x000000, "Member 'BattlePassScreenS24_OnItemDelayed::Delay' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnSetBaseRewardsInfo
// 0x0010 (0x0010 - 0x0000)
struct BattlePassScreenS24_OnSetBaseRewardsInfo final
{
public:
	int32                                         OwnedRewards;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRewards;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompletedPages;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPages;                                        // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_OnSetBaseRewardsInfo) == 0x000004, "Wrong alignment on BattlePassScreenS24_OnSetBaseRewardsInfo");
static_assert(sizeof(BattlePassScreenS24_OnSetBaseRewardsInfo) == 0x000010, "Wrong size on BattlePassScreenS24_OnSetBaseRewardsInfo");
static_assert(offsetof(BattlePassScreenS24_OnSetBaseRewardsInfo, OwnedRewards) == 0x000000, "Member 'BattlePassScreenS24_OnSetBaseRewardsInfo::OwnedRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetBaseRewardsInfo, TotalRewards) == 0x000004, "Member 'BattlePassScreenS24_OnSetBaseRewardsInfo::TotalRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetBaseRewardsInfo, CompletedPages) == 0x000008, "Member 'BattlePassScreenS24_OnSetBaseRewardsInfo::CompletedPages' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetBaseRewardsInfo, TotalPages) == 0x00000C, "Member 'BattlePassScreenS24_OnSetBaseRewardsInfo::TotalPages' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnSetBonusRewardsInfo
// 0x001C (0x001C - 0x0000)
struct BattlePassScreenS24_OnSetBonusRewardsInfo final
{
public:
	bool                                          bIsUnlocked;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OwnedRewards;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRewards;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompletedPages;                                    // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPages;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClaimedOutfits;                                    // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalOutfits;                                      // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_OnSetBonusRewardsInfo) == 0x000004, "Wrong alignment on BattlePassScreenS24_OnSetBonusRewardsInfo");
static_assert(sizeof(BattlePassScreenS24_OnSetBonusRewardsInfo) == 0x00001C, "Wrong size on BattlePassScreenS24_OnSetBonusRewardsInfo");
static_assert(offsetof(BattlePassScreenS24_OnSetBonusRewardsInfo, bIsUnlocked) == 0x000000, "Member 'BattlePassScreenS24_OnSetBonusRewardsInfo::bIsUnlocked' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetBonusRewardsInfo, OwnedRewards) == 0x000004, "Member 'BattlePassScreenS24_OnSetBonusRewardsInfo::OwnedRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetBonusRewardsInfo, TotalRewards) == 0x000008, "Member 'BattlePassScreenS24_OnSetBonusRewardsInfo::TotalRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetBonusRewardsInfo, CompletedPages) == 0x00000C, "Member 'BattlePassScreenS24_OnSetBonusRewardsInfo::CompletedPages' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetBonusRewardsInfo, TotalPages) == 0x000010, "Member 'BattlePassScreenS24_OnSetBonusRewardsInfo::TotalPages' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetBonusRewardsInfo, ClaimedOutfits) == 0x000014, "Member 'BattlePassScreenS24_OnSetBonusRewardsInfo::ClaimedOutfits' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetBonusRewardsInfo, TotalOutfits) == 0x000018, "Member 'BattlePassScreenS24_OnSetBonusRewardsInfo::TotalOutfits' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnSetCoverPageData
// 0x0038 (0x0038 - 0x0000)
struct BattlePassScreenS24_OnSetCoverPageData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bPageComplete;                                     // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassScreenS24_OnSetCoverPageData) == 0x000008, "Wrong alignment on BattlePassScreenS24_OnSetCoverPageData");
static_assert(sizeof(BattlePassScreenS24_OnSetCoverPageData) == 0x000038, "Wrong size on BattlePassScreenS24_OnSetCoverPageData");
static_assert(offsetof(BattlePassScreenS24_OnSetCoverPageData, Title) == 0x000000, "Member 'BattlePassScreenS24_OnSetCoverPageData::Title' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetCoverPageData, Description) == 0x000018, "Member 'BattlePassScreenS24_OnSetCoverPageData::Description' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetCoverPageData, bPageComplete) == 0x000030, "Member 'BattlePassScreenS24_OnSetCoverPageData::bPageComplete' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnSetCrewInfo
// 0x0058 (0x0058 - 0x0000)
struct BattlePassScreenS24_OnSetCrewInfo final
{
public:
	bool                                          bIsNextMonthRewards;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MonthText;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTimespan                              NextMonthlyRewardTimespan;                         // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CharacterDisplayName;                              // 0x0028(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   CharacterDescription;                              // 0x0040(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_OnSetCrewInfo) == 0x000008, "Wrong alignment on BattlePassScreenS24_OnSetCrewInfo");
static_assert(sizeof(BattlePassScreenS24_OnSetCrewInfo) == 0x000058, "Wrong size on BattlePassScreenS24_OnSetCrewInfo");
static_assert(offsetof(BattlePassScreenS24_OnSetCrewInfo, bIsNextMonthRewards) == 0x000000, "Member 'BattlePassScreenS24_OnSetCrewInfo::bIsNextMonthRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetCrewInfo, MonthText) == 0x000008, "Member 'BattlePassScreenS24_OnSetCrewInfo::MonthText' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetCrewInfo, NextMonthlyRewardTimespan) == 0x000020, "Member 'BattlePassScreenS24_OnSetCrewInfo::NextMonthlyRewardTimespan' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetCrewInfo, CharacterDisplayName) == 0x000028, "Member 'BattlePassScreenS24_OnSetCrewInfo::CharacterDisplayName' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetCrewInfo, CharacterDescription) == 0x000040, "Member 'BattlePassScreenS24_OnSetCrewInfo::CharacterDescription' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnSetItemPrice
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS24_OnSetItemPrice final
{
public:
	int32                                         Cost;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattlePassCurrencyType                       CurrencyType;                                      // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassScreenS24_OnSetItemPrice) == 0x000004, "Wrong alignment on BattlePassScreenS24_OnSetItemPrice");
static_assert(sizeof(BattlePassScreenS24_OnSetItemPrice) == 0x000008, "Wrong size on BattlePassScreenS24_OnSetItemPrice");
static_assert(offsetof(BattlePassScreenS24_OnSetItemPrice, Cost) == 0x000000, "Member 'BattlePassScreenS24_OnSetItemPrice::Cost' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetItemPrice, CurrencyType) == 0x000004, "Member 'BattlePassScreenS24_OnSetItemPrice::CurrencyType' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnSetPrerequisiteInfo
// 0x0028 (0x0028 - 0x0000)
struct BattlePassScreenS24_OnSetPrerequisiteInfo final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         CurrentAmount;                                     // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeededAmount;                                      // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattlePassRewardPrerequisiteType             PrerequisiteType;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPrerequisiteLock;                             // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassScreenS24_OnSetPrerequisiteInfo) == 0x000008, "Wrong alignment on BattlePassScreenS24_OnSetPrerequisiteInfo");
static_assert(sizeof(BattlePassScreenS24_OnSetPrerequisiteInfo) == 0x000028, "Wrong size on BattlePassScreenS24_OnSetPrerequisiteInfo");
static_assert(offsetof(BattlePassScreenS24_OnSetPrerequisiteInfo, Description) == 0x000000, "Member 'BattlePassScreenS24_OnSetPrerequisiteInfo::Description' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetPrerequisiteInfo, CurrentAmount) == 0x000018, "Member 'BattlePassScreenS24_OnSetPrerequisiteInfo::CurrentAmount' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetPrerequisiteInfo, NeededAmount) == 0x00001C, "Member 'BattlePassScreenS24_OnSetPrerequisiteInfo::NeededAmount' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetPrerequisiteInfo, PrerequisiteType) == 0x000020, "Member 'BattlePassScreenS24_OnSetPrerequisiteInfo::PrerequisiteType' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetPrerequisiteInfo, bShowPrerequisiteLock) == 0x000021, "Member 'BattlePassScreenS24_OnSetPrerequisiteInfo::bShowPrerequisiteLock' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnSetQuestRewardsInfo
// 0x0018 (0x0018 - 0x0000)
struct BattlePassScreenS24_OnSetQuestRewardsInfo final
{
public:
	struct FTimespan                              DelayTimespan;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnedRewards;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRewards;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompletedPages;                                    // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPages;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_OnSetQuestRewardsInfo) == 0x000008, "Wrong alignment on BattlePassScreenS24_OnSetQuestRewardsInfo");
static_assert(sizeof(BattlePassScreenS24_OnSetQuestRewardsInfo) == 0x000018, "Wrong size on BattlePassScreenS24_OnSetQuestRewardsInfo");
static_assert(offsetof(BattlePassScreenS24_OnSetQuestRewardsInfo, DelayTimespan) == 0x000000, "Member 'BattlePassScreenS24_OnSetQuestRewardsInfo::DelayTimespan' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetQuestRewardsInfo, OwnedRewards) == 0x000008, "Member 'BattlePassScreenS24_OnSetQuestRewardsInfo::OwnedRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetQuestRewardsInfo, TotalRewards) == 0x00000C, "Member 'BattlePassScreenS24_OnSetQuestRewardsInfo::TotalRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetQuestRewardsInfo, CompletedPages) == 0x000010, "Member 'BattlePassScreenS24_OnSetQuestRewardsInfo::CompletedPages' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetQuestRewardsInfo, TotalPages) == 0x000014, "Member 'BattlePassScreenS24_OnSetQuestRewardsInfo::TotalPages' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnSetResourcePrice
// 0x0010 (0x0010 - 0x0000)
struct BattlePassScreenS24_OnSetResourcePrice final
{
public:
	int32                                         Cost;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortPersistentResourceItemDefinition* PersistentResource;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_OnSetResourcePrice) == 0x000008, "Wrong alignment on BattlePassScreenS24_OnSetResourcePrice");
static_assert(sizeof(BattlePassScreenS24_OnSetResourcePrice) == 0x000010, "Wrong size on BattlePassScreenS24_OnSetResourcePrice");
static_assert(offsetof(BattlePassScreenS24_OnSetResourcePrice, Cost) == 0x000000, "Member 'BattlePassScreenS24_OnSetResourcePrice::Cost' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetResourcePrice, PersistentResource) == 0x000008, "Member 'BattlePassScreenS24_OnSetResourcePrice::PersistentResource' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnSetWeeklyRewardsInfo
// 0x0020 (0x0020 - 0x0000)
struct BattlePassScreenS24_OnSetWeeklyRewardsInfo final
{
public:
	struct FTimespan                              DelayTimespan;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvailableRewards;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnedRewards;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRewards;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvailablePages;                                    // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompletedPages;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPages;                                        // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_OnSetWeeklyRewardsInfo) == 0x000008, "Wrong alignment on BattlePassScreenS24_OnSetWeeklyRewardsInfo");
static_assert(sizeof(BattlePassScreenS24_OnSetWeeklyRewardsInfo) == 0x000020, "Wrong size on BattlePassScreenS24_OnSetWeeklyRewardsInfo");
static_assert(offsetof(BattlePassScreenS24_OnSetWeeklyRewardsInfo, DelayTimespan) == 0x000000, "Member 'BattlePassScreenS24_OnSetWeeklyRewardsInfo::DelayTimespan' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetWeeklyRewardsInfo, AvailableRewards) == 0x000008, "Member 'BattlePassScreenS24_OnSetWeeklyRewardsInfo::AvailableRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetWeeklyRewardsInfo, OwnedRewards) == 0x00000C, "Member 'BattlePassScreenS24_OnSetWeeklyRewardsInfo::OwnedRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetWeeklyRewardsInfo, TotalRewards) == 0x000010, "Member 'BattlePassScreenS24_OnSetWeeklyRewardsInfo::TotalRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetWeeklyRewardsInfo, AvailablePages) == 0x000014, "Member 'BattlePassScreenS24_OnSetWeeklyRewardsInfo::AvailablePages' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetWeeklyRewardsInfo, CompletedPages) == 0x000018, "Member 'BattlePassScreenS24_OnSetWeeklyRewardsInfo::CompletedPages' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnSetWeeklyRewardsInfo, TotalPages) == 0x00001C, "Member 'BattlePassScreenS24_OnSetWeeklyRewardsInfo::TotalPages' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnTransitionItemDetails
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS24_OnTransitionItemDetails final
{
public:
	bool                                          bTransitionForward;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_OnTransitionItemDetails) == 0x000001, "Wrong alignment on BattlePassScreenS24_OnTransitionItemDetails");
static_assert(sizeof(BattlePassScreenS24_OnTransitionItemDetails) == 0x000001, "Wrong size on BattlePassScreenS24_OnTransitionItemDetails");
static_assert(offsetof(BattlePassScreenS24_OnTransitionItemDetails, bTransitionForward) == 0x000000, "Member 'BattlePassScreenS24_OnTransitionItemDetails::bTransitionForward' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnUpdateBattlePassRequiredBar
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS24_OnUpdateBattlePassRequiredBar final
{
public:
	bool                                          bPassRequiredVisible;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_OnUpdateBattlePassRequiredBar) == 0x000001, "Wrong alignment on BattlePassScreenS24_OnUpdateBattlePassRequiredBar");
static_assert(sizeof(BattlePassScreenS24_OnUpdateBattlePassRequiredBar) == 0x000001, "Wrong size on BattlePassScreenS24_OnUpdateBattlePassRequiredBar");
static_assert(offsetof(BattlePassScreenS24_OnUpdateBattlePassRequiredBar, bPassRequiredVisible) == 0x000000, "Member 'BattlePassScreenS24_OnUpdateBattlePassRequiredBar::bPassRequiredVisible' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.OnUpdateStatusBar
// 0x0020 (0x0020 - 0x0000)
struct BattlePassScreenS24_OnUpdateStatusBar final
{
public:
	class FText                                   StatusText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EBattlePassStatusBarTypeS24                   BarType;                                           // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassScreenS24_OnUpdateStatusBar) == 0x000008, "Wrong alignment on BattlePassScreenS24_OnUpdateStatusBar");
static_assert(sizeof(BattlePassScreenS24_OnUpdateStatusBar) == 0x000020, "Wrong size on BattlePassScreenS24_OnUpdateStatusBar");
static_assert(offsetof(BattlePassScreenS24_OnUpdateStatusBar, StatusText) == 0x000000, "Member 'BattlePassScreenS24_OnUpdateStatusBar::StatusText' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS24_OnUpdateStatusBar, BarType) == 0x000018, "Member 'BattlePassScreenS24_OnUpdateStatusBar::BarType' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.GetQuestPageDelay
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS24_GetQuestPageDelay final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_GetQuestPageDelay) == 0x000008, "Wrong alignment on BattlePassScreenS24_GetQuestPageDelay");
static_assert(sizeof(BattlePassScreenS24_GetQuestPageDelay) == 0x000008, "Wrong size on BattlePassScreenS24_GetQuestPageDelay");
static_assert(offsetof(BattlePassScreenS24_GetQuestPageDelay, ReturnValue) == 0x000000, "Member 'BattlePassScreenS24_GetQuestPageDelay::ReturnValue' has a wrong offset!");

// Function BattlePassS24UI.BattlePassScreenS24.IsSeasonalCustomizationItemOwned
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS24_IsSeasonalCustomizationItemOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS24_IsSeasonalCustomizationItemOwned) == 0x000001, "Wrong alignment on BattlePassScreenS24_IsSeasonalCustomizationItemOwned");
static_assert(sizeof(BattlePassScreenS24_IsSeasonalCustomizationItemOwned) == 0x000001, "Wrong size on BattlePassScreenS24_IsSeasonalCustomizationItemOwned");
static_assert(offsetof(BattlePassScreenS24_IsSeasonalCustomizationItemOwned, ReturnValue) == 0x000000, "Member 'BattlePassScreenS24_IsSeasonalCustomizationItemOwned::ReturnValue' has a wrong offset!");

// Function BattlePassS24UI.FortBattlePassResourcesWidgetS24.OnBattleStarRewardsSet
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassResourcesWidgetS24_OnBattleStarRewardsSet final
{
public:
	int32                                         Rewards;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassResourcesWidgetS24_OnBattleStarRewardsSet) == 0x000004, "Wrong alignment on FortBattlePassResourcesWidgetS24_OnBattleStarRewardsSet");
static_assert(sizeof(FortBattlePassResourcesWidgetS24_OnBattleStarRewardsSet) == 0x000004, "Wrong size on FortBattlePassResourcesWidgetS24_OnBattleStarRewardsSet");
static_assert(offsetof(FortBattlePassResourcesWidgetS24_OnBattleStarRewardsSet, Rewards) == 0x000000, "Member 'FortBattlePassResourcesWidgetS24_OnBattleStarRewardsSet::Rewards' has a wrong offset!");

// Function BattlePassS24UI.FortBattlePassResourcesWidgetS24.OnStylePointsRewardsSet
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassResourcesWidgetS24_OnStylePointsRewardsSet final
{
public:
	int32                                         Rewards;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassResourcesWidgetS24_OnStylePointsRewardsSet) == 0x000004, "Wrong alignment on FortBattlePassResourcesWidgetS24_OnStylePointsRewardsSet");
static_assert(sizeof(FortBattlePassResourcesWidgetS24_OnStylePointsRewardsSet) == 0x000004, "Wrong size on FortBattlePassResourcesWidgetS24_OnStylePointsRewardsSet");
static_assert(offsetof(FortBattlePassResourcesWidgetS24_OnStylePointsRewardsSet, Rewards) == 0x000000, "Member 'FortBattlePassResourcesWidgetS24_OnStylePointsRewardsSet::Rewards' has a wrong offset!");

// Function BattlePassS24UI.FortBattlePassTutorialTooltipS24.SetText
// 0x0018 (0x0018 - 0x0000)
struct FortBattlePassTutorialTooltipS24_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTutorialTooltipS24_SetText) == 0x000008, "Wrong alignment on FortBattlePassTutorialTooltipS24_SetText");
static_assert(sizeof(FortBattlePassTutorialTooltipS24_SetText) == 0x000018, "Wrong size on FortBattlePassTutorialTooltipS24_SetText");
static_assert(offsetof(FortBattlePassTutorialTooltipS24_SetText, Text) == 0x000000, "Member 'FortBattlePassTutorialTooltipS24_SetText::Text' has a wrong offset!");

}

