#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KatanaGameplayRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "KatanaGameplayRuntime_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function KatanaGameplayRuntime.KatanaTargetingComponent.PerformDashTargeting
// 0x0048 (0x0048 - 0x0000)
struct KatanaTargetingComponent_PerformDashTargeting final
{
public:
	struct FFortKatanaDashTargetingInfo           OutDashTargetingInfo;                              // 0x0000(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KatanaTargetingComponent_PerformDashTargeting) == 0x000008, "Wrong alignment on KatanaTargetingComponent_PerformDashTargeting");
static_assert(sizeof(KatanaTargetingComponent_PerformDashTargeting) == 0x000048, "Wrong size on KatanaTargetingComponent_PerformDashTargeting");
static_assert(offsetof(KatanaTargetingComponent_PerformDashTargeting, OutDashTargetingInfo) == 0x000000, "Member 'KatanaTargetingComponent_PerformDashTargeting::OutDashTargetingInfo' has a wrong offset!");
static_assert(offsetof(KatanaTargetingComponent_PerformDashTargeting, ReturnValue) == 0x000040, "Member 'KatanaTargetingComponent_PerformDashTargeting::ReturnValue' has a wrong offset!");

// Function KatanaGameplayRuntime.KatanaTargetingComponent.PerformPrimaryAttackTargeting
// 0x0020 (0x0020 - 0x0000)
struct KatanaTargetingComponent_PerformPrimaryAttackTargeting final
{
public:
	EFortKatanaPrimaryAttackVariation             AttackVariation;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KatanaTargetingComponent_PerformPrimaryAttackTargeting) == 0x000008, "Wrong alignment on KatanaTargetingComponent_PerformPrimaryAttackTargeting");
static_assert(sizeof(KatanaTargetingComponent_PerformPrimaryAttackTargeting) == 0x000020, "Wrong size on KatanaTargetingComponent_PerformPrimaryAttackTargeting");
static_assert(offsetof(KatanaTargetingComponent_PerformPrimaryAttackTargeting, AttackVariation) == 0x000000, "Member 'KatanaTargetingComponent_PerformPrimaryAttackTargeting::AttackVariation' has a wrong offset!");
static_assert(offsetof(KatanaTargetingComponent_PerformPrimaryAttackTargeting, ReturnValue) == 0x000008, "Member 'KatanaTargetingComponent_PerformPrimaryAttackTargeting::ReturnValue' has a wrong offset!");

// Function KatanaGameplayRuntime.AbilityTask_ApplyRootMotion_KatanaDashForce.ApplyRootMotion_KatanaDashForce
// 0x0070 (0x0070 - 0x0000)
struct AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce final
{
public:
	class UGameplayAbility*                       InOwningAbility;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTaskInstanceName;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InTargetLocation;                                  // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHeightAboveGround;                               // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSetNewMovementMode;                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 InMovementMode;                                    // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInRestrictSpeedToExpected;                        // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           InPathOffsetCurve;                                 // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 InVelocityOnFinishMode;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InSetVelocityOnFinish;                             // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InClampVelocityOnFinish;                           // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_ApplyRootMotion_KatanaDashForce* ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce) == 0x000008, "Wrong alignment on AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce");
static_assert(sizeof(AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce) == 0x000070, "Wrong size on AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce");
static_assert(offsetof(AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce, InOwningAbility) == 0x000000, "Member 'AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce::InOwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce, InTaskInstanceName) == 0x000008, "Member 'AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce::InTaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce, InTargetLocation) == 0x000010, "Member 'AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce::InTargetLocation' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce, InDuration) == 0x000028, "Member 'AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce::InDuration' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce, InHeightAboveGround) == 0x00002C, "Member 'AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce::InHeightAboveGround' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce, bInSetNewMovementMode) == 0x000030, "Member 'AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce::bInSetNewMovementMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce, InMovementMode) == 0x000031, "Member 'AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce::InMovementMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce, bInRestrictSpeedToExpected) == 0x000032, "Member 'AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce::bInRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce, InPathOffsetCurve) == 0x000038, "Member 'AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce::InPathOffsetCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce, InVelocityOnFinishMode) == 0x000040, "Member 'AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce::InVelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce, InSetVelocityOnFinish) == 0x000048, "Member 'AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce::InSetVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce, InClampVelocityOnFinish) == 0x000060, "Member 'AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce::InClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce, ReturnValue) == 0x000068, "Member 'AbilityTask_ApplyRootMotion_KatanaDashForce_ApplyRootMotion_KatanaDashForce::ReturnValue' has a wrong offset!");

}

