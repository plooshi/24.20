#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseDevices

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function VerseDevices.ScriptDevice.HandleMinigameEndGame
// 0x0010 (0x0010 - 0x0000)
struct ScriptDevice_HandleMinigameEndGame final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMinigameEnd                              EndMethod;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMinigameState                            NextState;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScriptDevice_HandleMinigameEndGame) == 0x000008, "Wrong alignment on ScriptDevice_HandleMinigameEndGame");
static_assert(sizeof(ScriptDevice_HandleMinigameEndGame) == 0x000010, "Wrong size on ScriptDevice_HandleMinigameEndGame");
static_assert(offsetof(ScriptDevice_HandleMinigameEndGame, PlayerController) == 0x000000, "Member 'ScriptDevice_HandleMinigameEndGame::PlayerController' has a wrong offset!");
static_assert(offsetof(ScriptDevice_HandleMinigameEndGame, EndMethod) == 0x000008, "Member 'ScriptDevice_HandleMinigameEndGame::EndMethod' has a wrong offset!");
static_assert(offsetof(ScriptDevice_HandleMinigameEndGame, NextState) == 0x000009, "Member 'ScriptDevice_HandleMinigameEndGame::NextState' has a wrong offset!");

// Function VerseDevices.ScriptDevice.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct ScriptDevice_SetEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptDevice_SetEnabled) == 0x000001, "Wrong alignment on ScriptDevice_SetEnabled");
static_assert(sizeof(ScriptDevice_SetEnabled) == 0x000001, "Wrong size on ScriptDevice_SetEnabled");
static_assert(offsetof(ScriptDevice_SetEnabled, bInEnabled) == 0x000000, "Member 'ScriptDevice_SetEnabled::bInEnabled' has a wrong offset!");

// Function VerseDevices.VerseCreativeObject.OnActorEndPlayDestroyActorAndReset
// 0x0010 (0x0010 - 0x0000)
struct VerseCreativeObject_OnActorEndPlayDestroyActorAndReset final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VerseCreativeObject_OnActorEndPlayDestroyActorAndReset) == 0x000008, "Wrong alignment on VerseCreativeObject_OnActorEndPlayDestroyActorAndReset");
static_assert(sizeof(VerseCreativeObject_OnActorEndPlayDestroyActorAndReset) == 0x000010, "Wrong size on VerseCreativeObject_OnActorEndPlayDestroyActorAndReset");
static_assert(offsetof(VerseCreativeObject_OnActorEndPlayDestroyActorAndReset, Actor) == 0x000000, "Member 'VerseCreativeObject_OnActorEndPlayDestroyActorAndReset::Actor' has a wrong offset!");
static_assert(offsetof(VerseCreativeObject_OnActorEndPlayDestroyActorAndReset, EndPlayReason) == 0x000008, "Member 'VerseCreativeObject_OnActorEndPlayDestroyActorAndReset::EndPlayReason' has a wrong offset!");

}

