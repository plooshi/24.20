#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ContextualAnimation

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum ContextualAnimation.EContextualAnimPointType
// NumValues: 0x0004
enum class EContextualAnimPointType : uint8
{
	FirstFrame                               = 0,
	SyncFrame                                = 1,
	LastFrame                                = 2,
	EContextualAnimPointType_MAX             = 3,
};

// Enum ContextualAnimation.EContextualAnimCriterionToConsider
// NumValues: 0x0004
enum class EContextualAnimCriterionToConsider : uint8
{
	All                                      = 0,
	Spatial                                  = 1,
	Other                                    = 2,
	EContextualAnimCriterionToConsider_MAX   = 3,
};

// Enum ContextualAnimation.EContextualAnimActorPreviewType
// NumValues: 0x0005
enum class EContextualAnimActorPreviewType : uint8
{
	SkeletalMesh                             = 0,
	StaticMesh                               = 1,
	Actor                                    = 2,
	None                                     = 3,
	EContextualAnimActorPreviewType_MAX      = 4,
};

// Enum ContextualAnimation.EContextualAnimCriterionType
// NumValues: 0x0003
enum class EContextualAnimCriterionType : uint8
{
	Spatial                                  = 0,
	Other                                    = 1,
	EContextualAnimCriterionType_MAX         = 2,
};

// Enum ContextualAnimation.EContextualAnimCriterionConeMode
// NumValues: 0x0003
enum class EContextualAnimCriterionConeMode : uint8
{
	ToPrimary                                = 0,
	FromPrimary                              = 1,
	EContextualAnimCriterionConeMode_MAX     = 2,
};

// Enum ContextualAnimation.EContextualAnimCriterionDistanceMode
// NumValues: 0x0003
enum class EContextualAnimCriterionDistanceMode : uint8
{
	Distance_3D                              = 0,
	Distance_2D                              = 1,
	Distance_MAX                             = 2,
};

// Enum ContextualAnimation.EContextualAnimJoinRule
// NumValues: 0x0003
enum class EContextualAnimJoinRule : uint8
{
	Default                                  = 0,
	Late                                     = 1,
	EContextualAnimJoinRule_MAX              = 2,
};

// Enum ContextualAnimation.EContextualAnimIKTargetProvider
// NumValues: 0x0003
enum class EContextualAnimIKTargetProvider : uint8
{
	Autogenerated                            = 0,
	Bone                                     = 1,
	EContextualAnimIKTargetProvider_MAX      = 2,
};

// Enum ContextualAnimation.EContextualAnimWarpPointDefinitionMode
// NumValues: 0x0004
enum class EContextualAnimWarpPointDefinitionMode : uint8
{
	PrimaryActor                             = 0,
	Socket                                   = 1,
	Custom                                   = 2,
	EContextualAnimWarpPointDefinitionMode_MAX = 3,
};

// ScriptStruct ContextualAnimation.ContextualAnimWarpTarget
// 0x0040 (0x0040 - 0x0000)
struct FContextualAnimWarpTarget final
{
public:
	class FName                                   Role;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetName;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  TargetRotation;                                    // 0x0020(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextualAnimWarpTarget) == 0x000010, "Wrong alignment on FContextualAnimWarpTarget");
static_assert(sizeof(FContextualAnimWarpTarget) == 0x000040, "Wrong size on FContextualAnimWarpTarget");
static_assert(offsetof(FContextualAnimWarpTarget, Role) == 0x000000, "Member 'FContextualAnimWarpTarget::Role' has a wrong offset!");
static_assert(offsetof(FContextualAnimWarpTarget, TargetName) == 0x000004, "Member 'FContextualAnimWarpTarget::TargetName' has a wrong offset!");
static_assert(offsetof(FContextualAnimWarpTarget, TargetLocation) == 0x000008, "Member 'FContextualAnimWarpTarget::TargetLocation' has a wrong offset!");
static_assert(offsetof(FContextualAnimWarpTarget, TargetRotation) == 0x000020, "Member 'FContextualAnimWarpTarget::TargetRotation' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimRepData
// 0x0001 (0x0001 - 0x0000)
struct FContextualAnimRepData
{
public:
	uint8                                         RepCounter;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextualAnimRepData) == 0x000001, "Wrong alignment on FContextualAnimRepData");
static_assert(sizeof(FContextualAnimRepData) == 0x000001, "Wrong size on FContextualAnimRepData");
static_assert(offsetof(FContextualAnimRepData, RepCounter) == 0x000000, "Member 'FContextualAnimRepData::RepCounter' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimSceneBindingContext
// 0x00D0 (0x00D0 - 0x0000)
struct alignas(0x10) FContextualAnimSceneBindingContext final
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UContextualAnimSceneActorComponent> CachedSceneActorComp;                              // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UAnimInstance>           CachedAnimInstance;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class USkeletalMeshComponent>  CachedSkeletalMesh;                                // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_20[0xB0];                                      // 0x0020(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContextualAnimSceneBindingContext) == 0x000010, "Wrong alignment on FContextualAnimSceneBindingContext");
static_assert(sizeof(FContextualAnimSceneBindingContext) == 0x0000D0, "Wrong size on FContextualAnimSceneBindingContext");
static_assert(offsetof(FContextualAnimSceneBindingContext, Actor) == 0x000000, "Member 'FContextualAnimSceneBindingContext::Actor' has a wrong offset!");
static_assert(offsetof(FContextualAnimSceneBindingContext, CachedSceneActorComp) == 0x000008, "Member 'FContextualAnimSceneBindingContext::CachedSceneActorComp' has a wrong offset!");
static_assert(offsetof(FContextualAnimSceneBindingContext, CachedAnimInstance) == 0x000010, "Member 'FContextualAnimSceneBindingContext::CachedAnimInstance' has a wrong offset!");
static_assert(offsetof(FContextualAnimSceneBindingContext, CachedSkeletalMesh) == 0x000018, "Member 'FContextualAnimSceneBindingContext::CachedSkeletalMesh' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimSceneBinding
// 0x00E0 (0x00E0 - 0x0000)
struct FContextualAnimSceneBinding final
{
public:
	struct FContextualAnimSceneBindingContext     Context;                                           // 0x0000(0x00D0)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	int32                                         AnimTrackIdx;                                      // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D4[0xC];                                       // 0x00D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContextualAnimSceneBinding) == 0x000010, "Wrong alignment on FContextualAnimSceneBinding");
static_assert(sizeof(FContextualAnimSceneBinding) == 0x0000E0, "Wrong size on FContextualAnimSceneBinding");
static_assert(offsetof(FContextualAnimSceneBinding, Context) == 0x000000, "Member 'FContextualAnimSceneBinding::Context' has a wrong offset!");
static_assert(offsetof(FContextualAnimSceneBinding, AnimTrackIdx) == 0x0000D0, "Member 'FContextualAnimSceneBinding::AnimTrackIdx' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimSceneBindings
// 0x0028 (0x0028 - 0x0000)
struct FContextualAnimSceneBindings final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UContextualAnimSceneAsset> SceneAsset;                                        // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SectionIdx;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AnimSetIdx;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FContextualAnimSceneBinding>    Data;                                              // 0x0018(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FContextualAnimSceneBindings) == 0x000008, "Wrong alignment on FContextualAnimSceneBindings");
static_assert(sizeof(FContextualAnimSceneBindings) == 0x000028, "Wrong size on FContextualAnimSceneBindings");
static_assert(offsetof(FContextualAnimSceneBindings, ID) == 0x000000, "Member 'FContextualAnimSceneBindings::ID' has a wrong offset!");
static_assert(offsetof(FContextualAnimSceneBindings, SceneAsset) == 0x000004, "Member 'FContextualAnimSceneBindings::SceneAsset' has a wrong offset!");
static_assert(offsetof(FContextualAnimSceneBindings, SectionIdx) == 0x00000C, "Member 'FContextualAnimSceneBindings::SectionIdx' has a wrong offset!");
static_assert(offsetof(FContextualAnimSceneBindings, AnimSetIdx) == 0x000010, "Member 'FContextualAnimSceneBindings::AnimSetIdx' has a wrong offset!");
static_assert(offsetof(FContextualAnimSceneBindings, Data) == 0x000018, "Member 'FContextualAnimSceneBindings::Data' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimRepBindingsData
// 0x003F (0x0040 - 0x0001)
struct FContextualAnimRepBindingsData final : public FContextualAnimRepData
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContextualAnimSceneBindings           Bindings;                                          // 0x0008(0x0028)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FContextualAnimWarpTarget>      ExternalWarpTargets;                               // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextualAnimRepBindingsData) == 0x000008, "Wrong alignment on FContextualAnimRepBindingsData");
static_assert(sizeof(FContextualAnimRepBindingsData) == 0x000040, "Wrong size on FContextualAnimRepBindingsData");
static_assert(offsetof(FContextualAnimRepBindingsData, Bindings) == 0x000008, "Member 'FContextualAnimRepBindingsData::Bindings' has a wrong offset!");
static_assert(offsetof(FContextualAnimRepBindingsData, ExternalWarpTargets) == 0x000030, "Member 'FContextualAnimRepBindingsData::ExternalWarpTargets' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimRepLateJoinData
// 0x0027 (0x0028 - 0x0001)
struct FContextualAnimRepLateJoinData final : public FContextualAnimRepData
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Role;                                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FContextualAnimWarpTarget>      ExternalWarpTargets;                               // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextualAnimRepLateJoinData) == 0x000008, "Wrong alignment on FContextualAnimRepLateJoinData");
static_assert(sizeof(FContextualAnimRepLateJoinData) == 0x000028, "Wrong size on FContextualAnimRepLateJoinData");
static_assert(offsetof(FContextualAnimRepLateJoinData, Actor) == 0x000008, "Member 'FContextualAnimRepLateJoinData::Actor' has a wrong offset!");
static_assert(offsetof(FContextualAnimRepLateJoinData, Role) == 0x000010, "Member 'FContextualAnimRepLateJoinData::Role' has a wrong offset!");
static_assert(offsetof(FContextualAnimRepLateJoinData, ExternalWarpTargets) == 0x000018, "Member 'FContextualAnimRepLateJoinData::ExternalWarpTargets' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimRepTransitionData
// 0x0017 (0x0018 - 0x0001)
struct FContextualAnimRepTransitionData final : public FContextualAnimRepData
{
public:
	uint8                                         SectionIdx;                                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AnimSetIdx;                                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FContextualAnimWarpTarget>      ExternalWarpTargets;                               // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextualAnimRepTransitionData) == 0x000008, "Wrong alignment on FContextualAnimRepTransitionData");
static_assert(sizeof(FContextualAnimRepTransitionData) == 0x000018, "Wrong size on FContextualAnimRepTransitionData");
static_assert(offsetof(FContextualAnimRepTransitionData, SectionIdx) == 0x000001, "Member 'FContextualAnimRepTransitionData::SectionIdx' has a wrong offset!");
static_assert(offsetof(FContextualAnimRepTransitionData, AnimSetIdx) == 0x000002, "Member 'FContextualAnimRepTransitionData::AnimSetIdx' has a wrong offset!");
static_assert(offsetof(FContextualAnimRepTransitionData, ExternalWarpTargets) == 0x000008, "Member 'FContextualAnimRepTransitionData::ExternalWarpTargets' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimAlignmentTrackContainer
// 0x0028 (0x0028 - 0x0000)
struct FContextualAnimAlignmentTrackContainer final
{
public:
	struct FAnimSequenceTrackContainer            Tracks;                                            // 0x0000(0x0020)(NativeAccessSpecifierPublic)
	float                                         SampleInterval;                                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContextualAnimAlignmentTrackContainer) == 0x000008, "Wrong alignment on FContextualAnimAlignmentTrackContainer");
static_assert(sizeof(FContextualAnimAlignmentTrackContainer) == 0x000028, "Wrong size on FContextualAnimAlignmentTrackContainer");
static_assert(offsetof(FContextualAnimAlignmentTrackContainer, Tracks) == 0x000000, "Member 'FContextualAnimAlignmentTrackContainer::Tracks' has a wrong offset!");
static_assert(offsetof(FContextualAnimAlignmentTrackContainer, SampleInterval) == 0x000020, "Member 'FContextualAnimAlignmentTrackContainer::SampleInterval' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimTrack
// 0x00E0 (0x00E0 - 0x0000)
struct FContextualAnimTrack final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimMaxStartTime;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireFlyingMode;                                // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptional;                                         // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContextualAnimAlignmentTrackContainer AlignmentData;                                     // 0x0010(0x0028)(NativeAccessSpecifierPublic)
	struct FContextualAnimAlignmentTrackContainer IKTargetData;                                      // 0x0038(0x0028)(NativeAccessSpecifierPublic)
	TArray<class UContextualAnimSelectionCriterion*> SelectionCriteria;                                 // 0x0060(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FTransform                             MeshToScene;                                       // 0x0070(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Role;                                              // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionIdx;                                        // 0x00D4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSetIdx;                                        // 0x00D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimTrackIdx;                                      // 0x00DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextualAnimTrack) == 0x000010, "Wrong alignment on FContextualAnimTrack");
static_assert(sizeof(FContextualAnimTrack) == 0x0000E0, "Wrong size on FContextualAnimTrack");
static_assert(offsetof(FContextualAnimTrack, Animation) == 0x000000, "Member 'FContextualAnimTrack::Animation' has a wrong offset!");
static_assert(offsetof(FContextualAnimTrack, AnimMaxStartTime) == 0x000008, "Member 'FContextualAnimTrack::AnimMaxStartTime' has a wrong offset!");
static_assert(offsetof(FContextualAnimTrack, bRequireFlyingMode) == 0x00000C, "Member 'FContextualAnimTrack::bRequireFlyingMode' has a wrong offset!");
static_assert(offsetof(FContextualAnimTrack, bOptional) == 0x00000D, "Member 'FContextualAnimTrack::bOptional' has a wrong offset!");
static_assert(offsetof(FContextualAnimTrack, AlignmentData) == 0x000010, "Member 'FContextualAnimTrack::AlignmentData' has a wrong offset!");
static_assert(offsetof(FContextualAnimTrack, IKTargetData) == 0x000038, "Member 'FContextualAnimTrack::IKTargetData' has a wrong offset!");
static_assert(offsetof(FContextualAnimTrack, SelectionCriteria) == 0x000060, "Member 'FContextualAnimTrack::SelectionCriteria' has a wrong offset!");
static_assert(offsetof(FContextualAnimTrack, MeshToScene) == 0x000070, "Member 'FContextualAnimTrack::MeshToScene' has a wrong offset!");
static_assert(offsetof(FContextualAnimTrack, Role) == 0x0000D0, "Member 'FContextualAnimTrack::Role' has a wrong offset!");
static_assert(offsetof(FContextualAnimTrack, SectionIdx) == 0x0000D4, "Member 'FContextualAnimTrack::SectionIdx' has a wrong offset!");
static_assert(offsetof(FContextualAnimTrack, AnimSetIdx) == 0x0000D8, "Member 'FContextualAnimTrack::AnimSetIdx' has a wrong offset!");
static_assert(offsetof(FContextualAnimTrack, AnimTrackIdx) == 0x0000DC, "Member 'FContextualAnimTrack::AnimTrackIdx' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimSet
// 0x0068 (0x0068 - 0x0000)
struct FContextualAnimSet final
{
public:
	TArray<struct FContextualAnimTrack>           Tracks;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, struct FTransform>          WarpPoints;                                        // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
	float                                         RandomWeight;                                      // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContextualAnimSet) == 0x000008, "Wrong alignment on FContextualAnimSet");
static_assert(sizeof(FContextualAnimSet) == 0x000068, "Wrong size on FContextualAnimSet");
static_assert(offsetof(FContextualAnimSet, Tracks) == 0x000000, "Member 'FContextualAnimSet::Tracks' has a wrong offset!");
static_assert(offsetof(FContextualAnimSet, WarpPoints) == 0x000010, "Member 'FContextualAnimSet::WarpPoints' has a wrong offset!");
static_assert(offsetof(FContextualAnimSet, RandomWeight) == 0x000060, "Member 'FContextualAnimSet::RandomWeight' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimIKTargetDefinition
// 0x0014 (0x0014 - 0x0000)
struct FContextualAnimIKTargetDefinition final
{
public:
	class FName                                   GoalName;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContextualAnimIKTargetProvider               Provider;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetRoleName;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetBoneName;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextualAnimIKTargetDefinition) == 0x000004, "Wrong alignment on FContextualAnimIKTargetDefinition");
static_assert(sizeof(FContextualAnimIKTargetDefinition) == 0x000014, "Wrong size on FContextualAnimIKTargetDefinition");
static_assert(offsetof(FContextualAnimIKTargetDefinition, GoalName) == 0x000000, "Member 'FContextualAnimIKTargetDefinition::GoalName' has a wrong offset!");
static_assert(offsetof(FContextualAnimIKTargetDefinition, BoneName) == 0x000004, "Member 'FContextualAnimIKTargetDefinition::BoneName' has a wrong offset!");
static_assert(offsetof(FContextualAnimIKTargetDefinition, Provider) == 0x000008, "Member 'FContextualAnimIKTargetDefinition::Provider' has a wrong offset!");
static_assert(offsetof(FContextualAnimIKTargetDefinition, TargetRoleName) == 0x00000C, "Member 'FContextualAnimIKTargetDefinition::TargetRoleName' has a wrong offset!");
static_assert(offsetof(FContextualAnimIKTargetDefinition, TargetBoneName) == 0x000010, "Member 'FContextualAnimIKTargetDefinition::TargetBoneName' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimIKTargetDefContainer
// 0x0010 (0x0010 - 0x0000)
struct FContextualAnimIKTargetDefContainer final
{
public:
	TArray<struct FContextualAnimIKTargetDefinition> IKTargetDefs;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextualAnimIKTargetDefContainer) == 0x000008, "Wrong alignment on FContextualAnimIKTargetDefContainer");
static_assert(sizeof(FContextualAnimIKTargetDefContainer) == 0x000010, "Wrong size on FContextualAnimIKTargetDefContainer");
static_assert(offsetof(FContextualAnimIKTargetDefContainer, IKTargetDefs) == 0x000000, "Member 'FContextualAnimIKTargetDefContainer::IKTargetDefs' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimWarpPointCustomParams
// 0x0010 (0x0010 - 0x0000)
struct FContextualAnimWarpPointCustomParams final
{
public:
	class FName                                   Origin;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlongClosestDistance;                             // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OtherRole;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextualAnimWarpPointCustomParams) == 0x000004, "Wrong alignment on FContextualAnimWarpPointCustomParams");
static_assert(sizeof(FContextualAnimWarpPointCustomParams) == 0x000010, "Wrong size on FContextualAnimWarpPointCustomParams");
static_assert(offsetof(FContextualAnimWarpPointCustomParams, Origin) == 0x000000, "Member 'FContextualAnimWarpPointCustomParams::Origin' has a wrong offset!");
static_assert(offsetof(FContextualAnimWarpPointCustomParams, bAlongClosestDistance) == 0x000004, "Member 'FContextualAnimWarpPointCustomParams::bAlongClosestDistance' has a wrong offset!");
static_assert(offsetof(FContextualAnimWarpPointCustomParams, OtherRole) == 0x000008, "Member 'FContextualAnimWarpPointCustomParams::OtherRole' has a wrong offset!");
static_assert(offsetof(FContextualAnimWarpPointCustomParams, Weight) == 0x00000C, "Member 'FContextualAnimWarpPointCustomParams::Weight' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimWarpPointDefinition
// 0x001C (0x001C - 0x0000)
struct FContextualAnimWarpPointDefinition final
{
public:
	class FName                                   WarpTargetName;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContextualAnimWarpPointDefinitionMode        Mode;                                              // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FContextualAnimWarpPointCustomParams   Params;                                            // 0x000C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextualAnimWarpPointDefinition) == 0x000004, "Wrong alignment on FContextualAnimWarpPointDefinition");
static_assert(sizeof(FContextualAnimWarpPointDefinition) == 0x00001C, "Wrong size on FContextualAnimWarpPointDefinition");
static_assert(offsetof(FContextualAnimWarpPointDefinition, WarpTargetName) == 0x000000, "Member 'FContextualAnimWarpPointDefinition::WarpTargetName' has a wrong offset!");
static_assert(offsetof(FContextualAnimWarpPointDefinition, Mode) == 0x000004, "Member 'FContextualAnimWarpPointDefinition::Mode' has a wrong offset!");
static_assert(offsetof(FContextualAnimWarpPointDefinition, SocketName) == 0x000008, "Member 'FContextualAnimWarpPointDefinition::SocketName' has a wrong offset!");
static_assert(offsetof(FContextualAnimWarpPointDefinition, Params) == 0x00000C, "Member 'FContextualAnimWarpPointDefinition::Params' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimSceneSection
// 0x0078 (0x0078 - 0x0000)
struct FContextualAnimSceneSection final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FContextualAnimSet>             AnimSets;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FContextualAnimIKTargetDefContainer> RoleToIKTargetDefsMap;                             // 0x0018(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<struct FContextualAnimWarpPointDefinition> WarpPointDefinitions;                              // 0x0068(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FContextualAnimSceneSection) == 0x000008, "Wrong alignment on FContextualAnimSceneSection");
static_assert(sizeof(FContextualAnimSceneSection) == 0x000078, "Wrong size on FContextualAnimSceneSection");
static_assert(offsetof(FContextualAnimSceneSection, Name) == 0x000000, "Member 'FContextualAnimSceneSection::Name' has a wrong offset!");
static_assert(offsetof(FContextualAnimSceneSection, AnimSets) == 0x000008, "Member 'FContextualAnimSceneSection::AnimSets' has a wrong offset!");
static_assert(offsetof(FContextualAnimSceneSection, RoleToIKTargetDefsMap) == 0x000018, "Member 'FContextualAnimSceneSection::RoleToIKTargetDefsMap' has a wrong offset!");
static_assert(offsetof(FContextualAnimSceneSection, WarpPointDefinitions) == 0x000068, "Member 'FContextualAnimSceneSection::WarpPointDefinitions' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimPoint
// 0x0080 (0x0080 - 0x0000)
struct FContextualAnimPoint final
{
public:
	class FName                                   Role;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionIdx;                                        // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSetIdx;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimTrackIdx;                                      // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextualAnimPoint) == 0x000010, "Wrong alignment on FContextualAnimPoint");
static_assert(sizeof(FContextualAnimPoint) == 0x000080, "Wrong size on FContextualAnimPoint");
static_assert(offsetof(FContextualAnimPoint, Role) == 0x000000, "Member 'FContextualAnimPoint::Role' has a wrong offset!");
static_assert(offsetof(FContextualAnimPoint, Transform) == 0x000010, "Member 'FContextualAnimPoint::Transform' has a wrong offset!");
static_assert(offsetof(FContextualAnimPoint, Speed) == 0x000070, "Member 'FContextualAnimPoint::Speed' has a wrong offset!");
static_assert(offsetof(FContextualAnimPoint, SectionIdx) == 0x000074, "Member 'FContextualAnimPoint::SectionIdx' has a wrong offset!");
static_assert(offsetof(FContextualAnimPoint, AnimSetIdx) == 0x000078, "Member 'FContextualAnimPoint::AnimSetIdx' has a wrong offset!");
static_assert(offsetof(FContextualAnimPoint, AnimTrackIdx) == 0x00007C, "Member 'FContextualAnimPoint::AnimTrackIdx' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimActorPreviewData
// 0x00A8 (0x00A8 - 0x0000)
struct FContextualAnimActorPreviewData final
{
public:
	class FName                                   Role;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContextualAnimActorPreviewType               Type;                                              // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           PreviewSkeletalMesh;                               // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PreviewAnimInstance;                               // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             PreviewStaticMesh;                                 // 0x0058(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PreviewActorClass;                                 // 0x0080(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextualAnimActorPreviewData) == 0x000008, "Wrong alignment on FContextualAnimActorPreviewData");
static_assert(sizeof(FContextualAnimActorPreviewData) == 0x0000A8, "Wrong size on FContextualAnimActorPreviewData");
static_assert(offsetof(FContextualAnimActorPreviewData, Role) == 0x000000, "Member 'FContextualAnimActorPreviewData::Role' has a wrong offset!");
static_assert(offsetof(FContextualAnimActorPreviewData, Type) == 0x000004, "Member 'FContextualAnimActorPreviewData::Type' has a wrong offset!");
static_assert(offsetof(FContextualAnimActorPreviewData, PreviewSkeletalMesh) == 0x000008, "Member 'FContextualAnimActorPreviewData::PreviewSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FContextualAnimActorPreviewData, PreviewAnimInstance) == 0x000030, "Member 'FContextualAnimActorPreviewData::PreviewAnimInstance' has a wrong offset!");
static_assert(offsetof(FContextualAnimActorPreviewData, PreviewStaticMesh) == 0x000058, "Member 'FContextualAnimActorPreviewData::PreviewStaticMesh' has a wrong offset!");
static_assert(offsetof(FContextualAnimActorPreviewData, PreviewActorClass) == 0x000080, "Member 'FContextualAnimActorPreviewData::PreviewActorClass' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimIKTarget
// 0x0070 (0x0070 - 0x0000)
struct FContextualAnimIKTarget final
{
public:
	class FName                                   GoalName;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextualAnimIKTarget) == 0x000010, "Wrong alignment on FContextualAnimIKTarget");
static_assert(sizeof(FContextualAnimIKTarget) == 0x000070, "Wrong size on FContextualAnimIKTarget");
static_assert(offsetof(FContextualAnimIKTarget, GoalName) == 0x000000, "Member 'FContextualAnimIKTarget::GoalName' has a wrong offset!");
static_assert(offsetof(FContextualAnimIKTarget, Alpha) == 0x000004, "Member 'FContextualAnimIKTarget::Alpha' has a wrong offset!");
static_assert(offsetof(FContextualAnimIKTarget, Transform) == 0x000010, "Member 'FContextualAnimIKTarget::Transform' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimRoleDefinition
// 0x0070 (0x0070 - 0x0000)
struct FContextualAnimRoleDefinition final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCharacter;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MeshToComponent;                                   // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextualAnimRoleDefinition) == 0x000010, "Wrong alignment on FContextualAnimRoleDefinition");
static_assert(sizeof(FContextualAnimRoleDefinition) == 0x000070, "Wrong size on FContextualAnimRoleDefinition");
static_assert(offsetof(FContextualAnimRoleDefinition, Name) == 0x000000, "Member 'FContextualAnimRoleDefinition::Name' has a wrong offset!");
static_assert(offsetof(FContextualAnimRoleDefinition, bIsCharacter) == 0x000004, "Member 'FContextualAnimRoleDefinition::bIsCharacter' has a wrong offset!");
static_assert(offsetof(FContextualAnimRoleDefinition, MeshToComponent) == 0x000010, "Member 'FContextualAnimRoleDefinition::MeshToComponent' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimWarpPoint
// 0x0070 (0x0070 - 0x0000)
struct FContextualAnimWarpPoint final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextualAnimWarpPoint) == 0x000010, "Wrong alignment on FContextualAnimWarpPoint");
static_assert(sizeof(FContextualAnimWarpPoint) == 0x000070, "Wrong size on FContextualAnimWarpPoint");
static_assert(offsetof(FContextualAnimWarpPoint, Name) == 0x000000, "Member 'FContextualAnimWarpPoint::Name' has a wrong offset!");
static_assert(offsetof(FContextualAnimWarpPoint, Transform) == 0x000010, "Member 'FContextualAnimWarpPoint::Transform' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimStartSceneParams
// 0x0068 (0x0068 - 0x0000)
struct FContextualAnimStartSceneParams final
{
public:
	TMap<class FName, struct FContextualAnimSceneBindingContext> RoleToActorMap;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         SectionIdx;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSetIdx;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContextualAnimStartSceneParams) == 0x000008, "Wrong alignment on FContextualAnimStartSceneParams");
static_assert(sizeof(FContextualAnimStartSceneParams) == 0x000068, "Wrong size on FContextualAnimStartSceneParams");
static_assert(offsetof(FContextualAnimStartSceneParams, RoleToActorMap) == 0x000000, "Member 'FContextualAnimStartSceneParams::RoleToActorMap' has a wrong offset!");
static_assert(offsetof(FContextualAnimStartSceneParams, SectionIdx) == 0x000050, "Member 'FContextualAnimStartSceneParams::SectionIdx' has a wrong offset!");
static_assert(offsetof(FContextualAnimStartSceneParams, AnimSetIdx) == 0x000054, "Member 'FContextualAnimStartSceneParams::AnimSetIdx' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimQueryResult
// 0x00E0 (0x00E0 - 0x0000)
struct FContextualAnimQueryResult final
{
public:
	TWeakObjectPtr<class UAnimMontage>            Animation;                                         // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             EntryTransform;                                    // 0x0010(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SyncTransform;                                     // 0x0070(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimStartTime;                                     // 0x00D0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSetIdx;                                        // 0x00D4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContextualAnimQueryResult) == 0x000010, "Wrong alignment on FContextualAnimQueryResult");
static_assert(sizeof(FContextualAnimQueryResult) == 0x0000E0, "Wrong size on FContextualAnimQueryResult");
static_assert(offsetof(FContextualAnimQueryResult, Animation) == 0x000000, "Member 'FContextualAnimQueryResult::Animation' has a wrong offset!");
static_assert(offsetof(FContextualAnimQueryResult, EntryTransform) == 0x000010, "Member 'FContextualAnimQueryResult::EntryTransform' has a wrong offset!");
static_assert(offsetof(FContextualAnimQueryResult, SyncTransform) == 0x000070, "Member 'FContextualAnimQueryResult::SyncTransform' has a wrong offset!");
static_assert(offsetof(FContextualAnimQueryResult, AnimStartTime) == 0x0000D0, "Member 'FContextualAnimQueryResult::AnimStartTime' has a wrong offset!");
static_assert(offsetof(FContextualAnimQueryResult, AnimSetIdx) == 0x0000D4, "Member 'FContextualAnimQueryResult::AnimSetIdx' has a wrong offset!");

// ScriptStruct ContextualAnimation.ContextualAnimQueryParams
// 0x0080 (0x0080 - 0x0000)
struct FContextualAnimQueryParams final
{
public:
	TWeakObjectPtr<class AActor>                  Querier;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             QueryTransform;                                    // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComplexQuery;                                     // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFindAnimStartTime;                                // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0xE];                                       // 0x0072(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContextualAnimQueryParams) == 0x000010, "Wrong alignment on FContextualAnimQueryParams");
static_assert(sizeof(FContextualAnimQueryParams) == 0x000080, "Wrong size on FContextualAnimQueryParams");
static_assert(offsetof(FContextualAnimQueryParams, Querier) == 0x000000, "Member 'FContextualAnimQueryParams::Querier' has a wrong offset!");
static_assert(offsetof(FContextualAnimQueryParams, QueryTransform) == 0x000010, "Member 'FContextualAnimQueryParams::QueryTransform' has a wrong offset!");
static_assert(offsetof(FContextualAnimQueryParams, bComplexQuery) == 0x000070, "Member 'FContextualAnimQueryParams::bComplexQuery' has a wrong offset!");
static_assert(offsetof(FContextualAnimQueryParams, bFindAnimStartTime) == 0x000071, "Member 'FContextualAnimQueryParams::bFindAnimStartTime' has a wrong offset!");

}

