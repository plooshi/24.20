#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WorldConditions

#include "Basic.hpp"

#include "StructUtils_structs.hpp"


namespace SDK
{

// Enum WorldConditions.EWorldConditionResultValue
// NumValues: 0x0004
enum class EWorldConditionResultValue : uint8
{
	IsFalse                                  = 0,
	IsTrue                                   = 1,
	Invalid                                  = 2,
	EWorldConditionResultValue_MAX           = 3,
};

// Enum WorldConditions.EWorldConditionOperator
// NumValues: 0x0004
enum class EWorldConditionOperator : uint8
{
	And                                      = 0,
	Or                                       = 1,
	Copy                                     = 2,
	EWorldConditionOperator_MAX              = 3,
};

// Enum WorldConditions.EWorldConditionContextDataType
// NumValues: 0x0003
enum class EWorldConditionContextDataType : uint8
{
	Dynamic                                  = 0,
	Persistent                               = 1,
	EWorldConditionContextDataType_MAX       = 2,
};

// ScriptStruct WorldConditions.WorldConditionBase
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FWorldConditionBase
{
public:
	uint8                                         Pad_0[0xB];                                        // 0x0000(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         BitPad_B_0 : 2;                                    // 0x000B(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bInvert : 1;                                       // 0x000B(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	EWorldConditionOperator                       Operator;                                          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         NextExpressionDepth;                               // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldConditionBase) == 0x000008, "Wrong alignment on FWorldConditionBase");
static_assert(sizeof(FWorldConditionBase) == 0x000010, "Wrong size on FWorldConditionBase");
static_assert(offsetof(FWorldConditionBase, Operator) == 0x00000C, "Member 'FWorldConditionBase::Operator' has a wrong offset!");
static_assert(offsetof(FWorldConditionBase, NextExpressionDepth) == 0x00000D, "Member 'FWorldConditionBase::NextExpressionDepth' has a wrong offset!");

// ScriptStruct WorldConditions.WorldConditionCommonBase
// 0x0000 (0x0010 - 0x0010)
struct FWorldConditionCommonBase : public FWorldConditionBase
{
};
static_assert(alignof(FWorldConditionCommonBase) == 0x000008, "Wrong alignment on FWorldConditionCommonBase");
static_assert(sizeof(FWorldConditionCommonBase) == 0x000010, "Wrong size on FWorldConditionCommonBase");

// ScriptStruct WorldConditions.WorldConditionQueryDefinition
// 0x0018 (0x0018 - 0x0000)
struct FWorldConditionQueryDefinition final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UWorldConditionSchema>      SchemaClass;                                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FWorldConditionQueryDefinition) == 0x000008, "Wrong alignment on FWorldConditionQueryDefinition");
static_assert(sizeof(FWorldConditionQueryDefinition) == 0x000018, "Wrong size on FWorldConditionQueryDefinition");
static_assert(offsetof(FWorldConditionQueryDefinition, SchemaClass) == 0x000010, "Member 'FWorldConditionQueryDefinition::SchemaClass' has a wrong offset!");

// ScriptStruct WorldConditions.WorldConditionCommonActorBase
// 0x0000 (0x0010 - 0x0010)
struct FWorldConditionCommonActorBase : public FWorldConditionBase
{
};
static_assert(alignof(FWorldConditionCommonActorBase) == 0x000008, "Wrong alignment on FWorldConditionCommonActorBase");
static_assert(sizeof(FWorldConditionCommonActorBase) == 0x000010, "Wrong size on FWorldConditionCommonActorBase");

// ScriptStruct WorldConditions.WorldConditionEditable
// 0x0001 (0x0001 - 0x0000)
struct FWorldConditionEditable final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldConditionEditable) == 0x000001, "Wrong alignment on FWorldConditionEditable");
static_assert(sizeof(FWorldConditionEditable) == 0x000001, "Wrong size on FWorldConditionEditable");

// ScriptStruct WorldConditions.WorldConditionQuerySharedDefinition
// 0x0028 (0x0028 - 0x0000)
struct FWorldConditionQuerySharedDefinition final
{
public:
	struct FInstancedStructContainer              Conditions;                                        // 0x0000(0x0010)(NativeAccessSpecifierPrivate)
	TSubclassOf<class UWorldConditionSchema>      SchemaClass;                                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldConditionQuerySharedDefinition) == 0x000008, "Wrong alignment on FWorldConditionQuerySharedDefinition");
static_assert(sizeof(FWorldConditionQuerySharedDefinition) == 0x000028, "Wrong size on FWorldConditionQuerySharedDefinition");
static_assert(offsetof(FWorldConditionQuerySharedDefinition, Conditions) == 0x000000, "Member 'FWorldConditionQuerySharedDefinition::Conditions' has a wrong offset!");
static_assert(offsetof(FWorldConditionQuerySharedDefinition, SchemaClass) == 0x000010, "Member 'FWorldConditionQuerySharedDefinition::SchemaClass' has a wrong offset!");

// ScriptStruct WorldConditions.WorldConditionItem
// 0x0003 (0x0003 - 0x0000)
struct FWorldConditionItem final
{
public:
	uint8                                         Pad_0[0x3];                                        // 0x0000(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldConditionItem) == 0x000001, "Wrong alignment on FWorldConditionItem");
static_assert(sizeof(FWorldConditionItem) == 0x000003, "Wrong size on FWorldConditionItem");

// ScriptStruct WorldConditions.WorldConditionStateObject
// 0x0008 (0x0008 - 0x0000)
struct FWorldConditionStateObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldConditionStateObject) == 0x000008, "Wrong alignment on FWorldConditionStateObject");
static_assert(sizeof(FWorldConditionStateObject) == 0x000008, "Wrong size on FWorldConditionStateObject");
static_assert(offsetof(FWorldConditionStateObject, Object) == 0x000000, "Member 'FWorldConditionStateObject::Object' has a wrong offset!");

// ScriptStruct WorldConditions.WorldConditionQueryState
// 0x0030 (0x0030 - 0x0000)
struct FWorldConditionQueryState final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Owner;                                             // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FWorldConditionQueryState) == 0x000008, "Wrong alignment on FWorldConditionQueryState");
static_assert(sizeof(FWorldConditionQueryState) == 0x000030, "Wrong size on FWorldConditionQueryState");
static_assert(offsetof(FWorldConditionQueryState, Owner) == 0x000028, "Member 'FWorldConditionQueryState::Owner' has a wrong offset!");

// ScriptStruct WorldConditions.WorldConditionQuery
// 0x0048 (0x0048 - 0x0000)
struct FWorldConditionQuery final
{
public:
	struct FWorldConditionQueryDefinition         QueryDefinition;                                   // 0x0000(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FWorldConditionQueryState              QueryState;                                        // 0x0018(0x0030)(Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FWorldConditionQuery) == 0x000008, "Wrong alignment on FWorldConditionQuery");
static_assert(sizeof(FWorldConditionQuery) == 0x000048, "Wrong size on FWorldConditionQuery");
static_assert(offsetof(FWorldConditionQuery, QueryDefinition) == 0x000000, "Member 'FWorldConditionQuery::QueryDefinition' has a wrong offset!");
static_assert(offsetof(FWorldConditionQuery, QueryState) == 0x000018, "Member 'FWorldConditionQuery::QueryState' has a wrong offset!");

// ScriptStruct WorldConditions.WorldConditionResult
// 0x0002 (0x0002 - 0x0000)
struct FWorldConditionResult final
{
public:
	EWorldConditionResultValue                    Value;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeCached;                                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldConditionResult) == 0x000001, "Wrong alignment on FWorldConditionResult");
static_assert(sizeof(FWorldConditionResult) == 0x000002, "Wrong size on FWorldConditionResult");
static_assert(offsetof(FWorldConditionResult, Value) == 0x000000, "Member 'FWorldConditionResult::Value' has a wrong offset!");
static_assert(offsetof(FWorldConditionResult, bCanBeCached) == 0x000001, "Member 'FWorldConditionResult::bCanBeCached' has a wrong offset!");

// ScriptStruct WorldConditions.WorldConditionContextDataDesc
// 0x0010 (0x0010 - 0x0000)
struct FWorldConditionContextDataDesc final
{
public:
	class UStruct*                                Struct;                                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorldConditionContextDataType                Type;                                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldConditionContextDataDesc) == 0x000008, "Wrong alignment on FWorldConditionContextDataDesc");
static_assert(sizeof(FWorldConditionContextDataDesc) == 0x000010, "Wrong size on FWorldConditionContextDataDesc");
static_assert(offsetof(FWorldConditionContextDataDesc, Struct) == 0x000000, "Member 'FWorldConditionContextDataDesc::Struct' has a wrong offset!");
static_assert(offsetof(FWorldConditionContextDataDesc, Name) == 0x000008, "Member 'FWorldConditionContextDataDesc::Name' has a wrong offset!");
static_assert(offsetof(FWorldConditionContextDataDesc, Type) == 0x00000C, "Member 'FWorldConditionContextDataDesc::Type' has a wrong offset!");

// ScriptStruct WorldConditions.WorldConditionContextDataRef
// 0x0008 (0x0008 - 0x0000)
struct FWorldConditionContextDataRef final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Index;                                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldConditionContextDataRef) == 0x000004, "Wrong alignment on FWorldConditionContextDataRef");
static_assert(sizeof(FWorldConditionContextDataRef) == 0x000008, "Wrong size on FWorldConditionContextDataRef");
static_assert(offsetof(FWorldConditionContextDataRef, Name) == 0x000000, "Member 'FWorldConditionContextDataRef::Name' has a wrong offset!");
static_assert(offsetof(FWorldConditionContextDataRef, Index) == 0x000004, "Member 'FWorldConditionContextDataRef::Index' has a wrong offset!");

}

