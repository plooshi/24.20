#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnstableLiquidGunRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum UnstableLiquidGunRuntime.ELiquidRibbonDetachmentReason
// NumValues: 0x0004
enum class ELiquidRibbonDetachmentReason : uint8
{
	NotDetached                              = 0,
	ByDistance                               = 1,
	ByAngle                                  = 2,
	ELiquidRibbonDetachmentReason_MAX        = 3,
};

// ScriptStruct UnstableLiquidGunRuntime.LiquidRibbonSplineSegment
// 0x0078 (0x0078 - 0x0000)
struct FLiquidRibbonSplineSegment final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                C;                                                 // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                D;                                                 // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectLength;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasDetachment;                                    // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        PointPositions;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiquidRibbonSplineSegment) == 0x000008, "Wrong alignment on FLiquidRibbonSplineSegment");
static_assert(sizeof(FLiquidRibbonSplineSegment) == 0x000078, "Wrong size on FLiquidRibbonSplineSegment");
static_assert(offsetof(FLiquidRibbonSplineSegment, A) == 0x000000, "Member 'FLiquidRibbonSplineSegment::A' has a wrong offset!");
static_assert(offsetof(FLiquidRibbonSplineSegment, B) == 0x000018, "Member 'FLiquidRibbonSplineSegment::B' has a wrong offset!");
static_assert(offsetof(FLiquidRibbonSplineSegment, C) == 0x000030, "Member 'FLiquidRibbonSplineSegment::C' has a wrong offset!");
static_assert(offsetof(FLiquidRibbonSplineSegment, D) == 0x000048, "Member 'FLiquidRibbonSplineSegment::D' has a wrong offset!");
static_assert(offsetof(FLiquidRibbonSplineSegment, DirectLength) == 0x000060, "Member 'FLiquidRibbonSplineSegment::DirectLength' has a wrong offset!");
static_assert(offsetof(FLiquidRibbonSplineSegment, bHasDetachment) == 0x000064, "Member 'FLiquidRibbonSplineSegment::bHasDetachment' has a wrong offset!");
static_assert(offsetof(FLiquidRibbonSplineSegment, PointPositions) == 0x000068, "Member 'FLiquidRibbonSplineSegment::PointPositions' has a wrong offset!");

// ScriptStruct UnstableLiquidGunRuntime.LiquidRibbonSplineDetachment
// 0x00B8 (0x00B8 - 0x0000)
struct FLiquidRibbonSplineDetachment final
{
public:
	int32                                         FirstRibbonID;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondRibbonID;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeDetached;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLiquidRibbonSplineSegment             Segment;                                           // 0x0010(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                SegmentStartPoint;                                 // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegmentEndPoint;                                   // 0x00A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiquidRibbonSplineDetachment) == 0x000008, "Wrong alignment on FLiquidRibbonSplineDetachment");
static_assert(sizeof(FLiquidRibbonSplineDetachment) == 0x0000B8, "Wrong size on FLiquidRibbonSplineDetachment");
static_assert(offsetof(FLiquidRibbonSplineDetachment, FirstRibbonID) == 0x000000, "Member 'FLiquidRibbonSplineDetachment::FirstRibbonID' has a wrong offset!");
static_assert(offsetof(FLiquidRibbonSplineDetachment, SecondRibbonID) == 0x000004, "Member 'FLiquidRibbonSplineDetachment::SecondRibbonID' has a wrong offset!");
static_assert(offsetof(FLiquidRibbonSplineDetachment, TimeDetached) == 0x000008, "Member 'FLiquidRibbonSplineDetachment::TimeDetached' has a wrong offset!");
static_assert(offsetof(FLiquidRibbonSplineDetachment, Segment) == 0x000010, "Member 'FLiquidRibbonSplineDetachment::Segment' has a wrong offset!");
static_assert(offsetof(FLiquidRibbonSplineDetachment, SegmentStartPoint) == 0x000088, "Member 'FLiquidRibbonSplineDetachment::SegmentStartPoint' has a wrong offset!");
static_assert(offsetof(FLiquidRibbonSplineDetachment, SegmentEndPoint) == 0x0000A0, "Member 'FLiquidRibbonSplineDetachment::SegmentEndPoint' has a wrong offset!");

}

