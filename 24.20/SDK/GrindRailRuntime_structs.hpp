#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GrindRailRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// Enum GrindRailRuntime.EGrindRailBoosterMode
// NumValues: 0x0004
enum class EGrindRailBoosterMode : uint8
{
	SpeedUp                                  = 0,
	SlowDown                                 = 1,
	NoEffect                                 = 2,
	EGrindRailBoosterMode_MAX                = 3,
};

// ScriptStruct GrindRailRuntime.GrindRailMeshInfo
// 0x0018 (0x0018 - 0x0000)
struct FGrindRailMeshInfo final
{
public:
	class USplineMeshComponent*                   SplineMeshComponent;                               // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPointIndex;                                   // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndPointIndex;                                     // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGrindRailMeshInfo) == 0x000008, "Wrong alignment on FGrindRailMeshInfo");
static_assert(sizeof(FGrindRailMeshInfo) == 0x000018, "Wrong size on FGrindRailMeshInfo");
static_assert(offsetof(FGrindRailMeshInfo, SplineMeshComponent) == 0x000000, "Member 'FGrindRailMeshInfo::SplineMeshComponent' has a wrong offset!");
static_assert(offsetof(FGrindRailMeshInfo, StartPointIndex) == 0x000008, "Member 'FGrindRailMeshInfo::StartPointIndex' has a wrong offset!");
static_assert(offsetof(FGrindRailMeshInfo, EndPointIndex) == 0x00000C, "Member 'FGrindRailMeshInfo::EndPointIndex' has a wrong offset!");
static_assert(offsetof(FGrindRailMeshInfo, StartDistance) == 0x000010, "Member 'FGrindRailMeshInfo::StartDistance' has a wrong offset!");
static_assert(offsetof(FGrindRailMeshInfo, EndDistance) == 0x000014, "Member 'FGrindRailMeshInfo::EndDistance' has a wrong offset!");

// ScriptStruct GrindRailRuntime.FortAnimInput_GrindRail
// 0x0018 (0x0018 - 0x0000)
struct FFortAnimInput_GrindRail final
{
public:
	uint8                                         bAimFWD : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimBWD : 1;                                       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimLFT : 1;                                       // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimRGT : 1;                                       // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AimFWDDeltaAngleDegrees;                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimBWDDeltaAngleDegrees;                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimLFTDeltaAngleDegrees;                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimRGTDeltaAngleDegrees;                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PawnToSplineDeltaYawAngleDegrees;                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimInput_GrindRail) == 0x000004, "Wrong alignment on FFortAnimInput_GrindRail");
static_assert(sizeof(FFortAnimInput_GrindRail) == 0x000018, "Wrong size on FFortAnimInput_GrindRail");
static_assert(offsetof(FFortAnimInput_GrindRail, AimFWDDeltaAngleDegrees) == 0x000004, "Member 'FFortAnimInput_GrindRail::AimFWDDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GrindRail, AimBWDDeltaAngleDegrees) == 0x000008, "Member 'FFortAnimInput_GrindRail::AimBWDDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GrindRail, AimLFTDeltaAngleDegrees) == 0x00000C, "Member 'FFortAnimInput_GrindRail::AimLFTDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GrindRail, AimRGTDeltaAngleDegrees) == 0x000010, "Member 'FFortAnimInput_GrindRail::AimRGTDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GrindRail, PawnToSplineDeltaYawAngleDegrees) == 0x000014, "Member 'FFortAnimInput_GrindRail::PawnToSplineDeltaYawAngleDegrees' has a wrong offset!");

// ScriptStruct GrindRailRuntime.FortAnimNode_GrindRailSlopeWarping
// 0x0058 (0x0340 - 0x02E8)
struct FFortAnimNode_GrindRailSlopeWarping final : public FFortAnimNode_SlopeWarping
{
public:
	float                                         BaseSplineRadius;                                  // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAbsentCurveMeansFootDown : 1;                     // 0x02EC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LFootOnGroundCurveName;                            // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLeftCurveHighMeansFootDown : 1;                   // 0x02F4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RFootOnGroundCurveName;                            // 0x02F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRightCurveHighMeansFootDown : 1;                  // 0x02FC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         LeftFootFKBone;                                    // 0x0300(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30C[0x34];                                     // 0x030C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnimNode_GrindRailSlopeWarping) == 0x000008, "Wrong alignment on FFortAnimNode_GrindRailSlopeWarping");
static_assert(sizeof(FFortAnimNode_GrindRailSlopeWarping) == 0x000340, "Wrong size on FFortAnimNode_GrindRailSlopeWarping");
static_assert(offsetof(FFortAnimNode_GrindRailSlopeWarping, BaseSplineRadius) == 0x0002E8, "Member 'FFortAnimNode_GrindRailSlopeWarping::BaseSplineRadius' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_GrindRailSlopeWarping, LFootOnGroundCurveName) == 0x0002F0, "Member 'FFortAnimNode_GrindRailSlopeWarping::LFootOnGroundCurveName' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_GrindRailSlopeWarping, RFootOnGroundCurveName) == 0x0002F8, "Member 'FFortAnimNode_GrindRailSlopeWarping::RFootOnGroundCurveName' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_GrindRailSlopeWarping, LeftFootFKBone) == 0x000300, "Member 'FFortAnimNode_GrindRailSlopeWarping::LeftFootFKBone' has a wrong offset!");

// ScriptStruct GrindRailRuntime.GrindRailBoosterInfo
// 0x000C (0x000C - 0x0000)
struct FGrindRailBoosterInfo final
{
public:
	float                                         MinDistanceAlongSpline;                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceAlongSpline;                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGrindRailBoosterMode                         PositiveMode;                                      // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGrindRailBoosterMode                         NegativeMode;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGrindRailBoosterInfo) == 0x000004, "Wrong alignment on FGrindRailBoosterInfo");
static_assert(sizeof(FGrindRailBoosterInfo) == 0x00000C, "Wrong size on FGrindRailBoosterInfo");
static_assert(offsetof(FGrindRailBoosterInfo, MinDistanceAlongSpline) == 0x000000, "Member 'FGrindRailBoosterInfo::MinDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(FGrindRailBoosterInfo, MaxDistanceAlongSpline) == 0x000004, "Member 'FGrindRailBoosterInfo::MaxDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(FGrindRailBoosterInfo, PositiveMode) == 0x000008, "Member 'FGrindRailBoosterInfo::PositiveMode' has a wrong offset!");
static_assert(offsetof(FGrindRailBoosterInfo, NegativeMode) == 0x000009, "Member 'FGrindRailBoosterInfo::NegativeMode' has a wrong offset!");

// ScriptStruct GrindRailRuntime.GrindRailStatus
// 0x0010 (0x0010 - 0x0000)
struct FGrindRailStatus final
{
public:
	TWeakObjectPtr<class AFortGrindRail>          GrindingRail;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentSpeedAlongSpline;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentDistanceAlongSpline;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGrindRailStatus) == 0x000004, "Wrong alignment on FGrindRailStatus");
static_assert(sizeof(FGrindRailStatus) == 0x000010, "Wrong size on FGrindRailStatus");
static_assert(offsetof(FGrindRailStatus, GrindingRail) == 0x000000, "Member 'FGrindRailStatus::GrindingRail' has a wrong offset!");
static_assert(offsetof(FGrindRailStatus, CurrentSpeedAlongSpline) == 0x000008, "Member 'FGrindRailStatus::CurrentSpeedAlongSpline' has a wrong offset!");
static_assert(offsetof(FGrindRailStatus, CurrentDistanceAlongSpline) == 0x00000C, "Member 'FGrindRailStatus::CurrentDistanceAlongSpline' has a wrong offset!");

}

