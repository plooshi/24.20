#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ScoutDroneRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "ScoutDroneRuntime_structs.hpp"
#include "TargetingSystem_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "ModularGameplay_classes.hpp"


namespace SDK
{

// Class ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_Dive
// 0x01A0 (0x0CC8 - 0x0B28)
class UFortGameplayAbility_ScoutDrone_Dive final : public UFortGameplayAbility
{
public:
	uint8                                         Pad_B28[0x10];                                     // 0x0B28(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortScoutDroneDiveTransitionData      EaseInData;                                        // 0x0B38(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FFortScoutDroneDiveTransitionData      EaseOutData;                                       // 0x0B68(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B98[0x8];                                      // 0x0B98(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         DiveUpdateInterval;                                // 0x0BA0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DiveSpeedIncrease;                                 // 0x0BC8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinSpeedToDive;                                    // 0x0BF0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinDistToGround;                                   // 0x0C18(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TargetPitchToDive;                                 // 0x0C40(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DivingGravityScale;                                // 0x0C68(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxSpeedDivingGravityScale;                        // 0x0C90(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CB8[0x10];                                     // 0x0CB8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnDroneStartedDiving();
	void BP_OnDroneStoppedDiving();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameplayAbility_ScoutDrone_Dive">();
	}
	static class UFortGameplayAbility_ScoutDrone_Dive* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameplayAbility_ScoutDrone_Dive>();
	}
};
static_assert(alignof(UFortGameplayAbility_ScoutDrone_Dive) == 0x000008, "Wrong alignment on UFortGameplayAbility_ScoutDrone_Dive");
static_assert(sizeof(UFortGameplayAbility_ScoutDrone_Dive) == 0x000CC8, "Wrong size on UFortGameplayAbility_ScoutDrone_Dive");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Dive, EaseInData) == 0x000B38, "Member 'UFortGameplayAbility_ScoutDrone_Dive::EaseInData' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Dive, EaseOutData) == 0x000B68, "Member 'UFortGameplayAbility_ScoutDrone_Dive::EaseOutData' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Dive, DiveUpdateInterval) == 0x000BA0, "Member 'UFortGameplayAbility_ScoutDrone_Dive::DiveUpdateInterval' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Dive, DiveSpeedIncrease) == 0x000BC8, "Member 'UFortGameplayAbility_ScoutDrone_Dive::DiveSpeedIncrease' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Dive, MinSpeedToDive) == 0x000BF0, "Member 'UFortGameplayAbility_ScoutDrone_Dive::MinSpeedToDive' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Dive, MinDistToGround) == 0x000C18, "Member 'UFortGameplayAbility_ScoutDrone_Dive::MinDistToGround' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Dive, TargetPitchToDive) == 0x000C40, "Member 'UFortGameplayAbility_ScoutDrone_Dive::TargetPitchToDive' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Dive, DivingGravityScale) == 0x000C68, "Member 'UFortGameplayAbility_ScoutDrone_Dive::DivingGravityScale' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Dive, MaxSpeedDivingGravityScale) == 0x000C90, "Member 'UFortGameplayAbility_ScoutDrone_Dive::MaxSpeedDivingGravityScale' has a wrong offset!");

// Class ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_TargetingBase
// 0x0048 (0x0B70 - 0x0B28)
class UFortGameplayAbility_ScoutDrone_TargetingBase : public UFortGameplayAbility
{
public:
	class UTargetingPreset*                       TargetingPreset;                                   // 0x0B28(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTargetingRequestHandle                AsyncTargetingHandle;                              // 0x0B30(0x0004)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B34[0x4];                                      // 0x0B34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TargetingTimerHandle;                              // 0x0B38(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TargetingInterval;                                 // 0x0B40(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	bool                                          bUseControllerAsInstigator;                        // 0x0B68(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B69[0x7];                                      // 0x0B69(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnTargetsFound(const struct FTargetingRequestHandle& TargetingHandle);
	void StartTargeting();
	void StopTargeting();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameplayAbility_ScoutDrone_TargetingBase">();
	}
	static class UFortGameplayAbility_ScoutDrone_TargetingBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameplayAbility_ScoutDrone_TargetingBase>();
	}
};
static_assert(alignof(UFortGameplayAbility_ScoutDrone_TargetingBase) == 0x000008, "Wrong alignment on UFortGameplayAbility_ScoutDrone_TargetingBase");
static_assert(sizeof(UFortGameplayAbility_ScoutDrone_TargetingBase) == 0x000B70, "Wrong size on UFortGameplayAbility_ScoutDrone_TargetingBase");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_TargetingBase, TargetingPreset) == 0x000B28, "Member 'UFortGameplayAbility_ScoutDrone_TargetingBase::TargetingPreset' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_TargetingBase, AsyncTargetingHandle) == 0x000B30, "Member 'UFortGameplayAbility_ScoutDrone_TargetingBase::AsyncTargetingHandle' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_TargetingBase, TargetingTimerHandle) == 0x000B38, "Member 'UFortGameplayAbility_ScoutDrone_TargetingBase::TargetingTimerHandle' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_TargetingBase, TargetingInterval) == 0x000B40, "Member 'UFortGameplayAbility_ScoutDrone_TargetingBase::TargetingInterval' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_TargetingBase, bUseControllerAsInstigator) == 0x000B68, "Member 'UFortGameplayAbility_ScoutDrone_TargetingBase::bUseControllerAsInstigator' has a wrong offset!");

// Class ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_SpeedBoost
// 0x00F0 (0x0C60 - 0x0B70)
class UFortGameplayAbility_ScoutDrone_SpeedBoost final : public UFortGameplayAbility_ScoutDrone_TargetingBase
{
public:
	struct FGameplayTag                           DoorBashCueTag;                                    // 0x0B70(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B74[0x4];                                      // 0x0B74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            DamageGameplayEffectClass;                         // 0x0B78(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           DoorBashPawnLaunchGameplayCueTag;                  // 0x0B80(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B84[0x4];                                      // 0x0B84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         DoorBashEnabledHotfix;                             // 0x0B88(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DoorBashSphereRadiusForPawnLaunch;                 // 0x0BB0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DoorBashScalarForPawnLaunch;                       // 0x0BD8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<EObjectTypeQuery>                      DoorBashCollisionTypesForPawn;                     // 0x0C00(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DoorBashEnabled;                                   // 0x0C10(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DamageOnBoostEnabled;                              // 0x0C38(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	void OnBoostedIntoActor(const struct FHitResult& HitResult);
	void OnDoorBashed(const struct FHitResult& HitResult, class UFortBuildingWallDoorComponent* BashedDoor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameplayAbility_ScoutDrone_SpeedBoost">();
	}
	static class UFortGameplayAbility_ScoutDrone_SpeedBoost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameplayAbility_ScoutDrone_SpeedBoost>();
	}
};
static_assert(alignof(UFortGameplayAbility_ScoutDrone_SpeedBoost) == 0x000008, "Wrong alignment on UFortGameplayAbility_ScoutDrone_SpeedBoost");
static_assert(sizeof(UFortGameplayAbility_ScoutDrone_SpeedBoost) == 0x000C60, "Wrong size on UFortGameplayAbility_ScoutDrone_SpeedBoost");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_SpeedBoost, DoorBashCueTag) == 0x000B70, "Member 'UFortGameplayAbility_ScoutDrone_SpeedBoost::DoorBashCueTag' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_SpeedBoost, DamageGameplayEffectClass) == 0x000B78, "Member 'UFortGameplayAbility_ScoutDrone_SpeedBoost::DamageGameplayEffectClass' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_SpeedBoost, DoorBashPawnLaunchGameplayCueTag) == 0x000B80, "Member 'UFortGameplayAbility_ScoutDrone_SpeedBoost::DoorBashPawnLaunchGameplayCueTag' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_SpeedBoost, DoorBashEnabledHotfix) == 0x000B88, "Member 'UFortGameplayAbility_ScoutDrone_SpeedBoost::DoorBashEnabledHotfix' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_SpeedBoost, DoorBashSphereRadiusForPawnLaunch) == 0x000BB0, "Member 'UFortGameplayAbility_ScoutDrone_SpeedBoost::DoorBashSphereRadiusForPawnLaunch' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_SpeedBoost, DoorBashScalarForPawnLaunch) == 0x000BD8, "Member 'UFortGameplayAbility_ScoutDrone_SpeedBoost::DoorBashScalarForPawnLaunch' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_SpeedBoost, DoorBashCollisionTypesForPawn) == 0x000C00, "Member 'UFortGameplayAbility_ScoutDrone_SpeedBoost::DoorBashCollisionTypesForPawn' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_SpeedBoost, DoorBashEnabled) == 0x000C10, "Member 'UFortGameplayAbility_ScoutDrone_SpeedBoost::DoorBashEnabled' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_SpeedBoost, DamageOnBoostEnabled) == 0x000C38, "Member 'UFortGameplayAbility_ScoutDrone_SpeedBoost::DamageOnBoostEnabled' has a wrong offset!");

// Class ScoutDroneRuntime.FortScoutDroneAnalyticsComponent
// 0x00B0 (0x0158 - 0x00A8)
class UFortScoutDroneAnalyticsComponent final : public UFortControllerComponent
{
public:
	float                                         SessionStartTime;                                  // 0x00A8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SessionLength;                                     // 0x00AC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinSessionLength;                                  // 0x00B0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         DistanceTraveled;                                  // 0x00D8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumberOfContainersInteractedWith;                  // 0x00DC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           DismissalReason;                                   // 0x00E0(0x0004)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumberOfItemsPickedUp;                             // 0x00E4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         DBNOCarriedPlayers;                                // 0x00E8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	int32                                         NumberOfEnemiesPassivelyMarked;                    // 0x00F8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumberOfEnemiesMarkedOnCaw;                        // 0x00FC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumberOfCaws;                                      // 0x0100(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_104[0xC];                                      // 0x0104(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         DistanceTraveledUpdateInterval;                    // 0x0110(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           DistanceTraveledUpdateTimerHandle;                 // 0x0138(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                LastRecorderDroneLocation;                         // 0x0140(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScoutDroneAnalyticsComponent">();
	}
	static class UFortScoutDroneAnalyticsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortScoutDroneAnalyticsComponent>();
	}
};
static_assert(alignof(UFortScoutDroneAnalyticsComponent) == 0x000008, "Wrong alignment on UFortScoutDroneAnalyticsComponent");
static_assert(sizeof(UFortScoutDroneAnalyticsComponent) == 0x000158, "Wrong size on UFortScoutDroneAnalyticsComponent");
static_assert(offsetof(UFortScoutDroneAnalyticsComponent, SessionStartTime) == 0x0000A8, "Member 'UFortScoutDroneAnalyticsComponent::SessionStartTime' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnalyticsComponent, SessionLength) == 0x0000AC, "Member 'UFortScoutDroneAnalyticsComponent::SessionLength' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnalyticsComponent, MinSessionLength) == 0x0000B0, "Member 'UFortScoutDroneAnalyticsComponent::MinSessionLength' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnalyticsComponent, DistanceTraveled) == 0x0000D8, "Member 'UFortScoutDroneAnalyticsComponent::DistanceTraveled' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnalyticsComponent, NumberOfContainersInteractedWith) == 0x0000DC, "Member 'UFortScoutDroneAnalyticsComponent::NumberOfContainersInteractedWith' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnalyticsComponent, DismissalReason) == 0x0000E0, "Member 'UFortScoutDroneAnalyticsComponent::DismissalReason' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnalyticsComponent, NumberOfItemsPickedUp) == 0x0000E4, "Member 'UFortScoutDroneAnalyticsComponent::NumberOfItemsPickedUp' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnalyticsComponent, DBNOCarriedPlayers) == 0x0000E8, "Member 'UFortScoutDroneAnalyticsComponent::DBNOCarriedPlayers' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnalyticsComponent, NumberOfEnemiesPassivelyMarked) == 0x0000F8, "Member 'UFortScoutDroneAnalyticsComponent::NumberOfEnemiesPassivelyMarked' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnalyticsComponent, NumberOfEnemiesMarkedOnCaw) == 0x0000FC, "Member 'UFortScoutDroneAnalyticsComponent::NumberOfEnemiesMarkedOnCaw' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnalyticsComponent, NumberOfCaws) == 0x000100, "Member 'UFortScoutDroneAnalyticsComponent::NumberOfCaws' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnalyticsComponent, DistanceTraveledUpdateInterval) == 0x000110, "Member 'UFortScoutDroneAnalyticsComponent::DistanceTraveledUpdateInterval' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnalyticsComponent, DistanceTraveledUpdateTimerHandle) == 0x000138, "Member 'UFortScoutDroneAnalyticsComponent::DistanceTraveledUpdateTimerHandle' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnalyticsComponent, LastRecorderDroneLocation) == 0x000140, "Member 'UFortScoutDroneAnalyticsComponent::LastRecorderDroneLocation' has a wrong offset!");

// Class ScoutDroneRuntime.FortScoutDroneAnimInstance
// 0x0200 (0x0630 - 0x0430)
class UFortScoutDroneAnimInstance final : public UFortBaseAnimInstance
{
public:
	class UFortScoutDroneMovementComponent*       FortScoutDroneMovementComponent;                   // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        YawDeltaLastTick;                                  // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ActorCurrentRotationTick;                          // 0x0440(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	double                                        YawDeltaCurrentTick;                               // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ActorRotationLastTick;                             // 0x0460(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsFlying;                                          // 0x0478(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentVelocity;                                   // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LastVelocity;                                      // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Velocity;                                          // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ForwardInputAlpha;                                 // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        StrafeInputAlpha;                                  // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DroneRotation;                                     // 0x04A8(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	double                                        Acceleration;                                      // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortScoutDrone*                        ScoutDrone;                                        // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBoosting;                                        // 0x04D0(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDiving;                                          // 0x04D1(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D2[0x6];                                      // 0x04D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AimPitch;                                          // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        NegativeAimPitch;                                  // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               FinalFanRotationL;                                 // 0x04E8(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               FinalFanRotationR;                                 // 0x0500(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	double                                        FanIdleSpeed;                                      // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FanAuthoredSpeed;                                  // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FanIdleAuthoredSpeed;                              // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FanBwdSpeed;                                       // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FanFwdSpeed;                                       // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TurnNoiseAlpha;                                    // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LeanAlpha;                                         // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TurnAlpha;                                         // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsColliding;                                       // 0x0558(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFlyingBwd;                                       // 0x0559(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldExitFromFlying;                              // 0x055A(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldExitFromDiving;                              // 0x055B(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EarlyIntoLoop;                                     // 0x055C(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55D[0x3];                                      // 0x055D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AccelerationZ;                                     // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeftStrafe;                                      // 0x0568(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasStrafing;                                       // 0x0569(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56A[0x6];                                      // 0x056A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        GroundDistance;                                    // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasDivingConditionBeenMet;                         // 0x0578(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsItemAttached;                                    // 0x0579(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayerAttached;                                  // 0x057A(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57B[0x5];                                      // 0x057B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FlapTime;                                          // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlapRandomPick;                                    // 0x0588(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFlapSmall;                                       // 0x058C(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58D[0x3];                                      // 0x058D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FlapRandomMaxRange;                                // 0x0590(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FlapSmallTimeThreshold;                            // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FlapBigTimeThreshold;                              // 0x05A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FlapSmallResetDelayDuration;                       // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FlapBigResetDelayDuration;                         // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFlapBig;                                         // 0x05B8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B9[0x7];                                      // 0x05B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        VerticalInputAlpha;                                // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasVerticalUp;                                     // 0x05C8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFlyingVerticalUp;                                // 0x05C9(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldExitFromBoostOutro;                          // 0x05CA(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasSpawned;                                        // 0x05CB(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldExitFromSpawning;                            // 0x05CC(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldAllowTransition;                             // 0x05CD(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StateRuleFromBoostOutroToFlying;                   // 0x05CE(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasBoosting;                                       // 0x05CF(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SpeedBoostForceBoostVelocity;                      // 0x05D0(0x0028)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SpeedBoostMaxSpeedIncrease;                        // 0x05F8(0x0028)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          IsFlappingTime;                                    // 0x0620(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_621[0xF];                                      // 0x0621(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScoutDroneAnimInstance">();
	}
	static class UFortScoutDroneAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortScoutDroneAnimInstance>();
	}
};
static_assert(alignof(UFortScoutDroneAnimInstance) == 0x000010, "Wrong alignment on UFortScoutDroneAnimInstance");
static_assert(sizeof(UFortScoutDroneAnimInstance) == 0x000630, "Wrong size on UFortScoutDroneAnimInstance");
static_assert(offsetof(UFortScoutDroneAnimInstance, FortScoutDroneMovementComponent) == 0x000430, "Member 'UFortScoutDroneAnimInstance::FortScoutDroneMovementComponent' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, YawDeltaLastTick) == 0x000438, "Member 'UFortScoutDroneAnimInstance::YawDeltaLastTick' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, ActorCurrentRotationTick) == 0x000440, "Member 'UFortScoutDroneAnimInstance::ActorCurrentRotationTick' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, YawDeltaCurrentTick) == 0x000458, "Member 'UFortScoutDroneAnimInstance::YawDeltaCurrentTick' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, ActorRotationLastTick) == 0x000460, "Member 'UFortScoutDroneAnimInstance::ActorRotationLastTick' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, IsFlying) == 0x000478, "Member 'UFortScoutDroneAnimInstance::IsFlying' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, CurrentVelocity) == 0x000480, "Member 'UFortScoutDroneAnimInstance::CurrentVelocity' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, LastVelocity) == 0x000488, "Member 'UFortScoutDroneAnimInstance::LastVelocity' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, Velocity) == 0x000490, "Member 'UFortScoutDroneAnimInstance::Velocity' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, ForwardInputAlpha) == 0x000498, "Member 'UFortScoutDroneAnimInstance::ForwardInputAlpha' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, StrafeInputAlpha) == 0x0004A0, "Member 'UFortScoutDroneAnimInstance::StrafeInputAlpha' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, DroneRotation) == 0x0004A8, "Member 'UFortScoutDroneAnimInstance::DroneRotation' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, Acceleration) == 0x0004C0, "Member 'UFortScoutDroneAnimInstance::Acceleration' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, ScoutDrone) == 0x0004C8, "Member 'UFortScoutDroneAnimInstance::ScoutDrone' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, IsBoosting) == 0x0004D0, "Member 'UFortScoutDroneAnimInstance::IsBoosting' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, IsDiving) == 0x0004D1, "Member 'UFortScoutDroneAnimInstance::IsDiving' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, AimPitch) == 0x0004D8, "Member 'UFortScoutDroneAnimInstance::AimPitch' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, NegativeAimPitch) == 0x0004E0, "Member 'UFortScoutDroneAnimInstance::NegativeAimPitch' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, FinalFanRotationL) == 0x0004E8, "Member 'UFortScoutDroneAnimInstance::FinalFanRotationL' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, FinalFanRotationR) == 0x000500, "Member 'UFortScoutDroneAnimInstance::FinalFanRotationR' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, FanIdleSpeed) == 0x000518, "Member 'UFortScoutDroneAnimInstance::FanIdleSpeed' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, FanAuthoredSpeed) == 0x000520, "Member 'UFortScoutDroneAnimInstance::FanAuthoredSpeed' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, FanIdleAuthoredSpeed) == 0x000528, "Member 'UFortScoutDroneAnimInstance::FanIdleAuthoredSpeed' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, FanBwdSpeed) == 0x000530, "Member 'UFortScoutDroneAnimInstance::FanBwdSpeed' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, FanFwdSpeed) == 0x000538, "Member 'UFortScoutDroneAnimInstance::FanFwdSpeed' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, TurnNoiseAlpha) == 0x000540, "Member 'UFortScoutDroneAnimInstance::TurnNoiseAlpha' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, LeanAlpha) == 0x000548, "Member 'UFortScoutDroneAnimInstance::LeanAlpha' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, TurnAlpha) == 0x000550, "Member 'UFortScoutDroneAnimInstance::TurnAlpha' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, IsColliding) == 0x000558, "Member 'UFortScoutDroneAnimInstance::IsColliding' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, IsFlyingBwd) == 0x000559, "Member 'UFortScoutDroneAnimInstance::IsFlyingBwd' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, ShouldExitFromFlying) == 0x00055A, "Member 'UFortScoutDroneAnimInstance::ShouldExitFromFlying' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, ShouldExitFromDiving) == 0x00055B, "Member 'UFortScoutDroneAnimInstance::ShouldExitFromDiving' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, EarlyIntoLoop) == 0x00055C, "Member 'UFortScoutDroneAnimInstance::EarlyIntoLoop' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, AccelerationZ) == 0x000560, "Member 'UFortScoutDroneAnimInstance::AccelerationZ' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, IsLeftStrafe) == 0x000568, "Member 'UFortScoutDroneAnimInstance::IsLeftStrafe' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, WasStrafing) == 0x000569, "Member 'UFortScoutDroneAnimInstance::WasStrafing' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, GroundDistance) == 0x000570, "Member 'UFortScoutDroneAnimInstance::GroundDistance' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, HasDivingConditionBeenMet) == 0x000578, "Member 'UFortScoutDroneAnimInstance::HasDivingConditionBeenMet' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, IsItemAttached) == 0x000579, "Member 'UFortScoutDroneAnimInstance::IsItemAttached' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, IsPlayerAttached) == 0x00057A, "Member 'UFortScoutDroneAnimInstance::IsPlayerAttached' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, FlapTime) == 0x000580, "Member 'UFortScoutDroneAnimInstance::FlapTime' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, FlapRandomPick) == 0x000588, "Member 'UFortScoutDroneAnimInstance::FlapRandomPick' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, IsFlapSmall) == 0x00058C, "Member 'UFortScoutDroneAnimInstance::IsFlapSmall' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, FlapRandomMaxRange) == 0x000590, "Member 'UFortScoutDroneAnimInstance::FlapRandomMaxRange' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, FlapSmallTimeThreshold) == 0x000598, "Member 'UFortScoutDroneAnimInstance::FlapSmallTimeThreshold' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, FlapBigTimeThreshold) == 0x0005A0, "Member 'UFortScoutDroneAnimInstance::FlapBigTimeThreshold' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, FlapSmallResetDelayDuration) == 0x0005A8, "Member 'UFortScoutDroneAnimInstance::FlapSmallResetDelayDuration' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, FlapBigResetDelayDuration) == 0x0005B0, "Member 'UFortScoutDroneAnimInstance::FlapBigResetDelayDuration' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, IsFlapBig) == 0x0005B8, "Member 'UFortScoutDroneAnimInstance::IsFlapBig' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, VerticalInputAlpha) == 0x0005C0, "Member 'UFortScoutDroneAnimInstance::VerticalInputAlpha' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, WasVerticalUp) == 0x0005C8, "Member 'UFortScoutDroneAnimInstance::WasVerticalUp' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, IsFlyingVerticalUp) == 0x0005C9, "Member 'UFortScoutDroneAnimInstance::IsFlyingVerticalUp' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, ShouldExitFromBoostOutro) == 0x0005CA, "Member 'UFortScoutDroneAnimInstance::ShouldExitFromBoostOutro' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, HasSpawned) == 0x0005CB, "Member 'UFortScoutDroneAnimInstance::HasSpawned' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, ShouldExitFromSpawning) == 0x0005CC, "Member 'UFortScoutDroneAnimInstance::ShouldExitFromSpawning' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, ShouldAllowTransition) == 0x0005CD, "Member 'UFortScoutDroneAnimInstance::ShouldAllowTransition' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, StateRuleFromBoostOutroToFlying) == 0x0005CE, "Member 'UFortScoutDroneAnimInstance::StateRuleFromBoostOutroToFlying' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, WasBoosting) == 0x0005CF, "Member 'UFortScoutDroneAnimInstance::WasBoosting' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, SpeedBoostForceBoostVelocity) == 0x0005D0, "Member 'UFortScoutDroneAnimInstance::SpeedBoostForceBoostVelocity' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, SpeedBoostMaxSpeedIncrease) == 0x0005F8, "Member 'UFortScoutDroneAnimInstance::SpeedBoostMaxSpeedIncrease' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneAnimInstance, IsFlappingTime) == 0x000620, "Member 'UFortScoutDroneAnimInstance::IsFlappingTime' has a wrong offset!");

// Class ScoutDroneRuntime.FortScoutDroneGlove
// 0x0040 (0x10E0 - 0x10A0)
class AFortScoutDroneGlove final : public AFortWeapon
{
public:
	struct FScalableFloat                         HoldToDeployTime;                                  // 0x10A0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10C8[0x18];                                    // 0x10C8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScoutDroneGlove">();
	}
	static class AFortScoutDroneGlove* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortScoutDroneGlove>();
	}
};
static_assert(alignof(AFortScoutDroneGlove) == 0x000008, "Wrong alignment on AFortScoutDroneGlove");
static_assert(sizeof(AFortScoutDroneGlove) == 0x0010E0, "Wrong size on AFortScoutDroneGlove");
static_assert(offsetof(AFortScoutDroneGlove, HoldToDeployTime) == 0x0010A0, "Member 'AFortScoutDroneGlove::HoldToDeployTime' has a wrong offset!");

// Class ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_Activate
// 0x0020 (0x0B48 - 0x0B28)
class UFortGameplayAbility_ScoutDrone_Activate final : public UFortGameplayAbility
{
public:
	TSubclassOf<class AFortScoutDrone>            RCActorClass;                                      // 0x0B28(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                SpawnOffset;                                       // 0x0B30(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameplayAbility_ScoutDrone_Activate">();
	}
	static class UFortGameplayAbility_ScoutDrone_Activate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameplayAbility_ScoutDrone_Activate>();
	}
};
static_assert(alignof(UFortGameplayAbility_ScoutDrone_Activate) == 0x000008, "Wrong alignment on UFortGameplayAbility_ScoutDrone_Activate");
static_assert(sizeof(UFortGameplayAbility_ScoutDrone_Activate) == 0x000B48, "Wrong size on UFortGameplayAbility_ScoutDrone_Activate");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Activate, RCActorClass) == 0x000B28, "Member 'UFortGameplayAbility_ScoutDrone_Activate::RCActorClass' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Activate, SpawnOffset) == 0x000B30, "Member 'UFortGameplayAbility_ScoutDrone_Activate::SpawnOffset' has a wrong offset!");

// Class ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_Dismiss
// 0x0010 (0x0B38 - 0x0B28)
class UFortGameplayAbility_ScoutDrone_Dismiss final : public UFortGameplayAbility
{
public:
	struct FScoutDroneDeferredDestructionData     DismissDelayData;                                  // 0x0B28(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)

public:
	class AFortScoutDrone* GetControlledDrone();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameplayAbility_ScoutDrone_Dismiss">();
	}
	static class UFortGameplayAbility_ScoutDrone_Dismiss* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameplayAbility_ScoutDrone_Dismiss>();
	}
};
static_assert(alignof(UFortGameplayAbility_ScoutDrone_Dismiss) == 0x000008, "Wrong alignment on UFortGameplayAbility_ScoutDrone_Dismiss");
static_assert(sizeof(UFortGameplayAbility_ScoutDrone_Dismiss) == 0x000B38, "Wrong size on UFortGameplayAbility_ScoutDrone_Dismiss");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Dismiss, DismissDelayData) == 0x000B28, "Member 'UFortGameplayAbility_ScoutDrone_Dismiss::DismissDelayData' has a wrong offset!");

// Class ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_MarkPotentialTargets
// 0x0110 (0x0C80 - 0x0B70)
class UFortGameplayAbility_ScoutDrone_MarkPotentialTargets final : public UFortGameplayAbility_ScoutDrone_TargetingBase
{
public:
	struct FIndicatedActorData                    IndicatedActorData;                                // 0x0B70(0x00D8)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C48[0x10];                                     // 0x0C48(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxNumberOfPotentialTargets;                       // 0x0C58(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	void OnStartHighlightingTarget(class AActor* Target);
	void OnStoppedHighlightingTarget(class AActor* Target);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameplayAbility_ScoutDrone_MarkPotentialTargets">();
	}
	static class UFortGameplayAbility_ScoutDrone_MarkPotentialTargets* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameplayAbility_ScoutDrone_MarkPotentialTargets>();
	}
};
static_assert(alignof(UFortGameplayAbility_ScoutDrone_MarkPotentialTargets) == 0x000008, "Wrong alignment on UFortGameplayAbility_ScoutDrone_MarkPotentialTargets");
static_assert(sizeof(UFortGameplayAbility_ScoutDrone_MarkPotentialTargets) == 0x000C80, "Wrong size on UFortGameplayAbility_ScoutDrone_MarkPotentialTargets");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_MarkPotentialTargets, IndicatedActorData) == 0x000B70, "Member 'UFortGameplayAbility_ScoutDrone_MarkPotentialTargets::IndicatedActorData' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_MarkPotentialTargets, MaxNumberOfPotentialTargets) == 0x000C58, "Member 'UFortGameplayAbility_ScoutDrone_MarkPotentialTargets::MaxNumberOfPotentialTargets' has a wrong offset!");

// Class ScoutDroneRuntime.ScoutDronePassiveMarkPayload
// 0x0008 (0x0030 - 0x0028)
class UScoutDronePassiveMarkPayload final : public UObject
{
public:
	struct FScoutDroneStatusData                  TargetStatus;                                      // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoutDronePassiveMarkPayload">();
	}
	static class UScoutDronePassiveMarkPayload* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoutDronePassiveMarkPayload>();
	}
};
static_assert(alignof(UScoutDronePassiveMarkPayload) == 0x000008, "Wrong alignment on UScoutDronePassiveMarkPayload");
static_assert(sizeof(UScoutDronePassiveMarkPayload) == 0x000030, "Wrong size on UScoutDronePassiveMarkPayload");
static_assert(offsetof(UScoutDronePassiveMarkPayload, TargetStatus) == 0x000028, "Member 'UScoutDronePassiveMarkPayload::TargetStatus' has a wrong offset!");

// Class ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_PassiveMark
// 0x01D8 (0x0D48 - 0x0B70)
class UFortGameplayAbility_ScoutDrone_PassiveMark final : public UFortGameplayAbility_ScoutDrone_TargetingBase
{
public:
	struct FScoutDroneStatusData                  CurrentTargetStatus;                               // 0x0B70(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FStenciledActorData                    StenciledActorData;                                // 0x0B78(0x0080)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FIndicatedActorData                    IndicatedActorData;                                // 0x0BF8(0x00D8)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ActorTargetingRange;                               // 0x0CD0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TimeToConfirmTarget;                               // 0x0CF8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class AActor*                                 CurrentTarget;                                     // 0x0D20(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           TargetConfirmationTimerHandle;                     // 0x0D28(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UScoutDronePassiveMarkPayload*          PayloadCache;                                      // 0x0D30(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D38[0x10];                                     // 0x0D38(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnTargetStatusChanged(class AActor* ActiveTarget);
	void OnActorIndicatorExpired(class AActor* IndicatedActor);
	void OnRep_CurrentTargetStatus();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameplayAbility_ScoutDrone_PassiveMark">();
	}
	static class UFortGameplayAbility_ScoutDrone_PassiveMark* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameplayAbility_ScoutDrone_PassiveMark>();
	}
};
static_assert(alignof(UFortGameplayAbility_ScoutDrone_PassiveMark) == 0x000008, "Wrong alignment on UFortGameplayAbility_ScoutDrone_PassiveMark");
static_assert(sizeof(UFortGameplayAbility_ScoutDrone_PassiveMark) == 0x000D48, "Wrong size on UFortGameplayAbility_ScoutDrone_PassiveMark");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_PassiveMark, CurrentTargetStatus) == 0x000B70, "Member 'UFortGameplayAbility_ScoutDrone_PassiveMark::CurrentTargetStatus' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_PassiveMark, StenciledActorData) == 0x000B78, "Member 'UFortGameplayAbility_ScoutDrone_PassiveMark::StenciledActorData' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_PassiveMark, IndicatedActorData) == 0x000BF8, "Member 'UFortGameplayAbility_ScoutDrone_PassiveMark::IndicatedActorData' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_PassiveMark, ActorTargetingRange) == 0x000CD0, "Member 'UFortGameplayAbility_ScoutDrone_PassiveMark::ActorTargetingRange' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_PassiveMark, TimeToConfirmTarget) == 0x000CF8, "Member 'UFortGameplayAbility_ScoutDrone_PassiveMark::TimeToConfirmTarget' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_PassiveMark, CurrentTarget) == 0x000D20, "Member 'UFortGameplayAbility_ScoutDrone_PassiveMark::CurrentTarget' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_PassiveMark, TargetConfirmationTimerHandle) == 0x000D28, "Member 'UFortGameplayAbility_ScoutDrone_PassiveMark::TargetConfirmationTimerHandle' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_PassiveMark, PayloadCache) == 0x000D30, "Member 'UFortGameplayAbility_ScoutDrone_PassiveMark::PayloadCache' has a wrong offset!");

// Class ScoutDroneRuntime.ScoutDronePickUpTargetsPayload
// 0x0018 (0x0040 - 0x0028)
class UScoutDronePickUpTargetsPayload final : public UObject
{
public:
	struct FScoutDronePickupTargets               PickUpTargets;                                     // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoutDronePickUpTargetsPayload">();
	}
	static class UScoutDronePickUpTargetsPayload* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoutDronePickUpTargetsPayload>();
	}
};
static_assert(alignof(UScoutDronePickUpTargetsPayload) == 0x000008, "Wrong alignment on UScoutDronePickUpTargetsPayload");
static_assert(sizeof(UScoutDronePickUpTargetsPayload) == 0x000040, "Wrong size on UScoutDronePickUpTargetsPayload");
static_assert(offsetof(UScoutDronePickUpTargetsPayload, PickUpTargets) == 0x000028, "Member 'UScoutDronePickUpTargetsPayload::PickUpTargets' has a wrong offset!");

// Class ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_PickUp
// 0x0078 (0x0BE8 - 0x0B70)
class UFortGameplayAbility_ScoutDrone_PickUp final : public UFortGameplayAbility_ScoutDrone_TargetingBase
{
public:
	uint8                                         Pad_B70[0x8];                                      // 0x0B70(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxNumberOfItemsToGrab;                            // 0x0B78(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UScoutDronePickUpTargetsPayload*        PayloadCache;                                      // 0x0BA0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         PickupToggleCooldownDuration;                      // 0x0BA8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BD0[0x10];                                     // 0x0BD0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            AttachedPawnGEClass;                               // 0x0BE0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ServerConfirmTargets();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameplayAbility_ScoutDrone_PickUp">();
	}
	static class UFortGameplayAbility_ScoutDrone_PickUp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameplayAbility_ScoutDrone_PickUp>();
	}
};
static_assert(alignof(UFortGameplayAbility_ScoutDrone_PickUp) == 0x000008, "Wrong alignment on UFortGameplayAbility_ScoutDrone_PickUp");
static_assert(sizeof(UFortGameplayAbility_ScoutDrone_PickUp) == 0x000BE8, "Wrong size on UFortGameplayAbility_ScoutDrone_PickUp");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_PickUp, MaxNumberOfItemsToGrab) == 0x000B78, "Member 'UFortGameplayAbility_ScoutDrone_PickUp::MaxNumberOfItemsToGrab' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_PickUp, PayloadCache) == 0x000BA0, "Member 'UFortGameplayAbility_ScoutDrone_PickUp::PayloadCache' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_PickUp, PickupToggleCooldownDuration) == 0x000BA8, "Member 'UFortGameplayAbility_ScoutDrone_PickUp::PickupToggleCooldownDuration' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_PickUp, AttachedPawnGEClass) == 0x000BE0, "Member 'UFortGameplayAbility_ScoutDrone_PickUp::AttachedPawnGEClass' has a wrong offset!");

// Class ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_Tether
// 0x0078 (0x0BA0 - 0x0B28)
class UFortGameplayAbility_ScoutDrone_Tether final : public UFortGameplayAbility
{
public:
	struct FScalableFloat                         WarningRange;                                      // 0x0B28(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         SignalLossRange;                                   // 0x0B50(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	bool                                          bIsInWarningRange;                                 // 0x0B78(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsInSignalLossRange;                              // 0x0B79(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B7A[0x6];                                      // 0x0B7A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TetheringTimerHandle;                              // 0x0B80(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           TetheringReportTimerHandle;                        // 0x0B88(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScoutDroneDeferredDestructionData     DismissDelayData;                                  // 0x0B90(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)

public:
	void OnRep_bIsInSignalLossRange();
	void OnRep_bIsInWarningRange();
	void StartCheckingDistances();
	void StopCheckingDistances();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameplayAbility_ScoutDrone_Tether">();
	}
	static class UFortGameplayAbility_ScoutDrone_Tether* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameplayAbility_ScoutDrone_Tether>();
	}
};
static_assert(alignof(UFortGameplayAbility_ScoutDrone_Tether) == 0x000008, "Wrong alignment on UFortGameplayAbility_ScoutDrone_Tether");
static_assert(sizeof(UFortGameplayAbility_ScoutDrone_Tether) == 0x000BA0, "Wrong size on UFortGameplayAbility_ScoutDrone_Tether");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Tether, WarningRange) == 0x000B28, "Member 'UFortGameplayAbility_ScoutDrone_Tether::WarningRange' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Tether, SignalLossRange) == 0x000B50, "Member 'UFortGameplayAbility_ScoutDrone_Tether::SignalLossRange' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Tether, bIsInWarningRange) == 0x000B78, "Member 'UFortGameplayAbility_ScoutDrone_Tether::bIsInWarningRange' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Tether, bIsInSignalLossRange) == 0x000B79, "Member 'UFortGameplayAbility_ScoutDrone_Tether::bIsInSignalLossRange' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Tether, TetheringTimerHandle) == 0x000B80, "Member 'UFortGameplayAbility_ScoutDrone_Tether::TetheringTimerHandle' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Tether, TetheringReportTimerHandle) == 0x000B88, "Member 'UFortGameplayAbility_ScoutDrone_Tether::TetheringReportTimerHandle' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_ScoutDrone_Tether, DismissDelayData) == 0x000B90, "Member 'UFortGameplayAbility_ScoutDrone_Tether::DismissDelayData' has a wrong offset!");

// Class ScoutDroneRuntime.FortAthenaMutator_ScoutDrone
// 0x0048 (0x0378 - 0x0330)
class AFortAthenaMutator_ScoutDrone final : public AFortAthenaMutator
{
public:
	struct FGameplayTagContainer                  DroneAllowedInteractionTags;                       // 0x0330(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  DroneBlockedInteractionTags;                       // 0x0350(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	bool                                          bIsControllingDrone;                               // 0x0370(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnViewTargetChanged(class AFortPlayerController* PlayerController, class AActor* OldViewTarget, class AActor* NewViewTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_ScoutDrone">();
	}
	static class AFortAthenaMutator_ScoutDrone* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_ScoutDrone>();
	}
};
static_assert(alignof(AFortAthenaMutator_ScoutDrone) == 0x000008, "Wrong alignment on AFortAthenaMutator_ScoutDrone");
static_assert(sizeof(AFortAthenaMutator_ScoutDrone) == 0x000378, "Wrong size on AFortAthenaMutator_ScoutDrone");
static_assert(offsetof(AFortAthenaMutator_ScoutDrone, DroneAllowedInteractionTags) == 0x000330, "Member 'AFortAthenaMutator_ScoutDrone::DroneAllowedInteractionTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_ScoutDrone, DroneBlockedInteractionTags) == 0x000350, "Member 'AFortAthenaMutator_ScoutDrone::DroneBlockedInteractionTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_ScoutDrone, bIsControllingDrone) == 0x000370, "Member 'AFortAthenaMutator_ScoutDrone::bIsControllingDrone' has a wrong offset!");

// Class ScoutDroneRuntime.FortChargingSet_ScoutDroneEnergy
// 0x00C0 (0x0108 - 0x0048)
class UFortChargingSet_ScoutDroneEnergy final : public UFortChargingSet_Base
{
public:
	struct FFortGameplayAttributeData             Energy;                                            // 0x0048(0x0028)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct FFortGameplayAttributeData             MaxEnergy;                                         // 0x0070(0x0028)(BlueprintVisible, BlueprintReadOnly, Net, Protected, NativeAccessSpecifierProtected)
	struct FFortGameplayAttributeData             EnergyChargeRate;                                  // 0x0098(0x0028)(BlueprintVisible, BlueprintReadOnly, Net, Protected, NativeAccessSpecifierProtected)
	struct FFortGameplayAttributeData             ServerTimeEnergyIncrements;                        // 0x00C0(0x0028)(BlueprintVisible, BlueprintReadOnly, Net, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_E8[0x20];                                      // 0x00E8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_Energy(const struct FFortGameplayAttributeData& OldValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortChargingSet_ScoutDroneEnergy">();
	}
	static class UFortChargingSet_ScoutDroneEnergy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortChargingSet_ScoutDroneEnergy>();
	}
};
static_assert(alignof(UFortChargingSet_ScoutDroneEnergy) == 0x000008, "Wrong alignment on UFortChargingSet_ScoutDroneEnergy");
static_assert(sizeof(UFortChargingSet_ScoutDroneEnergy) == 0x000108, "Wrong size on UFortChargingSet_ScoutDroneEnergy");
static_assert(offsetof(UFortChargingSet_ScoutDroneEnergy, Energy) == 0x000048, "Member 'UFortChargingSet_ScoutDroneEnergy::Energy' has a wrong offset!");
static_assert(offsetof(UFortChargingSet_ScoutDroneEnergy, MaxEnergy) == 0x000070, "Member 'UFortChargingSet_ScoutDroneEnergy::MaxEnergy' has a wrong offset!");
static_assert(offsetof(UFortChargingSet_ScoutDroneEnergy, EnergyChargeRate) == 0x000098, "Member 'UFortChargingSet_ScoutDroneEnergy::EnergyChargeRate' has a wrong offset!");
static_assert(offsetof(UFortChargingSet_ScoutDroneEnergy, ServerTimeEnergyIncrements) == 0x0000C0, "Member 'UFortChargingSet_ScoutDroneEnergy::ServerTimeEnergyIncrements' has a wrong offset!");

// Class ScoutDroneRuntime.FortScoutDrone
// 0x0190 (0x07B0 - 0x0620)
class AFortScoutDrone final : public ACharacter
{
public:
	uint8                                         Pad_620[0x50];                                     // 0x0620(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsDiving;                                         // 0x0670(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_671[0x7];                                      // 0x0671(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         DivingEnabled;                                     // 0x0678(0x0028)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          bIsSpeedBoosting;                                  // 0x06A0(0x0001)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A1[0x7];                                      // 0x06A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      NSScoutDroneIdle_Native;                           // 0x06A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortScoutDronePickupManager*           PickupManagerComponent_Native;                     // 0x06B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                TeamMateIndicatorMarkerWidgetClass;                // 0x06B8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        DroneMotorLoopComponent;                           // 0x06C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        DroneThrustSoundComponent;                         // 0x06C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BaseMaxFlySpeed;                                   // 0x06D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6F8[0x8];                                      // 0x06F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0700(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActorComponent_Affiliation*        AffiliationComponent;                              // 0x0708(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortAbilitySet*                        StartupAbilitySet;                                 // 0x0710(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortPawn*                              ControllingPlayerPawn;                             // 0x0718(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortHealthSet*                         HealthSet;                                         // 0x0720(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortChargingSet_ScoutDroneEnergy*      EnergySet;                                         // 0x0728(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LifespanAfterDeath;                                // 0x0730(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortAttributeInitializationKey        AttributeInitKey;                                  // 0x0734(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	EPhysicalSurface                              PrimarySurfaceType;                                // 0x073C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFortBaseWeaponDamage                         WeaponResponseType;                                // 0x073D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPlayedDeath;                                      // 0x073E(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_73F[0x1];                                      // 0x073F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScoutDroneDeferredDestructionData     OutOfHealthDismissDelayData;                       // 0x0740(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	struct FScoutDroneDeferredDestructionData     OutOfEnergyDismissDelayData;                       // 0x0750(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              OnTeamIndexChanged;                                // 0x0760(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortScoutDronePawnOverrideComponent> PawnOverrideComponentClass;                        // 0x0770(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundBase*                             DroneMotorLoopSound;                               // 0x0778(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundBase*                             DroneThrusterSound;                                // 0x0780(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioParameterComponent*               AudioParameter;                                    // 0x0788(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LocallyViewedPawnAudioParamName;                   // 0x0790(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   IsEnemyAudioParamName;                             // 0x0794(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ThrustAmountAudioParamName;                        // 0x0798(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ThrustSoundThreshold;                              // 0x079C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7A0[0x10];                                     // 0x07A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GameplayCue_Damage(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GetForwardAndRightDotProducts_Native(float* OutForwardDot, float* OutRightDot);
	void OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnRep_ControllingPlayerPawn();
	void SetAffiliationAudio();
	void SetTeamMatesIndicator(bool bState);
	void SetupGameplayAudioParameters();

	class AFortPawn* GetControllingPlayerPawn() const;
	struct FRotator GetDeltaRotator() const;
	float GetHealthPercentage() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScoutDrone">();
	}
	static class AFortScoutDrone* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortScoutDrone>();
	}
};
static_assert(alignof(AFortScoutDrone) == 0x000010, "Wrong alignment on AFortScoutDrone");
static_assert(sizeof(AFortScoutDrone) == 0x0007B0, "Wrong size on AFortScoutDrone");
static_assert(offsetof(AFortScoutDrone, bIsDiving) == 0x000670, "Member 'AFortScoutDrone::bIsDiving' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, DivingEnabled) == 0x000678, "Member 'AFortScoutDrone::DivingEnabled' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, bIsSpeedBoosting) == 0x0006A0, "Member 'AFortScoutDrone::bIsSpeedBoosting' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, NSScoutDroneIdle_Native) == 0x0006A8, "Member 'AFortScoutDrone::NSScoutDroneIdle_Native' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, PickupManagerComponent_Native) == 0x0006B0, "Member 'AFortScoutDrone::PickupManagerComponent_Native' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, TeamMateIndicatorMarkerWidgetClass) == 0x0006B8, "Member 'AFortScoutDrone::TeamMateIndicatorMarkerWidgetClass' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, DroneMotorLoopComponent) == 0x0006C0, "Member 'AFortScoutDrone::DroneMotorLoopComponent' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, DroneThrustSoundComponent) == 0x0006C8, "Member 'AFortScoutDrone::DroneThrustSoundComponent' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, BaseMaxFlySpeed) == 0x0006D0, "Member 'AFortScoutDrone::BaseMaxFlySpeed' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, AbilitySystemComponent) == 0x000700, "Member 'AFortScoutDrone::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, AffiliationComponent) == 0x000708, "Member 'AFortScoutDrone::AffiliationComponent' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, StartupAbilitySet) == 0x000710, "Member 'AFortScoutDrone::StartupAbilitySet' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, ControllingPlayerPawn) == 0x000718, "Member 'AFortScoutDrone::ControllingPlayerPawn' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, HealthSet) == 0x000720, "Member 'AFortScoutDrone::HealthSet' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, EnergySet) == 0x000728, "Member 'AFortScoutDrone::EnergySet' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, LifespanAfterDeath) == 0x000730, "Member 'AFortScoutDrone::LifespanAfterDeath' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, AttributeInitKey) == 0x000734, "Member 'AFortScoutDrone::AttributeInitKey' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, PrimarySurfaceType) == 0x00073C, "Member 'AFortScoutDrone::PrimarySurfaceType' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, WeaponResponseType) == 0x00073D, "Member 'AFortScoutDrone::WeaponResponseType' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, bPlayedDeath) == 0x00073E, "Member 'AFortScoutDrone::bPlayedDeath' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, OutOfHealthDismissDelayData) == 0x000740, "Member 'AFortScoutDrone::OutOfHealthDismissDelayData' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, OutOfEnergyDismissDelayData) == 0x000750, "Member 'AFortScoutDrone::OutOfEnergyDismissDelayData' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, OnTeamIndexChanged) == 0x000760, "Member 'AFortScoutDrone::OnTeamIndexChanged' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, PawnOverrideComponentClass) == 0x000770, "Member 'AFortScoutDrone::PawnOverrideComponentClass' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, DroneMotorLoopSound) == 0x000778, "Member 'AFortScoutDrone::DroneMotorLoopSound' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, DroneThrusterSound) == 0x000780, "Member 'AFortScoutDrone::DroneThrusterSound' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, AudioParameter) == 0x000788, "Member 'AFortScoutDrone::AudioParameter' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, LocallyViewedPawnAudioParamName) == 0x000790, "Member 'AFortScoutDrone::LocallyViewedPawnAudioParamName' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, IsEnemyAudioParamName) == 0x000794, "Member 'AFortScoutDrone::IsEnemyAudioParamName' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, ThrustAmountAudioParamName) == 0x000798, "Member 'AFortScoutDrone::ThrustAmountAudioParamName' has a wrong offset!");
static_assert(offsetof(AFortScoutDrone, ThrustSoundThreshold) == 0x00079C, "Member 'AFortScoutDrone::ThrustSoundThreshold' has a wrong offset!");

// Class ScoutDroneRuntime.FortScoutDroneCameraMode
// 0x0008 (0x01F0 - 0x01E8)
class UFortScoutDroneCameraMode final : public UFort3PCameraMode
{
public:
	bool                                          bShouldInterpolateLocation;                        // 0x01E8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShouldInterpolateRotation;                        // 0x01E9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1EA[0x6];                                      // 0x01EA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScoutDroneCameraMode">();
	}
	static class UFortScoutDroneCameraMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortScoutDroneCameraMode>();
	}
};
static_assert(alignof(UFortScoutDroneCameraMode) == 0x000008, "Wrong alignment on UFortScoutDroneCameraMode");
static_assert(sizeof(UFortScoutDroneCameraMode) == 0x0001F0, "Wrong size on UFortScoutDroneCameraMode");
static_assert(offsetof(UFortScoutDroneCameraMode, bShouldInterpolateLocation) == 0x0001E8, "Member 'UFortScoutDroneCameraMode::bShouldInterpolateLocation' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneCameraMode, bShouldInterpolateRotation) == 0x0001E9, "Member 'UFortScoutDroneCameraMode::bShouldInterpolateRotation' has a wrong offset!");

// Class ScoutDroneRuntime.ScoutDroneDeferredDestructionPayload
// 0x0010 (0x0038 - 0x0028)
class UScoutDroneDeferredDestructionPayload final : public UObject
{
public:
	struct FScoutDroneDeferredDestructionData     DeferredDestructionData;                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoutDroneDeferredDestructionPayload">();
	}
	static class UScoutDroneDeferredDestructionPayload* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoutDroneDeferredDestructionPayload>();
	}
};
static_assert(alignof(UScoutDroneDeferredDestructionPayload) == 0x000008, "Wrong alignment on UScoutDroneDeferredDestructionPayload");
static_assert(sizeof(UScoutDroneDeferredDestructionPayload) == 0x000038, "Wrong size on UScoutDroneDeferredDestructionPayload");
static_assert(offsetof(UScoutDroneDeferredDestructionPayload, DeferredDestructionData) == 0x000028, "Member 'UScoutDroneDeferredDestructionPayload::DeferredDestructionData' has a wrong offset!");

// Class ScoutDroneRuntime.FortScoutDroneControllingComponent
// 0x02A8 (0x0350 - 0x00A8)
class UFortScoutDroneControllingComponent final : public UFortControllerComponent
{
public:
	uint8                                         Pad_A8[0x30];                                      // 0x00A8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputComponent*                        DroneInputComponent;                               // 0x00D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortScoutDrone*                        ControlledDrone;                                   // 0x00E0(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 OriginalDroneOwner;                                // 0x00E8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortInputMappingContext*               DroneInputContext;                                 // 0x00F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FScoutDroneInputTriggerableEvent> InputTriggerableEvents;                            // 0x00F8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UInputAction*                           MoveUpAction;                                      // 0x0108(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInputAction*                           MoveAction;                                        // 0x0110(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInputAction*                           DismissAction;                                     // 0x0118(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGameplayEffect>            DroneCooldownEffectClass;                          // 0x0120(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_128[0x18];                                     // 0x0128(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStenciledActorData                    OwningActorStencilData;                            // 0x0140(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScoutDroneDeferredDestructionData     CurrentDestructionData;                            // 0x01C0(0x0010)(Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortCameraMode>            FirstPersonCameraModeOverride;                     // 0x01D0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortCameraMode>            ThirdPersonCameraModeOverride;                     // 0x01D8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayAbilitySpec                   FakeCameraAbilitySpec;                             // 0x01E0(0x00E8)(Transient, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LegacyInputActionsToBlock;                         // 0x02C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class UScoutDroneDeferredDestructionPayload*  DismissPayloadCache;                               // 0x02D8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DismissButtonPressCooldown;                        // 0x02E0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FViewTargetTransitionParams            PlayerToDroneTransitionParams;                     // 0x0310(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InterruptingPlayerTags;                            // 0x0328(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnDestructionStarted(bool bInstantDestruction, const struct FGameplayTag& DismissalReason);
	void BP_OnDismissalStarted(bool bInstantDismissal, const struct FGameplayTag& DismissalReason);
	void BP_OnDroneDestroyed(const struct FGameplayTag& DismissalReason);
	void BP_OnPlayerInteractLongUseChanged(bool bInteracting, bool bLongUseInteractionCompleted);
	void BP_OnPlayerShortInteract();
	void OnControlledDroneDestroyed(class AActor* InControlledDrone);
	void OnOwningPlayerStartedDBNO();
	void OnPlayerInterruptionTagsChanged(const struct FGameplayTag& tag, int32 NewCount);
	void OnRep_ControlledDrone();
	void OnRep_CurrentDestructionData();
	void OnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void ServerRequestDroneDismissal();

	class AFortScoutDrone* GetControlledDrone() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScoutDroneControllingComponent">();
	}
	static class UFortScoutDroneControllingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortScoutDroneControllingComponent>();
	}
};
static_assert(alignof(UFortScoutDroneControllingComponent) == 0x000008, "Wrong alignment on UFortScoutDroneControllingComponent");
static_assert(sizeof(UFortScoutDroneControllingComponent) == 0x000350, "Wrong size on UFortScoutDroneControllingComponent");
static_assert(offsetof(UFortScoutDroneControllingComponent, DroneInputComponent) == 0x0000D8, "Member 'UFortScoutDroneControllingComponent::DroneInputComponent' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, ControlledDrone) == 0x0000E0, "Member 'UFortScoutDroneControllingComponent::ControlledDrone' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, OriginalDroneOwner) == 0x0000E8, "Member 'UFortScoutDroneControllingComponent::OriginalDroneOwner' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, DroneInputContext) == 0x0000F0, "Member 'UFortScoutDroneControllingComponent::DroneInputContext' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, InputTriggerableEvents) == 0x0000F8, "Member 'UFortScoutDroneControllingComponent::InputTriggerableEvents' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, MoveUpAction) == 0x000108, "Member 'UFortScoutDroneControllingComponent::MoveUpAction' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, MoveAction) == 0x000110, "Member 'UFortScoutDroneControllingComponent::MoveAction' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, DismissAction) == 0x000118, "Member 'UFortScoutDroneControllingComponent::DismissAction' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, DroneCooldownEffectClass) == 0x000120, "Member 'UFortScoutDroneControllingComponent::DroneCooldownEffectClass' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, OwningActorStencilData) == 0x000140, "Member 'UFortScoutDroneControllingComponent::OwningActorStencilData' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, CurrentDestructionData) == 0x0001C0, "Member 'UFortScoutDroneControllingComponent::CurrentDestructionData' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, FirstPersonCameraModeOverride) == 0x0001D0, "Member 'UFortScoutDroneControllingComponent::FirstPersonCameraModeOverride' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, ThirdPersonCameraModeOverride) == 0x0001D8, "Member 'UFortScoutDroneControllingComponent::ThirdPersonCameraModeOverride' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, FakeCameraAbilitySpec) == 0x0001E0, "Member 'UFortScoutDroneControllingComponent::FakeCameraAbilitySpec' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, LegacyInputActionsToBlock) == 0x0002C8, "Member 'UFortScoutDroneControllingComponent::LegacyInputActionsToBlock' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, DismissPayloadCache) == 0x0002D8, "Member 'UFortScoutDroneControllingComponent::DismissPayloadCache' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, DismissButtonPressCooldown) == 0x0002E0, "Member 'UFortScoutDroneControllingComponent::DismissButtonPressCooldown' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, PlayerToDroneTransitionParams) == 0x000310, "Member 'UFortScoutDroneControllingComponent::PlayerToDroneTransitionParams' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneControllingComponent, InterruptingPlayerTags) == 0x000328, "Member 'UFortScoutDroneControllingComponent::InterruptingPlayerTags' has a wrong offset!");

// Class ScoutDroneRuntime.FortScoutDroneCooldownMagnitudeCalculation
// 0x0028 (0x0068 - 0x0040)
class UFortScoutDroneCooldownMagnitudeCalculation final : public UFortGameplayModMagnitudeCalculation
{
public:
	struct FScalableFloat                         MinDroneCooldown;                                  // 0x0040(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScoutDroneCooldownMagnitudeCalculation">();
	}
	static class UFortScoutDroneCooldownMagnitudeCalculation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortScoutDroneCooldownMagnitudeCalculation>();
	}
};
static_assert(alignof(UFortScoutDroneCooldownMagnitudeCalculation) == 0x000008, "Wrong alignment on UFortScoutDroneCooldownMagnitudeCalculation");
static_assert(sizeof(UFortScoutDroneCooldownMagnitudeCalculation) == 0x000068, "Wrong size on UFortScoutDroneCooldownMagnitudeCalculation");
static_assert(offsetof(UFortScoutDroneCooldownMagnitudeCalculation, MinDroneCooldown) == 0x000040, "Member 'UFortScoutDroneCooldownMagnitudeCalculation::MinDroneCooldown' has a wrong offset!");

// Class ScoutDroneRuntime.FortScoutDroneMovementComponent
// 0x00C0 (0x0FA0 - 0x0EE0)
class UFortScoutDroneMovementComponent final : public UCharacterMovementComponent
{
public:
	struct FVector                                LocalInputState;                                   // 0x0ED8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastInputState;                                    // 0x0EF0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReplicatedAcceleration;                            // 0x0F08(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         StrafeInputMultiplier;                             // 0x0F20(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         BacktrackingInputMultiplier;                       // 0x0F48(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         VerticalMovementInputMultiplier;                   // 0x0F70(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F98[0x8];                                      // 0x0F98(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScoutDroneMovementComponent">();
	}
	static class UFortScoutDroneMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortScoutDroneMovementComponent>();
	}
};
static_assert(alignof(UFortScoutDroneMovementComponent) == 0x000010, "Wrong alignment on UFortScoutDroneMovementComponent");
static_assert(sizeof(UFortScoutDroneMovementComponent) == 0x000FA0, "Wrong size on UFortScoutDroneMovementComponent");
static_assert(offsetof(UFortScoutDroneMovementComponent, LocalInputState) == 0x000ED8, "Member 'UFortScoutDroneMovementComponent::LocalInputState' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneMovementComponent, LastInputState) == 0x000EF0, "Member 'UFortScoutDroneMovementComponent::LastInputState' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneMovementComponent, ReplicatedAcceleration) == 0x000F08, "Member 'UFortScoutDroneMovementComponent::ReplicatedAcceleration' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneMovementComponent, StrafeInputMultiplier) == 0x000F20, "Member 'UFortScoutDroneMovementComponent::StrafeInputMultiplier' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneMovementComponent, BacktrackingInputMultiplier) == 0x000F48, "Member 'UFortScoutDroneMovementComponent::BacktrackingInputMultiplier' has a wrong offset!");
static_assert(offsetof(UFortScoutDroneMovementComponent, VerticalMovementInputMultiplier) == 0x000F70, "Member 'UFortScoutDroneMovementComponent::VerticalMovementInputMultiplier' has a wrong offset!");

// Class ScoutDroneRuntime.FortScoutDronePawnOverrideComponent
// 0x0008 (0x00B0 - 0x00A8)
class UFortScoutDronePawnOverrideComponent final : public UFortPawnOverrideComponent
{
public:
	TSubclassOf<class UFortCameraMode>            DroneSpectateCameraMode;                           // 0x00A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScoutDronePawnOverrideComponent">();
	}
	static class UFortScoutDronePawnOverrideComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortScoutDronePawnOverrideComponent>();
	}
};
static_assert(alignof(UFortScoutDronePawnOverrideComponent) == 0x000008, "Wrong alignment on UFortScoutDronePawnOverrideComponent");
static_assert(sizeof(UFortScoutDronePawnOverrideComponent) == 0x0000B0, "Wrong size on UFortScoutDronePawnOverrideComponent");
static_assert(offsetof(UFortScoutDronePawnOverrideComponent, DroneSpectateCameraMode) == 0x0000A8, "Member 'UFortScoutDronePawnOverrideComponent::DroneSpectateCameraMode' has a wrong offset!");

// Class ScoutDroneRuntime.FortScoutDronePawnOwnerOverrideComponent
// 0x0008 (0x00B0 - 0x00A8)
class UFortScoutDronePawnOwnerOverrideComponent final : public UFortPawnOverrideComponent
{
public:
	TWeakObjectPtr<class AFortScoutDrone>         ControlledDrone;                                   // 0x00A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScoutDronePawnOwnerOverrideComponent">();
	}
	static class UFortScoutDronePawnOwnerOverrideComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortScoutDronePawnOwnerOverrideComponent>();
	}
};
static_assert(alignof(UFortScoutDronePawnOwnerOverrideComponent) == 0x000008, "Wrong alignment on UFortScoutDronePawnOwnerOverrideComponent");
static_assert(sizeof(UFortScoutDronePawnOwnerOverrideComponent) == 0x0000B0, "Wrong size on UFortScoutDronePawnOwnerOverrideComponent");
static_assert(offsetof(UFortScoutDronePawnOwnerOverrideComponent, ControlledDrone) == 0x0000A8, "Member 'UFortScoutDronePawnOwnerOverrideComponent::ControlledDrone' has a wrong offset!");

// Class ScoutDroneRuntime.FortScoutDronePickupManager
// 0x0138 (0x01D8 - 0x00A0)
class UFortScoutDronePickupManager final : public UPawnComponent
{
public:
	struct FScoutDronePickupTargets               AttachedTargets;                                   // 0x00A0(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	class FName                                   AttachPointSocketName;                             // 0x00B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScoutDronePickupTargets               PreviouslyAttachedTargets;                         // 0x00C0(0x0018)(Transient, NativeAccessSpecifierPrivate)
	struct FVector                                ItemOffset;                                        // 0x00D8(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                DBNOPawnOffset;                                    // 0x00F0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentlyAppliedCameraOffset;                      // 0x0108(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScoutDroneCapsuleSizeData             MaxExtraCapsuleDimensions;                         // 0x0110(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxPickupSpread;                                   // 0x0160(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         PickupTossSpeed;                                   // 0x0188(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  ItemsPickupTags;                                   // 0x01B0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D0[0x8];                                      // 0x01D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnActorsAttached();
	void BP_OnActorsDetached();
	void OnAttachedPawnDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnPawnDBNOStateChanged(class AFortPawn* Pawn, bool bIsDBNO);
	void OnRep_AttachedTargets();
	void ServerDropAttachedActors();
	void ServerUpdateItemAttachment(const struct FVector& CalculatedItemOffset);

	bool HasAnyAttachedActors() const;
	bool HasAPawnAtached() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScoutDronePickupManager">();
	}
	static class UFortScoutDronePickupManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortScoutDronePickupManager>();
	}
};
static_assert(alignof(UFortScoutDronePickupManager) == 0x000008, "Wrong alignment on UFortScoutDronePickupManager");
static_assert(sizeof(UFortScoutDronePickupManager) == 0x0001D8, "Wrong size on UFortScoutDronePickupManager");
static_assert(offsetof(UFortScoutDronePickupManager, AttachedTargets) == 0x0000A0, "Member 'UFortScoutDronePickupManager::AttachedTargets' has a wrong offset!");
static_assert(offsetof(UFortScoutDronePickupManager, AttachPointSocketName) == 0x0000B8, "Member 'UFortScoutDronePickupManager::AttachPointSocketName' has a wrong offset!");
static_assert(offsetof(UFortScoutDronePickupManager, PreviouslyAttachedTargets) == 0x0000C0, "Member 'UFortScoutDronePickupManager::PreviouslyAttachedTargets' has a wrong offset!");
static_assert(offsetof(UFortScoutDronePickupManager, ItemOffset) == 0x0000D8, "Member 'UFortScoutDronePickupManager::ItemOffset' has a wrong offset!");
static_assert(offsetof(UFortScoutDronePickupManager, DBNOPawnOffset) == 0x0000F0, "Member 'UFortScoutDronePickupManager::DBNOPawnOffset' has a wrong offset!");
static_assert(offsetof(UFortScoutDronePickupManager, CurrentlyAppliedCameraOffset) == 0x000108, "Member 'UFortScoutDronePickupManager::CurrentlyAppliedCameraOffset' has a wrong offset!");
static_assert(offsetof(UFortScoutDronePickupManager, MaxExtraCapsuleDimensions) == 0x000110, "Member 'UFortScoutDronePickupManager::MaxExtraCapsuleDimensions' has a wrong offset!");
static_assert(offsetof(UFortScoutDronePickupManager, MaxPickupSpread) == 0x000160, "Member 'UFortScoutDronePickupManager::MaxPickupSpread' has a wrong offset!");
static_assert(offsetof(UFortScoutDronePickupManager, PickupTossSpeed) == 0x000188, "Member 'UFortScoutDronePickupManager::PickupTossSpeed' has a wrong offset!");
static_assert(offsetof(UFortScoutDronePickupManager, ItemsPickupTags) == 0x0001B0, "Member 'UFortScoutDronePickupManager::ItemsPickupTags' has a wrong offset!");

}

