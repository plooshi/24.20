#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ScoutDroneRuntime

#include "Basic.hpp"

#include "TargetingSystem_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_TargetingBase.BP_OnTargetsFound
// 0x0004 (0x0004 - 0x0000)
struct FortGameplayAbility_ScoutDrone_TargetingBase_BP_OnTargetsFound final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_ScoutDrone_TargetingBase_BP_OnTargetsFound) == 0x000004, "Wrong alignment on FortGameplayAbility_ScoutDrone_TargetingBase_BP_OnTargetsFound");
static_assert(sizeof(FortGameplayAbility_ScoutDrone_TargetingBase_BP_OnTargetsFound) == 0x000004, "Wrong size on FortGameplayAbility_ScoutDrone_TargetingBase_BP_OnTargetsFound");
static_assert(offsetof(FortGameplayAbility_ScoutDrone_TargetingBase_BP_OnTargetsFound, TargetingHandle) == 0x000000, "Member 'FortGameplayAbility_ScoutDrone_TargetingBase_BP_OnTargetsFound::TargetingHandle' has a wrong offset!");

// Function ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_SpeedBoost.OnBoostedIntoActor
// 0x00E0 (0x00E0 - 0x0000)
struct FortGameplayAbility_ScoutDrone_SpeedBoost_OnBoostedIntoActor final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_ScoutDrone_SpeedBoost_OnBoostedIntoActor) == 0x000008, "Wrong alignment on FortGameplayAbility_ScoutDrone_SpeedBoost_OnBoostedIntoActor");
static_assert(sizeof(FortGameplayAbility_ScoutDrone_SpeedBoost_OnBoostedIntoActor) == 0x0000E0, "Wrong size on FortGameplayAbility_ScoutDrone_SpeedBoost_OnBoostedIntoActor");
static_assert(offsetof(FortGameplayAbility_ScoutDrone_SpeedBoost_OnBoostedIntoActor, HitResult) == 0x000000, "Member 'FortGameplayAbility_ScoutDrone_SpeedBoost_OnBoostedIntoActor::HitResult' has a wrong offset!");

// Function ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_SpeedBoost.OnDoorBashed
// 0x00E8 (0x00E8 - 0x0000)
struct FortGameplayAbility_ScoutDrone_SpeedBoost_OnDoorBashed final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UFortBuildingWallDoorComponent*         BashedDoor;                                        // 0x00E0(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_ScoutDrone_SpeedBoost_OnDoorBashed) == 0x000008, "Wrong alignment on FortGameplayAbility_ScoutDrone_SpeedBoost_OnDoorBashed");
static_assert(sizeof(FortGameplayAbility_ScoutDrone_SpeedBoost_OnDoorBashed) == 0x0000E8, "Wrong size on FortGameplayAbility_ScoutDrone_SpeedBoost_OnDoorBashed");
static_assert(offsetof(FortGameplayAbility_ScoutDrone_SpeedBoost_OnDoorBashed, HitResult) == 0x000000, "Member 'FortGameplayAbility_ScoutDrone_SpeedBoost_OnDoorBashed::HitResult' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_ScoutDrone_SpeedBoost_OnDoorBashed, BashedDoor) == 0x0000E0, "Member 'FortGameplayAbility_ScoutDrone_SpeedBoost_OnDoorBashed::BashedDoor' has a wrong offset!");

// Function ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_Dismiss.GetControlledDrone
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_ScoutDrone_Dismiss_GetControlledDrone final
{
public:
	class AFortScoutDrone*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_ScoutDrone_Dismiss_GetControlledDrone) == 0x000008, "Wrong alignment on FortGameplayAbility_ScoutDrone_Dismiss_GetControlledDrone");
static_assert(sizeof(FortGameplayAbility_ScoutDrone_Dismiss_GetControlledDrone) == 0x000008, "Wrong size on FortGameplayAbility_ScoutDrone_Dismiss_GetControlledDrone");
static_assert(offsetof(FortGameplayAbility_ScoutDrone_Dismiss_GetControlledDrone, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_ScoutDrone_Dismiss_GetControlledDrone::ReturnValue' has a wrong offset!");

// Function ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_MarkPotentialTargets.OnStartHighlightingTarget
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_ScoutDrone_MarkPotentialTargets_OnStartHighlightingTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_ScoutDrone_MarkPotentialTargets_OnStartHighlightingTarget) == 0x000008, "Wrong alignment on FortGameplayAbility_ScoutDrone_MarkPotentialTargets_OnStartHighlightingTarget");
static_assert(sizeof(FortGameplayAbility_ScoutDrone_MarkPotentialTargets_OnStartHighlightingTarget) == 0x000008, "Wrong size on FortGameplayAbility_ScoutDrone_MarkPotentialTargets_OnStartHighlightingTarget");
static_assert(offsetof(FortGameplayAbility_ScoutDrone_MarkPotentialTargets_OnStartHighlightingTarget, Target) == 0x000000, "Member 'FortGameplayAbility_ScoutDrone_MarkPotentialTargets_OnStartHighlightingTarget::Target' has a wrong offset!");

// Function ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_MarkPotentialTargets.OnStoppedHighlightingTarget
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_ScoutDrone_MarkPotentialTargets_OnStoppedHighlightingTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_ScoutDrone_MarkPotentialTargets_OnStoppedHighlightingTarget) == 0x000008, "Wrong alignment on FortGameplayAbility_ScoutDrone_MarkPotentialTargets_OnStoppedHighlightingTarget");
static_assert(sizeof(FortGameplayAbility_ScoutDrone_MarkPotentialTargets_OnStoppedHighlightingTarget) == 0x000008, "Wrong size on FortGameplayAbility_ScoutDrone_MarkPotentialTargets_OnStoppedHighlightingTarget");
static_assert(offsetof(FortGameplayAbility_ScoutDrone_MarkPotentialTargets_OnStoppedHighlightingTarget, Target) == 0x000000, "Member 'FortGameplayAbility_ScoutDrone_MarkPotentialTargets_OnStoppedHighlightingTarget::Target' has a wrong offset!");

// Function ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_PassiveMark.BP_OnTargetStatusChanged
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_ScoutDrone_PassiveMark_BP_OnTargetStatusChanged final
{
public:
	class AActor*                                 ActiveTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_ScoutDrone_PassiveMark_BP_OnTargetStatusChanged) == 0x000008, "Wrong alignment on FortGameplayAbility_ScoutDrone_PassiveMark_BP_OnTargetStatusChanged");
static_assert(sizeof(FortGameplayAbility_ScoutDrone_PassiveMark_BP_OnTargetStatusChanged) == 0x000008, "Wrong size on FortGameplayAbility_ScoutDrone_PassiveMark_BP_OnTargetStatusChanged");
static_assert(offsetof(FortGameplayAbility_ScoutDrone_PassiveMark_BP_OnTargetStatusChanged, ActiveTarget) == 0x000000, "Member 'FortGameplayAbility_ScoutDrone_PassiveMark_BP_OnTargetStatusChanged::ActiveTarget' has a wrong offset!");

// Function ScoutDroneRuntime.FortGameplayAbility_ScoutDrone_PassiveMark.OnActorIndicatorExpired
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_ScoutDrone_PassiveMark_OnActorIndicatorExpired final
{
public:
	class AActor*                                 IndicatedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_ScoutDrone_PassiveMark_OnActorIndicatorExpired) == 0x000008, "Wrong alignment on FortGameplayAbility_ScoutDrone_PassiveMark_OnActorIndicatorExpired");
static_assert(sizeof(FortGameplayAbility_ScoutDrone_PassiveMark_OnActorIndicatorExpired) == 0x000008, "Wrong size on FortGameplayAbility_ScoutDrone_PassiveMark_OnActorIndicatorExpired");
static_assert(offsetof(FortGameplayAbility_ScoutDrone_PassiveMark_OnActorIndicatorExpired, IndicatedActor) == 0x000000, "Member 'FortGameplayAbility_ScoutDrone_PassiveMark_OnActorIndicatorExpired::IndicatedActor' has a wrong offset!");

// Function ScoutDroneRuntime.FortAthenaMutator_ScoutDrone.OnViewTargetChanged
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaMutator_ScoutDrone_OnViewTargetChanged final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldViewTarget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewViewTarget;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_ScoutDrone_OnViewTargetChanged) == 0x000008, "Wrong alignment on FortAthenaMutator_ScoutDrone_OnViewTargetChanged");
static_assert(sizeof(FortAthenaMutator_ScoutDrone_OnViewTargetChanged) == 0x000018, "Wrong size on FortAthenaMutator_ScoutDrone_OnViewTargetChanged");
static_assert(offsetof(FortAthenaMutator_ScoutDrone_OnViewTargetChanged, PlayerController) == 0x000000, "Member 'FortAthenaMutator_ScoutDrone_OnViewTargetChanged::PlayerController' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_ScoutDrone_OnViewTargetChanged, OldViewTarget) == 0x000008, "Member 'FortAthenaMutator_ScoutDrone_OnViewTargetChanged::OldViewTarget' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_ScoutDrone_OnViewTargetChanged, NewViewTarget) == 0x000010, "Member 'FortAthenaMutator_ScoutDrone_OnViewTargetChanged::NewViewTarget' has a wrong offset!");

// Function ScoutDroneRuntime.FortChargingSet_ScoutDroneEnergy.OnRep_Energy
// 0x0028 (0x0028 - 0x0000)
struct FortChargingSet_ScoutDroneEnergy_OnRep_Energy final
{
public:
	struct FFortGameplayAttributeData             OldValue;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortChargingSet_ScoutDroneEnergy_OnRep_Energy) == 0x000008, "Wrong alignment on FortChargingSet_ScoutDroneEnergy_OnRep_Energy");
static_assert(sizeof(FortChargingSet_ScoutDroneEnergy_OnRep_Energy) == 0x000028, "Wrong size on FortChargingSet_ScoutDroneEnergy_OnRep_Energy");
static_assert(offsetof(FortChargingSet_ScoutDroneEnergy_OnRep_Energy, OldValue) == 0x000000, "Member 'FortChargingSet_ScoutDroneEnergy_OnRep_Energy::OldValue' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDrone.GameplayCue_Damage
// 0x00D8 (0x00D8 - 0x0000)
struct FortScoutDrone_GameplayCue_Damage final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00D0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDrone_GameplayCue_Damage) == 0x000008, "Wrong alignment on FortScoutDrone_GameplayCue_Damage");
static_assert(sizeof(FortScoutDrone_GameplayCue_Damage) == 0x0000D8, "Wrong size on FortScoutDrone_GameplayCue_Damage");
static_assert(offsetof(FortScoutDrone_GameplayCue_Damage, EventType) == 0x000000, "Member 'FortScoutDrone_GameplayCue_Damage::EventType' has a wrong offset!");
static_assert(offsetof(FortScoutDrone_GameplayCue_Damage, Parameters) == 0x000008, "Member 'FortScoutDrone_GameplayCue_Damage::Parameters' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDrone.GetForwardAndRightDotProducts_Native
// 0x0008 (0x0008 - 0x0000)
struct FortScoutDrone_GetForwardAndRightDotProducts_Native final
{
public:
	float                                         OutForwardDot;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRightDot;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDrone_GetForwardAndRightDotProducts_Native) == 0x000004, "Wrong alignment on FortScoutDrone_GetForwardAndRightDotProducts_Native");
static_assert(sizeof(FortScoutDrone_GetForwardAndRightDotProducts_Native) == 0x000008, "Wrong size on FortScoutDrone_GetForwardAndRightDotProducts_Native");
static_assert(offsetof(FortScoutDrone_GetForwardAndRightDotProducts_Native, OutForwardDot) == 0x000000, "Member 'FortScoutDrone_GetForwardAndRightDotProducts_Native::OutForwardDot' has a wrong offset!");
static_assert(offsetof(FortScoutDrone_GetForwardAndRightDotProducts_Native, OutRightDot) == 0x000004, "Member 'FortScoutDrone_GetForwardAndRightDotProducts_Native::OutRightDot' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDrone.OnDamagePlayEffects
// 0x0148 (0x0148 - 0x0000)
struct FortScoutDrone_OnDamagePlayEffects final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0040(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AFortPawn*                              InstigatedBy;                                      // 0x0120(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0128(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0130(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDrone_OnDamagePlayEffects) == 0x000008, "Wrong alignment on FortScoutDrone_OnDamagePlayEffects");
static_assert(sizeof(FortScoutDrone_OnDamagePlayEffects) == 0x000148, "Wrong size on FortScoutDrone_OnDamagePlayEffects");
static_assert(offsetof(FortScoutDrone_OnDamagePlayEffects, Damage) == 0x000000, "Member 'FortScoutDrone_OnDamagePlayEffects::Damage' has a wrong offset!");
static_assert(offsetof(FortScoutDrone_OnDamagePlayEffects, DamageTags) == 0x000008, "Member 'FortScoutDrone_OnDamagePlayEffects::DamageTags' has a wrong offset!");
static_assert(offsetof(FortScoutDrone_OnDamagePlayEffects, Momentum) == 0x000028, "Member 'FortScoutDrone_OnDamagePlayEffects::Momentum' has a wrong offset!");
static_assert(offsetof(FortScoutDrone_OnDamagePlayEffects, HitInfo) == 0x000040, "Member 'FortScoutDrone_OnDamagePlayEffects::HitInfo' has a wrong offset!");
static_assert(offsetof(FortScoutDrone_OnDamagePlayEffects, InstigatedBy) == 0x000120, "Member 'FortScoutDrone_OnDamagePlayEffects::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortScoutDrone_OnDamagePlayEffects, DamageCauser) == 0x000128, "Member 'FortScoutDrone_OnDamagePlayEffects::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortScoutDrone_OnDamagePlayEffects, EffectContext) == 0x000130, "Member 'FortScoutDrone_OnDamagePlayEffects::EffectContext' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDrone.OnDeathPlayEffects
// 0x0148 (0x0148 - 0x0000)
struct FortScoutDrone_OnDeathPlayEffects final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0040(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AFortPawn*                              InstigatedBy;                                      // 0x0120(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0128(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0130(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDrone_OnDeathPlayEffects) == 0x000008, "Wrong alignment on FortScoutDrone_OnDeathPlayEffects");
static_assert(sizeof(FortScoutDrone_OnDeathPlayEffects) == 0x000148, "Wrong size on FortScoutDrone_OnDeathPlayEffects");
static_assert(offsetof(FortScoutDrone_OnDeathPlayEffects, Damage) == 0x000000, "Member 'FortScoutDrone_OnDeathPlayEffects::Damage' has a wrong offset!");
static_assert(offsetof(FortScoutDrone_OnDeathPlayEffects, DamageTags) == 0x000008, "Member 'FortScoutDrone_OnDeathPlayEffects::DamageTags' has a wrong offset!");
static_assert(offsetof(FortScoutDrone_OnDeathPlayEffects, Momentum) == 0x000028, "Member 'FortScoutDrone_OnDeathPlayEffects::Momentum' has a wrong offset!");
static_assert(offsetof(FortScoutDrone_OnDeathPlayEffects, HitInfo) == 0x000040, "Member 'FortScoutDrone_OnDeathPlayEffects::HitInfo' has a wrong offset!");
static_assert(offsetof(FortScoutDrone_OnDeathPlayEffects, InstigatedBy) == 0x000120, "Member 'FortScoutDrone_OnDeathPlayEffects::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortScoutDrone_OnDeathPlayEffects, DamageCauser) == 0x000128, "Member 'FortScoutDrone_OnDeathPlayEffects::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortScoutDrone_OnDeathPlayEffects, EffectContext) == 0x000130, "Member 'FortScoutDrone_OnDeathPlayEffects::EffectContext' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDrone.SetTeamMatesIndicator
// 0x0001 (0x0001 - 0x0000)
struct FortScoutDrone_SetTeamMatesIndicator final
{
public:
	bool                                          bState;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDrone_SetTeamMatesIndicator) == 0x000001, "Wrong alignment on FortScoutDrone_SetTeamMatesIndicator");
static_assert(sizeof(FortScoutDrone_SetTeamMatesIndicator) == 0x000001, "Wrong size on FortScoutDrone_SetTeamMatesIndicator");
static_assert(offsetof(FortScoutDrone_SetTeamMatesIndicator, bState) == 0x000000, "Member 'FortScoutDrone_SetTeamMatesIndicator::bState' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDrone.GetControllingPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct FortScoutDrone_GetControllingPlayerPawn final
{
public:
	class AFortPawn*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDrone_GetControllingPlayerPawn) == 0x000008, "Wrong alignment on FortScoutDrone_GetControllingPlayerPawn");
static_assert(sizeof(FortScoutDrone_GetControllingPlayerPawn) == 0x000008, "Wrong size on FortScoutDrone_GetControllingPlayerPawn");
static_assert(offsetof(FortScoutDrone_GetControllingPlayerPawn, ReturnValue) == 0x000000, "Member 'FortScoutDrone_GetControllingPlayerPawn::ReturnValue' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDrone.GetDeltaRotator
// 0x0018 (0x0018 - 0x0000)
struct FortScoutDrone_GetDeltaRotator final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDrone_GetDeltaRotator) == 0x000008, "Wrong alignment on FortScoutDrone_GetDeltaRotator");
static_assert(sizeof(FortScoutDrone_GetDeltaRotator) == 0x000018, "Wrong size on FortScoutDrone_GetDeltaRotator");
static_assert(offsetof(FortScoutDrone_GetDeltaRotator, ReturnValue) == 0x000000, "Member 'FortScoutDrone_GetDeltaRotator::ReturnValue' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDrone.GetHealthPercentage
// 0x0004 (0x0004 - 0x0000)
struct FortScoutDrone_GetHealthPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDrone_GetHealthPercentage) == 0x000004, "Wrong alignment on FortScoutDrone_GetHealthPercentage");
static_assert(sizeof(FortScoutDrone_GetHealthPercentage) == 0x000004, "Wrong size on FortScoutDrone_GetHealthPercentage");
static_assert(offsetof(FortScoutDrone_GetHealthPercentage, ReturnValue) == 0x000000, "Member 'FortScoutDrone_GetHealthPercentage::ReturnValue' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDroneControllingComponent.BP_OnDestructionStarted
// 0x0008 (0x0008 - 0x0000)
struct FortScoutDroneControllingComponent_BP_OnDestructionStarted final
{
public:
	bool                                          bInstantDestruction;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DismissalReason;                                   // 0x0004(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDroneControllingComponent_BP_OnDestructionStarted) == 0x000004, "Wrong alignment on FortScoutDroneControllingComponent_BP_OnDestructionStarted");
static_assert(sizeof(FortScoutDroneControllingComponent_BP_OnDestructionStarted) == 0x000008, "Wrong size on FortScoutDroneControllingComponent_BP_OnDestructionStarted");
static_assert(offsetof(FortScoutDroneControllingComponent_BP_OnDestructionStarted, bInstantDestruction) == 0x000000, "Member 'FortScoutDroneControllingComponent_BP_OnDestructionStarted::bInstantDestruction' has a wrong offset!");
static_assert(offsetof(FortScoutDroneControllingComponent_BP_OnDestructionStarted, DismissalReason) == 0x000004, "Member 'FortScoutDroneControllingComponent_BP_OnDestructionStarted::DismissalReason' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDroneControllingComponent.BP_OnDismissalStarted
// 0x0008 (0x0008 - 0x0000)
struct FortScoutDroneControllingComponent_BP_OnDismissalStarted final
{
public:
	bool                                          bInstantDismissal;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DismissalReason;                                   // 0x0004(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDroneControllingComponent_BP_OnDismissalStarted) == 0x000004, "Wrong alignment on FortScoutDroneControllingComponent_BP_OnDismissalStarted");
static_assert(sizeof(FortScoutDroneControllingComponent_BP_OnDismissalStarted) == 0x000008, "Wrong size on FortScoutDroneControllingComponent_BP_OnDismissalStarted");
static_assert(offsetof(FortScoutDroneControllingComponent_BP_OnDismissalStarted, bInstantDismissal) == 0x000000, "Member 'FortScoutDroneControllingComponent_BP_OnDismissalStarted::bInstantDismissal' has a wrong offset!");
static_assert(offsetof(FortScoutDroneControllingComponent_BP_OnDismissalStarted, DismissalReason) == 0x000004, "Member 'FortScoutDroneControllingComponent_BP_OnDismissalStarted::DismissalReason' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDroneControllingComponent.BP_OnDroneDestroyed
// 0x0004 (0x0004 - 0x0000)
struct FortScoutDroneControllingComponent_BP_OnDroneDestroyed final
{
public:
	struct FGameplayTag                           DismissalReason;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDroneControllingComponent_BP_OnDroneDestroyed) == 0x000004, "Wrong alignment on FortScoutDroneControllingComponent_BP_OnDroneDestroyed");
static_assert(sizeof(FortScoutDroneControllingComponent_BP_OnDroneDestroyed) == 0x000004, "Wrong size on FortScoutDroneControllingComponent_BP_OnDroneDestroyed");
static_assert(offsetof(FortScoutDroneControllingComponent_BP_OnDroneDestroyed, DismissalReason) == 0x000000, "Member 'FortScoutDroneControllingComponent_BP_OnDroneDestroyed::DismissalReason' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDroneControllingComponent.BP_OnPlayerInteractLongUseChanged
// 0x0002 (0x0002 - 0x0000)
struct FortScoutDroneControllingComponent_BP_OnPlayerInteractLongUseChanged final
{
public:
	bool                                          bInteracting;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLongUseInteractionCompleted;                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDroneControllingComponent_BP_OnPlayerInteractLongUseChanged) == 0x000001, "Wrong alignment on FortScoutDroneControllingComponent_BP_OnPlayerInteractLongUseChanged");
static_assert(sizeof(FortScoutDroneControllingComponent_BP_OnPlayerInteractLongUseChanged) == 0x000002, "Wrong size on FortScoutDroneControllingComponent_BP_OnPlayerInteractLongUseChanged");
static_assert(offsetof(FortScoutDroneControllingComponent_BP_OnPlayerInteractLongUseChanged, bInteracting) == 0x000000, "Member 'FortScoutDroneControllingComponent_BP_OnPlayerInteractLongUseChanged::bInteracting' has a wrong offset!");
static_assert(offsetof(FortScoutDroneControllingComponent_BP_OnPlayerInteractLongUseChanged, bLongUseInteractionCompleted) == 0x000001, "Member 'FortScoutDroneControllingComponent_BP_OnPlayerInteractLongUseChanged::bLongUseInteractionCompleted' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDroneControllingComponent.OnControlledDroneDestroyed
// 0x0008 (0x0008 - 0x0000)
struct FortScoutDroneControllingComponent_OnControlledDroneDestroyed final
{
public:
	class AActor*                                 InControlledDrone;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDroneControllingComponent_OnControlledDroneDestroyed) == 0x000008, "Wrong alignment on FortScoutDroneControllingComponent_OnControlledDroneDestroyed");
static_assert(sizeof(FortScoutDroneControllingComponent_OnControlledDroneDestroyed) == 0x000008, "Wrong size on FortScoutDroneControllingComponent_OnControlledDroneDestroyed");
static_assert(offsetof(FortScoutDroneControllingComponent_OnControlledDroneDestroyed, InControlledDrone) == 0x000000, "Member 'FortScoutDroneControllingComponent_OnControlledDroneDestroyed::InControlledDrone' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDroneControllingComponent.OnPlayerInterruptionTagsChanged
// 0x0008 (0x0008 - 0x0000)
struct FortScoutDroneControllingComponent_OnPlayerInterruptionTagsChanged final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDroneControllingComponent_OnPlayerInterruptionTagsChanged) == 0x000004, "Wrong alignment on FortScoutDroneControllingComponent_OnPlayerInterruptionTagsChanged");
static_assert(sizeof(FortScoutDroneControllingComponent_OnPlayerInterruptionTagsChanged) == 0x000008, "Wrong size on FortScoutDroneControllingComponent_OnPlayerInterruptionTagsChanged");
static_assert(offsetof(FortScoutDroneControllingComponent_OnPlayerInterruptionTagsChanged, tag) == 0x000000, "Member 'FortScoutDroneControllingComponent_OnPlayerInterruptionTagsChanged::tag' has a wrong offset!");
static_assert(offsetof(FortScoutDroneControllingComponent_OnPlayerInterruptionTagsChanged, NewCount) == 0x000004, "Member 'FortScoutDroneControllingComponent_OnPlayerInterruptionTagsChanged::NewCount' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDroneControllingComponent.OnWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct FortScoutDroneControllingComponent_OnWeaponEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDroneControllingComponent_OnWeaponEquipped) == 0x000008, "Wrong alignment on FortScoutDroneControllingComponent_OnWeaponEquipped");
static_assert(sizeof(FortScoutDroneControllingComponent_OnWeaponEquipped) == 0x000010, "Wrong size on FortScoutDroneControllingComponent_OnWeaponEquipped");
static_assert(offsetof(FortScoutDroneControllingComponent_OnWeaponEquipped, NewWeapon) == 0x000000, "Member 'FortScoutDroneControllingComponent_OnWeaponEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(FortScoutDroneControllingComponent_OnWeaponEquipped, PrevWeapon) == 0x000008, "Member 'FortScoutDroneControllingComponent_OnWeaponEquipped::PrevWeapon' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDroneControllingComponent.GetControlledDrone
// 0x0008 (0x0008 - 0x0000)
struct FortScoutDroneControllingComponent_GetControlledDrone final
{
public:
	class AFortScoutDrone*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDroneControllingComponent_GetControlledDrone) == 0x000008, "Wrong alignment on FortScoutDroneControllingComponent_GetControlledDrone");
static_assert(sizeof(FortScoutDroneControllingComponent_GetControlledDrone) == 0x000008, "Wrong size on FortScoutDroneControllingComponent_GetControlledDrone");
static_assert(offsetof(FortScoutDroneControllingComponent_GetControlledDrone, ReturnValue) == 0x000000, "Member 'FortScoutDroneControllingComponent_GetControlledDrone::ReturnValue' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDronePickupManager.OnAttachedPawnDied
// 0x0060 (0x0060 - 0x0000)
struct FortScoutDronePickupManager_OnAttachedPawnDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDronePickupManager_OnAttachedPawnDied) == 0x000008, "Wrong alignment on FortScoutDronePickupManager_OnAttachedPawnDied");
static_assert(sizeof(FortScoutDronePickupManager_OnAttachedPawnDied) == 0x000060, "Wrong size on FortScoutDronePickupManager_OnAttachedPawnDied");
static_assert(offsetof(FortScoutDronePickupManager_OnAttachedPawnDied, DamagedActor) == 0x000000, "Member 'FortScoutDronePickupManager_OnAttachedPawnDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortScoutDronePickupManager_OnAttachedPawnDied, Damage) == 0x000008, "Member 'FortScoutDronePickupManager_OnAttachedPawnDied::Damage' has a wrong offset!");
static_assert(offsetof(FortScoutDronePickupManager_OnAttachedPawnDied, InstigatedBy) == 0x000010, "Member 'FortScoutDronePickupManager_OnAttachedPawnDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortScoutDronePickupManager_OnAttachedPawnDied, DamageCauser) == 0x000018, "Member 'FortScoutDronePickupManager_OnAttachedPawnDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortScoutDronePickupManager_OnAttachedPawnDied, HitLocation) == 0x000020, "Member 'FortScoutDronePickupManager_OnAttachedPawnDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortScoutDronePickupManager_OnAttachedPawnDied, FHitComponent) == 0x000038, "Member 'FortScoutDronePickupManager_OnAttachedPawnDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortScoutDronePickupManager_OnAttachedPawnDied, BoneName) == 0x000040, "Member 'FortScoutDronePickupManager_OnAttachedPawnDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortScoutDronePickupManager_OnAttachedPawnDied, Momentum) == 0x000048, "Member 'FortScoutDronePickupManager_OnAttachedPawnDied::Momentum' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDronePickupManager.OnPawnDBNOStateChanged
// 0x0010 (0x0010 - 0x0000)
struct FortScoutDronePickupManager_OnPawnDBNOStateChanged final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDBNO;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortScoutDronePickupManager_OnPawnDBNOStateChanged) == 0x000008, "Wrong alignment on FortScoutDronePickupManager_OnPawnDBNOStateChanged");
static_assert(sizeof(FortScoutDronePickupManager_OnPawnDBNOStateChanged) == 0x000010, "Wrong size on FortScoutDronePickupManager_OnPawnDBNOStateChanged");
static_assert(offsetof(FortScoutDronePickupManager_OnPawnDBNOStateChanged, Pawn) == 0x000000, "Member 'FortScoutDronePickupManager_OnPawnDBNOStateChanged::Pawn' has a wrong offset!");
static_assert(offsetof(FortScoutDronePickupManager_OnPawnDBNOStateChanged, bIsDBNO) == 0x000008, "Member 'FortScoutDronePickupManager_OnPawnDBNOStateChanged::bIsDBNO' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDronePickupManager.ServerUpdateItemAttachment
// 0x0018 (0x0018 - 0x0000)
struct FortScoutDronePickupManager_ServerUpdateItemAttachment final
{
public:
	struct FVector                                CalculatedItemOffset;                              // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDronePickupManager_ServerUpdateItemAttachment) == 0x000008, "Wrong alignment on FortScoutDronePickupManager_ServerUpdateItemAttachment");
static_assert(sizeof(FortScoutDronePickupManager_ServerUpdateItemAttachment) == 0x000018, "Wrong size on FortScoutDronePickupManager_ServerUpdateItemAttachment");
static_assert(offsetof(FortScoutDronePickupManager_ServerUpdateItemAttachment, CalculatedItemOffset) == 0x000000, "Member 'FortScoutDronePickupManager_ServerUpdateItemAttachment::CalculatedItemOffset' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDronePickupManager.HasAnyAttachedActors
// 0x0001 (0x0001 - 0x0000)
struct FortScoutDronePickupManager_HasAnyAttachedActors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDronePickupManager_HasAnyAttachedActors) == 0x000001, "Wrong alignment on FortScoutDronePickupManager_HasAnyAttachedActors");
static_assert(sizeof(FortScoutDronePickupManager_HasAnyAttachedActors) == 0x000001, "Wrong size on FortScoutDronePickupManager_HasAnyAttachedActors");
static_assert(offsetof(FortScoutDronePickupManager_HasAnyAttachedActors, ReturnValue) == 0x000000, "Member 'FortScoutDronePickupManager_HasAnyAttachedActors::ReturnValue' has a wrong offset!");

// Function ScoutDroneRuntime.FortScoutDronePickupManager.HasAPawnAtached
// 0x0001 (0x0001 - 0x0000)
struct FortScoutDronePickupManager_HasAPawnAtached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScoutDronePickupManager_HasAPawnAtached) == 0x000001, "Wrong alignment on FortScoutDronePickupManager_HasAPawnAtached");
static_assert(sizeof(FortScoutDronePickupManager_HasAPawnAtached) == 0x000001, "Wrong size on FortScoutDronePickupManager_HasAPawnAtached");
static_assert(offsetof(FortScoutDronePickupManager_HasAPawnAtached, ReturnValue) == 0x000000, "Member 'FortScoutDronePickupManager_HasAPawnAtached::ReturnValue' has a wrong offset!");

}

