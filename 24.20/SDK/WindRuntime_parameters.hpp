#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WindRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WindRuntime.WindCheatManager.InflateBalloonOnSelf
// 0x0004 (0x0004 - 0x0000)
struct WindCheatManager_InflateBalloonOnSelf final
{
public:
	int32                                         NumBalloons;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindCheatManager_InflateBalloonOnSelf) == 0x000004, "Wrong alignment on WindCheatManager_InflateBalloonOnSelf");
static_assert(sizeof(WindCheatManager_InflateBalloonOnSelf) == 0x000004, "Wrong size on WindCheatManager_InflateBalloonOnSelf");
static_assert(offsetof(WindCheatManager_InflateBalloonOnSelf, NumBalloons) == 0x000000, "Member 'WindCheatManager_InflateBalloonOnSelf::NumBalloons' has a wrong offset!");

// Function WindRuntime.WindCheatManager.ReleaseBalloonOnSelf
// 0x0004 (0x0004 - 0x0000)
struct WindCheatManager_ReleaseBalloonOnSelf final
{
public:
	int32                                         NumBalloons;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindCheatManager_ReleaseBalloonOnSelf) == 0x000004, "Wrong alignment on WindCheatManager_ReleaseBalloonOnSelf");
static_assert(sizeof(WindCheatManager_ReleaseBalloonOnSelf) == 0x000004, "Wrong size on WindCheatManager_ReleaseBalloonOnSelf");
static_assert(offsetof(WindCheatManager_ReleaseBalloonOnSelf, NumBalloons) == 0x000000, "Member 'WindCheatManager_ReleaseBalloonOnSelf::NumBalloons' has a wrong offset!");

// Function WindRuntime.WindField.AddCollider
// 0x0008 (0x0008 - 0x0000)
struct WindField_AddCollider final
{
public:
	class UShapeComponent*                        ShapeComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindField_AddCollider) == 0x000008, "Wrong alignment on WindField_AddCollider");
static_assert(sizeof(WindField_AddCollider) == 0x000008, "Wrong size on WindField_AddCollider");
static_assert(offsetof(WindField_AddCollider, ShapeComponent) == 0x000000, "Member 'WindField_AddCollider::ShapeComponent' has a wrong offset!");

// Function WindRuntime.WindField.AddIgnoredActor
// 0x0008 (0x0008 - 0x0000)
struct WindField_AddIgnoredActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindField_AddIgnoredActor) == 0x000008, "Wrong alignment on WindField_AddIgnoredActor");
static_assert(sizeof(WindField_AddIgnoredActor) == 0x000008, "Wrong size on WindField_AddIgnoredActor");
static_assert(offsetof(WindField_AddIgnoredActor, Actor) == 0x000000, "Member 'WindField_AddIgnoredActor::Actor' has a wrong offset!");

// Function WindRuntime.WindField.OnBeginOverlap
// 0x0100 (0x0100 - 0x0000)
struct WindField_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindField_OnBeginOverlap) == 0x000008, "Wrong alignment on WindField_OnBeginOverlap");
static_assert(sizeof(WindField_OnBeginOverlap) == 0x000100, "Wrong size on WindField_OnBeginOverlap");
static_assert(offsetof(WindField_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'WindField_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(WindField_OnBeginOverlap, Other) == 0x000008, "Member 'WindField_OnBeginOverlap::Other' has a wrong offset!");
static_assert(offsetof(WindField_OnBeginOverlap, OtherComp) == 0x000010, "Member 'WindField_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(WindField_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'WindField_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(WindField_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'WindField_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(WindField_OnBeginOverlap, SweepResult) == 0x000020, "Member 'WindField_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function WindRuntime.WindField.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct WindField_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WindField_OnEndOverlap) == 0x000008, "Wrong alignment on WindField_OnEndOverlap");
static_assert(sizeof(WindField_OnEndOverlap) == 0x000020, "Wrong size on WindField_OnEndOverlap");
static_assert(offsetof(WindField_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'WindField_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(WindField_OnEndOverlap, Other) == 0x000008, "Member 'WindField_OnEndOverlap::Other' has a wrong offset!");
static_assert(offsetof(WindField_OnEndOverlap, OtherComp) == 0x000010, "Member 'WindField_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(WindField_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'WindField_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function WindRuntime.WindField.RemoveCollider
// 0x0008 (0x0008 - 0x0000)
struct WindField_RemoveCollider final
{
public:
	class UShapeComponent*                        ShapeComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindField_RemoveCollider) == 0x000008, "Wrong alignment on WindField_RemoveCollider");
static_assert(sizeof(WindField_RemoveCollider) == 0x000008, "Wrong size on WindField_RemoveCollider");
static_assert(offsetof(WindField_RemoveCollider, ShapeComponent) == 0x000000, "Member 'WindField_RemoveCollider::ShapeComponent' has a wrong offset!");

// Function WindRuntime.WindField.RemoveIgnoredActor
// 0x0008 (0x0008 - 0x0000)
struct WindField_RemoveIgnoredActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindField_RemoveIgnoredActor) == 0x000008, "Wrong alignment on WindField_RemoveIgnoredActor");
static_assert(sizeof(WindField_RemoveIgnoredActor) == 0x000008, "Wrong size on WindField_RemoveIgnoredActor");
static_assert(offsetof(WindField_RemoveIgnoredActor, Actor) == 0x000000, "Member 'WindField_RemoveIgnoredActor::Actor' has a wrong offset!");

// Function WindRuntime.WindField.SetActive
// 0x0001 (0x0001 - 0x0000)
struct WindField_SetActive final
{
public:
	bool                                          bInIsActive;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindField_SetActive) == 0x000001, "Wrong alignment on WindField_SetActive");
static_assert(sizeof(WindField_SetActive) == 0x000001, "Wrong size on WindField_SetActive");
static_assert(offsetof(WindField_SetActive, bInIsActive) == 0x000000, "Member 'WindField_SetActive::bInIsActive' has a wrong offset!");

// Function WindRuntime.WindSplineComponent.GetClosestActiveLocations
// 0x0048 (0x0048 - 0x0000)
struct WindSplineComponent_GetClosestActiveLocations final
{
public:
	struct FVector                                InTargetLocation;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsClosestPointActive;                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ClosestPointOnSpline;                              // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ClosestActiveLocations;                            // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindSplineComponent_GetClosestActiveLocations) == 0x000008, "Wrong alignment on WindSplineComponent_GetClosestActiveLocations");
static_assert(sizeof(WindSplineComponent_GetClosestActiveLocations) == 0x000048, "Wrong size on WindSplineComponent_GetClosestActiveLocations");
static_assert(offsetof(WindSplineComponent_GetClosestActiveLocations, InTargetLocation) == 0x000000, "Member 'WindSplineComponent_GetClosestActiveLocations::InTargetLocation' has a wrong offset!");
static_assert(offsetof(WindSplineComponent_GetClosestActiveLocations, bIsClosestPointActive) == 0x000018, "Member 'WindSplineComponent_GetClosestActiveLocations::bIsClosestPointActive' has a wrong offset!");
static_assert(offsetof(WindSplineComponent_GetClosestActiveLocations, ClosestPointOnSpline) == 0x000020, "Member 'WindSplineComponent_GetClosestActiveLocations::ClosestPointOnSpline' has a wrong offset!");
static_assert(offsetof(WindSplineComponent_GetClosestActiveLocations, ClosestActiveLocations) == 0x000038, "Member 'WindSplineComponent_GetClosestActiveLocations::ClosestActiveLocations' has a wrong offset!");

// Function WindRuntime.WindSplineComponent.GetTargetingRadius
// 0x0004 (0x0004 - 0x0000)
struct WindSplineComponent_GetTargetingRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindSplineComponent_GetTargetingRadius) == 0x000004, "Wrong alignment on WindSplineComponent_GetTargetingRadius");
static_assert(sizeof(WindSplineComponent_GetTargetingRadius) == 0x000004, "Wrong size on WindSplineComponent_GetTargetingRadius");
static_assert(offsetof(WindSplineComponent_GetTargetingRadius, ReturnValue) == 0x000000, "Member 'WindSplineComponent_GetTargetingRadius::ReturnValue' has a wrong offset!");

// Function WindRuntime.WindSplineComponent.GetWindDataAtLocation
// 0x0038 (0x0038 - 0x0000)
struct WindSplineComponent_GetWindDataAtLocation final
{
public:
	struct FVector                                InTargetLocation;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutDirection;                                      // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutAttenuation;                                    // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WindSplineComponent_GetWindDataAtLocation) == 0x000008, "Wrong alignment on WindSplineComponent_GetWindDataAtLocation");
static_assert(sizeof(WindSplineComponent_GetWindDataAtLocation) == 0x000038, "Wrong size on WindSplineComponent_GetWindDataAtLocation");
static_assert(offsetof(WindSplineComponent_GetWindDataAtLocation, InTargetLocation) == 0x000000, "Member 'WindSplineComponent_GetWindDataAtLocation::InTargetLocation' has a wrong offset!");
static_assert(offsetof(WindSplineComponent_GetWindDataAtLocation, OutDirection) == 0x000018, "Member 'WindSplineComponent_GetWindDataAtLocation::OutDirection' has a wrong offset!");
static_assert(offsetof(WindSplineComponent_GetWindDataAtLocation, OutAttenuation) == 0x000030, "Member 'WindSplineComponent_GetWindDataAtLocation::OutAttenuation' has a wrong offset!");

}

