#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PoseSearch

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum PoseSearch.EPoseSearchBooleanRequest
// NumValues: 0x0006
enum class EPoseSearchBooleanRequest : uint8
{
	FalseValue                               = 0,
	TrueValue                                = 1,
	Indifferent                              = 2,
	Num                                      = 3,
	Invalid                                  = 3,
	EPoseSearchBooleanRequest_MAX            = 4,
};

// Enum PoseSearch.EPoseSearchMode
// NumValues: 0x0007
enum class EPoseSearchMode : uint32
{
	BruteForce                               = 0,
	PCAKDTree                                = 1,
	PCAKDTree_Validate                       = 2,
	PCAKDTree_Compare                        = 3,
	Num                                      = 4,
	Invalid                                  = 4,
	EPoseSearchMode_MAX                      = 5,
};

// Enum PoseSearch.EPoseSearchDataPreprocessor
// NumValues: 0x0006
enum class EPoseSearchDataPreprocessor : uint32
{
	None                                     = 0,
	Normalize                                = 1,
	NormalizeOnlyByDeviation                 = 2,
	Num                                      = 3,
	Invalid                                  = 3,
	EPoseSearchDataPreprocessor_MAX          = 4,
};

// Enum PoseSearch.EPoseSearchPoseFlags
// NumValues: 0x0003
enum class EPoseSearchPoseFlags : uint32
{
	None                                     = 0,
	BlockTransition                          = 1,
	EPoseSearchPoseFlags_MAX                 = 2,
};

// Enum PoseSearch.ESearchIndexAssetType
// NumValues: 0x0004
enum class ESearchIndexAssetType : uint32
{
	Invalid                                  = 0,
	Sequence                                 = 1,
	BlendSpace                               = 2,
	ESearchIndexAssetType_MAX                = 3,
};

// Enum PoseSearch.EPoseSearchMirrorOption
// NumValues: 0x0006
enum class EPoseSearchMirrorOption : uint32
{
	UnmirroredOnly                           = 0,
	MirroredOnly                             = 1,
	UnmirroredAndMirrored                    = 2,
	Num                                      = 3,
	Invalid                                  = 3,
	EPoseSearchMirrorOption_MAX              = 4,
};

// Enum PoseSearch.EPoseSearchPostSearchStatus
// NumValues: 0x0003
enum class EPoseSearchPostSearchStatus : uint8
{
	Continue                                 = 0,
	Stop                                     = 1,
	EPoseSearchPostSearchStatus_MAX          = 2,
};

// Enum PoseSearch.EInputQueryPose
// NumValues: 0x0006
enum class EInputQueryPose : uint8
{
	UseCharacterPose                         = 0,
	UseContinuingPose                        = 1,
	UseInterpolatedContinuingPose            = 2,
	Num                                      = 3,
	Invalid                                  = 3,
	EInputQueryPose_MAX                      = 4,
};

// Enum PoseSearch.EHeadingAxis
// NumValues: 0x0006
enum class EHeadingAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	Num                                      = 3,
	Invalid                                  = 3,
	EHeadingAxis_MAX                         = 4,
};

// Enum PoseSearch.EPoseSearchBoneFlags
// NumValues: 0x0005
enum class EPoseSearchBoneFlags : uint8
{
	Velocity                                 = 1,
	Position                                 = 2,
	Rotation                                 = 4,
	Phase                                    = 8,
	EPoseSearchBoneFlags_MAX                 = 9,
};

// Enum PoseSearch.EPoseSearchFeatureDomain
// NumValues: 0x0005
enum class EPoseSearchFeatureDomain : uint32
{
	Time                                     = 0,
	Distance                                 = 1,
	Num                                      = 2,
	Invalid                                  = 2,
	EPoseSearchFeatureDomain_MAX             = 3,
};

// Enum PoseSearch.EPoseSearchTrajectoryFlags
// NumValues: 0x0009
enum class EPoseSearchTrajectoryFlags : uint8
{
	Velocity                                 = 1,
	Position                                 = 2,
	VelocityDirection                        = 4,
	FacingDirection                          = 8,
	VelocityXY                               = 16,
	PositionXY                               = 32,
	VelocityDirectionXY                      = 64,
	FacingDirectionXY                        = 128,
	EPoseSearchTrajectoryFlags_MAX           = 129,
};

// Enum PoseSearch.EMotionMatchingFlags
// NumValues: 0x0004
enum class EMotionMatchingFlags : uint8
{
	None                                     = 0,
	JumpedToPose                             = 1,
	JumpedToFollowUp                         = 2,
	EMotionMatchingFlags_MAX                 = 3,
};

// ScriptStruct PoseSearch.PoseSearchAnimPlayer
// 0x01B0 (0x01B0 - 0x0000)
struct alignas(0x08) FPoseSearchAnimPlayer final
{
public:
	uint8                                         Pad_0[0x1B0];                                      // 0x0000(0x01B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseSearchAnimPlayer) == 0x000008, "Wrong alignment on FPoseSearchAnimPlayer");
static_assert(sizeof(FPoseSearchAnimPlayer) == 0x0001B0, "Wrong size on FPoseSearchAnimPlayer");

// ScriptStruct PoseSearch.AnimNode_BlendStack
// 0x0020 (0x0058 - 0x0038)
struct FAnimNode_BlendStack final : public FAnimNode_AssetPlayerBase
{
public:
	uint8                                         Pad_38[0x20];                                      // 0x0038(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendStack) == 0x000008, "Wrong alignment on FAnimNode_BlendStack");
static_assert(sizeof(FAnimNode_BlendStack) == 0x000058, "Wrong size on FAnimNode_BlendStack");

// ScriptStruct PoseSearch.MotionMatchingSettings
// 0x0028 (0x0028 - 0x0000)
struct FMotionMatchingSettings final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxActiveBlends;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendProfile*                          BlendProfile;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendOption;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MirrorChangeBlendTime;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoseJumpThresholdTime;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoseReselectHistory;                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchThrottleTime;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMotionMatchingSettings) == 0x000008, "Wrong alignment on FMotionMatchingSettings");
static_assert(sizeof(FMotionMatchingSettings) == 0x000028, "Wrong size on FMotionMatchingSettings");
static_assert(offsetof(FMotionMatchingSettings, BlendTime) == 0x000000, "Member 'FMotionMatchingSettings::BlendTime' has a wrong offset!");
static_assert(offsetof(FMotionMatchingSettings, MaxActiveBlends) == 0x000004, "Member 'FMotionMatchingSettings::MaxActiveBlends' has a wrong offset!");
static_assert(offsetof(FMotionMatchingSettings, BlendProfile) == 0x000008, "Member 'FMotionMatchingSettings::BlendProfile' has a wrong offset!");
static_assert(offsetof(FMotionMatchingSettings, BlendOption) == 0x000010, "Member 'FMotionMatchingSettings::BlendOption' has a wrong offset!");
static_assert(offsetof(FMotionMatchingSettings, MirrorChangeBlendTime) == 0x000014, "Member 'FMotionMatchingSettings::MirrorChangeBlendTime' has a wrong offset!");
static_assert(offsetof(FMotionMatchingSettings, PoseJumpThresholdTime) == 0x000018, "Member 'FMotionMatchingSettings::PoseJumpThresholdTime' has a wrong offset!");
static_assert(offsetof(FMotionMatchingSettings, PoseReselectHistory) == 0x00001C, "Member 'FMotionMatchingSettings::PoseReselectHistory' has a wrong offset!");
static_assert(offsetof(FMotionMatchingSettings, SearchThrottleTime) == 0x000020, "Member 'FMotionMatchingSettings::SearchThrottleTime' has a wrong offset!");

// ScriptStruct PoseSearch.AnimNode_MotionMatching
// 0x01E8 (0x0220 - 0x0038)
struct alignas(0x10) FAnimNode_MotionMatching final : public FAnimNode_AssetPlayerBase
{
public:
	struct FPoseLink                              Source;                                            // 0x0038(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	class UPoseSearchSearchableAsset*             Searchable;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActiveTagsContainer;                               // 0x0050(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTrajectorySampleRange                 Trajectory;                                        // 0x0070(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMotionMatchingSettings                Settings;                                          // 0x0088(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bResetOnBecomingRelevant;                          // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceInterrupt;                                   // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x16E];                                     // 0x00B2(0x016E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_MotionMatching) == 0x000010, "Wrong alignment on FAnimNode_MotionMatching");
static_assert(sizeof(FAnimNode_MotionMatching) == 0x000220, "Wrong size on FAnimNode_MotionMatching");
static_assert(offsetof(FAnimNode_MotionMatching, Source) == 0x000038, "Member 'FAnimNode_MotionMatching::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, Searchable) == 0x000048, "Member 'FAnimNode_MotionMatching::Searchable' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, ActiveTagsContainer) == 0x000050, "Member 'FAnimNode_MotionMatching::ActiveTagsContainer' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, Trajectory) == 0x000070, "Member 'FAnimNode_MotionMatching::Trajectory' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, Settings) == 0x000088, "Member 'FAnimNode_MotionMatching::Settings' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, bResetOnBecomingRelevant) == 0x0000B0, "Member 'FAnimNode_MotionMatching::bResetOnBecomingRelevant' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, bForceInterrupt) == 0x0000B1, "Member 'FAnimNode_MotionMatching::bForceInterrupt' has a wrong offset!");

// ScriptStruct PoseSearch.AnimNode_PoseSearchHistoryCollector
// 0x0040 (0x0050 - 0x0010)
struct FAnimNode_PoseSearchHistoryCollector final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PoseCount;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoseDuration;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRootMotion;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x27];                                      // 0x0029(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PoseSearchHistoryCollector) == 0x000008, "Wrong alignment on FAnimNode_PoseSearchHistoryCollector");
static_assert(sizeof(FAnimNode_PoseSearchHistoryCollector) == 0x000050, "Wrong size on FAnimNode_PoseSearchHistoryCollector");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector, Source) == 0x000010, "Member 'FAnimNode_PoseSearchHistoryCollector::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector, PoseCount) == 0x000020, "Member 'FAnimNode_PoseSearchHistoryCollector::PoseCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector, PoseDuration) == 0x000024, "Member 'FAnimNode_PoseSearchHistoryCollector::PoseDuration' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector, bUseRootMotion) == 0x000028, "Member 'FAnimNode_PoseSearchHistoryCollector::bUseRootMotion' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchExtrapolationParameters
// 0x000C (0x000C - 0x0000)
struct FPoseSearchExtrapolationParameters final
{
public:
	float                                         AngularSpeedThreshold;                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearSpeedThreshold;                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleTime;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchExtrapolationParameters) == 0x000004, "Wrong alignment on FPoseSearchExtrapolationParameters");
static_assert(sizeof(FPoseSearchExtrapolationParameters) == 0x00000C, "Wrong size on FPoseSearchExtrapolationParameters");
static_assert(offsetof(FPoseSearchExtrapolationParameters, AngularSpeedThreshold) == 0x000000, "Member 'FPoseSearchExtrapolationParameters::AngularSpeedThreshold' has a wrong offset!");
static_assert(offsetof(FPoseSearchExtrapolationParameters, LinearSpeedThreshold) == 0x000004, "Member 'FPoseSearchExtrapolationParameters::LinearSpeedThreshold' has a wrong offset!");
static_assert(offsetof(FPoseSearchExtrapolationParameters, SampleTime) == 0x000008, "Member 'FPoseSearchExtrapolationParameters::SampleTime' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchExcludeFromDatabaseParameters
// 0x0008 (0x0008 - 0x0000)
struct FPoseSearchExcludeFromDatabaseParameters final
{
public:
	float                                         SequenceStartInterval;                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SequenceEndInterval;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchExcludeFromDatabaseParameters) == 0x000004, "Wrong alignment on FPoseSearchExcludeFromDatabaseParameters");
static_assert(sizeof(FPoseSearchExcludeFromDatabaseParameters) == 0x000008, "Wrong size on FPoseSearchExcludeFromDatabaseParameters");
static_assert(offsetof(FPoseSearchExcludeFromDatabaseParameters, SequenceStartInterval) == 0x000000, "Member 'FPoseSearchExcludeFromDatabaseParameters::SequenceStartInterval' has a wrong offset!");
static_assert(offsetof(FPoseSearchExcludeFromDatabaseParameters, SequenceEndInterval) == 0x000004, "Member 'FPoseSearchExcludeFromDatabaseParameters::SequenceEndInterval' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchSchemaColorPreset
// 0x0020 (0x0020 - 0x0000)
struct FPoseSearchSchemaColorPreset final
{
public:
	struct FLinearColor                           Query;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Result;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchSchemaColorPreset) == 0x000004, "Wrong alignment on FPoseSearchSchemaColorPreset");
static_assert(sizeof(FPoseSearchSchemaColorPreset) == 0x000020, "Wrong size on FPoseSearchSchemaColorPreset");
static_assert(offsetof(FPoseSearchSchemaColorPreset, Query) == 0x000000, "Member 'FPoseSearchSchemaColorPreset::Query' has a wrong offset!");
static_assert(offsetof(FPoseSearchSchemaColorPreset, Result) == 0x000010, "Member 'FPoseSearchSchemaColorPreset::Result' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchPoseMetadata
// 0x000C (0x000C - 0x0000)
struct FPoseSearchPoseMetadata final
{
public:
	EPoseSearchPoseFlags                          Flags;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CostAddend;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContinuingPoseCostAddend;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchPoseMetadata) == 0x000004, "Wrong alignment on FPoseSearchPoseMetadata");
static_assert(sizeof(FPoseSearchPoseMetadata) == 0x00000C, "Wrong size on FPoseSearchPoseMetadata");
static_assert(offsetof(FPoseSearchPoseMetadata, Flags) == 0x000000, "Member 'FPoseSearchPoseMetadata::Flags' has a wrong offset!");
static_assert(offsetof(FPoseSearchPoseMetadata, CostAddend) == 0x000004, "Member 'FPoseSearchPoseMetadata::CostAddend' has a wrong offset!");
static_assert(offsetof(FPoseSearchPoseMetadata, ContinuingPoseCostAddend) == 0x000008, "Member 'FPoseSearchPoseMetadata::ContinuingPoseCostAddend' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchIndexAsset
// 0x0038 (0x0038 - 0x0000)
struct FPoseSearchIndexAsset final
{
public:
	ESearchIndexAssetType                         Type;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceAssetIdx;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrored;                                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BlendParameters;                                   // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         SamplingInterval;                                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstPoseIdx;                                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPoses;                                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchIndexAsset) == 0x000008, "Wrong alignment on FPoseSearchIndexAsset");
static_assert(sizeof(FPoseSearchIndexAsset) == 0x000038, "Wrong size on FPoseSearchIndexAsset");
static_assert(offsetof(FPoseSearchIndexAsset, Type) == 0x000000, "Member 'FPoseSearchIndexAsset::Type' has a wrong offset!");
static_assert(offsetof(FPoseSearchIndexAsset, SourceAssetIdx) == 0x000004, "Member 'FPoseSearchIndexAsset::SourceAssetIdx' has a wrong offset!");
static_assert(offsetof(FPoseSearchIndexAsset, bMirrored) == 0x000008, "Member 'FPoseSearchIndexAsset::bMirrored' has a wrong offset!");
static_assert(offsetof(FPoseSearchIndexAsset, BlendParameters) == 0x000010, "Member 'FPoseSearchIndexAsset::BlendParameters' has a wrong offset!");
static_assert(offsetof(FPoseSearchIndexAsset, SamplingInterval) == 0x000028, "Member 'FPoseSearchIndexAsset::SamplingInterval' has a wrong offset!");
static_assert(offsetof(FPoseSearchIndexAsset, FirstPoseIdx) == 0x000030, "Member 'FPoseSearchIndexAsset::FirstPoseIdx' has a wrong offset!");
static_assert(offsetof(FPoseSearchIndexAsset, NumPoses) == 0x000034, "Member 'FPoseSearchIndexAsset::NumPoses' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchIndex
// 0x00A0 (0x00A0 - 0x0000)
struct FPoseSearchIndex final
{
public:
	int32                                         NumPoses;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Values;                                            // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PCAValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PCAProjectionMatrix;                               // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<float>                                 Mean;                                              // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<float>                                 WeightsSqrt;                                       // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FPoseSearchPoseMetadata>        PoseMetadata;                                      // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UPoseSearchSchema*                      Schema;                                            // 0x0080(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPoseSearchIndexAsset>          Assets;                                            // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MinCostAddend;                                     // 0x0098(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseSearchIndex) == 0x000008, "Wrong alignment on FPoseSearchIndex");
static_assert(sizeof(FPoseSearchIndex) == 0x0000A0, "Wrong size on FPoseSearchIndex");
static_assert(offsetof(FPoseSearchIndex, NumPoses) == 0x000000, "Member 'FPoseSearchIndex::NumPoses' has a wrong offset!");
static_assert(offsetof(FPoseSearchIndex, Values) == 0x000008, "Member 'FPoseSearchIndex::Values' has a wrong offset!");
static_assert(offsetof(FPoseSearchIndex, PCAValues) == 0x000018, "Member 'FPoseSearchIndex::PCAValues' has a wrong offset!");
static_assert(offsetof(FPoseSearchIndex, PCAProjectionMatrix) == 0x000040, "Member 'FPoseSearchIndex::PCAProjectionMatrix' has a wrong offset!");
static_assert(offsetof(FPoseSearchIndex, Mean) == 0x000050, "Member 'FPoseSearchIndex::Mean' has a wrong offset!");
static_assert(offsetof(FPoseSearchIndex, WeightsSqrt) == 0x000060, "Member 'FPoseSearchIndex::WeightsSqrt' has a wrong offset!");
static_assert(offsetof(FPoseSearchIndex, PoseMetadata) == 0x000070, "Member 'FPoseSearchIndex::PoseMetadata' has a wrong offset!");
static_assert(offsetof(FPoseSearchIndex, Schema) == 0x000080, "Member 'FPoseSearchIndex::Schema' has a wrong offset!");
static_assert(offsetof(FPoseSearchIndex, Assets) == 0x000088, "Member 'FPoseSearchIndex::Assets' has a wrong offset!");
static_assert(offsetof(FPoseSearchIndex, MinCostAddend) == 0x000098, "Member 'FPoseSearchIndex::MinCostAddend' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchDatabaseAnimationAssetBase
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPoseSearchDatabaseAnimationAssetBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseSearchDatabaseAnimationAssetBase) == 0x000008, "Wrong alignment on FPoseSearchDatabaseAnimationAssetBase");
static_assert(sizeof(FPoseSearchDatabaseAnimationAssetBase) == 0x000008, "Wrong size on FPoseSearchDatabaseAnimationAssetBase");

// ScriptStruct PoseSearch.PoseSearchDatabaseSequence
// 0x0028 (0x0030 - 0x0008)
struct FPoseSearchDatabaseSequence final : public FPoseSearchDatabaseAnimationAssetBase
{
public:
	class UAnimSequence*                          Sequence;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         SamplingRange;                                     // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPoseSearchMirrorOption                       MirrorOption;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          LeadInSequence;                                    // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          FollowUpSequence;                                  // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchDatabaseSequence) == 0x000008, "Wrong alignment on FPoseSearchDatabaseSequence");
static_assert(sizeof(FPoseSearchDatabaseSequence) == 0x000030, "Wrong size on FPoseSearchDatabaseSequence");
static_assert(offsetof(FPoseSearchDatabaseSequence, Sequence) == 0x000008, "Member 'FPoseSearchDatabaseSequence::Sequence' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseSequence, bEnabled) == 0x000010, "Member 'FPoseSearchDatabaseSequence::bEnabled' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseSequence, SamplingRange) == 0x000014, "Member 'FPoseSearchDatabaseSequence::SamplingRange' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseSequence, MirrorOption) == 0x00001C, "Member 'FPoseSearchDatabaseSequence::MirrorOption' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseSequence, LeadInSequence) == 0x000020, "Member 'FPoseSearchDatabaseSequence::LeadInSequence' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseSequence, FollowUpSequence) == 0x000028, "Member 'FPoseSearchDatabaseSequence::FollowUpSequence' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchDatabaseBlendSpace
// 0x0020 (0x0028 - 0x0008)
struct FPoseSearchDatabaseBlendSpace final : public FPoseSearchDatabaseAnimationAssetBase
{
public:
	class UBlendSpace*                            BlendSpace;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EPoseSearchMirrorOption                       MirrorOption;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGridForSampling;                               // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfHorizontalSamples;                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfVerticalSamples;                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseSearchDatabaseBlendSpace) == 0x000008, "Wrong alignment on FPoseSearchDatabaseBlendSpace");
static_assert(sizeof(FPoseSearchDatabaseBlendSpace) == 0x000028, "Wrong size on FPoseSearchDatabaseBlendSpace");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, BlendSpace) == 0x000008, "Member 'FPoseSearchDatabaseBlendSpace::BlendSpace' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, bEnabled) == 0x000010, "Member 'FPoseSearchDatabaseBlendSpace::bEnabled' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, MirrorOption) == 0x000014, "Member 'FPoseSearchDatabaseBlendSpace::MirrorOption' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, bUseGridForSampling) == 0x000018, "Member 'FPoseSearchDatabaseBlendSpace::bUseGridForSampling' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, NumberOfHorizontalSamples) == 0x00001C, "Member 'FPoseSearchDatabaseBlendSpace::NumberOfHorizontalSamples' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, NumberOfVerticalSamples) == 0x000020, "Member 'FPoseSearchDatabaseBlendSpace::NumberOfVerticalSamples' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchCost
// 0x0004 (0x0004 - 0x0000)
struct FPoseSearchCost final
{
public:
	float                                         TotalCost;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPoseSearchCost) == 0x000004, "Wrong alignment on FPoseSearchCost");
static_assert(sizeof(FPoseSearchCost) == 0x000004, "Wrong size on FPoseSearchCost");
static_assert(offsetof(FPoseSearchCost, TotalCost) == 0x000000, "Member 'FPoseSearchCost::TotalCost' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchFeatureVectorBuilder
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FPoseSearchFeatureVectorBuilder final
{
public:
	TWeakObjectPtr<class UPoseSearchSchema>       Schema;                                            // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseSearchFeatureVectorBuilder) == 0x000008, "Wrong alignment on FPoseSearchFeatureVectorBuilder");
static_assert(sizeof(FPoseSearchFeatureVectorBuilder) == 0x000018, "Wrong size on FPoseSearchFeatureVectorBuilder");
static_assert(offsetof(FPoseSearchFeatureVectorBuilder, Schema) == 0x000000, "Member 'FPoseSearchFeatureVectorBuilder::Schema' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchDatabaseSetEntry
// 0x0010 (0x0010 - 0x0000)
struct FPoseSearchDatabaseSetEntry final
{
public:
	class UPoseSearchSearchableAsset*             Searchable;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           tag;                                               // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPoseSearchPostSearchStatus                   PostSearchStatus;                                  // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseSearchDatabaseSetEntry) == 0x000008, "Wrong alignment on FPoseSearchDatabaseSetEntry");
static_assert(sizeof(FPoseSearchDatabaseSetEntry) == 0x000010, "Wrong size on FPoseSearchDatabaseSetEntry");
static_assert(offsetof(FPoseSearchDatabaseSetEntry, Searchable) == 0x000000, "Member 'FPoseSearchDatabaseSetEntry::Searchable' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseSetEntry, tag) == 0x000008, "Member 'FPoseSearchDatabaseSetEntry::tag' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseSetEntry, PostSearchStatus) == 0x00000C, "Member 'FPoseSearchDatabaseSetEntry::PostSearchStatus' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchDatabaseDerivedData
// 0x00A0 (0x00A0 - 0x0000)
struct FPoseSearchDatabaseDerivedData final
{
public:
	struct FPoseSearchIndex                       SearchIndex;                                       // 0x0000(0x00A0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchDatabaseDerivedData) == 0x000008, "Wrong alignment on FPoseSearchDatabaseDerivedData");
static_assert(sizeof(FPoseSearchDatabaseDerivedData) == 0x0000A0, "Wrong size on FPoseSearchDatabaseDerivedData");
static_assert(offsetof(FPoseSearchDatabaseDerivedData, SearchIndex) == 0x000000, "Member 'FPoseSearchDatabaseDerivedData::SearchIndex' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchBone
// 0x0018 (0x0018 - 0x0000)
struct FPoseSearchBone final
{
public:
	struct FBoneReference                         Reference;                                         // 0x0000(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Flags;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColorPresetIndex;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchBone) == 0x000004, "Wrong alignment on FPoseSearchBone");
static_assert(sizeof(FPoseSearchBone) == 0x000018, "Wrong size on FPoseSearchBone");
static_assert(offsetof(FPoseSearchBone, Reference) == 0x000000, "Member 'FPoseSearchBone::Reference' has a wrong offset!");
static_assert(offsetof(FPoseSearchBone, Flags) == 0x00000C, "Member 'FPoseSearchBone::Flags' has a wrong offset!");
static_assert(offsetof(FPoseSearchBone, Weight) == 0x000010, "Member 'FPoseSearchBone::Weight' has a wrong offset!");
static_assert(offsetof(FPoseSearchBone, ColorPresetIndex) == 0x000014, "Member 'FPoseSearchBone::ColorPresetIndex' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchTrajectorySample
// 0x0010 (0x0010 - 0x0000)
struct FPoseSearchTrajectorySample final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Flags;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColorPresetIndex;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchTrajectorySample) == 0x000004, "Wrong alignment on FPoseSearchTrajectorySample");
static_assert(sizeof(FPoseSearchTrajectorySample) == 0x000010, "Wrong size on FPoseSearchTrajectorySample");
static_assert(offsetof(FPoseSearchTrajectorySample, Offset) == 0x000000, "Member 'FPoseSearchTrajectorySample::Offset' has a wrong offset!");
static_assert(offsetof(FPoseSearchTrajectorySample, Flags) == 0x000004, "Member 'FPoseSearchTrajectorySample::Flags' has a wrong offset!");
static_assert(offsetof(FPoseSearchTrajectorySample, Weight) == 0x000008, "Member 'FPoseSearchTrajectorySample::Weight' has a wrong offset!");
static_assert(offsetof(FPoseSearchTrajectorySample, ColorPresetIndex) == 0x00000C, "Member 'FPoseSearchTrajectorySample::ColorPresetIndex' has a wrong offset!");

// ScriptStruct PoseSearch.MotionMatchingState
// 0x0100 (0x0100 - 0x0000)
struct FMotionMatchingState final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedPoseJumpTime;                               // 0x0048(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMotionMatchingFlags                          Flags;                                             // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RootMotionTransformDelta;                          // 0x0050(0x0060)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x50];                                      // 0x00B0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMotionMatchingState) == 0x000010, "Wrong alignment on FMotionMatchingState");
static_assert(sizeof(FMotionMatchingState) == 0x000100, "Wrong size on FMotionMatchingState");
static_assert(offsetof(FMotionMatchingState, ElapsedPoseJumpTime) == 0x000048, "Member 'FMotionMatchingState::ElapsedPoseJumpTime' has a wrong offset!");
static_assert(offsetof(FMotionMatchingState, Flags) == 0x00004C, "Member 'FMotionMatchingState::Flags' has a wrong offset!");
static_assert(offsetof(FMotionMatchingState, RootMotionTransformDelta) == 0x000050, "Member 'FMotionMatchingState::RootMotionTransformDelta' has a wrong offset!");

}

