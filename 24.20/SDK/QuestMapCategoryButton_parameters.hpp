#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuestMapCategoryButton

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function QuestMapCategoryButton.QuestMapCategoryButton_C.BP_OnTimerSet
// 0x0001 (0x0001 - 0x0000)
struct QuestMapCategoryButton_C_BP_OnTimerSet final
{
public:
	EAthenaChallengeTimerState                    TimerState;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuestMapCategoryButton_C_BP_OnTimerSet) == 0x000001, "Wrong alignment on QuestMapCategoryButton_C_BP_OnTimerSet");
static_assert(sizeof(QuestMapCategoryButton_C_BP_OnTimerSet) == 0x000001, "Wrong size on QuestMapCategoryButton_C_BP_OnTimerSet");
static_assert(offsetof(QuestMapCategoryButton_C_BP_OnTimerSet, TimerState) == 0x000000, "Member 'QuestMapCategoryButton_C_BP_OnTimerSet::TimerState' has a wrong offset!");

// Function QuestMapCategoryButton.QuestMapCategoryButton_C.BP_Populate
// 0x00B8 (0x00B8 - 0x0000)
struct QuestMapCategoryButton_C_BP_Populate final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   SubText;                                           // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         CompletedQuests;                                   // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalQuest;                                        // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuestCategoryButtonOverrides          ButtonOverrides;                                   // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bQuestListContentDisabled;                         // 0x00B0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuestMapCategoryButton_C_BP_Populate) == 0x000008, "Wrong alignment on QuestMapCategoryButton_C_BP_Populate");
static_assert(sizeof(QuestMapCategoryButton_C_BP_Populate) == 0x0000B8, "Wrong size on QuestMapCategoryButton_C_BP_Populate");
static_assert(offsetof(QuestMapCategoryButton_C_BP_Populate, Title) == 0x000000, "Member 'QuestMapCategoryButton_C_BP_Populate::Title' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_BP_Populate, SubText) == 0x000018, "Member 'QuestMapCategoryButton_C_BP_Populate::SubText' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_BP_Populate, CompletedQuests) == 0x000030, "Member 'QuestMapCategoryButton_C_BP_Populate::CompletedQuests' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_BP_Populate, TotalQuest) == 0x000034, "Member 'QuestMapCategoryButton_C_BP_Populate::TotalQuest' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_BP_Populate, ButtonOverrides) == 0x000038, "Member 'QuestMapCategoryButton_C_BP_Populate::ButtonOverrides' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_BP_Populate, bQuestListContentDisabled) == 0x0000B0, "Member 'QuestMapCategoryButton_C_BP_Populate::bQuestListContentDisabled' has a wrong offset!");

// Function QuestMapCategoryButton.QuestMapCategoryButton_C.ExecuteUbergraph_QuestMapCategoryButton
// 0x01E8 (0x01E8 - 0x0000)
struct QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_2;       // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_1;       // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_3;       // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_Title;                                // 0x0040(0x0018)(ConstParm)
	class FText                                   K2Node_Event_SubText;                              // 0x0058(0x0018)(ConstParm)
	int32                                         K2Node_Event_CompletedQuests;                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_TotalQuest;                           // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuestCategoryButtonOverrides          K2Node_Event_ButtonOverrides;                      // 0x0078(0x0078)(ConstParm)
	bool                                          K2Node_Event_bQuestListContentDisabled;            // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAthenaChallengeTimerState                    K2Node_Event_TimerState_2;                         // 0x00F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_4;       // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_2;       // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAthenaChallengeTimerState                    K2Node_Event_TimerState_1;                         // 0x0108(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuestCategoryButtonTimerState                K2Node_Event_TimerType;                            // 0x0109(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_TimerText;                            // 0x0110(0x0018)(ConstParm)
	struct FTimespan                              K2Node_Event_TimeRemaining_1;                      // 0x0128(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_MakeTimespan_ReturnValue;                 // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0138(0x0018)()
	EAthenaChallengeTimerState                    K2Node_Event_TimerState;                           // 0x0150(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              K2Node_Event_TimeRemaining;                        // 0x0158(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnabled;                             // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_162[0x6];                                      // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuestCategoryButtonOverrides          K2Node_MakeStruct_QuestCategoryButtonOverrides;    // 0x0168(0x0078)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x01E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton) == 0x000008, "Wrong alignment on QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton");
static_assert(sizeof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton) == 0x0001E8, "Wrong size on QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, EntryPoint) == 0x000000, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::EntryPoint' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, Temp_bool_Variable) == 0x000004, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, Temp_byte_Variable) == 0x000005, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, Temp_byte_Variable_1) == 0x000006, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, Temp_bool_Variable_1) == 0x000007, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, Temp_byte_Variable_2) == 0x000008, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, Temp_byte_Variable_3) == 0x000009, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, CallFunc_PlayAnimationForward_ReturnValue) == 0x000010, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x000018, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000020, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, CallFunc_PlayAnimationForward_ReturnValue_2) == 0x000028, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::CallFunc_PlayAnimationForward_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, CallFunc_PlayAnimationReverse_ReturnValue_1) == 0x000030, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::CallFunc_PlayAnimationReverse_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, CallFunc_PlayAnimationForward_ReturnValue_3) == 0x000038, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::CallFunc_PlayAnimationForward_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Event_Title) == 0x000040, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Event_Title' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Event_SubText) == 0x000058, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Event_SubText' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Event_CompletedQuests) == 0x000070, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Event_CompletedQuests' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Event_TotalQuest) == 0x000074, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Event_TotalQuest' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Event_ButtonOverrides) == 0x000078, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Event_ButtonOverrides' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Event_bQuestListContentDisabled) == 0x0000F0, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Event_bQuestListContentDisabled' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Event_IsDesignTime) == 0x0000F1, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000F2, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Event_TimerState_2) == 0x0000F3, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Event_TimerState_2' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, CallFunc_PlayAnimationForward_ReturnValue_4) == 0x0000F8, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::CallFunc_PlayAnimationForward_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, CallFunc_PlayAnimationReverse_ReturnValue_2) == 0x000100, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::CallFunc_PlayAnimationReverse_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Event_TimerState_1) == 0x000108, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Event_TimerState_1' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Event_TimerType) == 0x000109, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Event_TimerType' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Event_TimerText) == 0x000110, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Event_TimerText' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Event_TimeRemaining_1) == 0x000128, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Event_TimeRemaining_1' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, CallFunc_MakeTimespan_ReturnValue) == 0x000130, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::CallFunc_MakeTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, CallFunc_MakeLiteralText_ReturnValue) == 0x000138, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Event_TimerState) == 0x000150, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Event_TimerState' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Event_TimeRemaining) == 0x000158, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Event_TimeRemaining' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Event_bEnabled) == 0x000160, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Event_bEnabled' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Select_Default) == 0x000161, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_MakeStruct_QuestCategoryButtonOverrides) == 0x000168, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_MakeStruct_QuestCategoryButtonOverrides' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001E0, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, CallFunc_BooleanAND_ReturnValue) == 0x0001E1, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton, K2Node_Select_Default_1) == 0x0001E2, "Member 'QuestMapCategoryButton_C_ExecuteUbergraph_QuestMapCategoryButton::K2Node_Select_Default_1' has a wrong offset!");

// Function QuestMapCategoryButton.QuestMapCategoryButton_C.OnMoreInTimerSet
// 0x0010 (0x0010 - 0x0000)
struct QuestMapCategoryButton_C_OnMoreInTimerSet final
{
public:
	EAthenaChallengeTimerState                    TimerState;                                        // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              TimeRemaining;                                     // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuestMapCategoryButton_C_OnMoreInTimerSet) == 0x000008, "Wrong alignment on QuestMapCategoryButton_C_OnMoreInTimerSet");
static_assert(sizeof(QuestMapCategoryButton_C_OnMoreInTimerSet) == 0x000010, "Wrong size on QuestMapCategoryButton_C_OnMoreInTimerSet");
static_assert(offsetof(QuestMapCategoryButton_C_OnMoreInTimerSet, TimerState) == 0x000000, "Member 'QuestMapCategoryButton_C_OnMoreInTimerSet::TimerState' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_OnMoreInTimerSet, TimeRemaining) == 0x000008, "Member 'QuestMapCategoryButton_C_OnMoreInTimerSet::TimeRemaining' has a wrong offset!");

// Function QuestMapCategoryButton.QuestMapCategoryButton_C.OnTimeRemainingTimerSet
// 0x0028 (0x0028 - 0x0000)
struct QuestMapCategoryButton_C_OnTimeRemainingTimerSet final
{
public:
	EAthenaChallengeTimerState                    TimerState;                                        // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuestCategoryButtonTimerState                TimerType;                                         // 0x0001(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimerText;                                         // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FTimespan                              TimeRemaining;                                     // 0x0020(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuestMapCategoryButton_C_OnTimeRemainingTimerSet) == 0x000008, "Wrong alignment on QuestMapCategoryButton_C_OnTimeRemainingTimerSet");
static_assert(sizeof(QuestMapCategoryButton_C_OnTimeRemainingTimerSet) == 0x000028, "Wrong size on QuestMapCategoryButton_C_OnTimeRemainingTimerSet");
static_assert(offsetof(QuestMapCategoryButton_C_OnTimeRemainingTimerSet, TimerState) == 0x000000, "Member 'QuestMapCategoryButton_C_OnTimeRemainingTimerSet::TimerState' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_OnTimeRemainingTimerSet, TimerType) == 0x000001, "Member 'QuestMapCategoryButton_C_OnTimeRemainingTimerSet::TimerType' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_OnTimeRemainingTimerSet, TimerText) == 0x000008, "Member 'QuestMapCategoryButton_C_OnTimeRemainingTimerSet::TimerText' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_OnTimeRemainingTimerSet, TimeRemaining) == 0x000020, "Member 'QuestMapCategoryButton_C_OnTimeRemainingTimerSet::TimeRemaining' has a wrong offset!");

// Function QuestMapCategoryButton.QuestMapCategoryButton_C.Populate
// 0x00B8 (0x00B8 - 0x0000)
struct QuestMapCategoryButton_C_Populate final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   SubText;                                           // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         CompletedQuests;                                   // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalQuests;                                       // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuestCategoryButtonOverrides          Overrides;                                         // 0x0038(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuestMapCategoryButton_C_Populate) == 0x000008, "Wrong alignment on QuestMapCategoryButton_C_Populate");
static_assert(sizeof(QuestMapCategoryButton_C_Populate) == 0x0000B8, "Wrong size on QuestMapCategoryButton_C_Populate");
static_assert(offsetof(QuestMapCategoryButton_C_Populate, Title) == 0x000000, "Member 'QuestMapCategoryButton_C_Populate::Title' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_Populate, SubText) == 0x000018, "Member 'QuestMapCategoryButton_C_Populate::SubText' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_Populate, CompletedQuests) == 0x000030, "Member 'QuestMapCategoryButton_C_Populate::CompletedQuests' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_Populate, TotalQuests) == 0x000034, "Member 'QuestMapCategoryButton_C_Populate::TotalQuests' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_Populate, Overrides) == 0x000038, "Member 'QuestMapCategoryButton_C_Populate::Overrides' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_Populate, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000B0, "Member 'QuestMapCategoryButton_C_Populate::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function QuestMapCategoryButton.QuestMapCategoryButton_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct QuestMapCategoryButton_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuestMapCategoryButton_C_PreConstruct) == 0x000001, "Wrong alignment on QuestMapCategoryButton_C_PreConstruct");
static_assert(sizeof(QuestMapCategoryButton_C_PreConstruct) == 0x000001, "Wrong size on QuestMapCategoryButton_C_PreConstruct");
static_assert(offsetof(QuestMapCategoryButton_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'QuestMapCategoryButton_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function QuestMapCategoryButton.QuestMapCategoryButton_C.SetCompletedState
// 0x0001 (0x0001 - 0x0000)
struct QuestMapCategoryButton_C_SetCompletedState final
{
public:
	bool                                          AllCompleted;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuestMapCategoryButton_C_SetCompletedState) == 0x000001, "Wrong alignment on QuestMapCategoryButton_C_SetCompletedState");
static_assert(sizeof(QuestMapCategoryButton_C_SetCompletedState) == 0x000001, "Wrong size on QuestMapCategoryButton_C_SetCompletedState");
static_assert(offsetof(QuestMapCategoryButton_C_SetCompletedState, AllCompleted) == 0x000000, "Member 'QuestMapCategoryButton_C_SetCompletedState::AllCompleted' has a wrong offset!");

// Function QuestMapCategoryButton.QuestMapCategoryButton_C.SetNudgeAnimValue
// 0x0028 (0x0028 - 0x0000)
struct QuestMapCategoryButton_C_SetNudgeAnimValue final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuestMapCategoryButton_C_SetNudgeAnimValue) == 0x000008, "Wrong alignment on QuestMapCategoryButton_C_SetNudgeAnimValue");
static_assert(sizeof(QuestMapCategoryButton_C_SetNudgeAnimValue) == 0x000028, "Wrong size on QuestMapCategoryButton_C_SetNudgeAnimValue");
static_assert(offsetof(QuestMapCategoryButton_C_SetNudgeAnimValue, Value) == 0x000000, "Member 'QuestMapCategoryButton_C_SetNudgeAnimValue::Value' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetNudgeAnimValue, CallFunc_Lerp_ReturnValue) == 0x000008, "Member 'QuestMapCategoryButton_C_SetNudgeAnimValue::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetNudgeAnimValue, CallFunc_SlotAsGridSlot_ReturnValue) == 0x000010, "Member 'QuestMapCategoryButton_C_SetNudgeAnimValue::CallFunc_SlotAsGridSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetNudgeAnimValue, CallFunc_MakeVector2D_ReturnValue) == 0x000018, "Member 'QuestMapCategoryButton_C_SetNudgeAnimValue::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function QuestMapCategoryButton.QuestMapCategoryButton_C.SetTimer
// 0x0038 (0x0038 - 0x0000)
struct QuestMapCategoryButton_C_SetTimer final
{
public:
	EAthenaChallengeTimerState                    TimerState;                                        // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuestCategoryButtonTimerState                TimerType;                                         // 0x0001(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimerText;                                         // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FTimespan                              Timespan;                                          // 0x0020(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuestMapCategoryButton_C_SetTimer) == 0x000008, "Wrong alignment on QuestMapCategoryButton_C_SetTimer");
static_assert(sizeof(QuestMapCategoryButton_C_SetTimer) == 0x000038, "Wrong size on QuestMapCategoryButton_C_SetTimer");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, TimerState) == 0x000000, "Member 'QuestMapCategoryButton_C_SetTimer::TimerState' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, TimerType) == 0x000001, "Member 'QuestMapCategoryButton_C_SetTimer::TimerType' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, TimerText) == 0x000008, "Member 'QuestMapCategoryButton_C_SetTimer::TimerText' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, Timespan) == 0x000020, "Member 'QuestMapCategoryButton_C_SetTimer::Timespan' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, Temp_bool_Variable) == 0x000028, "Member 'QuestMapCategoryButton_C_SetTimer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, Temp_byte_Variable) == 0x000029, "Member 'QuestMapCategoryButton_C_SetTimer::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, Temp_byte_Variable_1) == 0x00002A, "Member 'QuestMapCategoryButton_C_SetTimer::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, Temp_bool_Variable_1) == 0x00002B, "Member 'QuestMapCategoryButton_C_SetTimer::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, Temp_byte_Variable_2) == 0x00002C, "Member 'QuestMapCategoryButton_C_SetTimer::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, Temp_byte_Variable_3) == 0x00002D, "Member 'QuestMapCategoryButton_C_SetTimer::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, Temp_byte_Variable_4) == 0x00002E, "Member 'QuestMapCategoryButton_C_SetTimer::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, Temp_byte_Variable_5) == 0x00002F, "Member 'QuestMapCategoryButton_C_SetTimer::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, K2Node_SwitchEnum_CmpSuccess) == 0x000030, "Member 'QuestMapCategoryButton_C_SetTimer::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000031, "Member 'QuestMapCategoryButton_C_SetTimer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000032, "Member 'QuestMapCategoryButton_C_SetTimer::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000033, "Member 'QuestMapCategoryButton_C_SetTimer::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, K2Node_Select_Default) == 0x000034, "Member 'QuestMapCategoryButton_C_SetTimer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, Temp_bool_Variable_2) == 0x000035, "Member 'QuestMapCategoryButton_C_SetTimer::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, K2Node_Select_Default_1) == 0x000036, "Member 'QuestMapCategoryButton_C_SetTimer::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimer, K2Node_Select_Default_2) == 0x000037, "Member 'QuestMapCategoryButton_C_SetTimer::K2Node_Select_Default_2' has a wrong offset!");

// Function QuestMapCategoryButton.QuestMapCategoryButton_C.SetTimerStyling
// 0x0058 (0x0058 - 0x0000)
struct QuestMapCategoryButton_C_SetTimerStyling final
{
public:
	EAthenaChallengeTimerState                    TimerState;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           HoverColor;                                        // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DefaultColor;                                      // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAthenaChallengeTimerState                    Temp_byte_Variable;                                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAthenaChallengeTimerState                    Temp_byte_Variable_1;                              // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicFontMaterial_ReturnValue;       // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuestMapCategoryButton_C_SetTimerStyling) == 0x000008, "Wrong alignment on QuestMapCategoryButton_C_SetTimerStyling");
static_assert(sizeof(QuestMapCategoryButton_C_SetTimerStyling) == 0x000058, "Wrong size on QuestMapCategoryButton_C_SetTimerStyling");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimerStyling, TimerState) == 0x000000, "Member 'QuestMapCategoryButton_C_SetTimerStyling::TimerState' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimerStyling, HoverColor) == 0x000004, "Member 'QuestMapCategoryButton_C_SetTimerStyling::HoverColor' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimerStyling, DefaultColor) == 0x000014, "Member 'QuestMapCategoryButton_C_SetTimerStyling::DefaultColor' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimerStyling, Temp_byte_Variable) == 0x000024, "Member 'QuestMapCategoryButton_C_SetTimerStyling::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimerStyling, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000025, "Member 'QuestMapCategoryButton_C_SetTimerStyling::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimerStyling, Temp_byte_Variable_1) == 0x000026, "Member 'QuestMapCategoryButton_C_SetTimerStyling::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimerStyling, K2Node_Select_Default) == 0x000028, "Member 'QuestMapCategoryButton_C_SetTimerStyling::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimerStyling, K2Node_Select_Default_1) == 0x000038, "Member 'QuestMapCategoryButton_C_SetTimerStyling::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimerStyling, CallFunc_GetDynamicFontMaterial_ReturnValue) == 0x000048, "Member 'QuestMapCategoryButton_C_SetTimerStyling::CallFunc_GetDynamicFontMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTimerStyling, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000050, "Member 'QuestMapCategoryButton_C_SetTimerStyling::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function QuestMapCategoryButton.QuestMapCategoryButton_C.SetTitle
// 0x0030 (0x0030 - 0x0000)
struct QuestMapCategoryButton_C_SetTitle final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   SubText;                                           // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(QuestMapCategoryButton_C_SetTitle) == 0x000008, "Wrong alignment on QuestMapCategoryButton_C_SetTitle");
static_assert(sizeof(QuestMapCategoryButton_C_SetTitle) == 0x000030, "Wrong size on QuestMapCategoryButton_C_SetTitle");
static_assert(offsetof(QuestMapCategoryButton_C_SetTitle, Title) == 0x000000, "Member 'QuestMapCategoryButton_C_SetTitle::Title' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetTitle, SubText) == 0x000018, "Member 'QuestMapCategoryButton_C_SetTitle::SubText' has a wrong offset!");

// Function QuestMapCategoryButton.QuestMapCategoryButton_C.SetVisuals
// 0x00A0 (0x00A0 - 0x0000)
struct QuestMapCategoryButton_C_SetVisuals final
{
public:
	struct FQuestCategoryButtonOverrides          Overrides;                                         // 0x0000(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0078(0x0014)()
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue_1; // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuestMapCategoryButton_C_SetVisuals) == 0x000008, "Wrong alignment on QuestMapCategoryButton_C_SetVisuals");
static_assert(sizeof(QuestMapCategoryButton_C_SetVisuals) == 0x0000A0, "Wrong size on QuestMapCategoryButton_C_SetVisuals");
static_assert(offsetof(QuestMapCategoryButton_C_SetVisuals, Overrides) == 0x000000, "Member 'QuestMapCategoryButton_C_SetVisuals::Overrides' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetVisuals, K2Node_MakeStruct_SlateColor) == 0x000078, "Member 'QuestMapCategoryButton_C_SetVisuals::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetVisuals, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x00008C, "Member 'QuestMapCategoryButton_C_SetVisuals::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetVisuals, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000090, "Member 'QuestMapCategoryButton_C_SetVisuals::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuestMapCategoryButton_C_SetVisuals, CallFunc_IsValidSoftObjectReference_ReturnValue_1) == 0x000098, "Member 'QuestMapCategoryButton_C_SetVisuals::CallFunc_IsValidSoftObjectReference_ReturnValue_1' has a wrong offset!");

// Function QuestMapCategoryButton.QuestMapCategoryButton_C.ShowNewBang
// 0x0001 (0x0001 - 0x0000)
struct QuestMapCategoryButton_C_ShowNewBang final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuestMapCategoryButton_C_ShowNewBang) == 0x000001, "Wrong alignment on QuestMapCategoryButton_C_ShowNewBang");
static_assert(sizeof(QuestMapCategoryButton_C_ShowNewBang) == 0x000001, "Wrong size on QuestMapCategoryButton_C_ShowNewBang");
static_assert(offsetof(QuestMapCategoryButton_C_ShowNewBang, bEnabled) == 0x000000, "Member 'QuestMapCategoryButton_C_ShowNewBang::bEnabled' has a wrong offset!");

}

