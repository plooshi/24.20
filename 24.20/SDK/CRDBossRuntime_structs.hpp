#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CRDBossRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// ScriptStruct CRDBossRuntime.BossFXOverrideOption
// 0x0028 (0x0030 - 0x0008)
struct FBossFXOverrideOption final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UObject>                 OverrideFXSoftObject;                              // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBossFXOverrideOption) == 0x000008, "Wrong alignment on FBossFXOverrideOption");
static_assert(sizeof(FBossFXOverrideOption) == 0x000030, "Wrong size on FBossFXOverrideOption");
static_assert(offsetof(FBossFXOverrideOption, OverrideFXSoftObject) == 0x000008, "Member 'FBossFXOverrideOption::OverrideFXSoftObject' has a wrong offset!");

// ScriptStruct CRDBossRuntime.PawnDamageZoneBroadcastThreshold
// 0x0008 (0x0008 - 0x0000)
struct FPawnDamageZoneBroadcastThreshold final
{
public:
	bool                                          bHasBeenPassed;                                    // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TriggerPercent;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnDamageZoneBroadcastThreshold) == 0x000004, "Wrong alignment on FPawnDamageZoneBroadcastThreshold");
static_assert(sizeof(FPawnDamageZoneBroadcastThreshold) == 0x000008, "Wrong size on FPawnDamageZoneBroadcastThreshold");
static_assert(offsetof(FPawnDamageZoneBroadcastThreshold, bHasBeenPassed) == 0x000000, "Member 'FPawnDamageZoneBroadcastThreshold::bHasBeenPassed' has a wrong offset!");
static_assert(offsetof(FPawnDamageZoneBroadcastThreshold, TriggerPercent) == 0x000004, "Member 'FPawnDamageZoneBroadcastThreshold::TriggerPercent' has a wrong offset!");

// ScriptStruct CRDBossRuntime.PawnDamageZoneInfo
// 0x0048 (0x0048 - 0x0000)
struct FPawnDamageZoneInfo final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDamageZone                               DamageZone;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Bones;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLimitedHealth;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHealth;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentHealth;                                     // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReactivates;                                      // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReactivationTime;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPawnDamageZoneBroadcastThreshold> DamageBroadcastThresholds;                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnDamageZoneInfo) == 0x000008, "Wrong alignment on FPawnDamageZoneInfo");
static_assert(sizeof(FPawnDamageZoneInfo) == 0x000048, "Wrong size on FPawnDamageZoneInfo");
static_assert(offsetof(FPawnDamageZoneInfo, bActive) == 0x000000, "Member 'FPawnDamageZoneInfo::bActive' has a wrong offset!");
static_assert(offsetof(FPawnDamageZoneInfo, Name) == 0x000004, "Member 'FPawnDamageZoneInfo::Name' has a wrong offset!");
static_assert(offsetof(FPawnDamageZoneInfo, DamageZone) == 0x000008, "Member 'FPawnDamageZoneInfo::DamageZone' has a wrong offset!");
static_assert(offsetof(FPawnDamageZoneInfo, Bones) == 0x000010, "Member 'FPawnDamageZoneInfo::Bones' has a wrong offset!");
static_assert(offsetof(FPawnDamageZoneInfo, bLimitedHealth) == 0x000020, "Member 'FPawnDamageZoneInfo::bLimitedHealth' has a wrong offset!");
static_assert(offsetof(FPawnDamageZoneInfo, MaxHealth) == 0x000024, "Member 'FPawnDamageZoneInfo::MaxHealth' has a wrong offset!");
static_assert(offsetof(FPawnDamageZoneInfo, CurrentHealth) == 0x000028, "Member 'FPawnDamageZoneInfo::CurrentHealth' has a wrong offset!");
static_assert(offsetof(FPawnDamageZoneInfo, bReactivates) == 0x00002C, "Member 'FPawnDamageZoneInfo::bReactivates' has a wrong offset!");
static_assert(offsetof(FPawnDamageZoneInfo, ReactivationTime) == 0x000030, "Member 'FPawnDamageZoneInfo::ReactivationTime' has a wrong offset!");
static_assert(offsetof(FPawnDamageZoneInfo, DamageBroadcastThresholds) == 0x000038, "Member 'FPawnDamageZoneInfo::DamageBroadcastThresholds' has a wrong offset!");

}

