#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CRD_ClassSelectorUI

#include "Basic.hpp"

#include "CRD_ClassSelectorUI_classes.hpp"
#include "CRD_ClassSelectorUI_parameters.hpp"


namespace SDK
{

// Function CRD_ClassSelectorUI.CreativeClassSelectorButton.SetButtonText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCreativeClassSelectorButton::SetButtonText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreativeClassSelectorButton", "SetButtonText");

	Params::CreativeClassSelectorButton_SetButtonText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CRD_ClassSelectorUI.ClassSelectorTeamTile.OnPlayerCountSet
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   NewPlayerCount                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClassSelectorTeamTile::OnPlayerCountSet(int32 NewPlayerCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClassSelectorTeamTile", "OnPlayerCountSet");

	Params::ClassSelectorTeamTile_OnPlayerCountSet Parms{};

	Parms.NewPlayerCount = NewPlayerCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CRD_ClassSelectorUI.ClassSelectorTeamTile.OnTeamColorIndexSet
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   TeamColorIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClassSelectorTeamTile::OnTeamColorIndexSet(int32 TeamColorIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClassSelectorTeamTile", "OnTeamColorIndexSet");

	Params::ClassSelectorTeamTile_OnTeamColorIndexSet Parms{};

	Parms.TeamColorIndex = TeamColorIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CRD_ClassSelectorUI.ClassSelectorTeamTile.OnTeamIconSet
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FCreativeIconOption              NewTeamIcon                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UClassSelectorTeamTile::OnTeamIconSet(const struct FCreativeIconOption& NewTeamIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClassSelectorTeamTile", "OnTeamIconSet");

	Params::ClassSelectorTeamTile_OnTeamIconSet Parms{};

	Parms.NewTeamIcon = std::move(NewTeamIcon);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CRD_ClassSelectorUI.ClassSelectorTeamTile.OnTeamSet
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FMinigameTeam                    NewTeamData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UClassSelectorTeamTile::OnTeamSet(const struct FMinigameTeam& NewTeamData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClassSelectorTeamTile", "OnTeamSet");

	Params::ClassSelectorTeamTile_OnTeamSet Parms{};

	Parms.NewTeamData = std::move(NewTeamData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CRD_ClassSelectorUI.CreativeClassEntry.OnBrowsingLoadout
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bBrowsingLoadout                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCreativeClassEntry::OnBrowsingLoadout(const bool bBrowsingLoadout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreativeClassEntry", "OnBrowsingLoadout");

	Params::CreativeClassEntry_OnBrowsingLoadout Parms{};

	Parms.bBrowsingLoadout = bBrowsingLoadout;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CRD_ClassSelectorUI.CreativeClassEntry.OnClassEntryDataSet
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsCurrentClass                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsPendingClass                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCreativeClassEntry::OnClassEntryDataSet(const bool bIsCurrentClass, const bool bIsPendingClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreativeClassEntry", "OnClassEntryDataSet");

	Params::CreativeClassEntry_OnClassEntryDataSet Parms{};

	Parms.bIsCurrentClass = bIsCurrentClass;
	Parms.bIsPendingClass = bIsPendingClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CRD_ClassSelectorUI.CreativeClassSelector.HandleMinigameStateChanged
// (Final, Native, Protected)
// Parameters:
// class AFortMinigame*                    Minigame                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFortMinigameState                      MinigameState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCreativeClassSelector::HandleMinigameStateChanged(class AFortMinigame* Minigame, EFortMinigameState MinigameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreativeClassSelector", "HandleMinigameStateChanged");

	Params::CreativeClassSelector_HandleMinigameStateChanged Parms{};

	Parms.Minigame = Minigame;
	Parms.MinigameState = MinigameState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CRD_ClassSelectorUI.CreativeClassSelector.OnClassSelectionChanged
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             NewClassName                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             NewClassDescription                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCreativeClassSelector::OnClassSelectionChanged(const class FText& NewClassName, const class FText& NewClassDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreativeClassSelector", "OnClassSelectionChanged");

	Params::CreativeClassSelector_OnClassSelectionChanged Parms{};

	Parms.NewClassName = std::move(NewClassName);
	Parms.NewClassDescription = std::move(NewClassDescription);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CRD_ClassSelectorUI.CreativeClassSelector.OnClassSelectorUIPopulated
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bHasValidData                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCreativeClassSelector::OnClassSelectorUIPopulated(const bool bHasValidData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreativeClassSelector", "OnClassSelectorUIPopulated");

	Params::CreativeClassSelector_OnClassSelectorUIPopulated Parms{};

	Parms.bHasValidData = bHasValidData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CRD_ClassSelectorUI.CreativeClassSelector.OnLoadoutCommitted
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             NewClassName                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             NewTeamName                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bNewLoadout                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCreativeClassSelector::OnLoadoutCommitted(const class FText& NewClassName, const class FText& NewTeamName, const bool bNewLoadout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreativeClassSelector", "OnLoadoutCommitted");

	Params::CreativeClassSelector_OnLoadoutCommitted Parms{};

	Parms.NewClassName = std::move(NewClassName);
	Parms.NewTeamName = std::move(NewTeamName);
	Parms.bNewLoadout = bNewLoadout;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CRD_ClassSelectorUI.CreativeClassSelector.OnTimerCountdown
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   RemainingTime                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCreativeClassSelector::OnTimerCountdown(const int32 RemainingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreativeClassSelector", "OnTimerCountdown");

	Params::CreativeClassSelector_OnTimerCountdown Parms{};

	Parms.RemainingTime = RemainingTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CRD_ClassSelectorUI.CreativeClassSelector.GetFirstLoadoutItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UCreativeClassSelector::GetFirstLoadoutItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreativeClassSelector", "GetFirstLoadoutItem");

	Params::CreativeClassSelector_GetFirstLoadoutItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CRD_ClassSelectorUI.CreativeClassSelectorMapTab.OnTabAdded
// (Event, Public, BlueprintEvent)

void UCreativeClassSelectorMapTab::OnTabAdded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreativeClassSelectorMapTab", "OnTabAdded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CRD_ClassSelectorUI.CreativeClassSelectorMapTab.SetTabName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             TabName                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCreativeClassSelectorMapTab::SetTabName(const class FText& TabName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreativeClassSelectorMapTab", "SetTabName");

	Params::CreativeClassSelectorMapTab_SetTabName Parms{};

	Parms.TabName = std::move(TabName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

