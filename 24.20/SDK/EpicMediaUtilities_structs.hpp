#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EpicMediaUtilities

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct EpicMediaUtilities.EpicMediaImageDataExt
// 0x0030 (0x0030 - 0x0000)
struct FEpicMediaImageDataExt
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FullUrl;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AspectRatio;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEpicMediaImageDataExt) == 0x000008, "Wrong alignment on FEpicMediaImageDataExt");
static_assert(sizeof(FEpicMediaImageDataExt) == 0x000030, "Wrong size on FEpicMediaImageDataExt");
static_assert(offsetof(FEpicMediaImageDataExt, URL) == 0x000000, "Member 'FEpicMediaImageDataExt::URL' has a wrong offset!");
static_assert(offsetof(FEpicMediaImageDataExt, FullUrl) == 0x000010, "Member 'FEpicMediaImageDataExt::FullUrl' has a wrong offset!");
static_assert(offsetof(FEpicMediaImageDataExt, Width) == 0x000020, "Member 'FEpicMediaImageDataExt::Width' has a wrong offset!");
static_assert(offsetof(FEpicMediaImageDataExt, Height) == 0x000024, "Member 'FEpicMediaImageDataExt::Height' has a wrong offset!");
static_assert(offsetof(FEpicMediaImageDataExt, AspectRatio) == 0x000028, "Member 'FEpicMediaImageDataExt::AspectRatio' has a wrong offset!");

// ScriptStruct EpicMediaUtilities.EpicMediaAudioOnlyPeriodsDataExt
// 0x0088 (0x0088 - 0x0000)
struct FEpicMediaAudioOnlyPeriodsDataExt
{
public:
	TMap<class FString, double>                   Period;                                            // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bColorSet;                                         // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartKey;                                          // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndKey;                                            // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpicMediaAudioOnlyPeriodsDataExt) == 0x000008, "Wrong alignment on FEpicMediaAudioOnlyPeriodsDataExt");
static_assert(sizeof(FEpicMediaAudioOnlyPeriodsDataExt) == 0x000088, "Wrong size on FEpicMediaAudioOnlyPeriodsDataExt");
static_assert(offsetof(FEpicMediaAudioOnlyPeriodsDataExt, Period) == 0x000000, "Member 'FEpicMediaAudioOnlyPeriodsDataExt::Period' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioOnlyPeriodsDataExt, Color) == 0x000050, "Member 'FEpicMediaAudioOnlyPeriodsDataExt::Color' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioOnlyPeriodsDataExt, bColorSet) == 0x000060, "Member 'FEpicMediaAudioOnlyPeriodsDataExt::bColorSet' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioOnlyPeriodsDataExt, StartKey) == 0x000068, "Member 'FEpicMediaAudioOnlyPeriodsDataExt::StartKey' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioOnlyPeriodsDataExt, EndKey) == 0x000078, "Member 'FEpicMediaAudioOnlyPeriodsDataExt::EndKey' has a wrong offset!");

// ScriptStruct EpicMediaUtilities.EpicMediaVolumeChangeDataExt
// 0x0090 (0x0090 - 0x0000)
struct FEpicMediaVolumeChangeDataExt
{
public:
	TMap<class FString, double>                   VolumeChange;                                      // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 FrameKey;                                          // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelKey;                                          // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LerpKey;                                           // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEpicMediaVolumeChangeDataExt) == 0x000008, "Wrong alignment on FEpicMediaVolumeChangeDataExt");
static_assert(sizeof(FEpicMediaVolumeChangeDataExt) == 0x000090, "Wrong size on FEpicMediaVolumeChangeDataExt");
static_assert(offsetof(FEpicMediaVolumeChangeDataExt, VolumeChange) == 0x000000, "Member 'FEpicMediaVolumeChangeDataExt::VolumeChange' has a wrong offset!");
static_assert(offsetof(FEpicMediaVolumeChangeDataExt, FrameKey) == 0x000050, "Member 'FEpicMediaVolumeChangeDataExt::FrameKey' has a wrong offset!");
static_assert(offsetof(FEpicMediaVolumeChangeDataExt, LevelKey) == 0x000060, "Member 'FEpicMediaVolumeChangeDataExt::LevelKey' has a wrong offset!");
static_assert(offsetof(FEpicMediaVolumeChangeDataExt, LerpKey) == 0x000070, "Member 'FEpicMediaVolumeChangeDataExt::LerpKey' has a wrong offset!");

// ScriptStruct EpicMediaUtilities.EpicMediaPlaylistExt
// 0x00A0 (0x00A0 - 0x0000)
struct FEpicMediaPlaylistExt
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RelUrl;                                            // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Duration;                                          // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FPS;                                               // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEpicMediaImageDataExt>         Images;                                            // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEpicMediaAudioOnlyPeriodsDataExt> AudioOnlyPeriods;                                  // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEpicMediaVolumeChangeDataExt>  VolumeChanges;                                     // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	double                                        SkipBoundaryTime;                                  // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PreEndEventTime;                                   // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpicMediaPlaylistExt) == 0x000008, "Wrong alignment on FEpicMediaPlaylistExt");
static_assert(sizeof(FEpicMediaPlaylistExt) == 0x0000A0, "Wrong size on FEpicMediaPlaylistExt");
static_assert(offsetof(FEpicMediaPlaylistExt, Language) == 0x000000, "Member 'FEpicMediaPlaylistExt::Language' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, Type) == 0x000010, "Member 'FEpicMediaPlaylistExt::Type' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, URL) == 0x000020, "Member 'FEpicMediaPlaylistExt::URL' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, RelUrl) == 0x000030, "Member 'FEpicMediaPlaylistExt::RelUrl' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, Data) == 0x000040, "Member 'FEpicMediaPlaylistExt::Data' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, Duration) == 0x000050, "Member 'FEpicMediaPlaylistExt::Duration' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, FPS) == 0x000058, "Member 'FEpicMediaPlaylistExt::FPS' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, Images) == 0x000060, "Member 'FEpicMediaPlaylistExt::Images' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, AudioOnlyPeriods) == 0x000070, "Member 'FEpicMediaPlaylistExt::AudioOnlyPeriods' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, VolumeChanges) == 0x000080, "Member 'FEpicMediaPlaylistExt::VolumeChanges' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, SkipBoundaryTime) == 0x000090, "Member 'FEpicMediaPlaylistExt::SkipBoundaryTime' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, PreEndEventTime) == 0x000098, "Member 'FEpicMediaPlaylistExt::PreEndEventTime' has a wrong offset!");

// ScriptStruct EpicMediaUtilities.EpicMediaRegionLockExt
// 0x00A8 (0x00A8 - 0x0000)
struct FEpicMediaRegionLockExt
{
public:
	bool                                          AllowOnError;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Type;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AllowList;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         DenyList;                                          // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Limits;                                            // 0x0038(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 ContentId;                                         // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEpicMediaRegionLockExt) == 0x000008, "Wrong alignment on FEpicMediaRegionLockExt");
static_assert(sizeof(FEpicMediaRegionLockExt) == 0x0000A8, "Wrong size on FEpicMediaRegionLockExt");
static_assert(offsetof(FEpicMediaRegionLockExt, AllowOnError) == 0x000000, "Member 'FEpicMediaRegionLockExt::AllowOnError' has a wrong offset!");
static_assert(offsetof(FEpicMediaRegionLockExt, Type) == 0x000008, "Member 'FEpicMediaRegionLockExt::Type' has a wrong offset!");
static_assert(offsetof(FEpicMediaRegionLockExt, AllowList) == 0x000018, "Member 'FEpicMediaRegionLockExt::AllowList' has a wrong offset!");
static_assert(offsetof(FEpicMediaRegionLockExt, DenyList) == 0x000028, "Member 'FEpicMediaRegionLockExt::DenyList' has a wrong offset!");
static_assert(offsetof(FEpicMediaRegionLockExt, Limits) == 0x000038, "Member 'FEpicMediaRegionLockExt::Limits' has a wrong offset!");
static_assert(offsetof(FEpicMediaRegionLockExt, ContentId) == 0x000088, "Member 'FEpicMediaRegionLockExt::ContentId' has a wrong offset!");

// ScriptStruct EpicMediaUtilities.EpicMediaMetadataExt
// 0x0138 (0x0138 - 0x0000)
struct FEpicMediaMetadataExt
{
public:
	TArray<struct FEpicMediaPlaylistExt>          Playlists;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEpicMediaPlaylistExt>          SelectedPlaylists;                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 envelope;                                          // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Limits;                                            // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Subtitles;                                         // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserContentProtection;                             // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sharelock;                                         // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AudioOnly;                                         // 0x0071(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AspectRatio;                                       // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PartySync;                                         // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Live;                                              // 0x0079(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DenyHTTPCode;                                      // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEpicMediaRegionLockExt                RegionLockData;                                    // 0x0090(0x00A8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpicMediaMetadataExt) == 0x000008, "Wrong alignment on FEpicMediaMetadataExt");
static_assert(sizeof(FEpicMediaMetadataExt) == 0x000138, "Wrong size on FEpicMediaMetadataExt");
static_assert(offsetof(FEpicMediaMetadataExt, Playlists) == 0x000000, "Member 'FEpicMediaMetadataExt::Playlists' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, SelectedPlaylists) == 0x000010, "Member 'FEpicMediaMetadataExt::SelectedPlaylists' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, Type) == 0x000020, "Member 'FEpicMediaMetadataExt::Type' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, envelope) == 0x000030, "Member 'FEpicMediaMetadataExt::envelope' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, Limits) == 0x000040, "Member 'FEpicMediaMetadataExt::Limits' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, Subtitles) == 0x000050, "Member 'FEpicMediaMetadataExt::Subtitles' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, UserContentProtection) == 0x000060, "Member 'FEpicMediaMetadataExt::UserContentProtection' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, Sharelock) == 0x000070, "Member 'FEpicMediaMetadataExt::Sharelock' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, AudioOnly) == 0x000071, "Member 'FEpicMediaMetadataExt::AudioOnly' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, AspectRatio) == 0x000074, "Member 'FEpicMediaMetadataExt::AspectRatio' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, PartySync) == 0x000078, "Member 'FEpicMediaMetadataExt::PartySync' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, Live) == 0x000079, "Member 'FEpicMediaMetadataExt::Live' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, DenyHTTPCode) == 0x000080, "Member 'FEpicMediaMetadataExt::DenyHTTPCode' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, RegionLockData) == 0x000090, "Member 'FEpicMediaMetadataExt::RegionLockData' has a wrong offset!");

}

