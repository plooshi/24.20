#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ArmoredBattleBusRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class ArmoredBattleBusRuntime.FortArmoredBattleBusPassengerAnimInstance
// 0x00D0 (0x1670 - 0x15A0)
class UFortArmoredBattleBusPassengerAnimInstance final : public UFortPlayerAnimInstanceProxy
{
public:
	struct FRotator                               PreviousVehicleRotator;                            // 0x15A0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SmoothedVehicleYawRate;                            // 0x15B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PawnSeat;                                          // 0x15BC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFrontTurretPassenger;                           // 0x15C0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRearTurretPassenger;                            // 0x15C1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C2[0x2];                                     // 0x15C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x15C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawDelta;                                          // 0x15C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurretYaw;                                         // 0x15CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurretPitch;                                       // 0x15D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15D4[0x4];                                     // 0x15D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               TurretYawRotator;                                  // 0x15D8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SlopeRollDegreeAngle;                              // 0x15F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopePitchDegreeAngle;                             // 0x15F4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandAttachL;                                       // 0x15F8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandAttachR;                                       // 0x1610(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelativeTransformSpace                       TransformSpace;                                    // 0x1628(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1629[0x3];                                     // 0x1629(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpdateYawDeltaSmoothedLerpRate;                    // 0x162C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TurretPassengerFront;                              // 0x1630(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TurretPassengerRear;                               // 0x1634(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FrontFootBoneName;                                 // 0x1638(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RearFootBoneName;                                  // 0x163C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GunHandAttachBoneName_FrontLeft;                   // 0x1640(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GunHandAttachBoneName_RearLeft;                    // 0x1644(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GunHandAttachBoneName_FrontRight;                  // 0x1648(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GunHandAttachBoneName_RearRight;                   // 0x164C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PassengerBoneName_Front;                           // 0x1650(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PassengerBoneName_Rear;                            // 0x1654(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurretPitchDegMin;                                 // 0x1658(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurretPitchDegMax;                                 // 0x165C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalPlayerTurretPitchEaseRate;                    // 0x1660(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1664[0xC];                                     // 0x1664(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GenerateCharacterPitchAndYawForSlopedTerrain(const class AFortAthenaVehicle* VehicleActor, float* TurretYaw_0, float* TurretPitch_0, struct FRotator* PawnYawRotator);
	struct FTransform GetFootAttachTransform(const class USkeletalMeshComponent* BusMeshComponent);
	struct FVector GetHandAttachLocation(const class USkeletalMeshComponent* BusMeshComponent, const class FName FrontHandAttachBoneName, const class FName RearHandAttachBoneName);
	struct FTransform GetPassengerTransform(const class USkeletalMeshComponent* BusMeshComponent);
	struct FVector UnrotateHandAttachLocation(const struct FVector& HandLocation, const struct FVector& FootLocation, const struct FRotator& FootRotation);
	void UpdateHandPositionsSlopeValues(const class USkeletalMeshComponent* BusMeshComponent);
	void UpdateSmoothedVehicleYawRate(const class AFortAthenaVehicle* VehicleActor);
	void UpdateYawDeltaSmoothed(const class AFortAthenaVehicle* VehicleActor, const class FName SocketName, const struct FRotator& NewRotation, float* SmoothedYawValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortArmoredBattleBusPassengerAnimInstance">();
	}
	static class UFortArmoredBattleBusPassengerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortArmoredBattleBusPassengerAnimInstance>();
	}
};
static_assert(alignof(UFortArmoredBattleBusPassengerAnimInstance) == 0x000010, "Wrong alignment on UFortArmoredBattleBusPassengerAnimInstance");
static_assert(sizeof(UFortArmoredBattleBusPassengerAnimInstance) == 0x001670, "Wrong size on UFortArmoredBattleBusPassengerAnimInstance");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, PreviousVehicleRotator) == 0x0015A0, "Member 'UFortArmoredBattleBusPassengerAnimInstance::PreviousVehicleRotator' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, SmoothedVehicleYawRate) == 0x0015B8, "Member 'UFortArmoredBattleBusPassengerAnimInstance::SmoothedVehicleYawRate' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, PawnSeat) == 0x0015BC, "Member 'UFortArmoredBattleBusPassengerAnimInstance::PawnSeat' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, bIsFrontTurretPassenger) == 0x0015C0, "Member 'UFortArmoredBattleBusPassengerAnimInstance::bIsFrontTurretPassenger' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, bIsRearTurretPassenger) == 0x0015C1, "Member 'UFortArmoredBattleBusPassengerAnimInstance::bIsRearTurretPassenger' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, Speed) == 0x0015C4, "Member 'UFortArmoredBattleBusPassengerAnimInstance::Speed' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, YawDelta) == 0x0015C8, "Member 'UFortArmoredBattleBusPassengerAnimInstance::YawDelta' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, TurretYaw) == 0x0015CC, "Member 'UFortArmoredBattleBusPassengerAnimInstance::TurretYaw' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, TurretPitch) == 0x0015D0, "Member 'UFortArmoredBattleBusPassengerAnimInstance::TurretPitch' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, TurretYawRotator) == 0x0015D8, "Member 'UFortArmoredBattleBusPassengerAnimInstance::TurretYawRotator' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, SlopeRollDegreeAngle) == 0x0015F0, "Member 'UFortArmoredBattleBusPassengerAnimInstance::SlopeRollDegreeAngle' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, SlopePitchDegreeAngle) == 0x0015F4, "Member 'UFortArmoredBattleBusPassengerAnimInstance::SlopePitchDegreeAngle' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, HandAttachL) == 0x0015F8, "Member 'UFortArmoredBattleBusPassengerAnimInstance::HandAttachL' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, HandAttachR) == 0x001610, "Member 'UFortArmoredBattleBusPassengerAnimInstance::HandAttachR' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, TransformSpace) == 0x001628, "Member 'UFortArmoredBattleBusPassengerAnimInstance::TransformSpace' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, UpdateYawDeltaSmoothedLerpRate) == 0x00162C, "Member 'UFortArmoredBattleBusPassengerAnimInstance::UpdateYawDeltaSmoothedLerpRate' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, TurretPassengerFront) == 0x001630, "Member 'UFortArmoredBattleBusPassengerAnimInstance::TurretPassengerFront' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, TurretPassengerRear) == 0x001634, "Member 'UFortArmoredBattleBusPassengerAnimInstance::TurretPassengerRear' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, FrontFootBoneName) == 0x001638, "Member 'UFortArmoredBattleBusPassengerAnimInstance::FrontFootBoneName' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, RearFootBoneName) == 0x00163C, "Member 'UFortArmoredBattleBusPassengerAnimInstance::RearFootBoneName' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, GunHandAttachBoneName_FrontLeft) == 0x001640, "Member 'UFortArmoredBattleBusPassengerAnimInstance::GunHandAttachBoneName_FrontLeft' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, GunHandAttachBoneName_RearLeft) == 0x001644, "Member 'UFortArmoredBattleBusPassengerAnimInstance::GunHandAttachBoneName_RearLeft' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, GunHandAttachBoneName_FrontRight) == 0x001648, "Member 'UFortArmoredBattleBusPassengerAnimInstance::GunHandAttachBoneName_FrontRight' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, GunHandAttachBoneName_RearRight) == 0x00164C, "Member 'UFortArmoredBattleBusPassengerAnimInstance::GunHandAttachBoneName_RearRight' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, PassengerBoneName_Front) == 0x001650, "Member 'UFortArmoredBattleBusPassengerAnimInstance::PassengerBoneName_Front' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, PassengerBoneName_Rear) == 0x001654, "Member 'UFortArmoredBattleBusPassengerAnimInstance::PassengerBoneName_Rear' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, TurretPitchDegMin) == 0x001658, "Member 'UFortArmoredBattleBusPassengerAnimInstance::TurretPitchDegMin' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, TurretPitchDegMax) == 0x00165C, "Member 'UFortArmoredBattleBusPassengerAnimInstance::TurretPitchDegMax' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusPassengerAnimInstance, LocalPlayerTurretPitchEaseRate) == 0x001660, "Member 'UFortArmoredBattleBusPassengerAnimInstance::LocalPlayerTurretPitchEaseRate' has a wrong offset!");

// Class ArmoredBattleBusRuntime.FortArmoredBattleBusVehicleAnimInstance
// 0x0090 (0x0680 - 0x05F0)
class UFortArmoredBattleBusVehicleAnimInstance final : public UFortVehicleAnimInstance
{
public:
	float                                         FrontTurretAimPitch;                               // 0x05F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RearTurretAimPitch;                                // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrontYawDeltaSmoothed;                             // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RearYawDeltaSmoothed;                              // 0x05FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothedVehicleYawRate;                            // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrontYawDeltaSmoothedAlpha;                        // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RearYawDeltaSmoothedAlpha;                         // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60C[0x4];                                      // 0x060C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               FrontWeaponYaw;                                    // 0x0610(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RearWeaponYaw;                                     // 0x0628(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               PreviousVehicleRotator;                            // 0x0640(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHasFrontTurretPassenger;                          // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasRearTurretPassenger;                           // 0x0659(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65A[0x2];                                      // 0x065A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NetworkEaseRate;                                   // 0x065C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateYawDeltaSmoothedLerpRate;                    // 0x0660(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrontPassengerSeatIndex;                           // 0x0664(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RearPassengerSeatIndex;                            // 0x0668(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrontPassengerYawOffset;                           // 0x066C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RearPassengerYawOffset;                            // 0x0670(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FrontPassengerBoneName;                            // 0x0674(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RearPassengerBoneName;                             // 0x0678(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_67C[0x4];                                      // 0x067C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetPitchAndYaw(const class AFortAthenaVehicle* VehicleActor, const class AFortPlayerPawn* GunnerActor, float* AdjustedPitch, float* AdjustedYaw, bool* bIsLocalPlayerControlled, struct FRotator* YawRotator);
	float UpdateSmoothedVehicleYawRate(const class AFortAthenaVehicle* VehicleActor, const struct FRotator& PreviousRotator);
	void UpdateTurretAimPitchWeaponYaw(const class AFortAthenaVehicle* OwnerVehicle, const class AFortPlayerPawn* GunnerActor, const class FName SocketName, const float YawOffset, float* TurretAimPitch, float* YawDeltaSmoothed, struct FRotator* WeaponYaw);
	float UpdateYawDeltaSmoothed(const class AFortAthenaVehicle* VehicleActor, const class FName SocketName, const struct FRotator& NewRotation, const float SmoothedYawValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortArmoredBattleBusVehicleAnimInstance">();
	}
	static class UFortArmoredBattleBusVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortArmoredBattleBusVehicleAnimInstance>();
	}
};
static_assert(alignof(UFortArmoredBattleBusVehicleAnimInstance) == 0x000010, "Wrong alignment on UFortArmoredBattleBusVehicleAnimInstance");
static_assert(sizeof(UFortArmoredBattleBusVehicleAnimInstance) == 0x000680, "Wrong size on UFortArmoredBattleBusVehicleAnimInstance");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, FrontTurretAimPitch) == 0x0005F0, "Member 'UFortArmoredBattleBusVehicleAnimInstance::FrontTurretAimPitch' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, RearTurretAimPitch) == 0x0005F4, "Member 'UFortArmoredBattleBusVehicleAnimInstance::RearTurretAimPitch' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, FrontYawDeltaSmoothed) == 0x0005F8, "Member 'UFortArmoredBattleBusVehicleAnimInstance::FrontYawDeltaSmoothed' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, RearYawDeltaSmoothed) == 0x0005FC, "Member 'UFortArmoredBattleBusVehicleAnimInstance::RearYawDeltaSmoothed' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, SmoothedVehicleYawRate) == 0x000600, "Member 'UFortArmoredBattleBusVehicleAnimInstance::SmoothedVehicleYawRate' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, FrontYawDeltaSmoothedAlpha) == 0x000604, "Member 'UFortArmoredBattleBusVehicleAnimInstance::FrontYawDeltaSmoothedAlpha' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, RearYawDeltaSmoothedAlpha) == 0x000608, "Member 'UFortArmoredBattleBusVehicleAnimInstance::RearYawDeltaSmoothedAlpha' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, FrontWeaponYaw) == 0x000610, "Member 'UFortArmoredBattleBusVehicleAnimInstance::FrontWeaponYaw' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, RearWeaponYaw) == 0x000628, "Member 'UFortArmoredBattleBusVehicleAnimInstance::RearWeaponYaw' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, PreviousVehicleRotator) == 0x000640, "Member 'UFortArmoredBattleBusVehicleAnimInstance::PreviousVehicleRotator' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, bHasFrontTurretPassenger) == 0x000658, "Member 'UFortArmoredBattleBusVehicleAnimInstance::bHasFrontTurretPassenger' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, bHasRearTurretPassenger) == 0x000659, "Member 'UFortArmoredBattleBusVehicleAnimInstance::bHasRearTurretPassenger' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, NetworkEaseRate) == 0x00065C, "Member 'UFortArmoredBattleBusVehicleAnimInstance::NetworkEaseRate' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, UpdateYawDeltaSmoothedLerpRate) == 0x000660, "Member 'UFortArmoredBattleBusVehicleAnimInstance::UpdateYawDeltaSmoothedLerpRate' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, FrontPassengerSeatIndex) == 0x000664, "Member 'UFortArmoredBattleBusVehicleAnimInstance::FrontPassengerSeatIndex' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, RearPassengerSeatIndex) == 0x000668, "Member 'UFortArmoredBattleBusVehicleAnimInstance::RearPassengerSeatIndex' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, FrontPassengerYawOffset) == 0x00066C, "Member 'UFortArmoredBattleBusVehicleAnimInstance::FrontPassengerYawOffset' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, RearPassengerYawOffset) == 0x000670, "Member 'UFortArmoredBattleBusVehicleAnimInstance::RearPassengerYawOffset' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, FrontPassengerBoneName) == 0x000674, "Member 'UFortArmoredBattleBusVehicleAnimInstance::FrontPassengerBoneName' has a wrong offset!");
static_assert(offsetof(UFortArmoredBattleBusVehicleAnimInstance, RearPassengerBoneName) == 0x000678, "Member 'UFortArmoredBattleBusVehicleAnimInstance::RearPassengerBoneName' has a wrong offset!");

}

