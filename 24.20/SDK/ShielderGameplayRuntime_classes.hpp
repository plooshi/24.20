#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ShielderGameplayRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "ModularGameplay_classes.hpp"


namespace SDK
{

// Class ShielderGameplayRuntime.ShielderCollisionHelperComponent
// 0x0088 (0x0128 - 0x00A0)
class UShielderCollisionHelperComponent final : public UGameFrameworkComponent
{
public:
	class ABuildingGameplayActor*                 ShielderBGA;                                       // 0x00A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                StaticOffset;                                      // 0x00A8(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                AimOffset;                                         // 0x00C0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                AimOffset2D;                                       // 0x00D8(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PitchMultiplier;                                   // 0x00F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PitchMin;                                          // 0x00F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PitchMax;                                          // 0x00F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ShouldUpdateShielderSkelMesh;                      // 0x0100(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShielderCollisionHelperComponent">();
	}
	static class UShielderCollisionHelperComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShielderCollisionHelperComponent>();
	}
};
static_assert(alignof(UShielderCollisionHelperComponent) == 0x000008, "Wrong alignment on UShielderCollisionHelperComponent");
static_assert(sizeof(UShielderCollisionHelperComponent) == 0x000128, "Wrong size on UShielderCollisionHelperComponent");
static_assert(offsetof(UShielderCollisionHelperComponent, ShielderBGA) == 0x0000A0, "Member 'UShielderCollisionHelperComponent::ShielderBGA' has a wrong offset!");
static_assert(offsetof(UShielderCollisionHelperComponent, StaticOffset) == 0x0000A8, "Member 'UShielderCollisionHelperComponent::StaticOffset' has a wrong offset!");
static_assert(offsetof(UShielderCollisionHelperComponent, AimOffset) == 0x0000C0, "Member 'UShielderCollisionHelperComponent::AimOffset' has a wrong offset!");
static_assert(offsetof(UShielderCollisionHelperComponent, AimOffset2D) == 0x0000D8, "Member 'UShielderCollisionHelperComponent::AimOffset2D' has a wrong offset!");
static_assert(offsetof(UShielderCollisionHelperComponent, PitchMultiplier) == 0x0000F0, "Member 'UShielderCollisionHelperComponent::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(UShielderCollisionHelperComponent, PitchMin) == 0x0000F4, "Member 'UShielderCollisionHelperComponent::PitchMin' has a wrong offset!");
static_assert(offsetof(UShielderCollisionHelperComponent, PitchMax) == 0x0000F8, "Member 'UShielderCollisionHelperComponent::PitchMax' has a wrong offset!");
static_assert(offsetof(UShielderCollisionHelperComponent, ShouldUpdateShielderSkelMesh) == 0x000100, "Member 'UShielderCollisionHelperComponent::ShouldUpdateShielderSkelMesh' has a wrong offset!");

}

