#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MusicBlocks

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "NetCore_structs.hpp"


namespace SDK
{

// ScriptStruct MusicBlocks.MusicSequencerHitHandle
// 0x0008 (0x0008 - 0x0000)
struct FMusicSequencerHitHandle final
{
public:
	uint64                                        Handle;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMusicSequencerHitHandle) == 0x000008, "Wrong alignment on FMusicSequencerHitHandle");
static_assert(sizeof(FMusicSequencerHitHandle) == 0x000008, "Wrong size on FMusicSequencerHitHandle");
static_assert(offsetof(FMusicSequencerHitHandle, Handle) == 0x000000, "Member 'FMusicSequencerHitHandle::Handle' has a wrong offset!");

// ScriptStruct MusicBlocks.MusicSequencerHitEntry
// 0x0054 (0x0060 - 0x000C)
struct FMusicSequencerHitEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMusicSequencerHitHandle               Handle;                                            // 0x0010(0x0008)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         ServerWorldTimeStart;                              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0020(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class APlayerState>            InstigatorPlayerState;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector_NetQuantize                    SoundLocation;                                     // 0x0038(0x0018)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SoundIndex;                                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle;                                       // 0x0058(0x0008)(RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMusicSequencerHitEntry) == 0x000008, "Wrong alignment on FMusicSequencerHitEntry");
static_assert(sizeof(FMusicSequencerHitEntry) == 0x000060, "Wrong size on FMusicSequencerHitEntry");
static_assert(offsetof(FMusicSequencerHitEntry, Handle) == 0x000010, "Member 'FMusicSequencerHitEntry::Handle' has a wrong offset!");
static_assert(offsetof(FMusicSequencerHitEntry, ServerWorldTimeStart) == 0x000018, "Member 'FMusicSequencerHitEntry::ServerWorldTimeStart' has a wrong offset!");
static_assert(offsetof(FMusicSequencerHitEntry, ActorClass) == 0x000020, "Member 'FMusicSequencerHitEntry::ActorClass' has a wrong offset!");
static_assert(offsetof(FMusicSequencerHitEntry, Actor) == 0x000028, "Member 'FMusicSequencerHitEntry::Actor' has a wrong offset!");
static_assert(offsetof(FMusicSequencerHitEntry, InstigatorPlayerState) == 0x000030, "Member 'FMusicSequencerHitEntry::InstigatorPlayerState' has a wrong offset!");
static_assert(offsetof(FMusicSequencerHitEntry, SoundLocation) == 0x000038, "Member 'FMusicSequencerHitEntry::SoundLocation' has a wrong offset!");
static_assert(offsetof(FMusicSequencerHitEntry, SoundIndex) == 0x000050, "Member 'FMusicSequencerHitEntry::SoundIndex' has a wrong offset!");
static_assert(offsetof(FMusicSequencerHitEntry, TimerHandle) == 0x000058, "Member 'FMusicSequencerHitEntry::TimerHandle' has a wrong offset!");

// ScriptStruct MusicBlocks.MusicSequencerHitArray
// 0x0018 (0x0120 - 0x0108)
struct FMusicSequencerHitArray final : public FFastArraySerializer
{
public:
	TArray<struct FMusicSequencerHitEntry>        Items;                                             // 0x0108(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UMusicSequencerHitComponent> OwningComponent;                                   // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMusicSequencerHitArray) == 0x000008, "Wrong alignment on FMusicSequencerHitArray");
static_assert(sizeof(FMusicSequencerHitArray) == 0x000120, "Wrong size on FMusicSequencerHitArray");
static_assert(offsetof(FMusicSequencerHitArray, Items) == 0x000108, "Member 'FMusicSequencerHitArray::Items' has a wrong offset!");
static_assert(offsetof(FMusicSequencerHitArray, OwningComponent) == 0x000118, "Member 'FMusicSequencerHitArray::OwningComponent' has a wrong offset!");

}

