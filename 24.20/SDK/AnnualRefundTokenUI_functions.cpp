#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnnualRefundTokenUI

#include "Basic.hpp"

#include "AnnualRefundTokenUI_classes.hpp"
#include "AnnualRefundTokenUI_parameters.hpp"


namespace SDK
{

// Function AnnualRefundTokenUI.FortAnnualRefundTicket.OnPlayLockingAnimation
// (Event, Public, BlueprintEvent)

void UFortAnnualRefundTicket::OnPlayLockingAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAnnualRefundTicket", "OnPlayLockingAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnnualRefundTokenUI.FortAnnualRefundTicket.OnUpdateAvailableState
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsAvailable                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAnnualRefundTicket::OnUpdateAvailableState(const bool bIsAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAnnualRefundTicket", "OnUpdateAvailableState");

	Params::FortAnnualRefundTicket_OnUpdateAvailableState Parms{};

	Parms.bIsAvailable = bIsAvailable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnnualRefundTokenUI.FortAnnualRefundTicket.OnUpdatePendingState
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsPending                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAnnualRefundTicket::OnUpdatePendingState(const bool bIsPending)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAnnualRefundTicket", "OnUpdatePendingState");

	Params::FortAnnualRefundTicket_OnUpdatePendingState Parms{};

	Parms.bIsPending = bIsPending;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnnualRefundTokenUI.FortPurchaseHistoryEntry.OnSetHistory
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bHasBeenRefunded                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsTokenlessRefund                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlayerHasTokens                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNonRefundable                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPurchaseHistoryEntry::OnSetHistory(bool bHasBeenRefunded, bool bIsTokenlessRefund, bool bPlayerHasTokens, bool bNonRefundable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPurchaseHistoryEntry", "OnSetHistory");

	Params::FortPurchaseHistoryEntry_OnSetHistory Parms{};

	Parms.bHasBeenRefunded = bHasBeenRefunded;
	Parms.bIsTokenlessRefund = bIsTokenlessRefund;
	Parms.bPlayerHasTokens = bPlayerHasTokens;
	Parms.bNonRefundable = bNonRefundable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnnualRefundTokenUI.FortPurchaseHistoryEntry.SetPurchaseText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             PurchaseDateText                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             RefundDateText                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bHasBeenRefunded                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFortPurchaseHistoryRefundType          RefundType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPurchaseHistoryEntry::SetPurchaseText(const class FText& PurchaseDateText, const class FText& RefundDateText, bool bHasBeenRefunded, const EFortPurchaseHistoryRefundType RefundType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPurchaseHistoryEntry", "SetPurchaseText");

	Params::FortPurchaseHistoryEntry_SetPurchaseText Parms{};

	Parms.PurchaseDateText = std::move(PurchaseDateText);
	Parms.RefundDateText = std::move(RefundDateText);
	Parms.bHasBeenRefunded = bHasBeenRefunded;
	Parms.RefundType = RefundType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnnualRefundTokenUI.FortPurchaseHistoryEntry.SetupItemCard
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UFortCosmeticItemCard*            ItemCard                                               (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortItem*                        Item                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPurchaseHistoryEntry::SetupItemCard(const class UFortCosmeticItemCard* ItemCard, const class UFortItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPurchaseHistoryEntry", "SetupItemCard");

	Params::FortPurchaseHistoryEntry_SetupItemCard Parms{};

	Parms.ItemCard = ItemCard;
	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnnualRefundTokenUI.FortPurchaseHistoryEntry.UpdateItemList
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class UFortCosmeticItemCard*>    ItemCards                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFortPurchaseHistoryEntry::UpdateItemList(const TArray<class UFortCosmeticItemCard*>& ItemCards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPurchaseHistoryEntry", "UpdateItemList");

	Params::FortPurchaseHistoryEntry_UpdateItemList Parms{};

	Parms.ItemCards = std::move(ItemCards);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnnualRefundTokenUI.FortPurchaseHistoryScreen.BP_IsShowingPurchases
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPurchaseHistoryScreen::BP_IsShowingPurchases()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPurchaseHistoryScreen", "BP_IsShowingPurchases");

	Params::FortPurchaseHistoryScreen_BP_IsShowingPurchases Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AnnualRefundTokenUI.FortPurchaseHistoryScreen.OnBeginRefundSubmission
// (Event, Protected, BlueprintEvent)

void UFortPurchaseHistoryScreen::OnBeginRefundSubmission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPurchaseHistoryScreen", "OnBeginRefundSubmission");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnnualRefundTokenUI.FortPurchaseHistoryScreen.OnEndRefundSubmission
// (Event, Protected, BlueprintEvent)

void UFortPurchaseHistoryScreen::OnEndRefundSubmission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPurchaseHistoryScreen", "OnEndRefundSubmission");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnnualRefundTokenUI.FortPurchaseHistoryScreen.OnNoPurchasesAvailable
// (Event, Protected, BlueprintEvent)

void UFortPurchaseHistoryScreen::OnNoPurchasesAvailable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPurchaseHistoryScreen", "OnNoPurchasesAvailable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnnualRefundTokenUI.FortPurchaseHistoryScreen.OnPopulateView
// (Event, Protected, BlueprintEvent)

void UFortPurchaseHistoryScreen::OnPopulateView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPurchaseHistoryScreen", "OnPopulateView");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnnualRefundTokenUI.FortRefundConfirmation.BP_UpdateItemsList
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class UFortItemDefinition*>      SelectedItemDefs                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   TotalMtxPaid                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortRefundConfirmation::BP_UpdateItemsList(const TArray<class UFortItemDefinition*>& SelectedItemDefs, const int32 TotalMtxPaid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortRefundConfirmation", "BP_UpdateItemsList");

	Params::FortRefundConfirmation_BP_UpdateItemsList Parms{};

	Parms.SelectedItemDefs = std::move(SelectedItemDefs);
	Parms.TotalMtxPaid = TotalMtxPaid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnnualRefundTokenUI.FortRefundConfirmation.BP_UpdateRefundType
// (Event, Protected, BlueprintEvent)
// Parameters:
// EFortPurchaseHistoryRefundType          RefundType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortRefundConfirmation::BP_UpdateRefundType(const EFortPurchaseHistoryRefundType RefundType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortRefundConfirmation", "BP_UpdateRefundType");

	Params::FortRefundConfirmation_BP_UpdateRefundType Parms{};

	Parms.RefundType = RefundType;

	UObject::ProcessEvent(Func, &Parms);
}

}

