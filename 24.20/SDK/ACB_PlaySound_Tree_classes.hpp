#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ACB_PlaySound_Tree

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AudioClustersRuntime_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ACB_PlaySound_Tree.ACB_PlaySound_Tree_C
// 0x0088 (0x00B8 - 0x0030)
class UACB_PlaySound_Tree_C final : public UAudioClusterBehavior
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0030(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSoftObjectPtr<class USoundBase>              sound;                                             // 0x0038(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FVector                                Position;                                          // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CurrentAudioComponent;                             // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OneShotSound;                                      // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        FadeInTime;                                        // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FadeOutTime;                                       // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinSize;                                           // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSize;                                           // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RandomOneshotRange;                                // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ClusterSizeToTreeSize(int32 ClusterSize, double* TreeSize);
	void ExecuteUbergraph_ACB_PlaySound_Tree(int32 EntryPoint);
	double GetRandomOneshotTime();
	void OnLoaded_C8B80DC04C1A324F6D4AB5A27450C3D3(class UObject* Loaded);
	void OnPositionUpdated(const struct FVector& Position_0);
	void OnStart();
	void OnStop();
	void PlayRandomOneshot();
	void QueueRandomOneshot();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ACB_PlaySound_Tree_C">();
	}
	static class UACB_PlaySound_Tree_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UACB_PlaySound_Tree_C>();
	}
};
static_assert(alignof(UACB_PlaySound_Tree_C) == 0x000008, "Wrong alignment on UACB_PlaySound_Tree_C");
static_assert(sizeof(UACB_PlaySound_Tree_C) == 0x0000B8, "Wrong size on UACB_PlaySound_Tree_C");
static_assert(offsetof(UACB_PlaySound_Tree_C, UberGraphFrame) == 0x000030, "Member 'UACB_PlaySound_Tree_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UACB_PlaySound_Tree_C, sound) == 0x000038, "Member 'UACB_PlaySound_Tree_C::sound' has a wrong offset!");
static_assert(offsetof(UACB_PlaySound_Tree_C, Position) == 0x000060, "Member 'UACB_PlaySound_Tree_C::Position' has a wrong offset!");
static_assert(offsetof(UACB_PlaySound_Tree_C, CurrentAudioComponent) == 0x000078, "Member 'UACB_PlaySound_Tree_C::CurrentAudioComponent' has a wrong offset!");
static_assert(offsetof(UACB_PlaySound_Tree_C, Debug) == 0x000080, "Member 'UACB_PlaySound_Tree_C::Debug' has a wrong offset!");
static_assert(offsetof(UACB_PlaySound_Tree_C, OneShotSound) == 0x000088, "Member 'UACB_PlaySound_Tree_C::OneShotSound' has a wrong offset!");
static_assert(offsetof(UACB_PlaySound_Tree_C, FadeInTime) == 0x000090, "Member 'UACB_PlaySound_Tree_C::FadeInTime' has a wrong offset!");
static_assert(offsetof(UACB_PlaySound_Tree_C, FadeOutTime) == 0x000098, "Member 'UACB_PlaySound_Tree_C::FadeOutTime' has a wrong offset!");
static_assert(offsetof(UACB_PlaySound_Tree_C, MinSize) == 0x0000A0, "Member 'UACB_PlaySound_Tree_C::MinSize' has a wrong offset!");
static_assert(offsetof(UACB_PlaySound_Tree_C, MaxSize) == 0x0000A4, "Member 'UACB_PlaySound_Tree_C::MaxSize' has a wrong offset!");
static_assert(offsetof(UACB_PlaySound_Tree_C, RandomOneshotRange) == 0x0000A8, "Member 'UACB_PlaySound_Tree_C::RandomOneshotRange' has a wrong offset!");

}

