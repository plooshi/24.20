#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIDebuggerRuntime

#include "Basic.hpp"

#include "FortniteGame_classes.hpp"
#include "Engine_classes.hpp"
#include "AIDebuggerRuntime_structs.hpp"


namespace SDK
{

// Class AIDebuggerRuntime.AIDebuggerCheatManager
// 0x0000 (0x0028 - 0x0028)
class UAIDebuggerCheatManager final : public UChildCheatManager
{
public:
	void EnableNavMeshVisualizer(const bool bEnable);
	void NextNavMesh();
	void StartAIDebugger(const class FString& AIDebuggerSoftClassPath);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AIDebuggerCheatManager">();
	}
	static class UAIDebuggerCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIDebuggerCheatManager>();
	}
};
static_assert(alignof(UAIDebuggerCheatManager) == 0x000008, "Wrong alignment on UAIDebuggerCheatManager");
static_assert(sizeof(UAIDebuggerCheatManager) == 0x000028, "Wrong size on UAIDebuggerCheatManager");

// Class AIDebuggerRuntime.AIDebuggerRendererComponent
// 0x00A0 (0x0610 - 0x0570)
class UAIDebuggerRendererComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_568[0x98];                                     // 0x0568(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              NavMeshMaterial;                                   // 0x0600(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NavLinkLineThickness;                              // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NavLinkMaxDrawDistance;                            // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AIDebuggerRendererComponent">();
	}
	static class UAIDebuggerRendererComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIDebuggerRendererComponent>();
	}
};
static_assert(alignof(UAIDebuggerRendererComponent) == 0x000010, "Wrong alignment on UAIDebuggerRendererComponent");
static_assert(sizeof(UAIDebuggerRendererComponent) == 0x000610, "Wrong size on UAIDebuggerRendererComponent");
static_assert(offsetof(UAIDebuggerRendererComponent, NavMeshMaterial) == 0x000600, "Member 'UAIDebuggerRendererComponent::NavMeshMaterial' has a wrong offset!");
static_assert(offsetof(UAIDebuggerRendererComponent, NavLinkLineThickness) == 0x000608, "Member 'UAIDebuggerRendererComponent::NavLinkLineThickness' has a wrong offset!");
static_assert(offsetof(UAIDebuggerRendererComponent, NavLinkMaxDrawDistance) == 0x00060C, "Member 'UAIDebuggerRendererComponent::NavLinkMaxDrawDistance' has a wrong offset!");

// Class AIDebuggerRuntime.FortControllerComponent_AIDebugger
// 0x0038 (0x00E0 - 0x00A8)
class UFortControllerComponent_AIDebugger final : public UFortControllerComponent
{
public:
	class APlayerController*                      OwnerPC;                                           // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UAIDebuggerRendererComponent> NavMeshRendererComponentClass;                     // 0x00B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         DefaultEnabledVisualizers;                         // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultNavDataIndexToDisplay;                      // 0x00BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         EnabledVisualizers;                                // 0x00C0(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NumNavMeshes;                                      // 0x00C1(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C2[0x1E];                                      // 0x00C2(0x001E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerExitedIsland(const struct FEventMessageTag& Channel, const struct FPlayerExitSpatialActorContext& PlayerExitSpatialActorContext);
	void OnRep_EnabledVisualizers();
	void SetVisualizationEnable(const EAIDebuggerVisualization VisualizationType, const bool bEnable);
	void VisualizeNavMeshID(const int32 NavMeshID);
	void VisualizeNextNavMesh();

	class UAIDebuggerRendererComponent* GetOrCreateRenderer() const;
	bool IsVisualizationEnabled(const EAIDebuggerVisualization VisualizationType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerComponent_AIDebugger">();
	}
	static class UFortControllerComponent_AIDebugger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerComponent_AIDebugger>();
	}
};
static_assert(alignof(UFortControllerComponent_AIDebugger) == 0x000008, "Wrong alignment on UFortControllerComponent_AIDebugger");
static_assert(sizeof(UFortControllerComponent_AIDebugger) == 0x0000E0, "Wrong size on UFortControllerComponent_AIDebugger");
static_assert(offsetof(UFortControllerComponent_AIDebugger, OwnerPC) == 0x0000A8, "Member 'UFortControllerComponent_AIDebugger::OwnerPC' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AIDebugger, NavMeshRendererComponentClass) == 0x0000B0, "Member 'UFortControllerComponent_AIDebugger::NavMeshRendererComponentClass' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AIDebugger, DefaultEnabledVisualizers) == 0x0000B8, "Member 'UFortControllerComponent_AIDebugger::DefaultEnabledVisualizers' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AIDebugger, DefaultNavDataIndexToDisplay) == 0x0000BC, "Member 'UFortControllerComponent_AIDebugger::DefaultNavDataIndexToDisplay' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AIDebugger, EnabledVisualizers) == 0x0000C0, "Member 'UFortControllerComponent_AIDebugger::EnabledVisualizers' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AIDebugger, NumNavMeshes) == 0x0000C1, "Member 'UFortControllerComponent_AIDebugger::NumNavMeshes' has a wrong offset!");

}

