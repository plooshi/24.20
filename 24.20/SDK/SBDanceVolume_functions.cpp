#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SBDanceVolume

#include "Basic.hpp"

#include "SBDanceVolume_classes.hpp"
#include "SBDanceVolume_parameters.hpp"


namespace SDK
{

// Function SBDanceVolume.FMDanceSynchronizerComponent.GetOwnerFortPlayerPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AFortPlayerPawn*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AFortPlayerPawn* UFMDanceSynchronizerComponent::GetOwnerFortPlayerPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMDanceSynchronizerComponent", "GetOwnerFortPlayerPawn");

	Params::FMDanceSynchronizerComponent_GetOwnerFortPlayerPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SBDanceVolume.FMDanceSynchronizerComponent.GetOwnerSkeletalMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* UFMDanceSynchronizerComponent::GetOwnerSkeletalMeshComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMDanceSynchronizerComponent", "GetOwnerSkeletalMeshComponent");

	Params::FMDanceSynchronizerComponent_GetOwnerSkeletalMeshComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SBDanceVolume.FMDanceSynchronizerComponent.IsMusisSyncEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMDanceSynchronizerComponent::IsMusisSyncEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMDanceSynchronizerComponent", "IsMusisSyncEnabled");

	Params::FMDanceSynchronizerComponent_IsMusisSyncEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SBDanceVolume.FMDanceSynchronizerComponent.SetDanceMusicalTimeInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMusicalTimeSpan                 TimeSpanInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UFMDanceSynchronizerComponent::SetDanceMusicalTimeInfo(const struct FMusicalTimeSpan& TimeSpanInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMDanceSynchronizerComponent", "SetDanceMusicalTimeInfo");

	Params::FMDanceSynchronizerComponent_SetDanceMusicalTimeInfo Parms{};

	Parms.TimeSpanInfo = std::move(TimeSpanInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SBDanceVolume.FMDanceSynchronizerComponent.SetMusicClockReference
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UOldMusicClockComponent*          MusicClockComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMDanceSynchronizerComponent::SetMusicClockReference(class UOldMusicClockComponent* MusicClockComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMDanceSynchronizerComponent", "SetMusicClockReference");

	Params::FMDanceSynchronizerComponent_SetMusicClockReference Parms{};

	Parms.MusicClockComponent = MusicClockComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SBDanceVolume.FMDanceSynchronizerComponent.SetMusicSyncEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMDanceSynchronizerComponent::SetMusicSyncEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMDanceSynchronizerComponent", "SetMusicSyncEnabled");

	Params::FMDanceSynchronizerComponent_SetMusicSyncEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SBDanceVolume.FMDanceSynchronizerComponent.StopOwnerEmoteAudio
// (Final, Native, Public, BlueprintCallable)

void UFMDanceSynchronizerComponent::StopOwnerEmoteAudio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMDanceSynchronizerComponent", "StopOwnerEmoteAudio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SBDanceVolume.SBDanceVolumeLibrary.CalculateDanceMontagePlayInfoWithMusicClock
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UOldMusicClockComponent*          MusicClock                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMusicalTimeSpan                 MontageTimeInfo                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FDanceMontagePlayInfo            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FDanceMontagePlayInfo USBDanceVolumeLibrary::CalculateDanceMontagePlayInfoWithMusicClock(class UOldMusicClockComponent* MusicClock, class UAnimMontage* Montage, const struct FMusicalTimeSpan& MontageTimeInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SBDanceVolumeLibrary", "CalculateDanceMontagePlayInfoWithMusicClock");

	Params::SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicClock Parms{};

	Parms.MusicClock = MusicClock;
	Parms.Montage = Montage;
	Parms.MontageTimeInfo = std::move(MontageTimeInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SBDanceVolume.SBDanceVolumeLibrary.CalculateDanceMontagePlayInfoWithMusicPlayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMusicPlayerComponentBase*        MusicPlayer                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMusicalTimeSpan                 MontageTimeInfo                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FDanceMontagePlayInfo            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FDanceMontagePlayInfo USBDanceVolumeLibrary::CalculateDanceMontagePlayInfoWithMusicPlayer(class UMusicPlayerComponentBase* MusicPlayer, class UAnimMontage* Montage, const struct FMusicalTimeSpan& MontageTimeInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SBDanceVolumeLibrary", "CalculateDanceMontagePlayInfoWithMusicPlayer");

	Params::SBDanceVolumeLibrary_CalculateDanceMontagePlayInfoWithMusicPlayer Parms{};

	Parms.MusicPlayer = MusicPlayer;
	Parms.Montage = Montage;
	Parms.MontageTimeInfo = std::move(MontageTimeInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SBDanceVolume.SBDanceVolumeLibrary.CalculateDanceMontagePlayRateWithMusicClock
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UOldMusicClockComponent*          MusicClock                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Montage                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MontageBeatLength                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USBDanceVolumeLibrary::CalculateDanceMontagePlayRateWithMusicClock(class UOldMusicClockComponent* MusicClock, const class UAnimMontage* Montage, const float MontageBeatLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SBDanceVolumeLibrary", "CalculateDanceMontagePlayRateWithMusicClock");

	Params::SBDanceVolumeLibrary_CalculateDanceMontagePlayRateWithMusicClock Parms{};

	Parms.MusicClock = MusicClock;
	Parms.Montage = Montage;
	Parms.MontageBeatLength = MontageBeatLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SBDanceVolume.SBDanceVolumeLibrary.ForceStopMontage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AFortPawn*                        FortPawn                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USBDanceVolumeLibrary::ForceStopMontage(const class AFortPawn* FortPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SBDanceVolumeLibrary", "ForceStopMontage");

	Params::SBDanceVolumeLibrary_ForceStopMontage Parms{};

	Parms.FortPawn = FortPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SBDanceVolume.SBDanceVolumeLibrary.GetLastEmoteExecuted
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortItemDefinition*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortItemDefinition* USBDanceVolumeLibrary::GetLastEmoteExecuted(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SBDanceVolumeLibrary", "GetLastEmoteExecuted");

	Params::SBDanceVolumeLibrary_GetLastEmoteExecuted Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SBDanceVolume.SBDanceVolumeLibrary.IsMontageSetupForDanceVolumeLooping
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimMontage*                     Montage                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USBDanceVolumeLibrary::IsMontageSetupForDanceVolumeLooping(const class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SBDanceVolumeLibrary", "IsMontageSetupForDanceVolumeLooping");

	Params::SBDanceVolumeLibrary_IsMontageSetupForDanceVolumeLooping Parms{};

	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SBDanceVolume.SBDanceVolumeLibrary.SetWholeMontageLooping
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    Anim                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USBDanceVolumeLibrary::SetWholeMontageLooping(class UAnimInstance* Anim, class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SBDanceVolumeLibrary", "SetWholeMontageLooping");

	Params::SBDanceVolumeLibrary_SetWholeMontageLooping Parms{};

	Parms.Anim = Anim;
	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

