#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProgressiveHeaderBanner

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ProgressiveHeaderBanner.ProgressiveHeaderBanner_C.Update Text
// 0x0020 (0x0020 - 0x0000)
struct ProgressiveHeaderBanner_C_Update_Text final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressiveHeaderBanner_C_Update_Text) == 0x000008, "Wrong alignment on ProgressiveHeaderBanner_C_Update_Text");
static_assert(sizeof(ProgressiveHeaderBanner_C_Update_Text) == 0x000020, "Wrong size on ProgressiveHeaderBanner_C_Update_Text");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Text, InText) == 0x000000, "Member 'ProgressiveHeaderBanner_C_Update_Text::InText' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Text, Temp_bool_Variable) == 0x000018, "Member 'ProgressiveHeaderBanner_C_Update_Text::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Text, CallFunc_TextIsEmpty_ReturnValue) == 0x000019, "Member 'ProgressiveHeaderBanner_C_Update_Text::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Text, Temp_byte_Variable) == 0x00001A, "Member 'ProgressiveHeaderBanner_C_Update_Text::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Text, Temp_byte_Variable_1) == 0x00001B, "Member 'ProgressiveHeaderBanner_C_Update_Text::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Text, K2Node_Select_Default) == 0x00001C, "Member 'ProgressiveHeaderBanner_C_Update_Text::K2Node_Select_Default' has a wrong offset!");

// Function ProgressiveHeaderBanner.ProgressiveHeaderBanner_C.Update Banner State
// 0x0070 (0x0070 - 0x0000)
struct ProgressiveHeaderBanner_C_Update_Banner_State final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Current_Sets_Complete;                             // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Subscribed_0;                                      // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Unlocked_Color;                                    // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Locked_Color;                                      // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressiveHeaderBanner_C_Update_Banner_State) == 0x000008, "Wrong alignment on ProgressiveHeaderBanner_C_Update_Banner_State");
static_assert(sizeof(ProgressiveHeaderBanner_C_Update_Banner_State) == 0x000070, "Wrong size on ProgressiveHeaderBanner_C_Update_Banner_State");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Banner_State, Text) == 0x000000, "Member 'ProgressiveHeaderBanner_C_Update_Banner_State::Text' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Banner_State, Current_Sets_Complete) == 0x000018, "Member 'ProgressiveHeaderBanner_C_Update_Banner_State::Current_Sets_Complete' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Banner_State, Subscribed_0) == 0x000019, "Member 'ProgressiveHeaderBanner_C_Update_Banner_State::Subscribed_0' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Banner_State, Unlocked_Color) == 0x00001C, "Member 'ProgressiveHeaderBanner_C_Update_Banner_State::Unlocked_Color' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Banner_State, Locked_Color) == 0x00002C, "Member 'ProgressiveHeaderBanner_C_Update_Banner_State::Locked_Color' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Banner_State, Temp_bool_Variable) == 0x00003C, "Member 'ProgressiveHeaderBanner_C_Update_Banner_State::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Banner_State, Temp_object_Variable) == 0x000040, "Member 'ProgressiveHeaderBanner_C_Update_Banner_State::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Banner_State, Temp_object_Variable_1) == 0x000048, "Member 'ProgressiveHeaderBanner_C_Update_Banner_State::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Banner_State, CallFunc_BooleanOR_ReturnValue) == 0x000050, "Member 'ProgressiveHeaderBanner_C_Update_Banner_State::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Banner_State, CallFunc_SelectColor_ReturnValue) == 0x000054, "Member 'ProgressiveHeaderBanner_C_Update_Banner_State::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_Update_Banner_State, K2Node_Select_Default) == 0x000068, "Member 'ProgressiveHeaderBanner_C_Update_Banner_State::K2Node_Select_Default' has a wrong offset!");

// Function ProgressiveHeaderBanner.ProgressiveHeaderBanner_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ProgressiveHeaderBanner_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressiveHeaderBanner_C_PreConstruct) == 0x000001, "Wrong alignment on ProgressiveHeaderBanner_C_PreConstruct");
static_assert(sizeof(ProgressiveHeaderBanner_C_PreConstruct) == 0x000001, "Wrong size on ProgressiveHeaderBanner_C_PreConstruct");
static_assert(offsetof(ProgressiveHeaderBanner_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ProgressiveHeaderBanner_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ProgressiveHeaderBanner.ProgressiveHeaderBanner_C.ExecuteUbergraph_ProgressiveHeaderBanner
// 0x0008 (0x0008 - 0x0000)
struct ProgressiveHeaderBanner_C_ExecuteUbergraph_ProgressiveHeaderBanner final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressiveHeaderBanner_C_ExecuteUbergraph_ProgressiveHeaderBanner) == 0x000004, "Wrong alignment on ProgressiveHeaderBanner_C_ExecuteUbergraph_ProgressiveHeaderBanner");
static_assert(sizeof(ProgressiveHeaderBanner_C_ExecuteUbergraph_ProgressiveHeaderBanner) == 0x000008, "Wrong size on ProgressiveHeaderBanner_C_ExecuteUbergraph_ProgressiveHeaderBanner");
static_assert(offsetof(ProgressiveHeaderBanner_C_ExecuteUbergraph_ProgressiveHeaderBanner, EntryPoint) == 0x000000, "Member 'ProgressiveHeaderBanner_C_ExecuteUbergraph_ProgressiveHeaderBanner::EntryPoint' has a wrong offset!");
static_assert(offsetof(ProgressiveHeaderBanner_C_ExecuteUbergraph_ProgressiveHeaderBanner, K2Node_Event_IsDesignTime) == 0x000004, "Member 'ProgressiveHeaderBanner_C_ExecuteUbergraph_ProgressiveHeaderBanner::K2Node_Event_IsDesignTime' has a wrong offset!");

}

