#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GrindingComponent

#include "Basic.hpp"

#include "BP_GrindingComponent_classes.hpp"
#include "BP_GrindingComponent_parameters.hpp"


namespace SDK
{

// Function BP_GrindingComponent.BP_GrindingComponent_C.AddCameraModifier
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::AddCameraModifier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "AddCameraModifier");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.AddMoveIgnoreActors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::AddMoveIgnoreActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "AddMoveIgnoreActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.ADSPressed
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::ADSPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "ADSPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.ADSReleased
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::ADSReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "ADSReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.AllowAnotherImpactEffect
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::AllowAnotherImpactEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "AllowAnotherImpactEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.Anchor Forward Jump
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Planned_Velocity_Without_Jump                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          AnchoredJumpDir                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NewVelocity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Anchored                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GrindingComponent_C::Anchor_Forward_Jump(const struct FVector& Planned_Velocity_Without_Jump, const struct FVector& AnchoredJumpDir, struct FVector* NewVelocity, bool* Anchored)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "Anchor Forward Jump");

	Params::BP_GrindingComponent_C_Anchor_Forward_Jump Parms{};

	Parms.Planned_Velocity_Without_Jump = std::move(Planned_Velocity_Without_Jump);
	Parms.AnchoredJumpDir = std::move(AnchoredJumpDir);

	UObject::ProcessEvent(Func, &Parms);

	if (NewVelocity != nullptr)
		*NewVelocity = std::move(Parms.NewVelocity);

	if (Anchored != nullptr)
		*Anchored = Parms.Anchored;
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.AnchorJump
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          New_Velocity                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Anchored                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GrindingComponent_C::AnchorJump(struct FVector* New_Velocity, bool* Anchored)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "AnchorJump");

	Params::BP_GrindingComponent_C_AnchorJump Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (New_Velocity != nullptr)
		*New_Velocity = std::move(Parms.New_Velocity);

	if (Anchored != nullptr)
		*Anchored = Parms.Anchored;
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.CacheGrindRailActor
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::CacheGrindRailActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "CacheGrindRailActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.CalculateVelocity
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bReplayingMovement                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OutVelocity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GrindingComponent_C::CalculateVelocity(const float DeltaTime, const bool bReplayingMovement, struct FVector* OutVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "CalculateVelocity");

	Params::BP_GrindingComponent_C_CalculateVelocity Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.bReplayingMovement = bReplayingMovement;

	UObject::ProcessEvent(Func, &Parms);

	if (OutVelocity != nullptr)
		*OutVelocity = std::move(Parms.OutVelocity);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.Can Begin Grinding From Land
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_GrindingComponent_C::Can_Begin_Grinding_From_Land()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "Can Begin Grinding From Land");

	Params::BP_GrindingComponent_C_Can_Begin_Grinding_From_Land Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.CanBeginGrinding
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_GrindingComponent_C::CanBeginGrinding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "CanBeginGrinding");

	Params::BP_GrindingComponent_C_CanBeginGrinding Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.Change Sprint State
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    New                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GrindingComponent_C::Change_Sprint_State(bool New)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "Change Sprint State");

	Params::BP_GrindingComponent_C_Change_Sprint_State Parms{};

	Parms.New = New;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.CheckForTryingToJumpStraight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          PotentialAnchorPoint                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          JumpTravelVector                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CancelAnchor                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GrindingComponent_C::CheckForTryingToJumpStraight(const struct FVector& PotentialAnchorPoint, const struct FVector& JumpTravelVector, bool* CancelAnchor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "CheckForTryingToJumpStraight");

	Params::BP_GrindingComponent_C_CheckForTryingToJumpStraight Parms{};

	Parms.PotentialAnchorPoint = std::move(PotentialAnchorPoint);
	Parms.JumpTravelVector = std::move(JumpTravelVector);

	UObject::ProcessEvent(Func, &Parms);

	if (CancelAnchor != nullptr)
		*CancelAnchor = Parms.CancelAnchor;
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.ClearMoveIgnoreActors
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::ClearMoveIgnoreActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "ClearMoveIgnoreActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.Dismount
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::Dismount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "Dismount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.EndGrindingBP
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::EndGrindingBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "EndGrindingBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.ExecuteUbergraph_BP_GrindingComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GrindingComponent_C::ExecuteUbergraph_BP_GrindingComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "ExecuteUbergraph_BP_GrindingComponent");

	Params::BP_GrindingComponent_C_ExecuteUbergraph_BP_GrindingComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.Get Rail Jump To Location Horizontal
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABGA_GrindRail_C*                 InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  VelMagnitude                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TriggerLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          DirectionToCheckAgainst                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid_Angle                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DistanceOnNewRail                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TheDirectionSign                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GrindingComponent_C::Get_Rail_Jump_To_Location_Horizontal(class ABGA_GrindRail_C* InputPin, double VelMagnitude, const struct FVector& TriggerLocation, const struct FVector& DirectionToCheckAgainst, bool* Valid_Angle, struct FVector* Location, double* DistanceOnNewRail, double* TheDirectionSign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "Get Rail Jump To Location Horizontal");

	Params::BP_GrindingComponent_C_Get_Rail_Jump_To_Location_Horizontal Parms{};

	Parms.InputPin = InputPin;
	Parms.VelMagnitude = VelMagnitude;
	Parms.TriggerLocation = std::move(TriggerLocation);
	Parms.DirectionToCheckAgainst = std::move(DirectionToCheckAgainst);

	UObject::ProcessEvent(Func, &Parms);

	if (Valid_Angle != nullptr)
		*Valid_Angle = Parms.Valid_Angle;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (DistanceOnNewRail != nullptr)
		*DistanceOnNewRail = Parms.DistanceOnNewRail;

	if (TheDirectionSign != nullptr)
		*TheDirectionSign = Parms.TheDirectionSign;
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.GetLeanVectorInWorldSpace
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UBP_GrindingComponent_C::GetLeanVectorInWorldSpace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "GetLeanVectorInWorldSpace");

	Params::BP_GrindingComponent_C_GetLeanVectorInWorldSpace Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.Handle Player Landed
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UBP_GrindingComponent_C::Handle_Player_Landed(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "Handle Player Landed");

	Params::BP_GrindingComponent_C_Handle_Player_Landed Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.HandleBoosterModeChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EGrindRailBoosterMode                   PreviousBoosterMode                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GrindingComponent_C::HandleBoosterModeChanged(EGrindRailBoosterMode PreviousBoosterMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "HandleBoosterModeChanged");

	Params::BP_GrindingComponent_C_HandleBoosterModeChanged Parms{};

	Parms.PreviousBoosterMode = PreviousBoosterMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.HandleGrindFinishedAfterJumping
// (Event, Public, BlueprintEvent)

void UBP_GrindingComponent_C::HandleGrindFinishedAfterJumping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "HandleGrindFinishedAfterJumping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.HandleGrindingBegun
// (Event, Public, BlueprintEvent)

void UBP_GrindingComponent_C::HandleGrindingBegun()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "HandleGrindingBegun");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.HandleGrindingEnded
// (Event, Public, BlueprintEvent)

void UBP_GrindingComponent_C::HandleGrindingEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "HandleGrindingEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.HandleGrindingEndedFromReplication
// (Event, Public, BlueprintEvent)

void UBP_GrindingComponent_C::HandleGrindingEndedFromReplication()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "HandleGrindingEndedFromReplication");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.HandleHitWhenGrinding
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UBP_GrindingComponent_C::HandleHitWhenGrinding(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "HandleHitWhenGrinding");

	Params::BP_GrindingComponent_C_HandleHitWhenGrinding Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.HandleJumpOffEnd
// (Event, Public, BlueprintEvent)

void UBP_GrindingComponent_C::HandleJumpOffEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "HandleJumpOffEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.HandleRailJump
// (Event, Public, BlueprintEvent)

void UBP_GrindingComponent_C::HandleRailJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "HandleRailJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.HandleSprintingStateChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewIsSprinting                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GrindingComponent_C::HandleSprintingStateChanged(bool bNewIsSprinting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "HandleSprintingStateChanged");

	Params::BP_GrindingComponent_C_HandleSprintingStateChanged Parms{};

	Parms.bNewIsSprinting = bNewIsSprinting;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.IsOnSlowDownBooster
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_GrindingComponent_C::IsOnSlowDownBooster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "IsOnSlowDownBooster");

	Params::BP_GrindingComponent_C_IsOnSlowDownBooster Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.Jumpoff
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          JumpVelocity                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GrindingComponent_C::Jumpoff(const struct FVector& JumpVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "Jumpoff");

	Params::BP_GrindingComponent_C_Jumpoff Parms{};

	Parms.JumpVelocity = std::move(JumpVelocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.JumpOffEnd
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::JumpOffEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "JumpOffEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.LinkAnimLayer
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::LinkAnimLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "LinkAnimLayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.OnBaseMeshReady
// (Event, Public, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           MeshComponent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_GrindingComponent_C::OnBaseMeshReady(class AFortPlayerPawn* Pawn, class USkeletalMeshComponent* MeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "OnBaseMeshReady");

	Params::BP_GrindingComponent_C_OnBaseMeshReady Parms{};

	Parms.Pawn = Pawn;
	Parms.MeshComponent = MeshComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.OnEnergyCompletelyDrained
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFortComponent_Energy*            EnergyComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_GrindingComponent_C::OnEnergyCompletelyDrained(class UFortComponent_Energy* EnergyComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "OnEnergyCompletelyDrained");

	Params::BP_GrindingComponent_C_OnEnergyCompletelyDrained Parms{};

	Parms.EnergyComponent = EnergyComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.OnFeetLand
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::OnFeetLand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "OnFeetLand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.PlayJumpOnSound
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlayAudio                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GrindingComponent_C::PlayJumpOnSound(bool PlayAudio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "PlayJumpOnSound");

	Params::BP_GrindingComponent_C_PlayJumpOnSound Parms{};

	Parms.PlayAudio = PlayAudio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.Rail Jump
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::Rail_Jump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "Rail Jump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_GrindingComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GrindingComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "ReceiveTick");

	Params::BP_GrindingComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.RemoveCameraModifier
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::RemoveCameraModifier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "RemoveCameraModifier");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.SprintPressed
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::SprintPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "SprintPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.SprintReleased
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::SprintReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "SprintReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.StartedFastBoosting
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::StartedFastBoosting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "StartedFastBoosting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.StartedSlowBoosting
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::StartedSlowBoosting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "StartedSlowBoosting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.StoppedFastBoosting
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::StoppedFastBoosting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "StoppedFastBoosting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.StoppedSlowBoosting
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::StoppedSlowBoosting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "StoppedSlowBoosting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.StopSprinting
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::StopSprinting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "StopSprinting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GrindingComponent.BP_GrindingComponent_C.WentDBNO
// (BlueprintCallable, BlueprintEvent)

void UBP_GrindingComponent_C::WentDBNO()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GrindingComponent_C", "WentDBNO");

	UObject::ProcessEvent(Func, nullptr);
}

}

