#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerAugmentsCodeRuntime

#include "Basic.hpp"

#include "PlayerAugmentsCodeRuntime_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function PlayerAugmentsCodeRuntime.FortAugmentSelectionToolAbility.OnHighlightSelectionUpdated
// 0x0004 (0x0004 - 0x0000)
struct FortAugmentSelectionToolAbility_OnHighlightSelectionUpdated final
{
public:
	int32                                         NewHighlightedChoiceIndex;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAugmentSelectionToolAbility_OnHighlightSelectionUpdated) == 0x000004, "Wrong alignment on FortAugmentSelectionToolAbility_OnHighlightSelectionUpdated");
static_assert(sizeof(FortAugmentSelectionToolAbility_OnHighlightSelectionUpdated) == 0x000004, "Wrong size on FortAugmentSelectionToolAbility_OnHighlightSelectionUpdated");
static_assert(offsetof(FortAugmentSelectionToolAbility_OnHighlightSelectionUpdated, NewHighlightedChoiceIndex) == 0x000000, "Member 'FortAugmentSelectionToolAbility_OnHighlightSelectionUpdated::NewHighlightedChoiceIndex' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortAugmentSelectionToolAbility.OnHoldRerollInputChanged
// 0x0002 (0x0002 - 0x0000)
struct FortAugmentSelectionToolAbility_OnHoldRerollInputChanged final
{
public:
	bool                                          bIsPressed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompletedHold;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAugmentSelectionToolAbility_OnHoldRerollInputChanged) == 0x000001, "Wrong alignment on FortAugmentSelectionToolAbility_OnHoldRerollInputChanged");
static_assert(sizeof(FortAugmentSelectionToolAbility_OnHoldRerollInputChanged) == 0x000002, "Wrong size on FortAugmentSelectionToolAbility_OnHoldRerollInputChanged");
static_assert(offsetof(FortAugmentSelectionToolAbility_OnHoldRerollInputChanged, bIsPressed) == 0x000000, "Member 'FortAugmentSelectionToolAbility_OnHoldRerollInputChanged::bIsPressed' has a wrong offset!");
static_assert(offsetof(FortAugmentSelectionToolAbility_OnHoldRerollInputChanged, bCompletedHold) == 0x000001, "Member 'FortAugmentSelectionToolAbility_OnHoldRerollInputChanged::bCompletedHold' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortAugmentSelectionToolAbility.OnSelectedChoiceIndex
// 0x0004 (0x0004 - 0x0000)
struct FortAugmentSelectionToolAbility_OnSelectedChoiceIndex final
{
public:
	int32                                         ChoiceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAugmentSelectionToolAbility_OnSelectedChoiceIndex) == 0x000004, "Wrong alignment on FortAugmentSelectionToolAbility_OnSelectedChoiceIndex");
static_assert(sizeof(FortAugmentSelectionToolAbility_OnSelectedChoiceIndex) == 0x000004, "Wrong size on FortAugmentSelectionToolAbility_OnSelectedChoiceIndex");
static_assert(offsetof(FortAugmentSelectionToolAbility_OnSelectedChoiceIndex, ChoiceIndex) == 0x000000, "Member 'FortAugmentSelectionToolAbility_OnSelectedChoiceIndex::ChoiceIndex' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortAugmentSelectionToolAbility.SetHighlightedChoiceIndex
// 0x0004 (0x0004 - 0x0000)
struct FortAugmentSelectionToolAbility_SetHighlightedChoiceIndex final
{
public:
	int32                                         NewChoiceIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAugmentSelectionToolAbility_SetHighlightedChoiceIndex) == 0x000004, "Wrong alignment on FortAugmentSelectionToolAbility_SetHighlightedChoiceIndex");
static_assert(sizeof(FortAugmentSelectionToolAbility_SetHighlightedChoiceIndex) == 0x000004, "Wrong size on FortAugmentSelectionToolAbility_SetHighlightedChoiceIndex");
static_assert(offsetof(FortAugmentSelectionToolAbility_SetHighlightedChoiceIndex, NewChoiceIndex) == 0x000000, "Member 'FortAugmentSelectionToolAbility_SetHighlightedChoiceIndex::NewChoiceIndex' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortBattleRoyalePlayerAugmentSystem.AuthoritySetServerGrantingStartedTimestamp
// 0x0004 (0x0004 - 0x0000)
struct FortBattleRoyalePlayerAugmentSystem_AuthoritySetServerGrantingStartedTimestamp final
{
public:
	float                                         ServerTimestamp;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattleRoyalePlayerAugmentSystem_AuthoritySetServerGrantingStartedTimestamp) == 0x000004, "Wrong alignment on FortBattleRoyalePlayerAugmentSystem_AuthoritySetServerGrantingStartedTimestamp");
static_assert(sizeof(FortBattleRoyalePlayerAugmentSystem_AuthoritySetServerGrantingStartedTimestamp) == 0x000004, "Wrong size on FortBattleRoyalePlayerAugmentSystem_AuthoritySetServerGrantingStartedTimestamp");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_AuthoritySetServerGrantingStartedTimestamp, ServerTimestamp) == 0x000000, "Member 'FortBattleRoyalePlayerAugmentSystem_AuthoritySetServerGrantingStartedTimestamp::ServerTimestamp' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortBattleRoyalePlayerAugmentSystem.BlueprintAugmentLog
// 0x0018 (0x0018 - 0x0000)
struct FortBattleRoyalePlayerAugmentSystem_BlueprintAugmentLog final
{
public:
	class FString                                 message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleRoyaleBPAugmentLogVerbosity            Verbosity;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutonomousProxyOnly;                              // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBattleRoyalePlayerAugmentSystem_BlueprintAugmentLog) == 0x000008, "Wrong alignment on FortBattleRoyalePlayerAugmentSystem_BlueprintAugmentLog");
static_assert(sizeof(FortBattleRoyalePlayerAugmentSystem_BlueprintAugmentLog) == 0x000018, "Wrong size on FortBattleRoyalePlayerAugmentSystem_BlueprintAugmentLog");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_BlueprintAugmentLog, message) == 0x000000, "Member 'FortBattleRoyalePlayerAugmentSystem_BlueprintAugmentLog::message' has a wrong offset!");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_BlueprintAugmentLog, Verbosity) == 0x000010, "Member 'FortBattleRoyalePlayerAugmentSystem_BlueprintAugmentLog::Verbosity' has a wrong offset!");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_BlueprintAugmentLog, bAutonomousProxyOnly) == 0x000011, "Member 'FortBattleRoyalePlayerAugmentSystem_BlueprintAugmentLog::bAutonomousProxyOnly' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortBattleRoyalePlayerAugmentSystem.BP_GetAugmentController
// 0x0010 (0x0010 - 0x0000)
struct FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentController final
{
public:
	EFortBRAugmentSystemCastResult                OutExec;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            OutController;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentController) == 0x000008, "Wrong alignment on FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentController");
static_assert(sizeof(FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentController) == 0x000010, "Wrong size on FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentController");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentController, OutExec) == 0x000000, "Member 'FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentController::OutExec' has a wrong offset!");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentController, OutController) == 0x000008, "Member 'FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentController::OutController' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortBattleRoyalePlayerAugmentSystem.BP_GetAugmentPlayerPawn
// 0x0010 (0x0010 - 0x0000)
struct FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentPlayerPawn final
{
public:
	EFortBRAugmentSystemCastResult                OutExec;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        OutFortPlayerPawn;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentPlayerPawn) == 0x000008, "Wrong alignment on FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentPlayerPawn");
static_assert(sizeof(FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentPlayerPawn) == 0x000010, "Wrong size on FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentPlayerPawn");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentPlayerPawn, OutExec) == 0x000000, "Member 'FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentPlayerPawn::OutExec' has a wrong offset!");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentPlayerPawn, OutFortPlayerPawn) == 0x000008, "Member 'FortBattleRoyalePlayerAugmentSystem_BP_GetAugmentPlayerPawn::OutFortPlayerPawn' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortBattleRoyalePlayerAugmentSystem.ChooseUnlockFromList
// 0x0020 (0x0020 - 0x0000)
struct FortBattleRoyalePlayerAugmentSystem_ChooseUnlockFromList final
{
public:
	TArray<struct FPlayerAugmentLockStatus>       LockedList;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortAugmentPassiveUnlockResult        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattleRoyalePlayerAugmentSystem_ChooseUnlockFromList) == 0x000008, "Wrong alignment on FortBattleRoyalePlayerAugmentSystem_ChooseUnlockFromList");
static_assert(sizeof(FortBattleRoyalePlayerAugmentSystem_ChooseUnlockFromList) == 0x000020, "Wrong size on FortBattleRoyalePlayerAugmentSystem_ChooseUnlockFromList");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_ChooseUnlockFromList, LockedList) == 0x000000, "Member 'FortBattleRoyalePlayerAugmentSystem_ChooseUnlockFromList::LockedList' has a wrong offset!");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_ChooseUnlockFromList, ReturnValue) == 0x000010, "Member 'FortBattleRoyalePlayerAugmentSystem_ChooseUnlockFromList::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortBattleRoyalePlayerAugmentSystem.HandlePossessedPawnChanged
// 0x0010 (0x0010 - 0x0000)
struct FortBattleRoyalePlayerAugmentSystem_HandlePossessedPawnChanged final
{
public:
	class APawn*                                  OldPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattleRoyalePlayerAugmentSystem_HandlePossessedPawnChanged) == 0x000008, "Wrong alignment on FortBattleRoyalePlayerAugmentSystem_HandlePossessedPawnChanged");
static_assert(sizeof(FortBattleRoyalePlayerAugmentSystem_HandlePossessedPawnChanged) == 0x000010, "Wrong size on FortBattleRoyalePlayerAugmentSystem_HandlePossessedPawnChanged");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_HandlePossessedPawnChanged, OldPawn) == 0x000000, "Member 'FortBattleRoyalePlayerAugmentSystem_HandlePossessedPawnChanged::OldPawn' has a wrong offset!");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_HandlePossessedPawnChanged, NewPawn) == 0x000008, "Member 'FortBattleRoyalePlayerAugmentSystem_HandlePossessedPawnChanged::NewPawn' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortBattleRoyalePlayerAugmentSystem.OnPossedPawnChanged
// 0x0010 (0x0010 - 0x0000)
struct FortBattleRoyalePlayerAugmentSystem_OnPossedPawnChanged final
{
public:
	class APawn*                                  OldPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattleRoyalePlayerAugmentSystem_OnPossedPawnChanged) == 0x000008, "Wrong alignment on FortBattleRoyalePlayerAugmentSystem_OnPossedPawnChanged");
static_assert(sizeof(FortBattleRoyalePlayerAugmentSystem_OnPossedPawnChanged) == 0x000010, "Wrong size on FortBattleRoyalePlayerAugmentSystem_OnPossedPawnChanged");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_OnPossedPawnChanged, OldPawn) == 0x000000, "Member 'FortBattleRoyalePlayerAugmentSystem_OnPossedPawnChanged::OldPawn' has a wrong offset!");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_OnPossedPawnChanged, NewPawn) == 0x000008, "Member 'FortBattleRoyalePlayerAugmentSystem_OnPossedPawnChanged::NewPawn' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortBattleRoyalePlayerAugmentSystem.OnServerAugmentGrantTimestampReplicated
// 0x0004 (0x0004 - 0x0000)
struct FortBattleRoyalePlayerAugmentSystem_OnServerAugmentGrantTimestampReplicated final
{
public:
	float                                         ServerGrantStartTimestamp;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattleRoyalePlayerAugmentSystem_OnServerAugmentGrantTimestampReplicated) == 0x000004, "Wrong alignment on FortBattleRoyalePlayerAugmentSystem_OnServerAugmentGrantTimestampReplicated");
static_assert(sizeof(FortBattleRoyalePlayerAugmentSystem_OnServerAugmentGrantTimestampReplicated) == 0x000004, "Wrong size on FortBattleRoyalePlayerAugmentSystem_OnServerAugmentGrantTimestampReplicated");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_OnServerAugmentGrantTimestampReplicated, ServerGrantStartTimestamp) == 0x000000, "Member 'FortBattleRoyalePlayerAugmentSystem_OnServerAugmentGrantTimestampReplicated::ServerGrantStartTimestamp' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortBattleRoyalePlayerAugmentSystem.TryClaimUnlock
// 0x0010 (0x0010 - 0x0000)
struct FortBattleRoyalePlayerAugmentSystem_TryClaimUnlock final
{
public:
	struct FFortAugmentPassiveUnlockResult        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattleRoyalePlayerAugmentSystem_TryClaimUnlock) == 0x000008, "Wrong alignment on FortBattleRoyalePlayerAugmentSystem_TryClaimUnlock");
static_assert(sizeof(FortBattleRoyalePlayerAugmentSystem_TryClaimUnlock) == 0x000010, "Wrong size on FortBattleRoyalePlayerAugmentSystem_TryClaimUnlock");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_TryClaimUnlock, ReturnValue) == 0x000000, "Member 'FortBattleRoyalePlayerAugmentSystem_TryClaimUnlock::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortBattleRoyalePlayerAugmentSystem.GetServerGrantingStartedTimestamp
// 0x0004 (0x0004 - 0x0000)
struct FortBattleRoyalePlayerAugmentSystem_GetServerGrantingStartedTimestamp final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattleRoyalePlayerAugmentSystem_GetServerGrantingStartedTimestamp) == 0x000004, "Wrong alignment on FortBattleRoyalePlayerAugmentSystem_GetServerGrantingStartedTimestamp");
static_assert(sizeof(FortBattleRoyalePlayerAugmentSystem_GetServerGrantingStartedTimestamp) == 0x000004, "Wrong size on FortBattleRoyalePlayerAugmentSystem_GetServerGrantingStartedTimestamp");
static_assert(offsetof(FortBattleRoyalePlayerAugmentSystem_GetServerGrantingStartedTimestamp, ReturnValue) == 0x000000, "Member 'FortBattleRoyalePlayerAugmentSystem_GetServerGrantingStartedTimestamp::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortContextualTutorial_MultipleAugmentsQueued.ActivationEventCallback
// 0x0001 (0x0001 - 0x0000)
struct FortContextualTutorial_MultipleAugmentsQueued_ActivationEventCallback final
{
public:
	int8                                          NumPendingAugmentsToGrant;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContextualTutorial_MultipleAugmentsQueued_ActivationEventCallback) == 0x000001, "Wrong alignment on FortContextualTutorial_MultipleAugmentsQueued_ActivationEventCallback");
static_assert(sizeof(FortContextualTutorial_MultipleAugmentsQueued_ActivationEventCallback) == 0x000001, "Wrong size on FortContextualTutorial_MultipleAugmentsQueued_ActivationEventCallback");
static_assert(offsetof(FortContextualTutorial_MultipleAugmentsQueued_ActivationEventCallback, NumPendingAugmentsToGrant) == 0x000000, "Member 'FortContextualTutorial_MultipleAugmentsQueued_ActivationEventCallback::NumPendingAugmentsToGrant' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortContextualTutorial_MultipleAugmentsQueued.CompletionEventCallback
// 0x0002 (0x0002 - 0x0000)
struct FortContextualTutorial_MultipleAugmentsQueued_CompletionEventCallback final
{
public:
	bool                                          bIsOpened;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bViewingAugmentInventory;                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContextualTutorial_MultipleAugmentsQueued_CompletionEventCallback) == 0x000001, "Wrong alignment on FortContextualTutorial_MultipleAugmentsQueued_CompletionEventCallback");
static_assert(sizeof(FortContextualTutorial_MultipleAugmentsQueued_CompletionEventCallback) == 0x000002, "Wrong size on FortContextualTutorial_MultipleAugmentsQueued_CompletionEventCallback");
static_assert(offsetof(FortContextualTutorial_MultipleAugmentsQueued_CompletionEventCallback, bIsOpened) == 0x000000, "Member 'FortContextualTutorial_MultipleAugmentsQueued_CompletionEventCallback::bIsOpened' has a wrong offset!");
static_assert(offsetof(FortContextualTutorial_MultipleAugmentsQueued_CompletionEventCallback, bViewingAugmentInventory) == 0x000001, "Member 'FortContextualTutorial_MultipleAugmentsQueued_CompletionEventCallback::bViewingAugmentInventory' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortContextualTutorial_MultipleAugmentsQueued.HandleBindActivationTrigger
// 0x0008 (0x0008 - 0x0000)
struct FortContextualTutorial_MultipleAugmentsQueued_HandleBindActivationTrigger final
{
public:
	class AFortPlayerControllerZone*              FortPCZone;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContextualTutorial_MultipleAugmentsQueued_HandleBindActivationTrigger) == 0x000008, "Wrong alignment on FortContextualTutorial_MultipleAugmentsQueued_HandleBindActivationTrigger");
static_assert(sizeof(FortContextualTutorial_MultipleAugmentsQueued_HandleBindActivationTrigger) == 0x000008, "Wrong size on FortContextualTutorial_MultipleAugmentsQueued_HandleBindActivationTrigger");
static_assert(offsetof(FortContextualTutorial_MultipleAugmentsQueued_HandleBindActivationTrigger, FortPCZone) == 0x000000, "Member 'FortContextualTutorial_MultipleAugmentsQueued_HandleBindActivationTrigger::FortPCZone' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortContextualTutorial_MultipleAugmentsQueued.HandleBindCompletionTrigger
// 0x0008 (0x0008 - 0x0000)
struct FortContextualTutorial_MultipleAugmentsQueued_HandleBindCompletionTrigger final
{
public:
	class AFortPlayerControllerZone*              FortPCZone;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContextualTutorial_MultipleAugmentsQueued_HandleBindCompletionTrigger) == 0x000008, "Wrong alignment on FortContextualTutorial_MultipleAugmentsQueued_HandleBindCompletionTrigger");
static_assert(sizeof(FortContextualTutorial_MultipleAugmentsQueued_HandleBindCompletionTrigger) == 0x000008, "Wrong size on FortContextualTutorial_MultipleAugmentsQueued_HandleBindCompletionTrigger");
static_assert(offsetof(FortContextualTutorial_MultipleAugmentsQueued_HandleBindCompletionTrigger, FortPCZone) == 0x000000, "Member 'FortContextualTutorial_MultipleAugmentsQueued_HandleBindCompletionTrigger::FortPCZone' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.GetAugmentGrantingComponentFromController
// 0x0010 (0x0010 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_GetAugmentGrantingComponentFromController final
{
public:
	const class AController*                      Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortControllerComponent_AugmentGrantingSystem* ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_GetAugmentGrantingComponentFromController) == 0x000008, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_GetAugmentGrantingComponentFromController");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_GetAugmentGrantingComponentFromController) == 0x000010, "Wrong size on FortControllerComponent_AugmentGrantingSystem_GetAugmentGrantingComponentFromController");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_GetAugmentGrantingComponentFromController, Controller) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_GetAugmentGrantingComponentFromController::Controller' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_GetAugmentGrantingComponentFromController, ReturnValue) == 0x000008, "Member 'FortControllerComponent_AugmentGrantingSystem_GetAugmentGrantingComponentFromController::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.AuthorityIncrementLockedSelectionChoices
// 0x0004 (0x0004 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_AuthorityIncrementLockedSelectionChoices final
{
public:
	int32                                         NumLocksToAdd;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_AuthorityIncrementLockedSelectionChoices) == 0x000004, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_AuthorityIncrementLockedSelectionChoices");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_AuthorityIncrementLockedSelectionChoices) == 0x000004, "Wrong size on FortControllerComponent_AugmentGrantingSystem_AuthorityIncrementLockedSelectionChoices");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_AuthorityIncrementLockedSelectionChoices, NumLocksToAdd) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_AuthorityIncrementLockedSelectionChoices::NumLocksToAdd' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.AuthorityRequestSelectionToolItemGrant
// 0x0008 (0x0008 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_AuthorityRequestSelectionToolItemGrant final
{
public:
	class UObject*                                Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_AuthorityRequestSelectionToolItemGrant) == 0x000008, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_AuthorityRequestSelectionToolItemGrant");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_AuthorityRequestSelectionToolItemGrant) == 0x000008, "Wrong size on FortControllerComponent_AugmentGrantingSystem_AuthorityRequestSelectionToolItemGrant");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_AuthorityRequestSelectionToolItemGrant, Instigator) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_AuthorityRequestSelectionToolItemGrant::Instigator' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.AuthoritySetAvailableAugmentChoices
// 0x0010 (0x0010 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_AuthoritySetAvailableAugmentChoices final
{
public:
	TArray<struct FPlayerAugmentChoiceDatum>      AvailableAugmentsToGrant;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_AuthoritySetAvailableAugmentChoices) == 0x000008, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_AuthoritySetAvailableAugmentChoices");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_AuthoritySetAvailableAugmentChoices) == 0x000010, "Wrong size on FortControllerComponent_AugmentGrantingSystem_AuthoritySetAvailableAugmentChoices");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_AuthoritySetAvailableAugmentChoices, AvailableAugmentsToGrant) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_AuthoritySetAvailableAugmentChoices::AvailableAugmentsToGrant' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.ClientSelectAvailableAugmentToGrant
// 0x0008 (0x0008 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_ClientSelectAvailableAugmentToGrant final
{
public:
	class UFortPlayerAugmentItemDefinition*       ChosenAugmentDef;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_ClientSelectAvailableAugmentToGrant) == 0x000008, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_ClientSelectAvailableAugmentToGrant");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_ClientSelectAvailableAugmentToGrant) == 0x000008, "Wrong size on FortControllerComponent_AugmentGrantingSystem_ClientSelectAvailableAugmentToGrant");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_ClientSelectAvailableAugmentToGrant, ChosenAugmentDef) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_ClientSelectAvailableAugmentToGrant::ChosenAugmentDef' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.HandleChangedBuildMode
// 0x0001 (0x0001 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_HandleChangedBuildMode final
{
public:
	bool                                          bEnteredBuildMode;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_HandleChangedBuildMode) == 0x000001, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_HandleChangedBuildMode");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_HandleChangedBuildMode) == 0x000001, "Wrong size on FortControllerComponent_AugmentGrantingSystem_HandleChangedBuildMode");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_HandleChangedBuildMode, bEnteredBuildMode) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_HandleChangedBuildMode::bEnteredBuildMode' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.HandleGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_HandleGamePhaseChanged final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_HandleGamePhaseChanged) == 0x000001, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_HandleGamePhaseChanged");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_HandleGamePhaseChanged) == 0x000001, "Wrong size on FortControllerComponent_AugmentGrantingSystem_HandleGamePhaseChanged");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_HandleGamePhaseChanged, GamePhase) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_HandleGamePhaseChanged::GamePhase' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.HandlePossessedPawnChanged
// 0x0010 (0x0010 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_HandlePossessedPawnChanged final
{
public:
	class APawn*                                  OldPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_HandlePossessedPawnChanged) == 0x000008, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_HandlePossessedPawnChanged");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_HandlePossessedPawnChanged) == 0x000010, "Wrong size on FortControllerComponent_AugmentGrantingSystem_HandlePossessedPawnChanged");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_HandlePossessedPawnChanged, OldPawn) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_HandlePossessedPawnChanged::OldPawn' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_HandlePossessedPawnChanged, NewPawn) == 0x000008, "Member 'FortControllerComponent_AugmentGrantingSystem_HandlePossessedPawnChanged::NewPawn' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.HandleToggleFullscreenMap
// 0x0001 (0x0001 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_HandleToggleFullscreenMap final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_HandleToggleFullscreenMap) == 0x000001, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_HandleToggleFullscreenMap");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_HandleToggleFullscreenMap) == 0x000001, "Wrong size on FortControllerComponent_AugmentGrantingSystem_HandleToggleFullscreenMap");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_HandleToggleFullscreenMap, bVisible) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_HandleToggleFullscreenMap::bVisible' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.ServerGrantAugment
// 0x0008 (0x0008 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_ServerGrantAugment final
{
public:
	class UFortPlayerAugmentItemDefinition*       ChosenAugmentDef;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_ServerGrantAugment) == 0x000008, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_ServerGrantAugment");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_ServerGrantAugment) == 0x000008, "Wrong size on FortControllerComponent_AugmentGrantingSystem_ServerGrantAugment");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_ServerGrantAugment, ChosenAugmentDef) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_ServerGrantAugment::ChosenAugmentDef' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.CanReroll
// 0x0001 (0x0001 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_CanReroll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_CanReroll) == 0x000001, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_CanReroll");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_CanReroll) == 0x000001, "Wrong size on FortControllerComponent_AugmentGrantingSystem_CanReroll");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_CanReroll, ReturnValue) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_CanReroll::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.GetAvailableAugmentsToGrant
// 0x0010 (0x0010 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_GetAvailableAugmentsToGrant final
{
public:
	TArray<struct FPlayerAugmentChoiceDatum>      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_GetAvailableAugmentsToGrant) == 0x000008, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_GetAvailableAugmentsToGrant");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_GetAvailableAugmentsToGrant) == 0x000010, "Wrong size on FortControllerComponent_AugmentGrantingSystem_GetAvailableAugmentsToGrant");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_GetAvailableAugmentsToGrant, ReturnValue) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_GetAvailableAugmentsToGrant::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.GetNumFreeRerolls
// 0x0004 (0x0004 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_GetNumFreeRerolls final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_GetNumFreeRerolls) == 0x000004, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_GetNumFreeRerolls");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_GetNumFreeRerolls) == 0x000004, "Wrong size on FortControllerComponent_AugmentGrantingSystem_GetNumFreeRerolls");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_GetNumFreeRerolls, ReturnValue) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_GetNumFreeRerolls::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.GetPendingAugmentsToGrant
// 0x0004 (0x0004 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_GetPendingAugmentsToGrant final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_GetPendingAugmentsToGrant) == 0x000004, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_GetPendingAugmentsToGrant");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_GetPendingAugmentsToGrant) == 0x000004, "Wrong size on FortControllerComponent_AugmentGrantingSystem_GetPendingAugmentsToGrant");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_GetPendingAugmentsToGrant, ReturnValue) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_GetPendingAugmentsToGrant::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.IsSelectionChoicesLocked
// 0x0001 (0x0001 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_IsSelectionChoicesLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_IsSelectionChoicesLocked) == 0x000001, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_IsSelectionChoicesLocked");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_IsSelectionChoicesLocked) == 0x000001, "Wrong size on FortControllerComponent_AugmentGrantingSystem_IsSelectionChoicesLocked");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_IsSelectionChoicesLocked, ReturnValue) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_IsSelectionChoicesLocked::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem.IsSelectionItemEquipped
// 0x0001 (0x0001 - 0x0000)
struct FortControllerComponent_AugmentGrantingSystem_IsSelectionItemEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentGrantingSystem_IsSelectionItemEquipped) == 0x000001, "Wrong alignment on FortControllerComponent_AugmentGrantingSystem_IsSelectionItemEquipped");
static_assert(sizeof(FortControllerComponent_AugmentGrantingSystem_IsSelectionItemEquipped) == 0x000001, "Wrong size on FortControllerComponent_AugmentGrantingSystem_IsSelectionItemEquipped");
static_assert(offsetof(FortControllerComponent_AugmentGrantingSystem_IsSelectionItemEquipped, ReturnValue) == 0x000000, "Member 'FortControllerComponent_AugmentGrantingSystem_IsSelectionItemEquipped::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentUIEvents.HandleAugmentSelectorOpenedStatusChanged
// 0x0002 (0x0002 - 0x0000)
struct FortControllerComponent_AugmentUIEvents_HandleAugmentSelectorOpenedStatusChanged final
{
public:
	bool                                          bIsOpened;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bViewingInventory;                                 // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentUIEvents_HandleAugmentSelectorOpenedStatusChanged) == 0x000001, "Wrong alignment on FortControllerComponent_AugmentUIEvents_HandleAugmentSelectorOpenedStatusChanged");
static_assert(sizeof(FortControllerComponent_AugmentUIEvents_HandleAugmentSelectorOpenedStatusChanged) == 0x000002, "Wrong size on FortControllerComponent_AugmentUIEvents_HandleAugmentSelectorOpenedStatusChanged");
static_assert(offsetof(FortControllerComponent_AugmentUIEvents_HandleAugmentSelectorOpenedStatusChanged, bIsOpened) == 0x000000, "Member 'FortControllerComponent_AugmentUIEvents_HandleAugmentSelectorOpenedStatusChanged::bIsOpened' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_AugmentUIEvents_HandleAugmentSelectorOpenedStatusChanged, bViewingInventory) == 0x000001, "Member 'FortControllerComponent_AugmentUIEvents_HandleAugmentSelectorOpenedStatusChanged::bViewingInventory' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentUIEvents.SetNumGrantableAugmentsForPlaylist
// 0x0004 (0x0004 - 0x0000)
struct FortControllerComponent_AugmentUIEvents_SetNumGrantableAugmentsForPlaylist final
{
public:
	int32                                         NewNumRounds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentUIEvents_SetNumGrantableAugmentsForPlaylist) == 0x000004, "Wrong alignment on FortControllerComponent_AugmentUIEvents_SetNumGrantableAugmentsForPlaylist");
static_assert(sizeof(FortControllerComponent_AugmentUIEvents_SetNumGrantableAugmentsForPlaylist) == 0x000004, "Wrong size on FortControllerComponent_AugmentUIEvents_SetNumGrantableAugmentsForPlaylist");
static_assert(offsetof(FortControllerComponent_AugmentUIEvents_SetNumGrantableAugmentsForPlaylist, NewNumRounds) == 0x000000, "Member 'FortControllerComponent_AugmentUIEvents_SetNumGrantableAugmentsForPlaylist::NewNumRounds' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentUIEvents.UpdatedTimerProgress
// 0x0008 (0x0008 - 0x0000)
struct FortControllerComponent_AugmentUIEvents_UpdatedTimerProgress final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimePercentage;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_AugmentUIEvents_UpdatedTimerProgress) == 0x000004, "Wrong alignment on FortControllerComponent_AugmentUIEvents_UpdatedTimerProgress");
static_assert(sizeof(FortControllerComponent_AugmentUIEvents_UpdatedTimerProgress) == 0x000008, "Wrong size on FortControllerComponent_AugmentUIEvents_UpdatedTimerProgress");
static_assert(offsetof(FortControllerComponent_AugmentUIEvents_UpdatedTimerProgress, TimeRemaining) == 0x000000, "Member 'FortControllerComponent_AugmentUIEvents_UpdatedTimerProgress::TimeRemaining' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_AugmentUIEvents_UpdatedTimerProgress, TimePercentage) == 0x000004, "Member 'FortControllerComponent_AugmentUIEvents_UpdatedTimerProgress::TimePercentage' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_DynamicRollPlayerComponent.AuthorityRollChoices
// 0x0028 (0x0028 - 0x0000)
struct FortControllerComponent_DynamicRollPlayerComponent_AuthorityRollChoices final
{
public:
	int32                                         NumChoices;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortItemDefinition*>            IgnoreItems;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FFortDynamicRollResult>         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_DynamicRollPlayerComponent_AuthorityRollChoices) == 0x000008, "Wrong alignment on FortControllerComponent_DynamicRollPlayerComponent_AuthorityRollChoices");
static_assert(sizeof(FortControllerComponent_DynamicRollPlayerComponent_AuthorityRollChoices) == 0x000028, "Wrong size on FortControllerComponent_DynamicRollPlayerComponent_AuthorityRollChoices");
static_assert(offsetof(FortControllerComponent_DynamicRollPlayerComponent_AuthorityRollChoices, NumChoices) == 0x000000, "Member 'FortControllerComponent_DynamicRollPlayerComponent_AuthorityRollChoices::NumChoices' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_DynamicRollPlayerComponent_AuthorityRollChoices, IgnoreItems) == 0x000008, "Member 'FortControllerComponent_DynamicRollPlayerComponent_AuthorityRollChoices::IgnoreItems' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_DynamicRollPlayerComponent_AuthorityRollChoices, ReturnValue) == 0x000018, "Member 'FortControllerComponent_DynamicRollPlayerComponent_AuthorityRollChoices::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_PlayerAugmentPersistence.AuthoritySetCarryOverPlayerAugments
// 0x0010 (0x0010 - 0x0000)
struct FortControllerComponent_PlayerAugmentPersistence_AuthoritySetCarryOverPlayerAugments final
{
public:
	TArray<struct FCarryOverPlayerAugment>        NewCarryOverPlayerAugments;                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_PlayerAugmentPersistence_AuthoritySetCarryOverPlayerAugments) == 0x000008, "Wrong alignment on FortControllerComponent_PlayerAugmentPersistence_AuthoritySetCarryOverPlayerAugments");
static_assert(sizeof(FortControllerComponent_PlayerAugmentPersistence_AuthoritySetCarryOverPlayerAugments) == 0x000010, "Wrong size on FortControllerComponent_PlayerAugmentPersistence_AuthoritySetCarryOverPlayerAugments");
static_assert(offsetof(FortControllerComponent_PlayerAugmentPersistence_AuthoritySetCarryOverPlayerAugments, NewCarryOverPlayerAugments) == 0x000000, "Member 'FortControllerComponent_PlayerAugmentPersistence_AuthoritySetCarryOverPlayerAugments::NewCarryOverPlayerAugments' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_PlayerAugmentPersistence.AuthoritySetRollCountSinceLastRandomUnlock
// 0x0004 (0x0004 - 0x0000)
struct FortControllerComponent_PlayerAugmentPersistence_AuthoritySetRollCountSinceLastRandomUnlock final
{
public:
	int32                                         NewRollCount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_PlayerAugmentPersistence_AuthoritySetRollCountSinceLastRandomUnlock) == 0x000004, "Wrong alignment on FortControllerComponent_PlayerAugmentPersistence_AuthoritySetRollCountSinceLastRandomUnlock");
static_assert(sizeof(FortControllerComponent_PlayerAugmentPersistence_AuthoritySetRollCountSinceLastRandomUnlock) == 0x000004, "Wrong size on FortControllerComponent_PlayerAugmentPersistence_AuthoritySetRollCountSinceLastRandomUnlock");
static_assert(offsetof(FortControllerComponent_PlayerAugmentPersistence_AuthoritySetRollCountSinceLastRandomUnlock, NewRollCount) == 0x000000, "Member 'FortControllerComponent_PlayerAugmentPersistence_AuthoritySetRollCountSinceLastRandomUnlock::NewRollCount' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_PlayerAugmentPersistence.AuthorityUnlockPlayerAugment
// 0x0008 (0x0008 - 0x0000)
struct FortControllerComponent_PlayerAugmentPersistence_AuthorityUnlockPlayerAugment final
{
public:
	class UFortPlayerAugmentItemDefinition*       PlayerAugmentToUnlock;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_PlayerAugmentPersistence_AuthorityUnlockPlayerAugment) == 0x000008, "Wrong alignment on FortControllerComponent_PlayerAugmentPersistence_AuthorityUnlockPlayerAugment");
static_assert(sizeof(FortControllerComponent_PlayerAugmentPersistence_AuthorityUnlockPlayerAugment) == 0x000008, "Wrong size on FortControllerComponent_PlayerAugmentPersistence_AuthorityUnlockPlayerAugment");
static_assert(offsetof(FortControllerComponent_PlayerAugmentPersistence_AuthorityUnlockPlayerAugment, PlayerAugmentToUnlock) == 0x000000, "Member 'FortControllerComponent_PlayerAugmentPersistence_AuthorityUnlockPlayerAugment::PlayerAugmentToUnlock' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_PlayerAugmentPersistence.HandleAthenaGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct FortControllerComponent_PlayerAugmentPersistence_HandleAthenaGamePhaseChanged final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_PlayerAugmentPersistence_HandleAthenaGamePhaseChanged) == 0x000001, "Wrong alignment on FortControllerComponent_PlayerAugmentPersistence_HandleAthenaGamePhaseChanged");
static_assert(sizeof(FortControllerComponent_PlayerAugmentPersistence_HandleAthenaGamePhaseChanged) == 0x000001, "Wrong size on FortControllerComponent_PlayerAugmentPersistence_HandleAthenaGamePhaseChanged");
static_assert(offsetof(FortControllerComponent_PlayerAugmentPersistence_HandleAthenaGamePhaseChanged, GamePhase) == 0x000000, "Member 'FortControllerComponent_PlayerAugmentPersistence_HandleAthenaGamePhaseChanged::GamePhase' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_PlayerAugmentPersistence.HandleCollectionDataLoaded
// 0x0028 (0x0028 - 0x0000)
struct FortControllerComponent_PlayerAugmentPersistence_HandleCollectionDataLoaded final
{
public:
	TSoftObjectPtr<class UFortCollectionData>     BaseCollectionDataSoftPtr;                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_PlayerAugmentPersistence_HandleCollectionDataLoaded) == 0x000008, "Wrong alignment on FortControllerComponent_PlayerAugmentPersistence_HandleCollectionDataLoaded");
static_assert(sizeof(FortControllerComponent_PlayerAugmentPersistence_HandleCollectionDataLoaded) == 0x000028, "Wrong size on FortControllerComponent_PlayerAugmentPersistence_HandleCollectionDataLoaded");
static_assert(offsetof(FortControllerComponent_PlayerAugmentPersistence_HandleCollectionDataLoaded, BaseCollectionDataSoftPtr) == 0x000000, "Member 'FortControllerComponent_PlayerAugmentPersistence_HandleCollectionDataLoaded::BaseCollectionDataSoftPtr' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_PlayerAugmentPersistence.HandleCollectionDataTableLoaded
// 0x0028 (0x0028 - 0x0000)
struct FortControllerComponent_PlayerAugmentPersistence_HandleCollectionDataTableLoaded final
{
public:
	TSoftObjectPtr<class UFortCollectionsDataTable> CollectionsDataTableSoftPtr;                       // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_PlayerAugmentPersistence_HandleCollectionDataTableLoaded) == 0x000008, "Wrong alignment on FortControllerComponent_PlayerAugmentPersistence_HandleCollectionDataTableLoaded");
static_assert(sizeof(FortControllerComponent_PlayerAugmentPersistence_HandleCollectionDataTableLoaded) == 0x000028, "Wrong size on FortControllerComponent_PlayerAugmentPersistence_HandleCollectionDataTableLoaded");
static_assert(offsetof(FortControllerComponent_PlayerAugmentPersistence_HandleCollectionDataTableLoaded, CollectionsDataTableSoftPtr) == 0x000000, "Member 'FortControllerComponent_PlayerAugmentPersistence_HandleCollectionDataTableLoaded::CollectionsDataTableSoftPtr' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_PlayerAugmentPersistence.GetCarryOverPlayerAugments
// 0x0010 (0x0010 - 0x0000)
struct FortControllerComponent_PlayerAugmentPersistence_GetCarryOverPlayerAugments final
{
public:
	TArray<struct FCarryOverPlayerAugment>        OutCarryOverPlayerAugments;                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_PlayerAugmentPersistence_GetCarryOverPlayerAugments) == 0x000008, "Wrong alignment on FortControllerComponent_PlayerAugmentPersistence_GetCarryOverPlayerAugments");
static_assert(sizeof(FortControllerComponent_PlayerAugmentPersistence_GetCarryOverPlayerAugments) == 0x000010, "Wrong size on FortControllerComponent_PlayerAugmentPersistence_GetCarryOverPlayerAugments");
static_assert(offsetof(FortControllerComponent_PlayerAugmentPersistence_GetCarryOverPlayerAugments, OutCarryOverPlayerAugments) == 0x000000, "Member 'FortControllerComponent_PlayerAugmentPersistence_GetCarryOverPlayerAugments::OutCarryOverPlayerAugments' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_PlayerAugmentPersistence.GetLockedList
// 0x0018 (0x0018 - 0x0000)
struct FortControllerComponent_PlayerAugmentPersistence_GetLockedList final
{
public:
	TArray<struct FPlayerAugmentLockStatus>       OutLockedList;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIncludeSharedAugments;                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortControllerComponent_PlayerAugmentPersistence_GetLockedList) == 0x000008, "Wrong alignment on FortControllerComponent_PlayerAugmentPersistence_GetLockedList");
static_assert(sizeof(FortControllerComponent_PlayerAugmentPersistence_GetLockedList) == 0x000018, "Wrong size on FortControllerComponent_PlayerAugmentPersistence_GetLockedList");
static_assert(offsetof(FortControllerComponent_PlayerAugmentPersistence_GetLockedList, OutLockedList) == 0x000000, "Member 'FortControllerComponent_PlayerAugmentPersistence_GetLockedList::OutLockedList' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_PlayerAugmentPersistence_GetLockedList, bIncludeSharedAugments) == 0x000010, "Member 'FortControllerComponent_PlayerAugmentPersistence_GetLockedList::bIncludeSharedAugments' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_PlayerAugmentPersistence.GetLockStatus
// 0x0020 (0x0020 - 0x0000)
struct FortControllerComponent_PlayerAugmentPersistence_GetLockStatus final
{
public:
	class UFortPlayerAugmentItemDefinition*       PlayerAugmentItemDefinition;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerAugmentLockStatus               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_PlayerAugmentPersistence_GetLockStatus) == 0x000008, "Wrong alignment on FortControllerComponent_PlayerAugmentPersistence_GetLockStatus");
static_assert(sizeof(FortControllerComponent_PlayerAugmentPersistence_GetLockStatus) == 0x000020, "Wrong size on FortControllerComponent_PlayerAugmentPersistence_GetLockStatus");
static_assert(offsetof(FortControllerComponent_PlayerAugmentPersistence_GetLockStatus, PlayerAugmentItemDefinition) == 0x000000, "Member 'FortControllerComponent_PlayerAugmentPersistence_GetLockStatus::PlayerAugmentItemDefinition' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_PlayerAugmentPersistence_GetLockStatus, ReturnValue) == 0x000008, "Member 'FortControllerComponent_PlayerAugmentPersistence_GetLockStatus::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_PlayerAugmentPersistence.GetLockStatusForAll
// 0x0010 (0x0010 - 0x0000)
struct FortControllerComponent_PlayerAugmentPersistence_GetLockStatusForAll final
{
public:
	TArray<struct FPlayerAugmentLockStatus>       OutLockStatusArray;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_PlayerAugmentPersistence_GetLockStatusForAll) == 0x000008, "Wrong alignment on FortControllerComponent_PlayerAugmentPersistence_GetLockStatusForAll");
static_assert(sizeof(FortControllerComponent_PlayerAugmentPersistence_GetLockStatusForAll) == 0x000010, "Wrong size on FortControllerComponent_PlayerAugmentPersistence_GetLockStatusForAll");
static_assert(offsetof(FortControllerComponent_PlayerAugmentPersistence_GetLockStatusForAll, OutLockStatusArray) == 0x000000, "Member 'FortControllerComponent_PlayerAugmentPersistence_GetLockStatusForAll::OutLockStatusArray' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortControllerComponent_PlayerAugmentPersistence.GetRollCountSinceLastRandomUnlock
// 0x0004 (0x0004 - 0x0000)
struct FortControllerComponent_PlayerAugmentPersistence_GetRollCountSinceLastRandomUnlock final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_PlayerAugmentPersistence_GetRollCountSinceLastRandomUnlock) == 0x000004, "Wrong alignment on FortControllerComponent_PlayerAugmentPersistence_GetRollCountSinceLastRandomUnlock");
static_assert(sizeof(FortControllerComponent_PlayerAugmentPersistence_GetRollCountSinceLastRandomUnlock) == 0x000004, "Wrong size on FortControllerComponent_PlayerAugmentPersistence_GetRollCountSinceLastRandomUnlock");
static_assert(offsetof(FortControllerComponent_PlayerAugmentPersistence_GetRollCountSinceLastRandomUnlock, ReturnValue) == 0x000000, "Member 'FortControllerComponent_PlayerAugmentPersistence_GetRollCountSinceLastRandomUnlock::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortGamestateComponent_DynamicRollTableManager.HandlePlaylistDataReady
// 0x0030 (0x0030 - 0x0000)
struct FortGamestateComponent_DynamicRollTableManager_HandlePlaylistDataReady final
{
public:
	class AFortGameStateAthena*                   GameState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortPlaylist*                    Playlist;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGamestateComponent_DynamicRollTableManager_HandlePlaylistDataReady) == 0x000008, "Wrong alignment on FortGamestateComponent_DynamicRollTableManager_HandlePlaylistDataReady");
static_assert(sizeof(FortGamestateComponent_DynamicRollTableManager_HandlePlaylistDataReady) == 0x000030, "Wrong size on FortGamestateComponent_DynamicRollTableManager_HandlePlaylistDataReady");
static_assert(offsetof(FortGamestateComponent_DynamicRollTableManager_HandlePlaylistDataReady, GameState) == 0x000000, "Member 'FortGamestateComponent_DynamicRollTableManager_HandlePlaylistDataReady::GameState' has a wrong offset!");
static_assert(offsetof(FortGamestateComponent_DynamicRollTableManager_HandlePlaylistDataReady, Playlist) == 0x000008, "Member 'FortGamestateComponent_DynamicRollTableManager_HandlePlaylistDataReady::Playlist' has a wrong offset!");
static_assert(offsetof(FortGamestateComponent_DynamicRollTableManager_HandlePlaylistDataReady, PlaylistContextTags) == 0x000010, "Member 'FortGamestateComponent_DynamicRollTableManager_HandlePlaylistDataReady::PlaylistContextTags' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortMcpCollectionPlayerAugment.AddToPlayerCollection
// 0x0010 (0x0010 - 0x0000)
struct FortMcpCollectionPlayerAugment_AddToPlayerCollection final
{
public:
	const class AFortPlayerController*            PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerAugmentVariantTag;                           // 0x0008(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpCollectionPlayerAugment_AddToPlayerCollection) == 0x000008, "Wrong alignment on FortMcpCollectionPlayerAugment_AddToPlayerCollection");
static_assert(sizeof(FortMcpCollectionPlayerAugment_AddToPlayerCollection) == 0x000010, "Wrong size on FortMcpCollectionPlayerAugment_AddToPlayerCollection");
static_assert(offsetof(FortMcpCollectionPlayerAugment_AddToPlayerCollection, PlayerController) == 0x000000, "Member 'FortMcpCollectionPlayerAugment_AddToPlayerCollection::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMcpCollectionPlayerAugment_AddToPlayerCollection, PlayerAugmentVariantTag) == 0x000008, "Member 'FortMcpCollectionPlayerAugment_AddToPlayerCollection::PlayerAugmentVariantTag' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortMcpCollectionPlayerAugment.MarkSeenForPlayer
// 0x0010 (0x0010 - 0x0000)
struct FortMcpCollectionPlayerAugment_MarkSeenForPlayer final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VariantTag;                                        // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpCollectionPlayerAugment_MarkSeenForPlayer) == 0x000008, "Wrong alignment on FortMcpCollectionPlayerAugment_MarkSeenForPlayer");
static_assert(sizeof(FortMcpCollectionPlayerAugment_MarkSeenForPlayer) == 0x000010, "Wrong size on FortMcpCollectionPlayerAugment_MarkSeenForPlayer");
static_assert(offsetof(FortMcpCollectionPlayerAugment_MarkSeenForPlayer, PlayerController) == 0x000000, "Member 'FortMcpCollectionPlayerAugment_MarkSeenForPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMcpCollectionPlayerAugment_MarkSeenForPlayer, VariantTag) == 0x000008, "Member 'FortMcpCollectionPlayerAugment_MarkSeenForPlayer::VariantTag' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortPlayerAugmentCheatManager.ForceSelectionAugments
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerAugmentCheatManager_ForceSelectionAugments final
{
public:
	class FString                                 AugmentNameFirst;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AugmentNameSecond;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentCheatManager_ForceSelectionAugments) == 0x000008, "Wrong alignment on FortPlayerAugmentCheatManager_ForceSelectionAugments");
static_assert(sizeof(FortPlayerAugmentCheatManager_ForceSelectionAugments) == 0x000020, "Wrong size on FortPlayerAugmentCheatManager_ForceSelectionAugments");
static_assert(offsetof(FortPlayerAugmentCheatManager_ForceSelectionAugments, AugmentNameFirst) == 0x000000, "Member 'FortPlayerAugmentCheatManager_ForceSelectionAugments::AugmentNameFirst' has a wrong offset!");
static_assert(offsetof(FortPlayerAugmentCheatManager_ForceSelectionAugments, AugmentNameSecond) == 0x000010, "Member 'FortPlayerAugmentCheatManager_ForceSelectionAugments::AugmentNameSecond' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortPlayerAugmentCheatManager.GiveAugment
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerAugmentCheatManager_GiveAugment final
{
public:
	class FString                                 AugmentName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentCheatManager_GiveAugment) == 0x000008, "Wrong alignment on FortPlayerAugmentCheatManager_GiveAugment");
static_assert(sizeof(FortPlayerAugmentCheatManager_GiveAugment) == 0x000010, "Wrong size on FortPlayerAugmentCheatManager_GiveAugment");
static_assert(offsetof(FortPlayerAugmentCheatManager_GiveAugment, AugmentName) == 0x000000, "Member 'FortPlayerAugmentCheatManager_GiveAugment::AugmentName' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortPlayerAugmentCheatManager.GiveAugmentToBots
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerAugmentCheatManager_GiveAugmentToBots final
{
public:
	class FString                                 AugmentName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentCheatManager_GiveAugmentToBots) == 0x000008, "Wrong alignment on FortPlayerAugmentCheatManager_GiveAugmentToBots");
static_assert(sizeof(FortPlayerAugmentCheatManager_GiveAugmentToBots) == 0x000010, "Wrong size on FortPlayerAugmentCheatManager_GiveAugmentToBots");
static_assert(offsetof(FortPlayerAugmentCheatManager_GiveAugmentToBots, AugmentName) == 0x000000, "Member 'FortPlayerAugmentCheatManager_GiveAugmentToBots::AugmentName' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortPlayerAugmentCheatManager.ResetAugmentGrantingToSeed
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAugmentCheatManager_ResetAugmentGrantingToSeed final
{
public:
	int32                                         Seed;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentCheatManager_ResetAugmentGrantingToSeed) == 0x000004, "Wrong alignment on FortPlayerAugmentCheatManager_ResetAugmentGrantingToSeed");
static_assert(sizeof(FortPlayerAugmentCheatManager_ResetAugmentGrantingToSeed) == 0x000004, "Wrong size on FortPlayerAugmentCheatManager_ResetAugmentGrantingToSeed");
static_assert(offsetof(FortPlayerAugmentCheatManager_ResetAugmentGrantingToSeed, Seed) == 0x000000, "Member 'FortPlayerAugmentCheatManager_ResetAugmentGrantingToSeed::Seed' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortPlayerAugmentCheatManager.ServerLogDynamicWeightsForPlayer
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerAugmentCheatManager_ServerLogDynamicWeightsForPlayer final
{
public:
	bool                                          bVeryDetailedReport;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentCheatManager_ServerLogDynamicWeightsForPlayer) == 0x000001, "Wrong alignment on FortPlayerAugmentCheatManager_ServerLogDynamicWeightsForPlayer");
static_assert(sizeof(FortPlayerAugmentCheatManager_ServerLogDynamicWeightsForPlayer) == 0x000001, "Wrong size on FortPlayerAugmentCheatManager_ServerLogDynamicWeightsForPlayer");
static_assert(offsetof(FortPlayerAugmentCheatManager_ServerLogDynamicWeightsForPlayer, bVeryDetailedReport) == 0x000000, "Member 'FortPlayerAugmentCheatManager_ServerLogDynamicWeightsForPlayer::bVeryDetailedReport' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortPlayerAugmentCheatManager.SetPlayerAugmentRollCountSinceLastUnlock
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAugmentCheatManager_SetPlayerAugmentRollCountSinceLastUnlock final
{
public:
	int32                                         RollCount;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentCheatManager_SetPlayerAugmentRollCountSinceLastUnlock) == 0x000004, "Wrong alignment on FortPlayerAugmentCheatManager_SetPlayerAugmentRollCountSinceLastUnlock");
static_assert(sizeof(FortPlayerAugmentCheatManager_SetPlayerAugmentRollCountSinceLastUnlock) == 0x000004, "Wrong size on FortPlayerAugmentCheatManager_SetPlayerAugmentRollCountSinceLastUnlock");
static_assert(offsetof(FortPlayerAugmentCheatManager_SetPlayerAugmentRollCountSinceLastUnlock, RollCount) == 0x000000, "Member 'FortPlayerAugmentCheatManager_SetPlayerAugmentRollCountSinceLastUnlock::RollCount' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortPlayerAugmentCheatManager.CollectPlayerAugment
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerAugmentCheatManager_CollectPlayerAugment final
{
public:
	class FString                                 TagMatch;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAugmentCheatManager_CollectPlayerAugment) == 0x000008, "Wrong alignment on FortPlayerAugmentCheatManager_CollectPlayerAugment");
static_assert(sizeof(FortPlayerAugmentCheatManager_CollectPlayerAugment) == 0x000010, "Wrong size on FortPlayerAugmentCheatManager_CollectPlayerAugment");
static_assert(offsetof(FortPlayerAugmentCheatManager_CollectPlayerAugment, TagMatch) == 0x000000, "Member 'FortPlayerAugmentCheatManager_CollectPlayerAugment::TagMatch' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortPlayerStateComponent_PlayerAugmentSystem.GetActiveAugments
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerStateComponent_PlayerAugmentSystem_GetActiveAugments final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortPlayerAugmentItemDefinition*> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerStateComponent_PlayerAugmentSystem_GetActiveAugments) == 0x000008, "Wrong alignment on FortPlayerStateComponent_PlayerAugmentSystem_GetActiveAugments");
static_assert(sizeof(FortPlayerStateComponent_PlayerAugmentSystem_GetActiveAugments) == 0x000018, "Wrong size on FortPlayerStateComponent_PlayerAugmentSystem_GetActiveAugments");
static_assert(offsetof(FortPlayerStateComponent_PlayerAugmentSystem_GetActiveAugments, Actor) == 0x000000, "Member 'FortPlayerStateComponent_PlayerAugmentSystem_GetActiveAugments::Actor' has a wrong offset!");
static_assert(offsetof(FortPlayerStateComponent_PlayerAugmentSystem_GetActiveAugments, ReturnValue) == 0x000008, "Member 'FortPlayerStateComponent_PlayerAugmentSystem_GetActiveAugments::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortPlayerStateComponent_PlayerAugmentSystem.GetAugmentComponent
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponent final
{
public:
	const class AActor*                           PlayerContextActor;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPlayerStateComponent_PlayerAugmentSystem* ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponent) == 0x000008, "Wrong alignment on FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponent");
static_assert(sizeof(FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponent) == 0x000010, "Wrong size on FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponent");
static_assert(offsetof(FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponent, PlayerContextActor) == 0x000000, "Member 'FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponent::PlayerContextActor' has a wrong offset!");
static_assert(offsetof(FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponent, ReturnValue) == 0x000008, "Member 'FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponent::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortPlayerStateComponent_PlayerAugmentSystem.GetAugmentComponentValidated
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponentValidated final
{
public:
	EAugmentExecResult                            OutExec;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           PlayerContextActor;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPlayerStateComponent_PlayerAugmentSystem* ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponentValidated) == 0x000008, "Wrong alignment on FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponentValidated");
static_assert(sizeof(FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponentValidated) == 0x000018, "Wrong size on FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponentValidated");
static_assert(offsetof(FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponentValidated, OutExec) == 0x000000, "Member 'FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponentValidated::OutExec' has a wrong offset!");
static_assert(offsetof(FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponentValidated, PlayerContextActor) == 0x000008, "Member 'FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponentValidated::PlayerContextActor' has a wrong offset!");
static_assert(offsetof(FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponentValidated, ReturnValue) == 0x000010, "Member 'FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentComponentValidated::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortPlayerStateComponent_PlayerAugmentSystem.GetAugmentMatchDataCacheFloat
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentMatchDataCacheFloat final
{
public:
	EAugmentExecResult                            OutExec;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TargetAugmentCacheTag;                             // 0x0004(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentMatchDataCacheFloat) == 0x000008, "Wrong alignment on FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentMatchDataCacheFloat");
static_assert(sizeof(FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentMatchDataCacheFloat) == 0x000010, "Wrong size on FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentMatchDataCacheFloat");
static_assert(offsetof(FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentMatchDataCacheFloat, OutExec) == 0x000000, "Member 'FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentMatchDataCacheFloat::OutExec' has a wrong offset!");
static_assert(offsetof(FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentMatchDataCacheFloat, TargetAugmentCacheTag) == 0x000004, "Member 'FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentMatchDataCacheFloat::TargetAugmentCacheTag' has a wrong offset!");
static_assert(offsetof(FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentMatchDataCacheFloat, ReturnValue) == 0x000008, "Member 'FortPlayerStateComponent_PlayerAugmentSystem_GetAugmentMatchDataCacheFloat::ReturnValue' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortPlayerStateComponent_PlayerAugmentSystem.HandleBotPlayerPawnSpawned
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerStateComponent_PlayerAugmentSystem_HandleBotPlayerPawnSpawned final
{
public:
	class AFortAthenaAIBotController*             BotController;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawnAthena*                  BotPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerStateComponent_PlayerAugmentSystem_HandleBotPlayerPawnSpawned) == 0x000008, "Wrong alignment on FortPlayerStateComponent_PlayerAugmentSystem_HandleBotPlayerPawnSpawned");
static_assert(sizeof(FortPlayerStateComponent_PlayerAugmentSystem_HandleBotPlayerPawnSpawned) == 0x000010, "Wrong size on FortPlayerStateComponent_PlayerAugmentSystem_HandleBotPlayerPawnSpawned");
static_assert(offsetof(FortPlayerStateComponent_PlayerAugmentSystem_HandleBotPlayerPawnSpawned, BotController) == 0x000000, "Member 'FortPlayerStateComponent_PlayerAugmentSystem_HandleBotPlayerPawnSpawned::BotController' has a wrong offset!");
static_assert(offsetof(FortPlayerStateComponent_PlayerAugmentSystem_HandleBotPlayerPawnSpawned, BotPawn) == 0x000008, "Member 'FortPlayerStateComponent_PlayerAugmentSystem_HandleBotPlayerPawnSpawned::BotPawn' has a wrong offset!");

// Function PlayerAugmentsCodeRuntime.FortPlayerStateComponent_PlayerAugmentSystem.SetAugmentMatchDataCacheFloat
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerStateComponent_PlayerAugmentSystem_SetAugmentMatchDataCacheFloat final
{
public:
	struct FGameplayTag                           TargetAugmentCacheTag;                             // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InData;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerStateComponent_PlayerAugmentSystem_SetAugmentMatchDataCacheFloat) == 0x000008, "Wrong alignment on FortPlayerStateComponent_PlayerAugmentSystem_SetAugmentMatchDataCacheFloat");
static_assert(sizeof(FortPlayerStateComponent_PlayerAugmentSystem_SetAugmentMatchDataCacheFloat) == 0x000010, "Wrong size on FortPlayerStateComponent_PlayerAugmentSystem_SetAugmentMatchDataCacheFloat");
static_assert(offsetof(FortPlayerStateComponent_PlayerAugmentSystem_SetAugmentMatchDataCacheFloat, TargetAugmentCacheTag) == 0x000000, "Member 'FortPlayerStateComponent_PlayerAugmentSystem_SetAugmentMatchDataCacheFloat::TargetAugmentCacheTag' has a wrong offset!");
static_assert(offsetof(FortPlayerStateComponent_PlayerAugmentSystem_SetAugmentMatchDataCacheFloat, InData) == 0x000008, "Member 'FortPlayerStateComponent_PlayerAugmentSystem_SetAugmentMatchDataCacheFloat::InData' has a wrong offset!");

}

