#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioMotorSim

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct AudioMotorSim.AudioMotorSimInputContext
// 0x002C (0x002C - 0x0000)
struct FAudioMotorSimInputContext final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardSpeed;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SideSpeed;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpSpeed;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Throttle;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brake;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurfaceFrictionModifier;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotorFrictionModifier;                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Boost;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDriving;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGrounded;                                         // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanShift;                                         // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClutchEngaged;                                    // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioMotorSimInputContext) == 0x000004, "Wrong alignment on FAudioMotorSimInputContext");
static_assert(sizeof(FAudioMotorSimInputContext) == 0x00002C, "Wrong size on FAudioMotorSimInputContext");
static_assert(offsetof(FAudioMotorSimInputContext, DeltaTime) == 0x000000, "Member 'FAudioMotorSimInputContext::DeltaTime' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimInputContext, Speed) == 0x000004, "Member 'FAudioMotorSimInputContext::Speed' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimInputContext, ForwardSpeed) == 0x000008, "Member 'FAudioMotorSimInputContext::ForwardSpeed' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimInputContext, SideSpeed) == 0x00000C, "Member 'FAudioMotorSimInputContext::SideSpeed' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimInputContext, UpSpeed) == 0x000010, "Member 'FAudioMotorSimInputContext::UpSpeed' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimInputContext, Throttle) == 0x000014, "Member 'FAudioMotorSimInputContext::Throttle' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimInputContext, Brake) == 0x000018, "Member 'FAudioMotorSimInputContext::Brake' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimInputContext, SurfaceFrictionModifier) == 0x00001C, "Member 'FAudioMotorSimInputContext::SurfaceFrictionModifier' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimInputContext, MotorFrictionModifier) == 0x000020, "Member 'FAudioMotorSimInputContext::MotorFrictionModifier' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimInputContext, Boost) == 0x000024, "Member 'FAudioMotorSimInputContext::Boost' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimInputContext, bDriving) == 0x000028, "Member 'FAudioMotorSimInputContext::bDriving' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimInputContext, bGrounded) == 0x000029, "Member 'FAudioMotorSimInputContext::bGrounded' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimInputContext, bCanShift) == 0x00002A, "Member 'FAudioMotorSimInputContext::bCanShift' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimInputContext, bClutchEngaged) == 0x00002B, "Member 'FAudioMotorSimInputContext::bClutchEngaged' has a wrong offset!");

// ScriptStruct AudioMotorSim.AudioMotorSimRuntimeContext
// 0x0014 (0x0014 - 0x0000)
struct FAudioMotorSimRuntimeContext final
{
public:
	bool                                          bShifting;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Gear;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RPM;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioMotorSimRuntimeContext) == 0x000004, "Wrong alignment on FAudioMotorSimRuntimeContext");
static_assert(sizeof(FAudioMotorSimRuntimeContext) == 0x000014, "Wrong size on FAudioMotorSimRuntimeContext");
static_assert(offsetof(FAudioMotorSimRuntimeContext, bShifting) == 0x000000, "Member 'FAudioMotorSimRuntimeContext::bShifting' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimRuntimeContext, Gear) == 0x000004, "Member 'FAudioMotorSimRuntimeContext::Gear' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimRuntimeContext, RPM) == 0x000008, "Member 'FAudioMotorSimRuntimeContext::RPM' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimRuntimeContext, Volume) == 0x00000C, "Member 'FAudioMotorSimRuntimeContext::Volume' has a wrong offset!");
static_assert(offsetof(FAudioMotorSimRuntimeContext, Pitch) == 0x000010, "Member 'FAudioMotorSimRuntimeContext::Pitch' has a wrong offset!");

// ScriptStruct AudioMotorSim.MotorSimEntry
// 0x0018 (0x0018 - 0x0000)
struct FMotorSimEntry final
{
public:
	TScriptInterface<class IAudioMotorSim>        Sim;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortOrder;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMotorSimEntry) == 0x000008, "Wrong alignment on FMotorSimEntry");
static_assert(sizeof(FMotorSimEntry) == 0x000018, "Wrong size on FMotorSimEntry");
static_assert(offsetof(FMotorSimEntry, Sim) == 0x000000, "Member 'FMotorSimEntry::Sim' has a wrong offset!");
static_assert(offsetof(FMotorSimEntry, SortOrder) == 0x000010, "Member 'FMotorSimEntry::SortOrder' has a wrong offset!");

}

