#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CRDBossRuntime

#include "Basic.hpp"

#include "CRDBossRuntime_classes.hpp"
#include "CRDBossRuntime_parameters.hpp"


namespace SDK
{

// Function CRDBossRuntime.BossRuntimeBlueprintFunctionlibrary.AddNewValueToBoolMap
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(bool OldValue, bool NewValue)>OnOldValueFoundDelegate                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FGameplayTag, bool>         InMap                                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBossRuntimeBlueprintFunctionlibrary::AddNewValueToBoolMap(TDelegate<void(bool OldValue, bool NewValue)> OnOldValueFoundDelegate, TMap<struct FGameplayTag, bool>& InMap, const struct FGameplayTag& InKey, bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BossRuntimeBlueprintFunctionlibrary", "AddNewValueToBoolMap");

	Params::BossRuntimeBlueprintFunctionlibrary_AddNewValueToBoolMap Parms{};

	Parms.OnOldValueFoundDelegate = OnOldValueFoundDelegate;
	Parms.InMap = std::move(InMap);
	Parms.InKey = std::move(InKey);
	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InMap = std::move(Parms.InMap);
}


// Function CRDBossRuntime.BossRuntimeBlueprintFunctionlibrary.AddNewValueToFloatMap
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(float OldValue, float NewValue)>OnOldValueFoundDelegate                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FGameplayTag, double>       InMap                                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBossRuntimeBlueprintFunctionlibrary::AddNewValueToFloatMap(TDelegate<void(float OldValue, float NewValue)> OnOldValueFoundDelegate, TMap<struct FGameplayTag, double>& InMap, const struct FGameplayTag& InKey, float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BossRuntimeBlueprintFunctionlibrary", "AddNewValueToFloatMap");

	Params::BossRuntimeBlueprintFunctionlibrary_AddNewValueToFloatMap Parms{};

	Parms.OnOldValueFoundDelegate = OnOldValueFoundDelegate;
	Parms.InMap = std::move(InMap);
	Parms.InKey = std::move(InKey);
	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InMap = std::move(Parms.InMap);
}


// Function CRDBossRuntime.BossRuntimeBlueprintFunctionlibrary.AddNewValueToIntMap
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(int32 OldValue, int32 NewValue)>OnOldValueFoundDelegate                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FGameplayTag, int32>        InMap                                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBossRuntimeBlueprintFunctionlibrary::AddNewValueToIntMap(TDelegate<void(int32 OldValue, int32 NewValue)> OnOldValueFoundDelegate, TMap<struct FGameplayTag, int32>& InMap, const struct FGameplayTag& InKey, int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BossRuntimeBlueprintFunctionlibrary", "AddNewValueToIntMap");

	Params::BossRuntimeBlueprintFunctionlibrary_AddNewValueToIntMap Parms{};

	Parms.OnOldValueFoundDelegate = OnOldValueFoundDelegate;
	Parms.InMap = std::move(InMap);
	Parms.InKey = std::move(InKey);
	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InMap = std::move(Parms.InMap);
}


// Function CRDBossRuntime.BossRuntimeBlueprintFunctionlibrary.DoAbilityActivationChecksPass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AFortPawn*                        OwningPawn                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortGameplayAbility*             FortGameplayAbility                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBossRuntimeBlueprintFunctionlibrary::DoAbilityActivationChecksPass(const class AFortPawn* OwningPawn, const class UFortGameplayAbility* FortGameplayAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BossRuntimeBlueprintFunctionlibrary", "DoAbilityActivationChecksPass");

	Params::BossRuntimeBlueprintFunctionlibrary_DoAbilityActivationChecksPass Parms{};

	Parms.OwningPawn = OwningPawn;
	Parms.FortGameplayAbility = FortGameplayAbility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CRDBossRuntime.BossRuntimeBlueprintFunctionlibrary.DoAbilityDistanceChecksPass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AFortPawn*                        OwningPawn                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortGameplayAbility*             FortGameplayAbility                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            MinRange                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            MaxRange                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBossRuntimeBlueprintFunctionlibrary::DoAbilityDistanceChecksPass(const class AFortPawn* OwningPawn, const class UFortGameplayAbility* FortGameplayAbility, const class AActor* TargetActor, const struct FGameplayTagContainer& MinRange, const struct FGameplayTagContainer& MaxRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BossRuntimeBlueprintFunctionlibrary", "DoAbilityDistanceChecksPass");

	Params::BossRuntimeBlueprintFunctionlibrary_DoAbilityDistanceChecksPass Parms{};

	Parms.OwningPawn = OwningPawn;
	Parms.FortGameplayAbility = FortGameplayAbility;
	Parms.TargetActor = TargetActor;
	Parms.MinRange = std::move(MinRange);
	Parms.MaxRange = std::move(MaxRange);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CRDBossRuntime.BossRuntimeBlueprintFunctionlibrary.DoAbilityRotationChecksPass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AFortPawn*                        OwningPawn                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortGameplayAbility*             FortGameplayAbility                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBossRuntimeBlueprintFunctionlibrary::DoAbilityRotationChecksPass(const class AFortPawn* OwningPawn, const class UFortGameplayAbility* FortGameplayAbility, const class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BossRuntimeBlueprintFunctionlibrary", "DoAbilityRotationChecksPass");

	Params::BossRuntimeBlueprintFunctionlibrary_DoAbilityRotationChecksPass Parms{};

	Parms.OwningPawn = OwningPawn;
	Parms.FortGameplayAbility = FortGameplayAbility;
	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CRDBossRuntime.BossRuntimeBlueprintFunctionlibrary.GetActorNavAgentLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutVector                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBossRuntimeBlueprintFunctionlibrary::GetActorNavAgentLocation(class AActor* InActor, struct FVector* OutVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BossRuntimeBlueprintFunctionlibrary", "GetActorNavAgentLocation");

	Params::BossRuntimeBlueprintFunctionlibrary_GetActorNavAgentLocation Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVector != nullptr)
		*OutVector = std::move(Parms.OutVector);

	return Parms.ReturnValue;
}


// Function CRDBossRuntime.BossRuntimeBlueprintFunctionlibrary.GetBossAbilityRegistryScope
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UFortGameplayAbility*             InAbility                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UBossRuntimeBlueprintFunctionlibrary::GetBossAbilityRegistryScope(class UFortGameplayAbility* InAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BossRuntimeBlueprintFunctionlibrary", "GetBossAbilityRegistryScope");

	Params::BossRuntimeBlueprintFunctionlibrary_GetBossAbilityRegistryScope Parms{};

	Parms.InAbility = InAbility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CRDBossRuntime.BossRuntimeBlueprintFunctionlibrary.GetExportPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBossRuntimeBlueprintFunctionlibrary::GetExportPath(class UObject* InObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BossRuntimeBlueprintFunctionlibrary", "GetExportPath");

	Params::BossRuntimeBlueprintFunctionlibrary_GetExportPath Parms{};

	Parms.InObject = InObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CRDBossRuntime.BossRuntimeBlueprintFunctionlibrary.MakeFortItemEntryFromVariantHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FItemVariantHandle               InVariantHandle                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortItemEntry                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFortItemEntry UBossRuntimeBlueprintFunctionlibrary::MakeFortItemEntryFromVariantHandle(const struct FItemVariantHandle& InVariantHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BossRuntimeBlueprintFunctionlibrary", "MakeFortItemEntryFromVariantHandle");

	Params::BossRuntimeBlueprintFunctionlibrary_MakeFortItemEntryFromVariantHandle Parms{};

	Parms.InVariantHandle = std::move(InVariantHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CRDBossRuntime.FortBossInstanceVariantComponent.AddAbility
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FItemVariantHandle               VariantHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UFortGameplayAbility> AbilityClass                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortBossInstanceVariantComponent::AddAbility(const struct FItemVariantHandle& VariantHandle, TSubclassOf<class UFortGameplayAbility> AbilityClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBossInstanceVariantComponent", "AddAbility");

	Params::FortBossInstanceVariantComponent_AddAbility Parms{};

	Parms.VariantHandle = std::move(VariantHandle);
	Parms.AbilityClass = AbilityClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CRDBossRuntime.FortBossInstanceVariantComponent.AddAbilityAsync
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FItemVariantHandle               VariantHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             SoftAbilityClassReference                              (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool Succeeded, struct FItemVariantHandle& VariantHandle)>OnAbilityAdded                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortBossInstanceVariantComponent::AddAbilityAsync(const struct FItemVariantHandle& VariantHandle, const TSoftClassPtr<class UClass>& SoftAbilityClassReference, TDelegate<void(bool Succeeded, struct FItemVariantHandle& VariantHandle)> OnAbilityAdded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBossInstanceVariantComponent", "AddAbilityAsync");

	Params::FortBossInstanceVariantComponent_AddAbilityAsync Parms{};

	Parms.VariantHandle = std::move(VariantHandle);
	Parms.SoftAbilityClassReference = SoftAbilityClassReference;
	Parms.OnAbilityAdded = OnAbilityAdded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CRDBossRuntime.FortBossInstanceVariantComponent.RemoveAbilityByVariantHandle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FItemVariantHandle               VariantHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortBossInstanceVariantComponent::RemoveAbilityByVariantHandle(const struct FItemVariantHandle& VariantHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBossInstanceVariantComponent", "RemoveAbilityByVariantHandle");

	Params::FortBossInstanceVariantComponent_RemoveAbilityByVariantHandle Parms{};

	Parms.VariantHandle = std::move(VariantHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CRDBossRuntime.FortBossInstanceVariantComponent.UpdateNavAgent
// (Final, Native, Public, BlueprintCallable)

void UFortBossInstanceVariantComponent::UpdateNavAgent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBossInstanceVariantComponent", "UpdateNavAgent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CRDBossRuntime.FortBossInstanceVariantComponent.GetAbilitySpecHandleForVariantHandle
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayAbilitySpecHandle       OutAbilitySpecHandle                                   (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FItemVariantHandle               VariantHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortBossInstanceVariantComponent::GetAbilitySpecHandleForVariantHandle(struct FGameplayAbilitySpecHandle* OutAbilitySpecHandle, const struct FItemVariantHandle& VariantHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBossInstanceVariantComponent", "GetAbilitySpecHandleForVariantHandle");

	Params::FortBossInstanceVariantComponent_GetAbilitySpecHandleForVariantHandle Parms{};

	Parms.VariantHandle = std::move(VariantHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAbilitySpecHandle != nullptr)
		*OutAbilitySpecHandle = std::move(Parms.OutAbilitySpecHandle);

	return Parms.ReturnValue;
}


// Function CRDBossRuntime.FortBossInstanceVariantComponent.GetAbilityTagsForVariantHandle
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            OutAbilityTags                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FItemVariantHandle               VariantHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortBossInstanceVariantComponent::GetAbilityTagsForVariantHandle(struct FGameplayTagContainer* OutAbilityTags, const struct FItemVariantHandle& VariantHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBossInstanceVariantComponent", "GetAbilityTagsForVariantHandle");

	Params::FortBossInstanceVariantComponent_GetAbilityTagsForVariantHandle Parms{};

	Parms.VariantHandle = std::move(VariantHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAbilityTags != nullptr)
		*OutAbilityTags = std::move(Parms.OutAbilityTags);

	return Parms.ReturnValue;
}


// Function CRDBossRuntime.FortBossInstanceVariantComponent.GetDefaultItemTemplateClassForVariant
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FItemVariantHandle               VariantHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UFortCreativeItemTemplate>TemplateClass                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UFortCreativeItemTemplate>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UFortCreativeItemTemplate> UFortBossInstanceVariantComponent::GetDefaultItemTemplateClassForVariant(const struct FItemVariantHandle& VariantHandle, const TSubclassOf<class UFortCreativeItemTemplate> TemplateClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBossInstanceVariantComponent", "GetDefaultItemTemplateClassForVariant");

	Params::FortBossInstanceVariantComponent_GetDefaultItemTemplateClassForVariant Parms{};

	Parms.VariantHandle = std::move(VariantHandle);
	Parms.TemplateClass = TemplateClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CRDBossRuntime.FortPawnComponent_DynamicDamageZones.ActivateAllDamageZones
// (Final, Native, Public, BlueprintCallable)

void UFortPawnComponent_DynamicDamageZones::ActivateAllDamageZones()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_DynamicDamageZones", "ActivateAllDamageZones");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CRDBossRuntime.FortPawnComponent_DynamicDamageZones.ActivateDamageZone
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             DamageZoneName                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_DynamicDamageZones::ActivateDamageZone(const class FName& DamageZoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_DynamicDamageZones", "ActivateDamageZone");

	Params::FortPawnComponent_DynamicDamageZones_ActivateDamageZone Parms{};

	Parms.DamageZoneName = DamageZoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CRDBossRuntime.FortPawnComponent_DynamicDamageZones.AddDamageZoneInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPawnDamageZoneInfo              Info                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortPawnComponent_DynamicDamageZones::AddDamageZoneInfo(const struct FPawnDamageZoneInfo& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_DynamicDamageZones", "AddDamageZoneInfo");

	Params::FortPawnComponent_DynamicDamageZones_AddDamageZoneInfo Parms{};

	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CRDBossRuntime.FortPawnComponent_DynamicDamageZones.DeactivateAllDamageZones
// (Final, Native, Public, BlueprintCallable)

void UFortPawnComponent_DynamicDamageZones::DeactivateAllDamageZones()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_DynamicDamageZones", "DeactivateAllDamageZones");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CRDBossRuntime.FortPawnComponent_DynamicDamageZones.DeactivateDamageZone
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             DamageZoneName                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_DynamicDamageZones::DeactivateDamageZone(const class FName& DamageZoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_DynamicDamageZones", "DeactivateDamageZone");

	Params::FortPawnComponent_DynamicDamageZones_DeactivateDamageZone Parms{};

	Parms.DamageZoneName = DamageZoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CRDBossRuntime.FortPawnComponent_DynamicDamageZones.OnPawnDamaged
// (Final, Native, Protected, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              FHitComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_DynamicDamageZones::OnPawnDamaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_DynamicDamageZones", "OnPawnDamaged");

	Params::FortPawnComponent_DynamicDamageZones_OnPawnDamaged Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CRDBossRuntime.FortPawnComponent_DynamicDamageZones.SetDamageZoneType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             DamageZoneName                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFortDamageZone                         DamageZone                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_DynamicDamageZones::SetDamageZoneType(const class FName& DamageZoneName, EFortDamageZone DamageZone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_DynamicDamageZones", "SetDamageZoneType");

	Params::FortPawnComponent_DynamicDamageZones_SetDamageZoneType Parms{};

	Parms.DamageZoneName = DamageZoneName;
	Parms.DamageZone = DamageZone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CRDBossRuntime.FortPawnComponent_DynamicDamageZones.GetDamageZoneType
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FHitResult                       InHitResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EFortDamageZone                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFortDamageZone UFortPawnComponent_DynamicDamageZones::GetDamageZoneType(const struct FHitResult& InHitResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_DynamicDamageZones", "GetDamageZoneType");

	Params::FortPawnComponent_DynamicDamageZones_GetDamageZoneType Parms{};

	Parms.InHitResult = std::move(InHitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

