#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteConversationRuntime

#include "Basic.hpp"


namespace SDK
{

// Enum FortniteConversationRuntime.EInteractionRange
// NumValues: 0x0003
enum class EInteractionRange : uint8
{
	Preview                                  = 0,
	Interaction                              = 1,
	EInteractionRange_MAX                    = 2,
};

// ScriptStruct FortniteConversationRuntime.FortConversationEnterEvent
// 0x0001 (0x0001 - 0x0000)
struct FFortConversationEnterEvent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortConversationEnterEvent) == 0x000001, "Wrong alignment on FFortConversationEnterEvent");
static_assert(sizeof(FFortConversationEnterEvent) == 0x000001, "Wrong size on FFortConversationEnterEvent");

// ScriptStruct FortniteConversationRuntime.FortConversation_Spectator_EnterConversation
// 0x0001 (0x0001 - 0x0000)
struct FFortConversation_Spectator_EnterConversation final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortConversation_Spectator_EnterConversation) == 0x000001, "Wrong alignment on FFortConversation_Spectator_EnterConversation");
static_assert(sizeof(FFortConversation_Spectator_EnterConversation) == 0x000001, "Wrong size on FFortConversation_Spectator_EnterConversation");

// ScriptStruct FortniteConversationRuntime.FortConversation_Spectator_LeaveConversation
// 0x0001 (0x0001 - 0x0000)
struct FFortConversation_Spectator_LeaveConversation final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortConversation_Spectator_LeaveConversation) == 0x000001, "Wrong alignment on FFortConversation_Spectator_LeaveConversation");
static_assert(sizeof(FFortConversation_Spectator_LeaveConversation) == 0x000001, "Wrong size on FFortConversation_Spectator_LeaveConversation");

// ScriptStruct FortniteConversationRuntime.FortConversation_SetDialogMarkerClassEvent
// 0x0001 (0x0001 - 0x0000)
struct FFortConversation_SetDialogMarkerClassEvent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortConversation_SetDialogMarkerClassEvent) == 0x000001, "Wrong alignment on FFortConversation_SetDialogMarkerClassEvent");
static_assert(sizeof(FFortConversation_SetDialogMarkerClassEvent) == 0x000001, "Wrong size on FFortConversation_SetDialogMarkerClassEvent");

// ScriptStruct FortniteConversationRuntime.NPCConversationIndicatorMessage
// 0x0008 (0x0008 - 0x0000)
struct FNPCConversationIndicatorMessage
{
public:
	class UFortNonPlayerConversationParticipantComponent* NPCConversationComponent;                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCConversationIndicatorMessage) == 0x000008, "Wrong alignment on FNPCConversationIndicatorMessage");
static_assert(sizeof(FNPCConversationIndicatorMessage) == 0x000008, "Wrong size on FNPCConversationIndicatorMessage");
static_assert(offsetof(FNPCConversationIndicatorMessage, NPCConversationComponent) == 0x000000, "Member 'FNPCConversationIndicatorMessage::NPCConversationComponent' has a wrong offset!");

// ScriptStruct FortniteConversationRuntime.FortConversation_NPC_AddIndicator
// 0x0000 (0x0008 - 0x0008)
struct FFortConversation_NPC_AddIndicator final : public FNPCConversationIndicatorMessage
{
};
static_assert(alignof(FFortConversation_NPC_AddIndicator) == 0x000008, "Wrong alignment on FFortConversation_NPC_AddIndicator");
static_assert(sizeof(FFortConversation_NPC_AddIndicator) == 0x000008, "Wrong size on FFortConversation_NPC_AddIndicator");

// ScriptStruct FortniteConversationRuntime.FortConversation_NPC_RemoveIndicator
// 0x0000 (0x0008 - 0x0008)
struct FFortConversation_NPC_RemoveIndicator final : public FNPCConversationIndicatorMessage
{
};
static_assert(alignof(FFortConversation_NPC_RemoveIndicator) == 0x000008, "Wrong alignment on FFortConversation_NPC_RemoveIndicator");
static_assert(sizeof(FFortConversation_NPC_RemoveIndicator) == 0x000008, "Wrong size on FFortConversation_NPC_RemoveIndicator");

// ScriptStruct FortniteConversationRuntime.ConversationSettingDialogMarkerData
// 0x0028 (0x0028 - 0x0000)
struct FConversationSettingDialogMarkerData final
{
public:
	TSoftClassPtr<class UClass>                   DialogMarkerSoftClass;                             // 0x0000(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConversationSettingDialogMarkerData) == 0x000008, "Wrong alignment on FConversationSettingDialogMarkerData");
static_assert(sizeof(FConversationSettingDialogMarkerData) == 0x000028, "Wrong size on FConversationSettingDialogMarkerData");
static_assert(offsetof(FConversationSettingDialogMarkerData, DialogMarkerSoftClass) == 0x000000, "Member 'FConversationSettingDialogMarkerData::DialogMarkerSoftClass' has a wrong offset!");

// ScriptStruct FortniteConversationRuntime.FortConversationConditionalMessage
// 0x0020 (0x0020 - 0x0000)
struct FFortConversationConditionalMessage final
{
public:
	class UFortConversationContextCondition*      Condition;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   message;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortConversationConditionalMessage) == 0x000008, "Wrong alignment on FFortConversationConditionalMessage");
static_assert(sizeof(FFortConversationConditionalMessage) == 0x000020, "Wrong size on FFortConversationConditionalMessage");
static_assert(offsetof(FFortConversationConditionalMessage, Condition) == 0x000000, "Member 'FFortConversationConditionalMessage::Condition' has a wrong offset!");
static_assert(offsetof(FFortConversationConditionalMessage, message) == 0x000008, "Member 'FFortConversationConditionalMessage::message' has a wrong offset!");

// ScriptStruct FortniteConversationRuntime.FortConversationNodeConditionalMessages
// 0x0010 (0x0010 - 0x0000)
struct FFortConversationNodeConditionalMessages final
{
public:
	TArray<struct FFortConversationConditionalMessage> Messages;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortConversationNodeConditionalMessages) == 0x000008, "Wrong alignment on FFortConversationNodeConditionalMessages");
static_assert(sizeof(FFortConversationNodeConditionalMessages) == 0x000010, "Wrong size on FFortConversationNodeConditionalMessages");
static_assert(offsetof(FFortConversationNodeConditionalMessages, Messages) == 0x000000, "Member 'FFortConversationNodeConditionalMessages::Messages' has a wrong offset!");

}

