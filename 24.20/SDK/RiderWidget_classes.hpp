#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RiderWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass RiderWidget.RiderWidget_C
// 0x0150 (0x0420 - 0x02D0)
class URiderWidget_C final : public UFortHUDElementWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       A_BoostCompletedAnim;                              // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       A_BoostStartedAnim;                                // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       A_LowAnim;                                         // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       A_FullBarAnim;                                     // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 BoostGlow;                                         // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                BoostGlowBorder;                                   // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       CurrentValue;                                      // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DeltaBar;                                          // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DeltaBar_1;                                        // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 EmptyStatusGlow;                                   // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 FillBar;                                           // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 FillBar_1;                                         // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_50;                                  // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_LargeCone;                                   // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Sparks;                                      // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Sparks_1;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_BoostSparks;                               // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Stats;                                     // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_Health;                                    // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_Progress;                                  // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SprintIcon;                                        // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTagVisibilityWidget*             TagVisibility_HealthValue;                         // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CahcedProgressDynamicMat;                          // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LowEnergyThreshold;                                // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CachedCurrentEnergy;                               // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PrevEnergy;                                        // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Anim_DeltaThreshold;                               // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           EmptyEnergyDelta_Handle;                           // 0x03B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UPlayerRiderComponent_C*                PlayerRiderComponentRef;                           // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        PrevHealth;                                        // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           EmptyHealthDelta_Handle;                           // 0x03C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        EnergyDeltaDecayDelay;                             // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HealthDeltaDecayDelay;                             // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPawn*                              AIPawn;                                            // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CooldownStartTime;                                 // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ColorStart;                                        // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SprintingAbilityTag;                               // 0x0400(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsListeningForSprint;                              // 0x0404(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsListeningForSprintStopped;                       // 0x0405(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_406[0x2];                                      // 0x0406(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityAsync_WaitGameplayTagAdded*     WaitingForSprint;                                  // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityAsync_WaitGameplayTagRemoved*   WaitingForSprintStopped;                           // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBoostingState;                                   // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateHealthDelta();
	void UpdateHealth(double Value);
	void UpdateEnergy(double Value);
	void UpdateBoostEffect(double ProgressRatio);
	void TryPlayingLowState(class UWidgetAnimation* InAnimation);
	void SetupEventBinds();
	void SetProgressBar(double Value, class UImage* TargetFillBar, class UImage* DeltaBar_0, double PreviousValue, double Threshold, const class FString& FunctionName, struct FTimerHandle& TimerHandle, double DeltaDecayDelay, struct FTimerHandle* DeltaTimerHandle);
	void SetHealthValue(double Value);
	void SetBoostAnim(bool IsBoosting);
	void Set_Delta(class UImage* Target, double CurrentValue_0, double PreviousValue, double Threshold, const class FString& FunctionName, struct FTimerHandle& TimerHandle, double DeltaDecayDelay, struct FTimerHandle* TimerHandleRef);
	void RiderUIHealthChanged(double Health);
	void RiderUIEnergyChanged(double Energy);
	void Removed_2725D3654E4B103B624310B5CBD4B008();
	void OnSprintStopped();
	void OnSprintStarted();
	void OnRiderUINewStats(const class FText& Name_0, const struct FSlateBrush& Icon, class AActor* RidableActor);
	void OnRiderUIEnd(class AActor* RidableActor);
	void OnOvershieldVisibilityChanged(bool IsVisible_0);
	void OnInitialized();
	void ListenToSprintEvents(bool ListenForSprinting);
	void InitRiderWidget();
	void Finished_357CBEA140721428C88288A0127368B0();
	void ExecuteUbergraph_RiderWidget(int32 EntryPoint);
	void EmptyEnergyDelta();
	void Destruct();
	void Construct();
	void ClearOldBindings();
	void Added_2054A51646A7A04B3C1966AECE2DA459();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RiderWidget_C">();
	}
	static class URiderWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<URiderWidget_C>();
	}
};
static_assert(alignof(URiderWidget_C) == 0x000008, "Wrong alignment on URiderWidget_C");
static_assert(sizeof(URiderWidget_C) == 0x000420, "Wrong size on URiderWidget_C");
static_assert(offsetof(URiderWidget_C, UberGraphFrame) == 0x0002D0, "Member 'URiderWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, A_BoostCompletedAnim) == 0x0002D8, "Member 'URiderWidget_C::A_BoostCompletedAnim' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, A_BoostStartedAnim) == 0x0002E0, "Member 'URiderWidget_C::A_BoostStartedAnim' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, A_LowAnim) == 0x0002E8, "Member 'URiderWidget_C::A_LowAnim' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, A_FullBarAnim) == 0x0002F0, "Member 'URiderWidget_C::A_FullBarAnim' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, BoostGlow) == 0x0002F8, "Member 'URiderWidget_C::BoostGlow' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, BoostGlowBorder) == 0x000300, "Member 'URiderWidget_C::BoostGlowBorder' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, CurrentValue) == 0x000308, "Member 'URiderWidget_C::CurrentValue' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, DeltaBar) == 0x000310, "Member 'URiderWidget_C::DeltaBar' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, DeltaBar_1) == 0x000318, "Member 'URiderWidget_C::DeltaBar_1' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, EmptyStatusGlow) == 0x000320, "Member 'URiderWidget_C::EmptyStatusGlow' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, FillBar) == 0x000328, "Member 'URiderWidget_C::FillBar' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, FillBar_1) == 0x000330, "Member 'URiderWidget_C::FillBar_1' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, HorizontalBox_50) == 0x000338, "Member 'URiderWidget_C::HorizontalBox_50' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, Image_LargeCone) == 0x000340, "Member 'URiderWidget_C::Image_LargeCone' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, Image_Sparks) == 0x000348, "Member 'URiderWidget_C::Image_Sparks' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, Image_Sparks_1) == 0x000350, "Member 'URiderWidget_C::Image_Sparks_1' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, Overlay_BoostSparks) == 0x000358, "Member 'URiderWidget_C::Overlay_BoostSparks' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, Overlay_Stats) == 0x000360, "Member 'URiderWidget_C::Overlay_Stats' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, SizeBox_Health) == 0x000368, "Member 'URiderWidget_C::SizeBox_Health' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, SizeBox_Progress) == 0x000370, "Member 'URiderWidget_C::SizeBox_Progress' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, SprintIcon) == 0x000378, "Member 'URiderWidget_C::SprintIcon' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, TagVisibility_HealthValue) == 0x000380, "Member 'URiderWidget_C::TagVisibility_HealthValue' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, CahcedProgressDynamicMat) == 0x000388, "Member 'URiderWidget_C::CahcedProgressDynamicMat' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, LowEnergyThreshold) == 0x000390, "Member 'URiderWidget_C::LowEnergyThreshold' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, CachedCurrentEnergy) == 0x000398, "Member 'URiderWidget_C::CachedCurrentEnergy' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, PrevEnergy) == 0x0003A0, "Member 'URiderWidget_C::PrevEnergy' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, Anim_DeltaThreshold) == 0x0003A8, "Member 'URiderWidget_C::Anim_DeltaThreshold' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, EmptyEnergyDelta_Handle) == 0x0003B0, "Member 'URiderWidget_C::EmptyEnergyDelta_Handle' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, PlayerRiderComponentRef) == 0x0003B8, "Member 'URiderWidget_C::PlayerRiderComponentRef' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, PrevHealth) == 0x0003C0, "Member 'URiderWidget_C::PrevHealth' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, EmptyHealthDelta_Handle) == 0x0003C8, "Member 'URiderWidget_C::EmptyHealthDelta_Handle' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, EnergyDeltaDecayDelay) == 0x0003D0, "Member 'URiderWidget_C::EnergyDeltaDecayDelay' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, HealthDeltaDecayDelay) == 0x0003D8, "Member 'URiderWidget_C::HealthDeltaDecayDelay' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, AIPawn) == 0x0003E0, "Member 'URiderWidget_C::AIPawn' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, CooldownStartTime) == 0x0003E8, "Member 'URiderWidget_C::CooldownStartTime' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, ColorStart) == 0x0003F0, "Member 'URiderWidget_C::ColorStart' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, SprintingAbilityTag) == 0x000400, "Member 'URiderWidget_C::SprintingAbilityTag' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, IsListeningForSprint) == 0x000404, "Member 'URiderWidget_C::IsListeningForSprint' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, IsListeningForSprintStopped) == 0x000405, "Member 'URiderWidget_C::IsListeningForSprintStopped' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, WaitingForSprint) == 0x000408, "Member 'URiderWidget_C::WaitingForSprint' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, WaitingForSprintStopped) == 0x000410, "Member 'URiderWidget_C::WaitingForSprintStopped' has a wrong offset!");
static_assert(offsetof(URiderWidget_C, IsBoostingState) == 0x000418, "Member 'URiderWidget_C::IsBoostingState' has a wrong offset!");

}

