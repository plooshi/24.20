#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Violator

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_Violator.WBP_Violator_C.ExecuteUbergraph_WBP_Violator
// 0x01C0 (0x01C0 - 0x0000)
struct WBP_Violator_C_ExecuteUbergraph_WBP_Violator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            CallFunc_MakeBrushFromMaterial_ReturnValue;        // 0x0020(0x00C0)()
	struct FSlateBrush                            CallFunc_MakeBrushFromTexture_ReturnValue;         // 0x00E0(0x00C0)()
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x01A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Right_ImplicitCast;              // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Violator_C_ExecuteUbergraph_WBP_Violator) == 0x000010, "Wrong alignment on WBP_Violator_C_ExecuteUbergraph_WBP_Violator");
static_assert(sizeof(WBP_Violator_C_ExecuteUbergraph_WBP_Violator) == 0x0001C0, "Wrong size on WBP_Violator_C_ExecuteUbergraph_WBP_Violator");
static_assert(offsetof(WBP_Violator_C_ExecuteUbergraph_WBP_Violator, EntryPoint) == 0x000000, "Member 'WBP_Violator_C_ExecuteUbergraph_WBP_Violator::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_ExecuteUbergraph_WBP_Violator, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'WBP_Violator_C_ExecuteUbergraph_WBP_Violator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_ExecuteUbergraph_WBP_Violator, K2Node_Event_IsDesignTime) == 0x000005, "Member 'WBP_Violator_C_ExecuteUbergraph_WBP_Violator::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_ExecuteUbergraph_WBP_Violator, CallFunc_BreakVector2D_X) == 0x000008, "Member 'WBP_Violator_C_ExecuteUbergraph_WBP_Violator::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_ExecuteUbergraph_WBP_Violator, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'WBP_Violator_C_ExecuteUbergraph_WBP_Violator::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_ExecuteUbergraph_WBP_Violator, CallFunc_FTrunc_ReturnValue) == 0x000018, "Member 'WBP_Violator_C_ExecuteUbergraph_WBP_Violator::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_ExecuteUbergraph_WBP_Violator, CallFunc_FTrunc_ReturnValue_1) == 0x00001C, "Member 'WBP_Violator_C_ExecuteUbergraph_WBP_Violator::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_ExecuteUbergraph_WBP_Violator, CallFunc_MakeBrushFromMaterial_ReturnValue) == 0x000020, "Member 'WBP_Violator_C_ExecuteUbergraph_WBP_Violator::CallFunc_MakeBrushFromMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_ExecuteUbergraph_WBP_Violator, CallFunc_MakeBrushFromTexture_ReturnValue) == 0x0000E0, "Member 'WBP_Violator_C_ExecuteUbergraph_WBP_Violator::CallFunc_MakeBrushFromTexture_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_ExecuteUbergraph_WBP_Violator, K2Node_MakeStruct_Margin) == 0x0001A0, "Member 'WBP_Violator_C_ExecuteUbergraph_WBP_Violator::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_ExecuteUbergraph_WBP_Violator, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x0001B0, "Member 'WBP_Violator_C_ExecuteUbergraph_WBP_Violator::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_ExecuteUbergraph_WBP_Violator, K2Node_MakeStruct_Right_ImplicitCast) == 0x0001B8, "Member 'WBP_Violator_C_ExecuteUbergraph_WBP_Violator::K2Node_MakeStruct_Right_ImplicitCast' has a wrong offset!");

// Function WBP_Violator.WBP_Violator_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Violator_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Violator_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Violator_C_PreConstruct");
static_assert(sizeof(WBP_Violator_C_PreConstruct) == 0x000001, "Wrong size on WBP_Violator_C_PreConstruct");
static_assert(offsetof(WBP_Violator_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Violator_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Violator.WBP_Violator_C.UpdateViolatorText
// 0x0020 (0x0020 - 0x0000)
struct WBP_Violator_C_UpdateViolatorText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          bDisplayTimeIcon;                                  // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Violator_C_UpdateViolatorText) == 0x000008, "Wrong alignment on WBP_Violator_C_UpdateViolatorText");
static_assert(sizeof(WBP_Violator_C_UpdateViolatorText) == 0x000020, "Wrong size on WBP_Violator_C_UpdateViolatorText");
static_assert(offsetof(WBP_Violator_C_UpdateViolatorText, InText) == 0x000000, "Member 'WBP_Violator_C_UpdateViolatorText::InText' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_UpdateViolatorText, bDisplayTimeIcon) == 0x000018, "Member 'WBP_Violator_C_UpdateViolatorText::bDisplayTimeIcon' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_UpdateViolatorText, Temp_bool_Variable) == 0x000019, "Member 'WBP_Violator_C_UpdateViolatorText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_UpdateViolatorText, Temp_byte_Variable) == 0x00001A, "Member 'WBP_Violator_C_UpdateViolatorText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_UpdateViolatorText, Temp_byte_Variable_1) == 0x00001B, "Member 'WBP_Violator_C_UpdateViolatorText::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Violator_C_UpdateViolatorText, K2Node_Select_Default) == 0x00001C, "Member 'WBP_Violator_C_UpdateViolatorText::K2Node_Select_Default' has a wrong offset!");

}

