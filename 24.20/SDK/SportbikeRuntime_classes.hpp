#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SportbikeRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MotorcycleRuntime_classes.hpp"


namespace SDK
{

// Class SportbikeRuntime.FortSportbikeAnimInstance
// 0x0020 (0x0680 - 0x0660)
class UFortSportbikeAnimInstance final : public UFortMotorcycleVehicleAnimInstance
{
public:
	struct FRotator                               LimitedWheelRotationFR;                            // 0x0660(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          HasPassenger;                                      // 0x0678(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldPlayGroundTrick;                             // 0x0679(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWheelie;                                         // 0x067A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StateRuleFromWheelieToGroundTrickOutro;            // 0x067B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SportBikeWheelieEarlyOut;                          // 0x067C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldExitFromLocomotion;                          // 0x067D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChangingGear;                                    // 0x067E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_67F[0x1];                                      // 0x067F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSportbikeAnimInstance">();
	}
	static class UFortSportbikeAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSportbikeAnimInstance>();
	}
};
static_assert(alignof(UFortSportbikeAnimInstance) == 0x000010, "Wrong alignment on UFortSportbikeAnimInstance");
static_assert(sizeof(UFortSportbikeAnimInstance) == 0x000680, "Wrong size on UFortSportbikeAnimInstance");
static_assert(offsetof(UFortSportbikeAnimInstance, LimitedWheelRotationFR) == 0x000660, "Member 'UFortSportbikeAnimInstance::LimitedWheelRotationFR' has a wrong offset!");
static_assert(offsetof(UFortSportbikeAnimInstance, HasPassenger) == 0x000678, "Member 'UFortSportbikeAnimInstance::HasPassenger' has a wrong offset!");
static_assert(offsetof(UFortSportbikeAnimInstance, ShouldPlayGroundTrick) == 0x000679, "Member 'UFortSportbikeAnimInstance::ShouldPlayGroundTrick' has a wrong offset!");
static_assert(offsetof(UFortSportbikeAnimInstance, IsWheelie) == 0x00067A, "Member 'UFortSportbikeAnimInstance::IsWheelie' has a wrong offset!");
static_assert(offsetof(UFortSportbikeAnimInstance, StateRuleFromWheelieToGroundTrickOutro) == 0x00067B, "Member 'UFortSportbikeAnimInstance::StateRuleFromWheelieToGroundTrickOutro' has a wrong offset!");
static_assert(offsetof(UFortSportbikeAnimInstance, SportBikeWheelieEarlyOut) == 0x00067C, "Member 'UFortSportbikeAnimInstance::SportBikeWheelieEarlyOut' has a wrong offset!");
static_assert(offsetof(UFortSportbikeAnimInstance, ShouldExitFromLocomotion) == 0x00067D, "Member 'UFortSportbikeAnimInstance::ShouldExitFromLocomotion' has a wrong offset!");
static_assert(offsetof(UFortSportbikeAnimInstance, IsChangingGear) == 0x00067E, "Member 'UFortSportbikeAnimInstance::IsChangingGear' has a wrong offset!");

// Class SportbikeRuntime.FortSportbikeDriverAnimInstance
// 0x0020 (0x0940 - 0x0920)
class UFortSportbikeDriverAnimInstance final : public UFortPlayerAnimInstance_MotorcycleDriver
{
public:
	bool                                          SportBikeWheelieEarlyOut;                          // 0x0918(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StateRuleFromWheelieToGroundTrickOutro;            // 0x0919(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EarlyExitFromGroundTrick;                          // 0x091A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBoostingWithNoPassenger;                         // 0x091B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MotorcycleGear;                                    // 0x091C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentGear;                                       // 0x0920(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousGear;                                      // 0x0924(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChangingGear;                                    // 0x0928(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_929[0x3];                                      // 0x0929(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SuperSlideBlendAlpha;                              // 0x092C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuperSlideBlendStart;                              // 0x0930(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuperSlideBlendEnd;                                // 0x0934(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSuperSliding;                                    // 0x0938(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_939[0x7];                                      // 0x0939(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSportbikeDriverAnimInstance">();
	}
	static class UFortSportbikeDriverAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSportbikeDriverAnimInstance>();
	}
};
static_assert(alignof(UFortSportbikeDriverAnimInstance) == 0x000010, "Wrong alignment on UFortSportbikeDriverAnimInstance");
static_assert(sizeof(UFortSportbikeDriverAnimInstance) == 0x000940, "Wrong size on UFortSportbikeDriverAnimInstance");
static_assert(offsetof(UFortSportbikeDriverAnimInstance, SportBikeWheelieEarlyOut) == 0x000918, "Member 'UFortSportbikeDriverAnimInstance::SportBikeWheelieEarlyOut' has a wrong offset!");
static_assert(offsetof(UFortSportbikeDriverAnimInstance, StateRuleFromWheelieToGroundTrickOutro) == 0x000919, "Member 'UFortSportbikeDriverAnimInstance::StateRuleFromWheelieToGroundTrickOutro' has a wrong offset!");
static_assert(offsetof(UFortSportbikeDriverAnimInstance, EarlyExitFromGroundTrick) == 0x00091A, "Member 'UFortSportbikeDriverAnimInstance::EarlyExitFromGroundTrick' has a wrong offset!");
static_assert(offsetof(UFortSportbikeDriverAnimInstance, IsBoostingWithNoPassenger) == 0x00091B, "Member 'UFortSportbikeDriverAnimInstance::IsBoostingWithNoPassenger' has a wrong offset!");
static_assert(offsetof(UFortSportbikeDriverAnimInstance, MotorcycleGear) == 0x00091C, "Member 'UFortSportbikeDriverAnimInstance::MotorcycleGear' has a wrong offset!");
static_assert(offsetof(UFortSportbikeDriverAnimInstance, CurrentGear) == 0x000920, "Member 'UFortSportbikeDriverAnimInstance::CurrentGear' has a wrong offset!");
static_assert(offsetof(UFortSportbikeDriverAnimInstance, PreviousGear) == 0x000924, "Member 'UFortSportbikeDriverAnimInstance::PreviousGear' has a wrong offset!");
static_assert(offsetof(UFortSportbikeDriverAnimInstance, IsChangingGear) == 0x000928, "Member 'UFortSportbikeDriverAnimInstance::IsChangingGear' has a wrong offset!");
static_assert(offsetof(UFortSportbikeDriverAnimInstance, SuperSlideBlendAlpha) == 0x00092C, "Member 'UFortSportbikeDriverAnimInstance::SuperSlideBlendAlpha' has a wrong offset!");
static_assert(offsetof(UFortSportbikeDriverAnimInstance, SuperSlideBlendStart) == 0x000930, "Member 'UFortSportbikeDriverAnimInstance::SuperSlideBlendStart' has a wrong offset!");
static_assert(offsetof(UFortSportbikeDriverAnimInstance, SuperSlideBlendEnd) == 0x000934, "Member 'UFortSportbikeDriverAnimInstance::SuperSlideBlendEnd' has a wrong offset!");
static_assert(offsetof(UFortSportbikeDriverAnimInstance, IsSuperSliding) == 0x000938, "Member 'UFortSportbikeDriverAnimInstance::IsSuperSliding' has a wrong offset!");

// Class SportbikeRuntime.FortSportbikeVehicle
// 0x0010 (0x1F90 - 0x1F80)
class AFortSportbikeVehicle final : public AFortMotorcycleVehicle
{
public:
	uint8                                         Pad_1F80[0x10];                                    // 0x1F80(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSportbikeVehicle">();
	}
	static class AFortSportbikeVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortSportbikeVehicle>();
	}
};
static_assert(alignof(AFortSportbikeVehicle) == 0x000010, "Wrong alignment on AFortSportbikeVehicle");
static_assert(sizeof(AFortSportbikeVehicle) == 0x001F90, "Wrong size on AFortSportbikeVehicle");

// Class SportbikeRuntime.FortSportbikeVehicleConfigs
// 0x0000 (0x0B78 - 0x0B78)
class UFortSportbikeVehicleConfigs final : public UFortMotorcycleVehicleConfigs
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSportbikeVehicleConfigs">();
	}
	static class UFortSportbikeVehicleConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSportbikeVehicleConfigs>();
	}
};
static_assert(alignof(UFortSportbikeVehicleConfigs) == 0x000008, "Wrong alignment on UFortSportbikeVehicleConfigs");
static_assert(sizeof(UFortSportbikeVehicleConfigs) == 0x000B78, "Wrong size on UFortSportbikeVehicleConfigs");

}

