#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MidMatchRiftPoiGameplayRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class MidMatchRiftPoiGameplayRuntime.MidmatchRiftPoiCheatManager
// 0x0000 (0x0028 - 0x0028)
class UMidmatchRiftPoiCheatManager final : public UChildCheatManager
{
public:
	void MidmatchRiftPoiSpawnFurthestFromPawnLocation();
	void MidmatchRiftPoiSpawnNearestToPawnLocation();
	void SpawnMidmatchPoiFurthestLocation(const struct FVector& Location);
	void SpawnMidmatchPoiNearestLocation(const struct FVector& Location);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MidmatchRiftPoiCheatManager">();
	}
	static class UMidmatchRiftPoiCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMidmatchRiftPoiCheatManager>();
	}
};
static_assert(alignof(UMidmatchRiftPoiCheatManager) == 0x000008, "Wrong alignment on UMidmatchRiftPoiCheatManager");
static_assert(sizeof(UMidmatchRiftPoiCheatManager) == 0x000028, "Wrong size on UMidmatchRiftPoiCheatManager");

// Class MidMatchRiftPoiGameplayRuntime.MidMatchRiftPoiManagerActor
// 0x00E8 (0x0370 - 0x0288)
class AMidMatchRiftPoiManagerActor final : public AActor
{
public:
	uint8                                         Pad_288[0x8];                                      // 0x0288(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bCanBeMarked : 1;                                  // 0x0290(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bBlockMarking : 1;                                 // 0x0290(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarkedActorDisplayInfo                MarkerDisplay;                                     // 0x0298(0x00B8)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FVector                                MarkerPositionOffset;                              // 0x0350(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDynamicLandBrushApplied;                          // 0x0368(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDynamicLandBrush(const struct FSlateBrush& LandIcon);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MidMatchRiftPoiManagerActor">();
	}
	static class AMidMatchRiftPoiManagerActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMidMatchRiftPoiManagerActor>();
	}
};
static_assert(alignof(AMidMatchRiftPoiManagerActor) == 0x000008, "Wrong alignment on AMidMatchRiftPoiManagerActor");
static_assert(sizeof(AMidMatchRiftPoiManagerActor) == 0x000370, "Wrong size on AMidMatchRiftPoiManagerActor");
static_assert(offsetof(AMidMatchRiftPoiManagerActor, MarkerDisplay) == 0x000298, "Member 'AMidMatchRiftPoiManagerActor::MarkerDisplay' has a wrong offset!");
static_assert(offsetof(AMidMatchRiftPoiManagerActor, MarkerPositionOffset) == 0x000350, "Member 'AMidMatchRiftPoiManagerActor::MarkerPositionOffset' has a wrong offset!");
static_assert(offsetof(AMidMatchRiftPoiManagerActor, bDynamicLandBrushApplied) == 0x000368, "Member 'AMidMatchRiftPoiManagerActor::bDynamicLandBrushApplied' has a wrong offset!");

// Class MidMatchRiftPoiGameplayRuntime.MidmatchRiftPoiSpawnIndicator
// 0x00E8 (0x0370 - 0x0288)
class AMidmatchRiftPoiSpawnIndicator final : public AActor
{
public:
	uint8                                         Pad_288[0x10];                                     // 0x0288(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bCanBeMarked : 1;                                  // 0x0298(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bBlockMarking : 1;                                 // 0x0298(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarkedActorDisplayInfo                MarkerDisplay;                                     // 0x02A0(0x00B8)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FVector                                MarkerPositionOffset;                              // 0x0358(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void TeleportVehicleActor(class AActor* VehicleActor, const struct FVector& TeleportLocation);

	bool IsActorInDataLayerInstance(const class AActor* Actor, const class UDataLayerInstance* DataLayerInstance) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MidmatchRiftPoiSpawnIndicator">();
	}
	static class AMidmatchRiftPoiSpawnIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMidmatchRiftPoiSpawnIndicator>();
	}
};
static_assert(alignof(AMidmatchRiftPoiSpawnIndicator) == 0x000008, "Wrong alignment on AMidmatchRiftPoiSpawnIndicator");
static_assert(sizeof(AMidmatchRiftPoiSpawnIndicator) == 0x000370, "Wrong size on AMidmatchRiftPoiSpawnIndicator");
static_assert(offsetof(AMidmatchRiftPoiSpawnIndicator, MarkerDisplay) == 0x0002A0, "Member 'AMidmatchRiftPoiSpawnIndicator::MarkerDisplay' has a wrong offset!");
static_assert(offsetof(AMidmatchRiftPoiSpawnIndicator, MarkerPositionOffset) == 0x000358, "Member 'AMidmatchRiftPoiSpawnIndicator::MarkerPositionOffset' has a wrong offset!");

}

