#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MantisRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "MantisRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function MantisRuntime.FortMantisLayerAnimInstance.OnMantisTechniqueEnded
// 0x0008 (0x0008 - 0x0000)
struct FortMantisLayerAnimInstance_OnMantisTechniqueEnded final
{
public:
	int32                                         TechniqueIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TechniqueName;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisLayerAnimInstance_OnMantisTechniqueEnded) == 0x000004, "Wrong alignment on FortMantisLayerAnimInstance_OnMantisTechniqueEnded");
static_assert(sizeof(FortMantisLayerAnimInstance_OnMantisTechniqueEnded) == 0x000008, "Wrong size on FortMantisLayerAnimInstance_OnMantisTechniqueEnded");
static_assert(offsetof(FortMantisLayerAnimInstance_OnMantisTechniqueEnded, TechniqueIndex) == 0x000000, "Member 'FortMantisLayerAnimInstance_OnMantisTechniqueEnded::TechniqueIndex' has a wrong offset!");
static_assert(offsetof(FortMantisLayerAnimInstance_OnMantisTechniqueEnded, TechniqueName) == 0x000004, "Member 'FortMantisLayerAnimInstance_OnMantisTechniqueEnded::TechniqueName' has a wrong offset!");

// Function MantisRuntime.FortMantisLayerAnimInstance.OnMantisTechniqueStarted
// 0x0008 (0x0008 - 0x0000)
struct FortMantisLayerAnimInstance_OnMantisTechniqueStarted final
{
public:
	int32                                         TechniqueIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TechniqueName;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisLayerAnimInstance_OnMantisTechniqueStarted) == 0x000004, "Wrong alignment on FortMantisLayerAnimInstance_OnMantisTechniqueStarted");
static_assert(sizeof(FortMantisLayerAnimInstance_OnMantisTechniqueStarted) == 0x000008, "Wrong size on FortMantisLayerAnimInstance_OnMantisTechniqueStarted");
static_assert(offsetof(FortMantisLayerAnimInstance_OnMantisTechniqueStarted, TechniqueIndex) == 0x000000, "Member 'FortMantisLayerAnimInstance_OnMantisTechniqueStarted::TechniqueIndex' has a wrong offset!");
static_assert(offsetof(FortMantisLayerAnimInstance_OnMantisTechniqueStarted, TechniqueName) == 0x000004, "Member 'FortMantisLayerAnimInstance_OnMantisTechniqueStarted::TechniqueName' has a wrong offset!");

// Function MantisRuntime.FortGameplayAbility_Mantis.BP_MantisAbilityTechniqueStarted
// 0x0028 (0x0028 - 0x0000)
struct FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted final
{
public:
	struct FGameplayTagContainer                  OwningTags;                                        // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	class FName                                   SequenceName;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartsSequence;                                    // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndsSequence;                                      // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted) == 0x000008, "Wrong alignment on FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted");
static_assert(sizeof(FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted) == 0x000028, "Wrong size on FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted, OwningTags) == 0x000000, "Member 'FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted::OwningTags' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted, SequenceName) == 0x000020, "Member 'FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted::SequenceName' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted, StartsSequence) == 0x000024, "Member 'FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted::StartsSequence' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted, EndsSequence) == 0x000025, "Member 'FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted::EndsSequence' has a wrong offset!");

// Function MantisRuntime.FortGameplayAbility_Mantis.BP_OnMantisInputEvent
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_Mantis_BP_OnMantisInputEvent final
{
public:
	EFortMantisTechniqueActivationInputType       InputType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMantisTechniqueActivationTimingType      InputTiming;                                       // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDidInputStartTechnique;                           // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDidInputQueueTechnique;                           // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputHeldDuration;                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_Mantis_BP_OnMantisInputEvent) == 0x000004, "Wrong alignment on FortGameplayAbility_Mantis_BP_OnMantisInputEvent");
static_assert(sizeof(FortGameplayAbility_Mantis_BP_OnMantisInputEvent) == 0x000008, "Wrong size on FortGameplayAbility_Mantis_BP_OnMantisInputEvent");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnMantisInputEvent, InputType) == 0x000000, "Member 'FortGameplayAbility_Mantis_BP_OnMantisInputEvent::InputType' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnMantisInputEvent, InputTiming) == 0x000001, "Member 'FortGameplayAbility_Mantis_BP_OnMantisInputEvent::InputTiming' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnMantisInputEvent, bDidInputStartTechnique) == 0x000002, "Member 'FortGameplayAbility_Mantis_BP_OnMantisInputEvent::bDidInputStartTechnique' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnMantisInputEvent, bDidInputQueueTechnique) == 0x000003, "Member 'FortGameplayAbility_Mantis_BP_OnMantisInputEvent::bDidInputQueueTechnique' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnMantisInputEvent, InputHeldDuration) == 0x000004, "Member 'FortGameplayAbility_Mantis_BP_OnMantisInputEvent::InputHeldDuration' has a wrong offset!");

// Function MantisRuntime.FortGameplayAbility_Mantis.BP_OnMantisTechniqueHit
// 0x0030 (0x0030 - 0x0000)
struct FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetDataHandle;                                  // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0028(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit) == 0x000008, "Wrong alignment on FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit");
static_assert(sizeof(FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit) == 0x000030, "Wrong size on FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit, TargetDataHandle) == 0x000000, "Member 'FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit::TargetDataHandle' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit, ApplicationTag) == 0x000028, "Member 'FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit::ApplicationTag' has a wrong offset!");

// Function MantisRuntime.FortGameplayAbility_Mantis.BP_OnTechniqueNotifyEvent
// 0x0010 (0x0010 - 0x0000)
struct FortGameplayAbility_Mantis_BP_OnTechniqueNotifyEvent final
{
public:
	EFortMantisNotifyEvent                        NotifyEvent;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortAnimNotify_Mantis*           Notify;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_Mantis_BP_OnTechniqueNotifyEvent) == 0x000008, "Wrong alignment on FortGameplayAbility_Mantis_BP_OnTechniqueNotifyEvent");
static_assert(sizeof(FortGameplayAbility_Mantis_BP_OnTechniqueNotifyEvent) == 0x000010, "Wrong size on FortGameplayAbility_Mantis_BP_OnTechniqueNotifyEvent");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnTechniqueNotifyEvent, NotifyEvent) == 0x000000, "Member 'FortGameplayAbility_Mantis_BP_OnTechniqueNotifyEvent::NotifyEvent' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnTechniqueNotifyEvent, Notify) == 0x000008, "Member 'FortGameplayAbility_Mantis_BP_OnTechniqueNotifyEvent::Notify' has a wrong offset!");

// Function MantisRuntime.FortGameplayAbility_Mantis.BP_OnTechniqueNotifyWindowEnded
// 0x0010 (0x0010 - 0x0000)
struct FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowEnded final
{
public:
	EFortMantisNotifyWindow                       NotifyWindow;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortAnimNotifyState_Mantis*      Notify;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowEnded) == 0x000008, "Wrong alignment on FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowEnded");
static_assert(sizeof(FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowEnded) == 0x000010, "Wrong size on FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowEnded");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowEnded, NotifyWindow) == 0x000000, "Member 'FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowEnded::NotifyWindow' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowEnded, Notify) == 0x000008, "Member 'FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowEnded::Notify' has a wrong offset!");

// Function MantisRuntime.FortGameplayAbility_Mantis.BP_OnTechniqueNotifyWindowStarted
// 0x0010 (0x0010 - 0x0000)
struct FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowStarted final
{
public:
	EFortMantisNotifyWindow                       NotifyWindow;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortAnimNotifyState_Mantis*      Notify;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowStarted) == 0x000008, "Wrong alignment on FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowStarted");
static_assert(sizeof(FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowStarted) == 0x000010, "Wrong size on FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowStarted");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowStarted, NotifyWindow) == 0x000000, "Member 'FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowStarted::NotifyWindow' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowStarted, Notify) == 0x000008, "Member 'FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowStarted::Notify' has a wrong offset!");

// Function MantisRuntime.FortGameplayAbility_Mantis.ConfigureRootMotionWarping
// 0x0030 (0x0030 - 0x0000)
struct FortGameplayAbility_Mantis_ConfigureRootMotionWarping final
{
public:
	class FName                                   TechniqueName;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutAllowTranslationWarp;                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutAllowRotationWarp;                             // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OutTargetActor;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutSnapshotTargetActorLocation;                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutWarpTranslationToLocation;                     // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                outTargetLocation;                                 // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_Mantis_ConfigureRootMotionWarping) == 0x000008, "Wrong alignment on FortGameplayAbility_Mantis_ConfigureRootMotionWarping");
static_assert(sizeof(FortGameplayAbility_Mantis_ConfigureRootMotionWarping) == 0x000030, "Wrong size on FortGameplayAbility_Mantis_ConfigureRootMotionWarping");
static_assert(offsetof(FortGameplayAbility_Mantis_ConfigureRootMotionWarping, TechniqueName) == 0x000000, "Member 'FortGameplayAbility_Mantis_ConfigureRootMotionWarping::TechniqueName' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_ConfigureRootMotionWarping, bOutAllowTranslationWarp) == 0x000004, "Member 'FortGameplayAbility_Mantis_ConfigureRootMotionWarping::bOutAllowTranslationWarp' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_ConfigureRootMotionWarping, bOutAllowRotationWarp) == 0x000005, "Member 'FortGameplayAbility_Mantis_ConfigureRootMotionWarping::bOutAllowRotationWarp' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_ConfigureRootMotionWarping, OutTargetActor) == 0x000008, "Member 'FortGameplayAbility_Mantis_ConfigureRootMotionWarping::OutTargetActor' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_ConfigureRootMotionWarping, bOutSnapshotTargetActorLocation) == 0x000010, "Member 'FortGameplayAbility_Mantis_ConfigureRootMotionWarping::bOutSnapshotTargetActorLocation' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_ConfigureRootMotionWarping, bOutWarpTranslationToLocation) == 0x000011, "Member 'FortGameplayAbility_Mantis_ConfigureRootMotionWarping::bOutWarpTranslationToLocation' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_ConfigureRootMotionWarping, outTargetLocation) == 0x000018, "Member 'FortGameplayAbility_Mantis_ConfigureRootMotionWarping::outTargetLocation' has a wrong offset!");

// Function MantisRuntime.FortGameplayAbility_Mantis.FillMetadataForTechnique
// 0x0148 (0x0148 - 0x0000)
struct FortGameplayAbility_Mantis_FillMetadataForTechnique final
{
public:
	class FName                                   TechniqueName;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMantisTechniqueMetadata           OutTechniqueMetadata;                              // 0x0008(0x0140)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_Mantis_FillMetadataForTechnique) == 0x000008, "Wrong alignment on FortGameplayAbility_Mantis_FillMetadataForTechnique");
static_assert(sizeof(FortGameplayAbility_Mantis_FillMetadataForTechnique) == 0x000148, "Wrong size on FortGameplayAbility_Mantis_FillMetadataForTechnique");
static_assert(offsetof(FortGameplayAbility_Mantis_FillMetadataForTechnique, TechniqueName) == 0x000000, "Member 'FortGameplayAbility_Mantis_FillMetadataForTechnique::TechniqueName' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_FillMetadataForTechnique, OutTechniqueMetadata) == 0x000008, "Member 'FortGameplayAbility_Mantis_FillMetadataForTechnique::OutTechniqueMetadata' has a wrong offset!");

// Function MantisRuntime.FortGameplayAbility_Mantis.GetDynamicMontageNameForTechnique
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_Mantis_GetDynamicMontageNameForTechnique final
{
public:
	class FName                                   TechniqueName;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_Mantis_GetDynamicMontageNameForTechnique) == 0x000004, "Wrong alignment on FortGameplayAbility_Mantis_GetDynamicMontageNameForTechnique");
static_assert(sizeof(FortGameplayAbility_Mantis_GetDynamicMontageNameForTechnique) == 0x000008, "Wrong size on FortGameplayAbility_Mantis_GetDynamicMontageNameForTechnique");
static_assert(offsetof(FortGameplayAbility_Mantis_GetDynamicMontageNameForTechnique, TechniqueName) == 0x000000, "Member 'FortGameplayAbility_Mantis_GetDynamicMontageNameForTechnique::TechniqueName' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_GetDynamicMontageNameForTechnique, ReturnValue) == 0x000004, "Member 'FortGameplayAbility_Mantis_GetDynamicMontageNameForTechnique::ReturnValue' has a wrong offset!");

// Function MantisRuntime.FortGameplayAbility_Mantis.GetLevelForGameplayEffectContainer
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_Mantis_GetLevelForGameplayEffectContainer final
{
public:
	struct FGameplayTag                           ApplicationTag;                                    // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_Mantis_GetLevelForGameplayEffectContainer) == 0x000004, "Wrong alignment on FortGameplayAbility_Mantis_GetLevelForGameplayEffectContainer");
static_assert(sizeof(FortGameplayAbility_Mantis_GetLevelForGameplayEffectContainer) == 0x000008, "Wrong size on FortGameplayAbility_Mantis_GetLevelForGameplayEffectContainer");
static_assert(offsetof(FortGameplayAbility_Mantis_GetLevelForGameplayEffectContainer, ApplicationTag) == 0x000000, "Member 'FortGameplayAbility_Mantis_GetLevelForGameplayEffectContainer::ApplicationTag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_GetLevelForGameplayEffectContainer, ReturnValue) == 0x000004, "Member 'FortGameplayAbility_Mantis_GetLevelForGameplayEffectContainer::ReturnValue' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.IsSpecificInputPressed
// 0x0002 (0x0002 - 0x0000)
struct FortMantisPawnComponent_IsSpecificInputPressed final
{
public:
	EFortMantisTechniqueActivationInputType       InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisPawnComponent_IsSpecificInputPressed) == 0x000001, "Wrong alignment on FortMantisPawnComponent_IsSpecificInputPressed");
static_assert(sizeof(FortMantisPawnComponent_IsSpecificInputPressed) == 0x000002, "Wrong size on FortMantisPawnComponent_IsSpecificInputPressed");
static_assert(offsetof(FortMantisPawnComponent_IsSpecificInputPressed, InputType) == 0x000000, "Member 'FortMantisPawnComponent_IsSpecificInputPressed::InputType' has a wrong offset!");
static_assert(offsetof(FortMantisPawnComponent_IsSpecificInputPressed, ReturnValue) == 0x000001, "Member 'FortMantisPawnComponent_IsSpecificInputPressed::ReturnValue' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.OnCharacterMovementPreUpdate
// 0x0010 (0x0010 - 0x0000)
struct FortMantisPawnComponent_OnCharacterMovementPreUpdate final
{
public:
	class UCharacterMovementComponent*            CharMoveComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMantisPawnComponent_OnCharacterMovementPreUpdate) == 0x000008, "Wrong alignment on FortMantisPawnComponent_OnCharacterMovementPreUpdate");
static_assert(sizeof(FortMantisPawnComponent_OnCharacterMovementPreUpdate) == 0x000010, "Wrong size on FortMantisPawnComponent_OnCharacterMovementPreUpdate");
static_assert(offsetof(FortMantisPawnComponent_OnCharacterMovementPreUpdate, CharMoveComp) == 0x000000, "Member 'FortMantisPawnComponent_OnCharacterMovementPreUpdate::CharMoveComp' has a wrong offset!");
static_assert(offsetof(FortMantisPawnComponent_OnCharacterMovementPreUpdate, DeltaSeconds) == 0x000008, "Member 'FortMantisPawnComponent_OnCharacterMovementPreUpdate::DeltaSeconds' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.OnPostPhysicsRotation
// 0x0010 (0x0010 - 0x0000)
struct FortMantisPawnComponent_OnPostPhysicsRotation final
{
public:
	class UCharacterMovementComponent*            CharMoveComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMantisPawnComponent_OnPostPhysicsRotation) == 0x000008, "Wrong alignment on FortMantisPawnComponent_OnPostPhysicsRotation");
static_assert(sizeof(FortMantisPawnComponent_OnPostPhysicsRotation) == 0x000010, "Wrong size on FortMantisPawnComponent_OnPostPhysicsRotation");
static_assert(offsetof(FortMantisPawnComponent_OnPostPhysicsRotation, CharMoveComp) == 0x000000, "Member 'FortMantisPawnComponent_OnPostPhysicsRotation::CharMoveComp' has a wrong offset!");
static_assert(offsetof(FortMantisPawnComponent_OnPostPhysicsRotation, DeltaSeconds) == 0x000008, "Member 'FortMantisPawnComponent_OnPostPhysicsRotation::DeltaSeconds' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.SetBranchRule
// 0x0002 (0x0002 - 0x0000)
struct FortMantisPawnComponent_SetBranchRule final
{
public:
	EFortMantisBranchRule                         InBranchRule;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMantisBranchPath                         InBranchPath;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisPawnComponent_SetBranchRule) == 0x000001, "Wrong alignment on FortMantisPawnComponent_SetBranchRule");
static_assert(sizeof(FortMantisPawnComponent_SetBranchRule) == 0x000002, "Wrong size on FortMantisPawnComponent_SetBranchRule");
static_assert(offsetof(FortMantisPawnComponent_SetBranchRule, InBranchRule) == 0x000000, "Member 'FortMantisPawnComponent_SetBranchRule::InBranchRule' has a wrong offset!");
static_assert(offsetof(FortMantisPawnComponent_SetBranchRule, InBranchPath) == 0x000001, "Member 'FortMantisPawnComponent_SetBranchRule::InBranchPath' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.SetLockOnState
// 0x0010 (0x0010 - 0x0000)
struct FortMantisPawnComponent_SetLockOnState final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisPawnComponent_SetLockOnState) == 0x000008, "Wrong alignment on FortMantisPawnComponent_SetLockOnState");
static_assert(sizeof(FortMantisPawnComponent_SetLockOnState) == 0x000010, "Wrong size on FortMantisPawnComponent_SetLockOnState");
static_assert(offsetof(FortMantisPawnComponent_SetLockOnState, bEnabled) == 0x000000, "Member 'FortMantisPawnComponent_SetLockOnState::bEnabled' has a wrong offset!");
static_assert(offsetof(FortMantisPawnComponent_SetLockOnState, TargetActor) == 0x000008, "Member 'FortMantisPawnComponent_SetLockOnState::TargetActor' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.SimulateInputEvent
// 0x0003 (0x0003 - 0x0000)
struct FortMantisPawnComponent_SimulateInputEvent final
{
public:
	EFortMantisTechniqueActivationInputType       InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMantisTechniqueActivationTimingType      InputTiming;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceProcessEvent;                                // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisPawnComponent_SimulateInputEvent) == 0x000001, "Wrong alignment on FortMantisPawnComponent_SimulateInputEvent");
static_assert(sizeof(FortMantisPawnComponent_SimulateInputEvent) == 0x000003, "Wrong size on FortMantisPawnComponent_SimulateInputEvent");
static_assert(offsetof(FortMantisPawnComponent_SimulateInputEvent, InputType) == 0x000000, "Member 'FortMantisPawnComponent_SimulateInputEvent::InputType' has a wrong offset!");
static_assert(offsetof(FortMantisPawnComponent_SimulateInputEvent, InputTiming) == 0x000001, "Member 'FortMantisPawnComponent_SimulateInputEvent::InputTiming' has a wrong offset!");
static_assert(offsetof(FortMantisPawnComponent_SimulateInputEvent, bForceProcessEvent) == 0x000002, "Member 'FortMantisPawnComponent_SimulateInputEvent::bForceProcessEvent' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.TryManuallyEndCurrentTechnique
// 0x0001 (0x0001 - 0x0000)
struct FortMantisPawnComponent_TryManuallyEndCurrentTechnique final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisPawnComponent_TryManuallyEndCurrentTechnique) == 0x000001, "Wrong alignment on FortMantisPawnComponent_TryManuallyEndCurrentTechnique");
static_assert(sizeof(FortMantisPawnComponent_TryManuallyEndCurrentTechnique) == 0x000001, "Wrong size on FortMantisPawnComponent_TryManuallyEndCurrentTechnique");
static_assert(offsetof(FortMantisPawnComponent_TryManuallyEndCurrentTechnique, ReturnValue) == 0x000000, "Member 'FortMantisPawnComponent_TryManuallyEndCurrentTechnique::ReturnValue' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.TryManuallyStartTechnique
// 0x0008 (0x0008 - 0x0000)
struct FortMantisPawnComponent_TryManuallyStartTechnique final
{
public:
	int32                                         TechniqueDataIndex;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMantisPawnComponent_TryManuallyStartTechnique) == 0x000004, "Wrong alignment on FortMantisPawnComponent_TryManuallyStartTechnique");
static_assert(sizeof(FortMantisPawnComponent_TryManuallyStartTechnique) == 0x000008, "Wrong size on FortMantisPawnComponent_TryManuallyStartTechnique");
static_assert(offsetof(FortMantisPawnComponent_TryManuallyStartTechnique, TechniqueDataIndex) == 0x000000, "Member 'FortMantisPawnComponent_TryManuallyStartTechnique::TechniqueDataIndex' has a wrong offset!");
static_assert(offsetof(FortMantisPawnComponent_TryManuallyStartTechnique, ReturnValue) == 0x000004, "Member 'FortMantisPawnComponent_TryManuallyStartTechnique::ReturnValue' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.GetCurrentTechniqueMetadata
// 0x0140 (0x0140 - 0x0000)
struct FortMantisPawnComponent_GetCurrentTechniqueMetadata final
{
public:
	struct FFortMantisTechniqueMetadata           ReturnValue;                                       // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisPawnComponent_GetCurrentTechniqueMetadata) == 0x000008, "Wrong alignment on FortMantisPawnComponent_GetCurrentTechniqueMetadata");
static_assert(sizeof(FortMantisPawnComponent_GetCurrentTechniqueMetadata) == 0x000140, "Wrong size on FortMantisPawnComponent_GetCurrentTechniqueMetadata");
static_assert(offsetof(FortMantisPawnComponent_GetCurrentTechniqueMetadata, ReturnValue) == 0x000000, "Member 'FortMantisPawnComponent_GetCurrentTechniqueMetadata::ReturnValue' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.GetLockOnTarget
// 0x0008 (0x0008 - 0x0000)
struct FortMantisPawnComponent_GetLockOnTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisPawnComponent_GetLockOnTarget) == 0x000008, "Wrong alignment on FortMantisPawnComponent_GetLockOnTarget");
static_assert(sizeof(FortMantisPawnComponent_GetLockOnTarget) == 0x000008, "Wrong size on FortMantisPawnComponent_GetLockOnTarget");
static_assert(offsetof(FortMantisPawnComponent_GetLockOnTarget, ReturnValue) == 0x000000, "Member 'FortMantisPawnComponent_GetLockOnTarget::ReturnValue' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.HasCurrentTechniqueMetadataBeenSet
// 0x0001 (0x0001 - 0x0000)
struct FortMantisPawnComponent_HasCurrentTechniqueMetadataBeenSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisPawnComponent_HasCurrentTechniqueMetadataBeenSet) == 0x000001, "Wrong alignment on FortMantisPawnComponent_HasCurrentTechniqueMetadataBeenSet");
static_assert(sizeof(FortMantisPawnComponent_HasCurrentTechniqueMetadataBeenSet) == 0x000001, "Wrong size on FortMantisPawnComponent_HasCurrentTechniqueMetadataBeenSet");
static_assert(offsetof(FortMantisPawnComponent_HasCurrentTechniqueMetadataBeenSet, ReturnValue) == 0x000000, "Member 'FortMantisPawnComponent_HasCurrentTechniqueMetadataBeenSet::ReturnValue' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.HasLockOnTarget
// 0x0001 (0x0001 - 0x0000)
struct FortMantisPawnComponent_HasLockOnTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisPawnComponent_HasLockOnTarget) == 0x000001, "Wrong alignment on FortMantisPawnComponent_HasLockOnTarget");
static_assert(sizeof(FortMantisPawnComponent_HasLockOnTarget) == 0x000001, "Wrong size on FortMantisPawnComponent_HasLockOnTarget");
static_assert(offsetof(FortMantisPawnComponent_HasLockOnTarget, ReturnValue) == 0x000000, "Member 'FortMantisPawnComponent_HasLockOnTarget::ReturnValue' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.IsPerformingLockOn
// 0x0001 (0x0001 - 0x0000)
struct FortMantisPawnComponent_IsPerformingLockOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisPawnComponent_IsPerformingLockOn) == 0x000001, "Wrong alignment on FortMantisPawnComponent_IsPerformingLockOn");
static_assert(sizeof(FortMantisPawnComponent_IsPerformingLockOn) == 0x000001, "Wrong size on FortMantisPawnComponent_IsPerformingLockOn");
static_assert(offsetof(FortMantisPawnComponent_IsPerformingLockOn, ReturnValue) == 0x000000, "Member 'FortMantisPawnComponent_IsPerformingLockOn::ReturnValue' has a wrong offset!");

// Function MantisRuntime.FortMantisWeaponComponent.OnEquip
// 0x0008 (0x0008 - 0x0000)
struct FortMantisWeaponComponent_OnEquip final
{
public:
	class AFortWeapon*                            Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisWeaponComponent_OnEquip) == 0x000008, "Wrong alignment on FortMantisWeaponComponent_OnEquip");
static_assert(sizeof(FortMantisWeaponComponent_OnEquip) == 0x000008, "Wrong size on FortMantisWeaponComponent_OnEquip");
static_assert(offsetof(FortMantisWeaponComponent_OnEquip, Weapon) == 0x000000, "Member 'FortMantisWeaponComponent_OnEquip::Weapon' has a wrong offset!");

// Function MantisRuntime.FortMantisWeaponComponent.OnPressSecondaryFire
// 0x0008 (0x0008 - 0x0000)
struct FortMantisWeaponComponent_OnPressSecondaryFire final
{
public:
	class AFortWeapon*                            Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisWeaponComponent_OnPressSecondaryFire) == 0x000008, "Wrong alignment on FortMantisWeaponComponent_OnPressSecondaryFire");
static_assert(sizeof(FortMantisWeaponComponent_OnPressSecondaryFire) == 0x000008, "Wrong size on FortMantisWeaponComponent_OnPressSecondaryFire");
static_assert(offsetof(FortMantisWeaponComponent_OnPressSecondaryFire, Weapon) == 0x000000, "Member 'FortMantisWeaponComponent_OnPressSecondaryFire::Weapon' has a wrong offset!");

// Function MantisRuntime.FortMantisWeaponComponent.OnPressTrigger
// 0x0008 (0x0008 - 0x0000)
struct FortMantisWeaponComponent_OnPressTrigger final
{
public:
	class AFortWeapon*                            Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisWeaponComponent_OnPressTrigger) == 0x000008, "Wrong alignment on FortMantisWeaponComponent_OnPressTrigger");
static_assert(sizeof(FortMantisWeaponComponent_OnPressTrigger) == 0x000008, "Wrong size on FortMantisWeaponComponent_OnPressTrigger");
static_assert(offsetof(FortMantisWeaponComponent_OnPressTrigger, Weapon) == 0x000000, "Member 'FortMantisWeaponComponent_OnPressTrigger::Weapon' has a wrong offset!");

// Function MantisRuntime.FortMantisWeaponComponent.OnReleaseSecondaryFire
// 0x0008 (0x0008 - 0x0000)
struct FortMantisWeaponComponent_OnReleaseSecondaryFire final
{
public:
	class AFortWeapon*                            Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisWeaponComponent_OnReleaseSecondaryFire) == 0x000008, "Wrong alignment on FortMantisWeaponComponent_OnReleaseSecondaryFire");
static_assert(sizeof(FortMantisWeaponComponent_OnReleaseSecondaryFire) == 0x000008, "Wrong size on FortMantisWeaponComponent_OnReleaseSecondaryFire");
static_assert(offsetof(FortMantisWeaponComponent_OnReleaseSecondaryFire, Weapon) == 0x000000, "Member 'FortMantisWeaponComponent_OnReleaseSecondaryFire::Weapon' has a wrong offset!");

// Function MantisRuntime.FortMantisWeaponComponent.OnReleaseTrigger
// 0x0008 (0x0008 - 0x0000)
struct FortMantisWeaponComponent_OnReleaseTrigger final
{
public:
	class AFortWeapon*                            Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisWeaponComponent_OnReleaseTrigger) == 0x000008, "Wrong alignment on FortMantisWeaponComponent_OnReleaseTrigger");
static_assert(sizeof(FortMantisWeaponComponent_OnReleaseTrigger) == 0x000008, "Wrong size on FortMantisWeaponComponent_OnReleaseTrigger");
static_assert(offsetof(FortMantisWeaponComponent_OnReleaseTrigger, Weapon) == 0x000000, "Member 'FortMantisWeaponComponent_OnReleaseTrigger::Weapon' has a wrong offset!");

// Function MantisRuntime.FortMantisWeaponComponent.OnUnEquip
// 0x0008 (0x0008 - 0x0000)
struct FortMantisWeaponComponent_OnUnEquip final
{
public:
	class AFortWeapon*                            Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisWeaponComponent_OnUnEquip) == 0x000008, "Wrong alignment on FortMantisWeaponComponent_OnUnEquip");
static_assert(sizeof(FortMantisWeaponComponent_OnUnEquip) == 0x000008, "Wrong size on FortMantisWeaponComponent_OnUnEquip");
static_assert(offsetof(FortMantisWeaponComponent_OnUnEquip, Weapon) == 0x000000, "Member 'FortMantisWeaponComponent_OnUnEquip::Weapon' has a wrong offset!");

// Function MantisRuntime.FortMantisWeaponComponent.OnWeaponAbilitiesRemoved
// 0x0010 (0x0010 - 0x0000)
struct FortMantisWeaponComponent_OnWeaponAbilitiesRemoved final
{
public:
	class AFortWeapon*                            Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortWeaponAbilityRemovalReason               RemovalReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMantisWeaponComponent_OnWeaponAbilitiesRemoved) == 0x000008, "Wrong alignment on FortMantisWeaponComponent_OnWeaponAbilitiesRemoved");
static_assert(sizeof(FortMantisWeaponComponent_OnWeaponAbilitiesRemoved) == 0x000010, "Wrong size on FortMantisWeaponComponent_OnWeaponAbilitiesRemoved");
static_assert(offsetof(FortMantisWeaponComponent_OnWeaponAbilitiesRemoved, Weapon) == 0x000000, "Member 'FortMantisWeaponComponent_OnWeaponAbilitiesRemoved::Weapon' has a wrong offset!");
static_assert(offsetof(FortMantisWeaponComponent_OnWeaponAbilitiesRemoved, RemovalReason) == 0x000008, "Member 'FortMantisWeaponComponent_OnWeaponAbilitiesRemoved::RemovalReason' has a wrong offset!");

// Function MantisRuntime.FortMantisWeaponComponent.GetAnimInstanceInfo
// 0x0010 (0x0010 - 0x0000)
struct FortMantisWeaponComponent_GetAnimInstanceInfo final
{
public:
	struct FFortMantisReplicatedAnimInstanceInfo  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMantisWeaponComponent_GetAnimInstanceInfo) == 0x000004, "Wrong alignment on FortMantisWeaponComponent_GetAnimInstanceInfo");
static_assert(sizeof(FortMantisWeaponComponent_GetAnimInstanceInfo) == 0x000010, "Wrong size on FortMantisWeaponComponent_GetAnimInstanceInfo");
static_assert(offsetof(FortMantisWeaponComponent_GetAnimInstanceInfo, ReturnValue) == 0x000000, "Member 'FortMantisWeaponComponent_GetAnimInstanceInfo::ReturnValue' has a wrong offset!");

}

