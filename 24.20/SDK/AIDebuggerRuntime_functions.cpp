#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIDebuggerRuntime

#include "Basic.hpp"

#include "AIDebuggerRuntime_classes.hpp"
#include "AIDebuggerRuntime_parameters.hpp"


namespace SDK
{

// Function AIDebuggerRuntime.AIDebuggerCheatManager.EnableNavMeshVisualizer
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAIDebuggerCheatManager::EnableNavMeshVisualizer(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIDebuggerCheatManager", "EnableNavMeshVisualizer");

	Params::AIDebuggerCheatManager_EnableNavMeshVisualizer Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AIDebuggerRuntime.AIDebuggerCheatManager.NextNavMesh
// (Final, Exec, Native, Public)

void UAIDebuggerCheatManager::NextNavMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIDebuggerCheatManager", "NextNavMesh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AIDebuggerRuntime.AIDebuggerCheatManager.StartAIDebugger
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           AIDebuggerSoftClassPath                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAIDebuggerCheatManager::StartAIDebugger(const class FString& AIDebuggerSoftClassPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIDebuggerCheatManager", "StartAIDebugger");

	Params::AIDebuggerCheatManager_StartAIDebugger Parms{};

	Parms.AIDebuggerSoftClassPath = std::move(AIDebuggerSoftClassPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AIDebuggerRuntime.FortControllerComponent_AIDebugger.OnPlayerExitedIsland
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FEventMessageTag                 Channel                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPlayerExitSpatialActorContext   PlayerExitSpatialActorContext                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UFortControllerComponent_AIDebugger::OnPlayerExitedIsland(const struct FEventMessageTag& Channel, const struct FPlayerExitSpatialActorContext& PlayerExitSpatialActorContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_AIDebugger", "OnPlayerExitedIsland");

	Params::FortControllerComponent_AIDebugger_OnPlayerExitedIsland Parms{};

	Parms.Channel = std::move(Channel);
	Parms.PlayerExitSpatialActorContext = std::move(PlayerExitSpatialActorContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AIDebuggerRuntime.FortControllerComponent_AIDebugger.OnRep_EnabledVisualizers
// (Final, Native, Public)

void UFortControllerComponent_AIDebugger::OnRep_EnabledVisualizers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_AIDebugger", "OnRep_EnabledVisualizers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AIDebuggerRuntime.FortControllerComponent_AIDebugger.SetVisualizationEnable
// (RequiredAPI, Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// EAIDebuggerVisualization                VisualizationType                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_AIDebugger::SetVisualizationEnable(const EAIDebuggerVisualization VisualizationType, const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_AIDebugger", "SetVisualizationEnable");

	Params::FortControllerComponent_AIDebugger_SetVisualizationEnable Parms{};

	Parms.VisualizationType = VisualizationType;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AIDebuggerRuntime.FortControllerComponent_AIDebugger.VisualizeNavMeshID
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   NavMeshID                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_AIDebugger::VisualizeNavMeshID(const int32 NavMeshID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_AIDebugger", "VisualizeNavMeshID");

	Params::FortControllerComponent_AIDebugger_VisualizeNavMeshID Parms{};

	Parms.NavMeshID = NavMeshID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AIDebuggerRuntime.FortControllerComponent_AIDebugger.VisualizeNextNavMesh
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void UFortControllerComponent_AIDebugger::VisualizeNextNavMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_AIDebugger", "VisualizeNextNavMesh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AIDebuggerRuntime.FortControllerComponent_AIDebugger.GetOrCreateRenderer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAIDebuggerRendererComponent*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAIDebuggerRendererComponent* UFortControllerComponent_AIDebugger::GetOrCreateRenderer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_AIDebugger", "GetOrCreateRenderer");

	Params::FortControllerComponent_AIDebugger_GetOrCreateRenderer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AIDebuggerRuntime.FortControllerComponent_AIDebugger.IsVisualizationEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAIDebuggerVisualization                VisualizationType                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortControllerComponent_AIDebugger::IsVisualizationEnabled(const EAIDebuggerVisualization VisualizationType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_AIDebugger", "IsVisualizationEnabled");

	Params::FortControllerComponent_AIDebugger_IsVisualizationEnabled Parms{};

	Parms.VisualizationType = VisualizationType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

