#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SBDanceVolume

#include "Basic.hpp"

#include "HmxAudio_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class SBDanceVolume.FMDanceSynchronizerComponent
// 0x0048 (0x00E8 - 0x00A0)
class UFMDanceSynchronizerComponent final : public UActorComponent
{
public:
	uint8                                         bShouldHalfOrDoubleTimeDances : 1;                 // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMusicalTimeSpan                       DanceTimeSpan;                                     // 0x00A4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOldMusicClockComponent*                MusicClock;                                        // 0x00B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortPlayerPawn*                        OwnerPlayerPawn;                                   // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 OwnerMeshComponent;                                // 0x00C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bMusicSyncEnabled;                                 // 0x00D0(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bStopAudioComplete;                                // 0x00D1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EmoteSoundIds;                                     // 0x00D8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	class AFortPlayerPawn* GetOwnerFortPlayerPawn();
	class USkeletalMeshComponent* GetOwnerSkeletalMeshComponent();
	bool IsMusisSyncEnabled();
	void SetDanceMusicalTimeInfo(const struct FMusicalTimeSpan& TimeSpanInfo);
	void SetMusicClockReference(class UOldMusicClockComponent* MusicClockComponent);
	void SetMusicSyncEnabled(bool Enabled);
	void StopOwnerEmoteAudio();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMDanceSynchronizerComponent">();
	}
	static class UFMDanceSynchronizerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMDanceSynchronizerComponent>();
	}
};
static_assert(alignof(UFMDanceSynchronizerComponent) == 0x000008, "Wrong alignment on UFMDanceSynchronizerComponent");
static_assert(sizeof(UFMDanceSynchronizerComponent) == 0x0000E8, "Wrong size on UFMDanceSynchronizerComponent");
static_assert(offsetof(UFMDanceSynchronizerComponent, DanceTimeSpan) == 0x0000A4, "Member 'UFMDanceSynchronizerComponent::DanceTimeSpan' has a wrong offset!");
static_assert(offsetof(UFMDanceSynchronizerComponent, MusicClock) == 0x0000B8, "Member 'UFMDanceSynchronizerComponent::MusicClock' has a wrong offset!");
static_assert(offsetof(UFMDanceSynchronizerComponent, OwnerPlayerPawn) == 0x0000C0, "Member 'UFMDanceSynchronizerComponent::OwnerPlayerPawn' has a wrong offset!");
static_assert(offsetof(UFMDanceSynchronizerComponent, OwnerMeshComponent) == 0x0000C8, "Member 'UFMDanceSynchronizerComponent::OwnerMeshComponent' has a wrong offset!");
static_assert(offsetof(UFMDanceSynchronizerComponent, bMusicSyncEnabled) == 0x0000D0, "Member 'UFMDanceSynchronizerComponent::bMusicSyncEnabled' has a wrong offset!");
static_assert(offsetof(UFMDanceSynchronizerComponent, bStopAudioComplete) == 0x0000D1, "Member 'UFMDanceSynchronizerComponent::bStopAudioComplete' has a wrong offset!");
static_assert(offsetof(UFMDanceSynchronizerComponent, EmoteSoundIds) == 0x0000D8, "Member 'UFMDanceSynchronizerComponent::EmoteSoundIds' has a wrong offset!");

// Class SBDanceVolume.SBDanceVolumeLibrary
// 0x0000 (0x0028 - 0x0028)
class USBDanceVolumeLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FDanceMontagePlayInfo CalculateDanceMontagePlayInfoWithMusicClock(class UOldMusicClockComponent* MusicClock, class UAnimMontage* Montage, const struct FMusicalTimeSpan& MontageTimeInfo);
	static struct FDanceMontagePlayInfo CalculateDanceMontagePlayInfoWithMusicPlayer(class UMusicPlayerComponentBase* MusicPlayer, class UAnimMontage* Montage, const struct FMusicalTimeSpan& MontageTimeInfo);
	static float CalculateDanceMontagePlayRateWithMusicClock(class UOldMusicClockComponent* MusicClock, const class UAnimMontage* Montage, const float MontageBeatLength);
	static void ForceStopMontage(const class AFortPawn* FortPawn);
	static class UFortItemDefinition* GetLastEmoteExecuted(class AController* Controller);
	static bool IsMontageSetupForDanceVolumeLooping(const class UAnimMontage* Montage);
	static void SetWholeMontageLooping(class UAnimInstance* Anim, class UAnimMontage* Montage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SBDanceVolumeLibrary">();
	}
	static class USBDanceVolumeLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USBDanceVolumeLibrary>();
	}
};
static_assert(alignof(USBDanceVolumeLibrary) == 0x000008, "Wrong alignment on USBDanceVolumeLibrary");
static_assert(sizeof(USBDanceVolumeLibrary) == 0x000028, "Wrong size on USBDanceVolumeLibrary");

}

