#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnstableLiquidGunRuntime

#include "Basic.hpp"

#include "UnstableLiquidGunRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function UnstableLiquidGunRuntime.FortLiquidGunProjectile.HandleSplineHit
// 0x00E0 (0x00E0 - 0x0000)
struct FortLiquidGunProjectile_HandleSplineHit final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLiquidGunProjectile_HandleSplineHit) == 0x000008, "Wrong alignment on FortLiquidGunProjectile_HandleSplineHit");
static_assert(sizeof(FortLiquidGunProjectile_HandleSplineHit) == 0x0000E0, "Wrong size on FortLiquidGunProjectile_HandleSplineHit");
static_assert(offsetof(FortLiquidGunProjectile_HandleSplineHit, Hit) == 0x000000, "Member 'FortLiquidGunProjectile_HandleSplineHit::Hit' has a wrong offset!");

// Function UnstableLiquidGunRuntime.FortLiquidGunProjectile.SetDetachmentReason
// 0x0001 (0x0001 - 0x0000)
struct FortLiquidGunProjectile_SetDetachmentReason final
{
public:
	ELiquidRibbonDetachmentReason                 InDetachmentReason;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLiquidGunProjectile_SetDetachmentReason) == 0x000001, "Wrong alignment on FortLiquidGunProjectile_SetDetachmentReason");
static_assert(sizeof(FortLiquidGunProjectile_SetDetachmentReason) == 0x000001, "Wrong size on FortLiquidGunProjectile_SetDetachmentReason");
static_assert(offsetof(FortLiquidGunProjectile_SetDetachmentReason, InDetachmentReason) == 0x000000, "Member 'FortLiquidGunProjectile_SetDetachmentReason::InDetachmentReason' has a wrong offset!");

// Function UnstableLiquidGunRuntime.FortLiquidGunProjectile.GetDetachmentReason
// 0x0001 (0x0001 - 0x0000)
struct FortLiquidGunProjectile_GetDetachmentReason final
{
public:
	ELiquidRibbonDetachmentReason                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLiquidGunProjectile_GetDetachmentReason) == 0x000001, "Wrong alignment on FortLiquidGunProjectile_GetDetachmentReason");
static_assert(sizeof(FortLiquidGunProjectile_GetDetachmentReason) == 0x000001, "Wrong size on FortLiquidGunProjectile_GetDetachmentReason");
static_assert(offsetof(FortLiquidGunProjectile_GetDetachmentReason, ReturnValue) == 0x000000, "Member 'FortLiquidGunProjectile_GetDetachmentReason::ReturnValue' has a wrong offset!");

// Function UnstableLiquidGunRuntime.LiquidRibbonManager.CalculateSegments
// 0x0028 (0x0028 - 0x0000)
struct LiquidRibbonManager_CalculateSegments final
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Tension;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLiquidRibbonSplineSegment>     ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiquidRibbonManager_CalculateSegments) == 0x000008, "Wrong alignment on LiquidRibbonManager_CalculateSegments");
static_assert(sizeof(LiquidRibbonManager_CalculateSegments) == 0x000028, "Wrong size on LiquidRibbonManager_CalculateSegments");
static_assert(offsetof(LiquidRibbonManager_CalculateSegments, Points) == 0x000000, "Member 'LiquidRibbonManager_CalculateSegments::Points' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_CalculateSegments, Tension) == 0x000010, "Member 'LiquidRibbonManager_CalculateSegments::Tension' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_CalculateSegments, ReturnValue) == 0x000018, "Member 'LiquidRibbonManager_CalculateSegments::ReturnValue' has a wrong offset!");

// Function UnstableLiquidGunRuntime.LiquidRibbonManager.CalculateSplinePointsAndSetNiagaraData
// 0x0070 (0x0070 - 0x0000)
struct LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData final
{
public:
	TArray<class AFortLiquidGunProjectile*>       Projectiles;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAttachSplineToMuzzle;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutAllPositions;                                   // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutRibbonIDs;                                      // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  OutRibbonVisibilities;                             // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 OutFlashIntensities;                               // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutRibbonSizes;                                    // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData) == 0x000008, "Wrong alignment on LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData");
static_assert(sizeof(LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData) == 0x000070, "Wrong size on LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData");
static_assert(offsetof(LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData, Projectiles) == 0x000000, "Member 'LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData::Projectiles' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData, bAttachSplineToMuzzle) == 0x000010, "Member 'LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData::bAttachSplineToMuzzle' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData, NiagaraComponent) == 0x000018, "Member 'LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData::NiagaraComponent' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData, OutAllPositions) == 0x000020, "Member 'LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData::OutAllPositions' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData, OutRibbonIDs) == 0x000030, "Member 'LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData::OutRibbonIDs' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData, OutRibbonVisibilities) == 0x000040, "Member 'LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData::OutRibbonVisibilities' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData, OutFlashIntensities) == 0x000050, "Member 'LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData::OutFlashIntensities' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData, OutRibbonSizes) == 0x000060, "Member 'LiquidRibbonManager_CalculateSplinePointsAndSetNiagaraData::OutRibbonSizes' has a wrong offset!");

// Function UnstableLiquidGunRuntime.LiquidRibbonManager.GetOrAddDetachment
// 0x0138 (0x0138 - 0x0000)
struct LiquidRibbonManager_GetOrAddDetachment final
{
public:
	int32                                         RibbonID;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLiquidRibbonSplineSegment             Segment;                                           // 0x0008(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLiquidRibbonSplineDetachment          ReturnValue;                                       // 0x0080(0x00B8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiquidRibbonManager_GetOrAddDetachment) == 0x000008, "Wrong alignment on LiquidRibbonManager_GetOrAddDetachment");
static_assert(sizeof(LiquidRibbonManager_GetOrAddDetachment) == 0x000138, "Wrong size on LiquidRibbonManager_GetOrAddDetachment");
static_assert(offsetof(LiquidRibbonManager_GetOrAddDetachment, RibbonID) == 0x000000, "Member 'LiquidRibbonManager_GetOrAddDetachment::RibbonID' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_GetOrAddDetachment, Segment) == 0x000008, "Member 'LiquidRibbonManager_GetOrAddDetachment::Segment' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_GetOrAddDetachment, ReturnValue) == 0x000080, "Member 'LiquidRibbonManager_GetOrAddDetachment::ReturnValue' has a wrong offset!");

// Function UnstableLiquidGunRuntime.LiquidRibbonManager.CalculatePointFlashIntensity
// 0x0008 (0x0008 - 0x0000)
struct LiquidRibbonManager_CalculatePointFlashIntensity final
{
public:
	int32                                         PointSize;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiquidRibbonManager_CalculatePointFlashIntensity) == 0x000004, "Wrong alignment on LiquidRibbonManager_CalculatePointFlashIntensity");
static_assert(sizeof(LiquidRibbonManager_CalculatePointFlashIntensity) == 0x000008, "Wrong size on LiquidRibbonManager_CalculatePointFlashIntensity");
static_assert(offsetof(LiquidRibbonManager_CalculatePointFlashIntensity, PointSize) == 0x000000, "Member 'LiquidRibbonManager_CalculatePointFlashIntensity::PointSize' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_CalculatePointFlashIntensity, ReturnValue) == 0x000004, "Member 'LiquidRibbonManager_CalculatePointFlashIntensity::ReturnValue' has a wrong offset!");

// Function UnstableLiquidGunRuntime.LiquidRibbonManager.CalculatePointSize
// 0x000C (0x000C - 0x0000)
struct LiquidRibbonManager_CalculatePointSize final
{
public:
	int32                                         SegmentIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiquidRibbonManager_CalculatePointSize) == 0x000004, "Wrong alignment on LiquidRibbonManager_CalculatePointSize");
static_assert(sizeof(LiquidRibbonManager_CalculatePointSize) == 0x00000C, "Wrong size on LiquidRibbonManager_CalculatePointSize");
static_assert(offsetof(LiquidRibbonManager_CalculatePointSize, SegmentIndex) == 0x000000, "Member 'LiquidRibbonManager_CalculatePointSize::SegmentIndex' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_CalculatePointSize, PointIndex) == 0x000004, "Member 'LiquidRibbonManager_CalculatePointSize::PointIndex' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_CalculatePointSize, ReturnValue) == 0x000008, "Member 'LiquidRibbonManager_CalculatePointSize::ReturnValue' has a wrong offset!");

// Function UnstableLiquidGunRuntime.LiquidRibbonManager.GetFirstVisiblePointIndex
// 0x0004 (0x0004 - 0x0000)
struct LiquidRibbonManager_GetFirstVisiblePointIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiquidRibbonManager_GetFirstVisiblePointIndex) == 0x000004, "Wrong alignment on LiquidRibbonManager_GetFirstVisiblePointIndex");
static_assert(sizeof(LiquidRibbonManager_GetFirstVisiblePointIndex) == 0x000004, "Wrong size on LiquidRibbonManager_GetFirstVisiblePointIndex");
static_assert(offsetof(LiquidRibbonManager_GetFirstVisiblePointIndex, ReturnValue) == 0x000000, "Member 'LiquidRibbonManager_GetFirstVisiblePointIndex::ReturnValue' has a wrong offset!");

// Function UnstableLiquidGunRuntime.LiquidRibbonManager.GetPointOnSegment
// 0x0098 (0x0098 - 0x0000)
struct LiquidRibbonManager_GetPointOnSegment final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLiquidRibbonSplineSegment             Segment;                                           // 0x0008(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0080(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiquidRibbonManager_GetPointOnSegment) == 0x000008, "Wrong alignment on LiquidRibbonManager_GetPointOnSegment");
static_assert(sizeof(LiquidRibbonManager_GetPointOnSegment) == 0x000098, "Wrong size on LiquidRibbonManager_GetPointOnSegment");
static_assert(offsetof(LiquidRibbonManager_GetPointOnSegment, T) == 0x000000, "Member 'LiquidRibbonManager_GetPointOnSegment::T' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_GetPointOnSegment, Segment) == 0x000008, "Member 'LiquidRibbonManager_GetPointOnSegment::Segment' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_GetPointOnSegment, ReturnValue) == 0x000080, "Member 'LiquidRibbonManager_GetPointOnSegment::ReturnValue' has a wrong offset!");

// Function UnstableLiquidGunRuntime.LiquidRibbonManager.SetNiagaraData
// 0x0058 (0x0058 - 0x0000)
struct LiquidRibbonManager_SetNiagaraData final
{
public:
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Positions;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 RibbonIDs;                                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<bool>                                  RibbonVisibilities;                                // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 FlashIntensities;                                  // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 RibbonSizes;                                       // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiquidRibbonManager_SetNiagaraData) == 0x000008, "Wrong alignment on LiquidRibbonManager_SetNiagaraData");
static_assert(sizeof(LiquidRibbonManager_SetNiagaraData) == 0x000058, "Wrong size on LiquidRibbonManager_SetNiagaraData");
static_assert(offsetof(LiquidRibbonManager_SetNiagaraData, NiagaraComponent) == 0x000000, "Member 'LiquidRibbonManager_SetNiagaraData::NiagaraComponent' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_SetNiagaraData, Positions) == 0x000008, "Member 'LiquidRibbonManager_SetNiagaraData::Positions' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_SetNiagaraData, RibbonIDs) == 0x000018, "Member 'LiquidRibbonManager_SetNiagaraData::RibbonIDs' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_SetNiagaraData, RibbonVisibilities) == 0x000028, "Member 'LiquidRibbonManager_SetNiagaraData::RibbonVisibilities' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_SetNiagaraData, FlashIntensities) == 0x000038, "Member 'LiquidRibbonManager_SetNiagaraData::FlashIntensities' has a wrong offset!");
static_assert(offsetof(LiquidRibbonManager_SetNiagaraData, RibbonSizes) == 0x000048, "Member 'LiquidRibbonManager_SetNiagaraData::RibbonSizes' has a wrong offset!");

}

