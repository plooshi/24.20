#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DanceVolume

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "DanceVolume_structs.hpp"


namespace SDK
{

// Class DanceVolume.DanceSynchronizerComponent
// 0x0038 (0x00D8 - 0x00A0)
class UDanceSynchronizerComponent final : public UActorComponent
{
public:
	uint8                                         bShouldHalfOrDoubleTimeDances : 1;                 // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDanceBeatInfo                         BeatInfo;                                          // 0x00A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	EDanceBeatSyncMode                            SyncMode;                                          // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Tempo;                                             // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        OwnerPlayerPawn;                                   // 0x00B8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 OwnerMeshComponent;                                // 0x00C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 LeaderMeshComponent;                               // 0x00C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float CalculateDanceMontagePlayRate(const float CurrentTempo, const class UAnimMontage* Montage, const struct FDanceBeatInfo& DanceBeatInfo);
	class AFortPlayerPawn* GetOwnerFortPlayerPawn();
	class USkeletalMeshComponent* GetOwnerSkeletalMeshComponent();
	bool IsTempoSyncEnabled();
	void OnRep_SyncMode();
	void SetBeatSyncMode(EDanceBeatSyncMode NewMode);
	void SetDanceBeatInfo(const struct FDanceBeatInfo& NewDanceBeatInfo);
	void SetTempo(float newTempo);
	void StopOwnerEmoteAudio();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DanceSynchronizerComponent">();
	}
	static class UDanceSynchronizerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDanceSynchronizerComponent>();
	}
};
static_assert(alignof(UDanceSynchronizerComponent) == 0x000008, "Wrong alignment on UDanceSynchronizerComponent");
static_assert(sizeof(UDanceSynchronizerComponent) == 0x0000D8, "Wrong size on UDanceSynchronizerComponent");
static_assert(offsetof(UDanceSynchronizerComponent, BeatInfo) == 0x0000A4, "Member 'UDanceSynchronizerComponent::BeatInfo' has a wrong offset!");
static_assert(offsetof(UDanceSynchronizerComponent, SyncMode) == 0x0000AC, "Member 'UDanceSynchronizerComponent::SyncMode' has a wrong offset!");
static_assert(offsetof(UDanceSynchronizerComponent, Tempo) == 0x0000B0, "Member 'UDanceSynchronizerComponent::Tempo' has a wrong offset!");
static_assert(offsetof(UDanceSynchronizerComponent, OwnerPlayerPawn) == 0x0000B8, "Member 'UDanceSynchronizerComponent::OwnerPlayerPawn' has a wrong offset!");
static_assert(offsetof(UDanceSynchronizerComponent, OwnerMeshComponent) == 0x0000C0, "Member 'UDanceSynchronizerComponent::OwnerMeshComponent' has a wrong offset!");
static_assert(offsetof(UDanceSynchronizerComponent, LeaderMeshComponent) == 0x0000C8, "Member 'UDanceSynchronizerComponent::LeaderMeshComponent' has a wrong offset!");

// Class DanceVolume.DanceVolumeLibrary
// 0x0000 (0x0028 - 0x0028)
class UDanceVolumeLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ForceStopMontage(const class AFortPawn* FortPawn);
	static class UFortItemDefinition* GetLastEmoteExecuted(class AController* Controller);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DanceVolumeLibrary">();
	}
	static class UDanceVolumeLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDanceVolumeLibrary>();
	}
};
static_assert(alignof(UDanceVolumeLibrary) == 0x000008, "Wrong alignment on UDanceVolumeLibrary");
static_assert(sizeof(UDanceVolumeLibrary) == 0x000028, "Wrong size on UDanceVolumeLibrary");

}

