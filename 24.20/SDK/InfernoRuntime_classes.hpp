#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InfernoRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "InfernoRuntime_structs.hpp"
#include "Niagara_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class InfernoRuntime.FortCurieElementAttachHandlerVoxelFire
// 0x0000 (0x0090 - 0x0090)
class UFortCurieElementAttachHandlerVoxelFire : public UFortCurieElementAttachHandlerFire
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieElementAttachHandlerVoxelFire">();
	}
	static class UFortCurieElementAttachHandlerVoxelFire* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCurieElementAttachHandlerVoxelFire>();
	}
};
static_assert(alignof(UFortCurieElementAttachHandlerVoxelFire) == 0x000008, "Wrong alignment on UFortCurieElementAttachHandlerVoxelFire");
static_assert(sizeof(UFortCurieElementAttachHandlerVoxelFire) == 0x000090, "Wrong size on UFortCurieElementAttachHandlerVoxelFire");

// Class InfernoRuntime.FortCurieElementAttachConditionHandlerVoxelFire
// 0x0000 (0x0040 - 0x0040)
class UFortCurieElementAttachConditionHandlerVoxelFire : public UFortCurieElementAttachConditionHandlerFire
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieElementAttachConditionHandlerVoxelFire">();
	}
	static class UFortCurieElementAttachConditionHandlerVoxelFire* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCurieElementAttachConditionHandlerVoxelFire>();
	}
};
static_assert(alignof(UFortCurieElementAttachConditionHandlerVoxelFire) == 0x000008, "Wrong alignment on UFortCurieElementAttachConditionHandlerVoxelFire");
static_assert(sizeof(UFortCurieElementAttachConditionHandlerVoxelFire) == 0x000040, "Wrong size on UFortCurieElementAttachConditionHandlerVoxelFire");

// Class InfernoRuntime.FortCurieVoxelFirePropagationManagerConfig
// 0x0048 (0x0178 - 0x0130)
class UFortCurieVoxelFirePropagationManagerConfig final : public UFortCurieFirePropagationManagerConfig
{
public:
	struct FFortCurieVoxelPropagationProperties   DefaultPropagationProperties;                      // 0x0130(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FName                                   PropagationPropertiesRegistry;                     // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PropagationNoiseMinimum;                           // 0x014C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PropagationNoiseMaximum;                           // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PropagationSpeedNoiseRange;                        // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PropagationMinimumSpeed;                           // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PropagationMinimumTime;                            // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoxelOverlapExpansionFactor;                       // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPerMaterialPropagationProperties;            // 0x0164(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActorPropagationInteractMagnitude;                 // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovedActorGrassIgnitionDelay;                      // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovedActorGrassGridCellZExpansion;                 // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovedActorGroundTraceZRange;                       // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieVoxelFirePropagationManagerConfig">();
	}
	static class UFortCurieVoxelFirePropagationManagerConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCurieVoxelFirePropagationManagerConfig>();
	}
};
static_assert(alignof(UFortCurieVoxelFirePropagationManagerConfig) == 0x000008, "Wrong alignment on UFortCurieVoxelFirePropagationManagerConfig");
static_assert(sizeof(UFortCurieVoxelFirePropagationManagerConfig) == 0x000178, "Wrong size on UFortCurieVoxelFirePropagationManagerConfig");
static_assert(offsetof(UFortCurieVoxelFirePropagationManagerConfig, DefaultPropagationProperties) == 0x000130, "Member 'UFortCurieVoxelFirePropagationManagerConfig::DefaultPropagationProperties' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFirePropagationManagerConfig, PropagationPropertiesRegistry) == 0x000148, "Member 'UFortCurieVoxelFirePropagationManagerConfig::PropagationPropertiesRegistry' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFirePropagationManagerConfig, PropagationNoiseMinimum) == 0x00014C, "Member 'UFortCurieVoxelFirePropagationManagerConfig::PropagationNoiseMinimum' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFirePropagationManagerConfig, PropagationNoiseMaximum) == 0x000150, "Member 'UFortCurieVoxelFirePropagationManagerConfig::PropagationNoiseMaximum' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFirePropagationManagerConfig, PropagationSpeedNoiseRange) == 0x000154, "Member 'UFortCurieVoxelFirePropagationManagerConfig::PropagationSpeedNoiseRange' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFirePropagationManagerConfig, PropagationMinimumSpeed) == 0x000158, "Member 'UFortCurieVoxelFirePropagationManagerConfig::PropagationMinimumSpeed' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFirePropagationManagerConfig, PropagationMinimumTime) == 0x00015C, "Member 'UFortCurieVoxelFirePropagationManagerConfig::PropagationMinimumTime' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFirePropagationManagerConfig, VoxelOverlapExpansionFactor) == 0x000160, "Member 'UFortCurieVoxelFirePropagationManagerConfig::VoxelOverlapExpansionFactor' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFirePropagationManagerConfig, bAllowPerMaterialPropagationProperties) == 0x000164, "Member 'UFortCurieVoxelFirePropagationManagerConfig::bAllowPerMaterialPropagationProperties' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFirePropagationManagerConfig, ActorPropagationInteractMagnitude) == 0x000168, "Member 'UFortCurieVoxelFirePropagationManagerConfig::ActorPropagationInteractMagnitude' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFirePropagationManagerConfig, MovedActorGrassIgnitionDelay) == 0x00016C, "Member 'UFortCurieVoxelFirePropagationManagerConfig::MovedActorGrassIgnitionDelay' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFirePropagationManagerConfig, MovedActorGrassGridCellZExpansion) == 0x000170, "Member 'UFortCurieVoxelFirePropagationManagerConfig::MovedActorGrassGridCellZExpansion' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFirePropagationManagerConfig, MovedActorGroundTraceZRange) == 0x000174, "Member 'UFortCurieVoxelFirePropagationManagerConfig::MovedActorGroundTraceZRange' has a wrong offset!");

// Class InfernoRuntime.FortCurieVoxelFirePropagationManager
// 0x0650 (0x0680 - 0x0030)
class alignas(0x10) UFortCurieVoxelFirePropagationManager final : public UFortCurieManagerComponent
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortCurieVoxelFirePropagationManagerTickFunction PrimaryTickFunction;                               // 0x0040(0x0030)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_70[0x5F8];                                     // 0x0070(0x05F8)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortCurieVoxelFirePropagationManagerConfig* InternalManagerConfig;                             // 0x0668(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_670[0x10];                                     // 0x0670(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieVoxelFirePropagationManager">();
	}
	static class UFortCurieVoxelFirePropagationManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCurieVoxelFirePropagationManager>();
	}
};
static_assert(alignof(UFortCurieVoxelFirePropagationManager) == 0x000010, "Wrong alignment on UFortCurieVoxelFirePropagationManager");
static_assert(sizeof(UFortCurieVoxelFirePropagationManager) == 0x000680, "Wrong size on UFortCurieVoxelFirePropagationManager");
static_assert(offsetof(UFortCurieVoxelFirePropagationManager, PrimaryTickFunction) == 0x000040, "Member 'UFortCurieVoxelFirePropagationManager::PrimaryTickFunction' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFirePropagationManager, InternalManagerConfig) == 0x000668, "Member 'UFortCurieVoxelFirePropagationManager::InternalManagerConfig' has a wrong offset!");

// Class InfernoRuntime.FortCurieVoxelFireDebugParticleDataInterface
// 0x0000 (0x0028 - 0x0028)
class IFortCurieVoxelFireDebugParticleDataInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieVoxelFireDebugParticleDataInterface">();
	}
	static class IFortCurieVoxelFireDebugParticleDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortCurieVoxelFireDebugParticleDataInterface>();
	}
};
static_assert(alignof(IFortCurieVoxelFireDebugParticleDataInterface) == 0x000008, "Wrong alignment on IFortCurieVoxelFireDebugParticleDataInterface");
static_assert(sizeof(IFortCurieVoxelFireDebugParticleDataInterface) == 0x000028, "Wrong size on IFortCurieVoxelFireDebugParticleDataInterface");

// Class InfernoRuntime.FortCurieVoxelFireDebugNiagaraDataInterface
// 0x0000 (0x0038 - 0x0038)
class UFortCurieVoxelFireDebugNiagaraDataInterface final : public UNiagaraDataInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieVoxelFireDebugNiagaraDataInterface">();
	}
	static class UFortCurieVoxelFireDebugNiagaraDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCurieVoxelFireDebugNiagaraDataInterface>();
	}
};
static_assert(alignof(UFortCurieVoxelFireDebugNiagaraDataInterface) == 0x000008, "Wrong alignment on UFortCurieVoxelFireDebugNiagaraDataInterface");
static_assert(sizeof(UFortCurieVoxelFireDebugNiagaraDataInterface) == 0x000038, "Wrong size on UFortCurieVoxelFireDebugNiagaraDataInterface");

// Class InfernoRuntime.FortCurieVoxelFireNativeFXHandlerConfig
// 0x0058 (0x01C0 - 0x0168)
class UFortCurieVoxelFireNativeFXHandlerConfig final : public UFortCurieNativeFXHandlerConfig
{
public:
	class UNiagaraSystem*                         WorldFireSystem;                                   // 0x0168(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNiagaraSystem*                         WorldFireDebugSystem;                              // 0x0170(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextureRenderTarget2D*                 LandscapeCharRenderTarget;                         // 0x0178(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialParameterCollection*           MaterialParameterCollection;                       // 0x0180(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PlayerWorldFireSystemLightScalabilityParamName;    // 0x0188(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LandscapeBiasParameterName;                        // 0x018C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LandscapeDivisorParameterName;                     // 0x0190(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LandscapeFireRandomLocationRadius;                 // 0x0194(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinLandscapeFireSphericalBounds;                   // 0x0198(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxLandscapeFireSphericalBounds;                   // 0x019C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LandscapeCharInterpSpeed;                          // 0x01A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LandscapeIgnitionParticleMovementSpeed;            // 0x01A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseVoxelFireAmbientAudio;                         // 0x01A8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             StructureFireAmbientSound;                         // 0x01B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundBase*                             GrassFireAmbientSound;                             // 0x01B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieVoxelFireNativeFXHandlerConfig">();
	}
	static class UFortCurieVoxelFireNativeFXHandlerConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCurieVoxelFireNativeFXHandlerConfig>();
	}
};
static_assert(alignof(UFortCurieVoxelFireNativeFXHandlerConfig) == 0x000008, "Wrong alignment on UFortCurieVoxelFireNativeFXHandlerConfig");
static_assert(sizeof(UFortCurieVoxelFireNativeFXHandlerConfig) == 0x0001C0, "Wrong size on UFortCurieVoxelFireNativeFXHandlerConfig");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandlerConfig, WorldFireSystem) == 0x000168, "Member 'UFortCurieVoxelFireNativeFXHandlerConfig::WorldFireSystem' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandlerConfig, WorldFireDebugSystem) == 0x000170, "Member 'UFortCurieVoxelFireNativeFXHandlerConfig::WorldFireDebugSystem' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandlerConfig, LandscapeCharRenderTarget) == 0x000178, "Member 'UFortCurieVoxelFireNativeFXHandlerConfig::LandscapeCharRenderTarget' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandlerConfig, MaterialParameterCollection) == 0x000180, "Member 'UFortCurieVoxelFireNativeFXHandlerConfig::MaterialParameterCollection' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandlerConfig, PlayerWorldFireSystemLightScalabilityParamName) == 0x000188, "Member 'UFortCurieVoxelFireNativeFXHandlerConfig::PlayerWorldFireSystemLightScalabilityParamName' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandlerConfig, LandscapeBiasParameterName) == 0x00018C, "Member 'UFortCurieVoxelFireNativeFXHandlerConfig::LandscapeBiasParameterName' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandlerConfig, LandscapeDivisorParameterName) == 0x000190, "Member 'UFortCurieVoxelFireNativeFXHandlerConfig::LandscapeDivisorParameterName' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandlerConfig, LandscapeFireRandomLocationRadius) == 0x000194, "Member 'UFortCurieVoxelFireNativeFXHandlerConfig::LandscapeFireRandomLocationRadius' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandlerConfig, MinLandscapeFireSphericalBounds) == 0x000198, "Member 'UFortCurieVoxelFireNativeFXHandlerConfig::MinLandscapeFireSphericalBounds' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandlerConfig, MaxLandscapeFireSphericalBounds) == 0x00019C, "Member 'UFortCurieVoxelFireNativeFXHandlerConfig::MaxLandscapeFireSphericalBounds' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandlerConfig, LandscapeCharInterpSpeed) == 0x0001A0, "Member 'UFortCurieVoxelFireNativeFXHandlerConfig::LandscapeCharInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandlerConfig, LandscapeIgnitionParticleMovementSpeed) == 0x0001A4, "Member 'UFortCurieVoxelFireNativeFXHandlerConfig::LandscapeIgnitionParticleMovementSpeed' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandlerConfig, bUseVoxelFireAmbientAudio) == 0x0001A8, "Member 'UFortCurieVoxelFireNativeFXHandlerConfig::bUseVoxelFireAmbientAudio' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandlerConfig, StructureFireAmbientSound) == 0x0001B0, "Member 'UFortCurieVoxelFireNativeFXHandlerConfig::StructureFireAmbientSound' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandlerConfig, GrassFireAmbientSound) == 0x0001B8, "Member 'UFortCurieVoxelFireNativeFXHandlerConfig::GrassFireAmbientSound' has a wrong offset!");

// Class InfernoRuntime.FortCurieVoxelFireNativeFXHandler
// 0x0328 (0x0368 - 0x0040)
class UFortCurieVoxelFireNativeFXHandler final : public UFortCurieNativeFXHandler
{
public:
	uint8                                         Pad_40[0x30];                                      // 0x0040(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UFortCurieComponent*>              PendingUpdateComponents;                           // 0x0070(0x0050)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSet<class UFortCurieComponent*>              PendingRemoveComponents;                           // 0x00C0(0x0050)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x50];                                     // 0x0110(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortCurieWorldNiagaraComponent*> WorldFireNiagaraSystems;                           // 0x0160(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UFortCurieWorldNiagaraComponent*> WorldFireDebugNiagaraSystems;                      // 0x0170(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	float                                         WorldSystemFireParticleSignificanceRequirement;    // 0x0180(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WorldSystemIgnitionParticleSignificanceRequirement; // 0x0184(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AudioGrassFireSignificanceRequirement;             // 0x0188(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AudioActorFireSignificanceRequirement;             // 0x018C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRandomStream                          RandomStream;                                      // 0x0190(0x0008)(ZeroConstructor, Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FBox                                   GrassFireBounds;                                   // 0x0198(0x0038)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         LandscapeCharInterpSpeed;                          // 0x01D0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeSinceAudioUpdate;                              // 0x01D4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FFortCurieVoxelFireParticleGrassData> CachedFireParticleGrassData;                       // 0x01D8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FFortCurieFireParticleActorData> CachedFireParticleActorData;                       // 0x01E8(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F8[0x60];                                     // 0x01F8(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FFortSpatialCellIndex>            CachedBurningGrassGridCells;                       // 0x0258(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<struct FFortSpatialCellIndex, class UAudioComponent*> GrassAudioMap;                                     // 0x02A8(0x0050)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F8[0x50];                                     // 0x02F8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAudioComponent*>                PreallocatedAudioComponents;                       // 0x0348(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           AudioComponentCleanupTimerHandle;                  // 0x0358(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	double                                        PreviousLandscapeCharTickTime;                     // 0x0360(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnUserSettingsEffectQualityChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieVoxelFireNativeFXHandler">();
	}
	static class UFortCurieVoxelFireNativeFXHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCurieVoxelFireNativeFXHandler>();
	}
};
static_assert(alignof(UFortCurieVoxelFireNativeFXHandler) == 0x000008, "Wrong alignment on UFortCurieVoxelFireNativeFXHandler");
static_assert(sizeof(UFortCurieVoxelFireNativeFXHandler) == 0x000368, "Wrong size on UFortCurieVoxelFireNativeFXHandler");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, PendingUpdateComponents) == 0x000070, "Member 'UFortCurieVoxelFireNativeFXHandler::PendingUpdateComponents' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, PendingRemoveComponents) == 0x0000C0, "Member 'UFortCurieVoxelFireNativeFXHandler::PendingRemoveComponents' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, WorldFireNiagaraSystems) == 0x000160, "Member 'UFortCurieVoxelFireNativeFXHandler::WorldFireNiagaraSystems' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, WorldFireDebugNiagaraSystems) == 0x000170, "Member 'UFortCurieVoxelFireNativeFXHandler::WorldFireDebugNiagaraSystems' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, WorldSystemFireParticleSignificanceRequirement) == 0x000180, "Member 'UFortCurieVoxelFireNativeFXHandler::WorldSystemFireParticleSignificanceRequirement' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, WorldSystemIgnitionParticleSignificanceRequirement) == 0x000184, "Member 'UFortCurieVoxelFireNativeFXHandler::WorldSystemIgnitionParticleSignificanceRequirement' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, AudioGrassFireSignificanceRequirement) == 0x000188, "Member 'UFortCurieVoxelFireNativeFXHandler::AudioGrassFireSignificanceRequirement' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, AudioActorFireSignificanceRequirement) == 0x00018C, "Member 'UFortCurieVoxelFireNativeFXHandler::AudioActorFireSignificanceRequirement' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, RandomStream) == 0x000190, "Member 'UFortCurieVoxelFireNativeFXHandler::RandomStream' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, GrassFireBounds) == 0x000198, "Member 'UFortCurieVoxelFireNativeFXHandler::GrassFireBounds' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, LandscapeCharInterpSpeed) == 0x0001D0, "Member 'UFortCurieVoxelFireNativeFXHandler::LandscapeCharInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, TimeSinceAudioUpdate) == 0x0001D4, "Member 'UFortCurieVoxelFireNativeFXHandler::TimeSinceAudioUpdate' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, CachedFireParticleGrassData) == 0x0001D8, "Member 'UFortCurieVoxelFireNativeFXHandler::CachedFireParticleGrassData' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, CachedFireParticleActorData) == 0x0001E8, "Member 'UFortCurieVoxelFireNativeFXHandler::CachedFireParticleActorData' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, CachedBurningGrassGridCells) == 0x000258, "Member 'UFortCurieVoxelFireNativeFXHandler::CachedBurningGrassGridCells' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, GrassAudioMap) == 0x0002A8, "Member 'UFortCurieVoxelFireNativeFXHandler::GrassAudioMap' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, PreallocatedAudioComponents) == 0x000348, "Member 'UFortCurieVoxelFireNativeFXHandler::PreallocatedAudioComponents' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, AudioComponentCleanupTimerHandle) == 0x000358, "Member 'UFortCurieVoxelFireNativeFXHandler::AudioComponentCleanupTimerHandle' has a wrong offset!");
static_assert(offsetof(UFortCurieVoxelFireNativeFXHandler, PreviousLandscapeCharTickTime) == 0x000360, "Member 'UFortCurieVoxelFireNativeFXHandler::PreviousLandscapeCharTickTime' has a wrong offset!");

// Class InfernoRuntime.FortCurieVoxelFireParticleDataInterface
// 0x0000 (0x0028 - 0x0028)
class IFortCurieVoxelFireParticleDataInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieVoxelFireParticleDataInterface">();
	}
	static class IFortCurieVoxelFireParticleDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortCurieVoxelFireParticleDataInterface>();
	}
};
static_assert(alignof(IFortCurieVoxelFireParticleDataInterface) == 0x000008, "Wrong alignment on IFortCurieVoxelFireParticleDataInterface");
static_assert(sizeof(IFortCurieVoxelFireParticleDataInterface) == 0x000028, "Wrong size on IFortCurieVoxelFireParticleDataInterface");

// Class InfernoRuntime.FortCurieVoxelFireNiagaraDataInterface
// 0x0000 (0x0038 - 0x0038)
class UFortCurieVoxelFireNiagaraDataInterface final : public UNiagaraDataInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieVoxelFireNiagaraDataInterface">();
	}
	static class UFortCurieVoxelFireNiagaraDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCurieVoxelFireNiagaraDataInterface>();
	}
};
static_assert(alignof(UFortCurieVoxelFireNiagaraDataInterface) == 0x000008, "Wrong alignment on UFortCurieVoxelFireNiagaraDataInterface");
static_assert(sizeof(UFortCurieVoxelFireNiagaraDataInterface) == 0x000038, "Wrong size on UFortCurieVoxelFireNiagaraDataInterface");

// Class InfernoRuntime.InfernoCurieVoxelFireAudioParticleDataInterface
// 0x0000 (0x0028 - 0x0028)
class IInfernoCurieVoxelFireAudioParticleDataInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InfernoCurieVoxelFireAudioParticleDataInterface">();
	}
	static class IInfernoCurieVoxelFireAudioParticleDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IInfernoCurieVoxelFireAudioParticleDataInterface>();
	}
};
static_assert(alignof(IInfernoCurieVoxelFireAudioParticleDataInterface) == 0x000008, "Wrong alignment on IInfernoCurieVoxelFireAudioParticleDataInterface");
static_assert(sizeof(IInfernoCurieVoxelFireAudioParticleDataInterface) == 0x000028, "Wrong size on IInfernoCurieVoxelFireAudioParticleDataInterface");

// Class InfernoRuntime.InfernoCurieVoxelFireAudioNiagaraDataInterface
// 0x0000 (0x0038 - 0x0038)
class UInfernoCurieVoxelFireAudioNiagaraDataInterface final : public UNiagaraDataInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InfernoCurieVoxelFireAudioNiagaraDataInterface">();
	}
	static class UInfernoCurieVoxelFireAudioNiagaraDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInfernoCurieVoxelFireAudioNiagaraDataInterface>();
	}
};
static_assert(alignof(UInfernoCurieVoxelFireAudioNiagaraDataInterface) == 0x000008, "Wrong alignment on UInfernoCurieVoxelFireAudioNiagaraDataInterface");
static_assert(sizeof(UInfernoCurieVoxelFireAudioNiagaraDataInterface) == 0x000038, "Wrong size on UInfernoCurieVoxelFireAudioNiagaraDataInterface");

}

