#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseFortniteInternal

#include "Basic.hpp"

#include "FortniteGame_classes.hpp"
#include "ModularGameplay_classes.hpp"
#include "EntityActor_classes.hpp"
#include "EntityCore_classes.hpp"
#include "VerseFortniteInternal_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class VerseFortniteInternal.FortAnimNotify_UEFNGameplayTag
// 0x0000 (0x0040 - 0x0040)
class UFortAnimNotify_UEFNGameplayTag final : public UFortAnimNotify_GameplayTag
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAnimNotify_UEFNGameplayTag">();
	}
	static class UFortAnimNotify_UEFNGameplayTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAnimNotify_UEFNGameplayTag>();
	}
};
static_assert(alignof(UFortAnimNotify_UEFNGameplayTag) == 0x000008, "Wrong alignment on UFortAnimNotify_UEFNGameplayTag");
static_assert(sizeof(UFortAnimNotify_UEFNGameplayTag) == 0x000040, "Wrong size on UFortAnimNotify_UEFNGameplayTag");

// Class VerseFortniteInternal.FortGameplayAbility_PlayAnim
// 0x0010 (0x0B38 - 0x0B28)
class UFortGameplayAbility_PlayAnim : public UFortGameplayAbility
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0B28(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0B30(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B34[0x4];                                      // 0x0B34(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBlendOut(const struct FGameplayTag& NotifyTag);
	void OnCancelled(const struct FGameplayTag& NotifyTag);
	void OnCompleted(const struct FGameplayTag& NotifyTag);
	void OnInterrupted(const struct FGameplayTag& NotifyTag);
	void OnNotifyBegin(const struct FGameplayTag& NotifyTag);
	void OnNotifyEnd(const struct FGameplayTag& NotifyTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameplayAbility_PlayAnim">();
	}
	static class UFortGameplayAbility_PlayAnim* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameplayAbility_PlayAnim>();
	}
};
static_assert(alignof(UFortGameplayAbility_PlayAnim) == 0x000008, "Wrong alignment on UFortGameplayAbility_PlayAnim");
static_assert(sizeof(UFortGameplayAbility_PlayAnim) == 0x000B38, "Wrong size on UFortGameplayAbility_PlayAnim");
static_assert(offsetof(UFortGameplayAbility_PlayAnim, MontageToPlay) == 0x000B28, "Member 'UFortGameplayAbility_PlayAnim::MontageToPlay' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_PlayAnim, PlayRate) == 0x000B30, "Member 'UFortGameplayAbility_PlayAnim::PlayRate' has a wrong offset!");

// Class VerseFortniteInternal.FortGameplayAbility_PlayAnimAndApplyEffect
// 0x0018 (0x0B50 - 0x0B38)
class UFortGameplayAbility_PlayAnimAndApplyEffect final : public UFortGameplayAbility_PlayAnim
{
public:
	bool                                          bWaitForAnimNotify;                                // 0x0B38(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B39[0x7];                                      // 0x0B39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            EffectToApply;                                     // 0x0B40(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTargetingPreset*                       TargetingPreset;                                   // 0x0B48(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameplayAbility_PlayAnimAndApplyEffect">();
	}
	static class UFortGameplayAbility_PlayAnimAndApplyEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameplayAbility_PlayAnimAndApplyEffect>();
	}
};
static_assert(alignof(UFortGameplayAbility_PlayAnimAndApplyEffect) == 0x000008, "Wrong alignment on UFortGameplayAbility_PlayAnimAndApplyEffect");
static_assert(sizeof(UFortGameplayAbility_PlayAnimAndApplyEffect) == 0x000B50, "Wrong size on UFortGameplayAbility_PlayAnimAndApplyEffect");
static_assert(offsetof(UFortGameplayAbility_PlayAnimAndApplyEffect, bWaitForAnimNotify) == 0x000B38, "Member 'UFortGameplayAbility_PlayAnimAndApplyEffect::bWaitForAnimNotify' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_PlayAnimAndApplyEffect, EffectToApply) == 0x000B40, "Member 'UFortGameplayAbility_PlayAnimAndApplyEffect::EffectToApply' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_PlayAnimAndApplyEffect, TargetingPreset) == 0x000B48, "Member 'UFortGameplayAbility_PlayAnimAndApplyEffect::TargetingPreset' has a wrong offset!");

// Class VerseFortniteInternal.VerseFortniteAbilityComponentBase
// 0x0008 (0x0098 - 0x0090)
class UVerseFortniteAbilityComponentBase : public UEntityActorComponent
{
public:
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseFortniteAbilityComponentBase">();
	}
	static class UVerseFortniteAbilityComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseFortniteAbilityComponentBase>();
	}
};
static_assert(alignof(UVerseFortniteAbilityComponentBase) == 0x000008, "Wrong alignment on UVerseFortniteAbilityComponentBase");
static_assert(sizeof(UVerseFortniteAbilityComponentBase) == 0x000098, "Wrong size on UVerseFortniteAbilityComponentBase");

// Class VerseFortniteInternal.BuildingActorEntityInteropComponent
// 0x0008 (0x0068 - 0x0060)
class UBuildingActorEntityInteropComponent final : public UEntityComponent
{
public:
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuildingActorEntityInteropComponent">();
	}
	static class UBuildingActorEntityInteropComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuildingActorEntityInteropComponent>();
	}
};
static_assert(alignof(UBuildingActorEntityInteropComponent) == 0x000008, "Wrong alignment on UBuildingActorEntityInteropComponent");
static_assert(sizeof(UBuildingActorEntityInteropComponent) == 0x000068, "Wrong size on UBuildingActorEntityInteropComponent");

// Class VerseFortniteInternal.VerseFortniteMovementComponentBase
// 0x0000 (0x0090 - 0x0090)
class UVerseFortniteMovementComponentBase : public UEntityActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseFortniteMovementComponentBase">();
	}
	static class UVerseFortniteMovementComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseFortniteMovementComponentBase>();
	}
};
static_assert(alignof(UVerseFortniteMovementComponentBase) == 0x000008, "Wrong alignment on UVerseFortniteMovementComponentBase");
static_assert(sizeof(UVerseFortniteMovementComponentBase) == 0x000090, "Wrong size on UVerseFortniteMovementComponentBase");

// Class VerseFortniteInternal.FortControllerStateHandlerComponent
// 0x0000 (0x00A0 - 0x00A0)
class UFortControllerStateHandlerComponent final : public UControllerComponent
{
public:
	void NotifyOfStateChange(class FString* State, bool Active);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerStateHandlerComponent">();
	}
	static class UFortControllerStateHandlerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerStateHandlerComponent>();
	}
};
static_assert(alignof(UFortControllerStateHandlerComponent) == 0x000008, "Wrong alignment on UFortControllerStateHandlerComponent");
static_assert(sizeof(UFortControllerStateHandlerComponent) == 0x0000A0, "Wrong size on UFortControllerStateHandlerComponent");

// Class VerseFortniteInternal.FortAthenaMutator_BuildingSettings
// 0x0018 (0x0348 - 0x0330)
class AFortAthenaMutator_BuildingSettings final : public AFortAthenaMutator
{
public:
	uint8                                         Pad_330[0x18];                                     // 0x0330(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_BuildingSettings">();
	}
	static class AFortAthenaMutator_BuildingSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_BuildingSettings>();
	}
};
static_assert(alignof(AFortAthenaMutator_BuildingSettings) == 0x000008, "Wrong alignment on AFortAthenaMutator_BuildingSettings");
static_assert(sizeof(AFortAthenaMutator_BuildingSettings) == 0x000348, "Wrong size on AFortAthenaMutator_BuildingSettings");

// Class VerseFortniteInternal.FortBuildingSettingsComponentBase
// 0x0010 (0x0090 - 0x0080)
class UFortBuildingSettingsComponentBase : public UEntityEnableableComponent
{
public:
	class AFortAthenaMutator_BuildingSettings*    Mutator;                                           // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPlayerSettingStateInternal                   Building;                                          // 0x0088(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPlayerSettingStateInternal                   BuildingOnWater;                                   // 0x0089(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPlayerSettingStateInternal                   Editing;                                           // 0x008A(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPlayerSettingStateInternal                   EditingHostile;                                    // 0x008B(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPlayerSettingStateInternal                   TrapPlacement;                                     // 0x008C(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_Settings();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBuildingSettingsComponentBase">();
	}
	static class UFortBuildingSettingsComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBuildingSettingsComponentBase>();
	}
};
static_assert(alignof(UFortBuildingSettingsComponentBase) == 0x000008, "Wrong alignment on UFortBuildingSettingsComponentBase");
static_assert(sizeof(UFortBuildingSettingsComponentBase) == 0x000090, "Wrong size on UFortBuildingSettingsComponentBase");
static_assert(offsetof(UFortBuildingSettingsComponentBase, Mutator) == 0x000080, "Member 'UFortBuildingSettingsComponentBase::Mutator' has a wrong offset!");
static_assert(offsetof(UFortBuildingSettingsComponentBase, Building) == 0x000088, "Member 'UFortBuildingSettingsComponentBase::Building' has a wrong offset!");
static_assert(offsetof(UFortBuildingSettingsComponentBase, BuildingOnWater) == 0x000089, "Member 'UFortBuildingSettingsComponentBase::BuildingOnWater' has a wrong offset!");
static_assert(offsetof(UFortBuildingSettingsComponentBase, Editing) == 0x00008A, "Member 'UFortBuildingSettingsComponentBase::Editing' has a wrong offset!");
static_assert(offsetof(UFortBuildingSettingsComponentBase, EditingHostile) == 0x00008B, "Member 'UFortBuildingSettingsComponentBase::EditingHostile' has a wrong offset!");
static_assert(offsetof(UFortBuildingSettingsComponentBase, TrapPlacement) == 0x00008C, "Member 'UFortBuildingSettingsComponentBase::TrapPlacement' has a wrong offset!");

// Class VerseFortniteInternal.FortPlayspaceComponentHelper
// 0x0008 (0x0030 - 0x0028)
class UFortPlayspaceComponentHelper final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePlayerDied(class AFortPlayerPawnAthena* FortPlayerPawnAthena);
	void HandlePlayerPawnPossessed(class APawn* Pawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayspaceComponentHelper">();
	}
	static class UFortPlayspaceComponentHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayspaceComponentHelper>();
	}
};
static_assert(alignof(UFortPlayspaceComponentHelper) == 0x000008, "Wrong alignment on UFortPlayspaceComponentHelper");
static_assert(sizeof(UFortPlayspaceComponentHelper) == 0x000030, "Wrong size on UFortPlayspaceComponentHelper");

// Class VerseFortniteInternal.VerseFortniteEntitySubsystem
// 0x0010 (0x0040 - 0x0030)
class UVerseFortniteEntitySubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseFortniteEntitySubsystem">();
	}
	static class UVerseFortniteEntitySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseFortniteEntitySubsystem>();
	}
};
static_assert(alignof(UVerseFortniteEntitySubsystem) == 0x000008, "Wrong alignment on UVerseFortniteEntitySubsystem");
static_assert(sizeof(UVerseFortniteEntitySubsystem) == 0x000040, "Wrong size on UVerseFortniteEntitySubsystem");

}

