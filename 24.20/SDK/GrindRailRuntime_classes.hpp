#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GrindRailRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteAI_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GrindRailRuntime_structs.hpp"


namespace SDK
{

// Class GrindRailRuntime.FortCameraModifier_Grinding
// 0x0978 (0x09C0 - 0x0048)
class UFortCameraModifier_Grinding : public UCameraModifier
{
public:
	struct FScalableFloat                         bUseNativeCalculation;                             // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UCurveFloat*                            BlendInCurve;                                      // 0x0070(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            BlendOutCurve;                                     // 0x0078(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SnapToGrindingLocation;                            // 0x0080(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ADSAlphaInterpSpeed;                               // 0x00A8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CurrentForwardInterpSpeed;                         // 0x00D0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxRightSpeedOldRangeForForward;                   // 0x00F8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxRightSpeedNewRangeForForward;                   // 0x0120(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinForwardSpeedOldRangeForForward;                 // 0x0148(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxForwardSpeedOldRangeForForward;                 // 0x0170(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinForwardSpeedNewRangeForForward;                 // 0x0198(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxForwardSpeedNewRangeForForward;                 // 0x01C0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinUpSpeedOldRangeForForward;                      // 0x01E8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxUpSpeedOldRangeForForward;                      // 0x0210(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinUpSpeedNewRangeForForward;                      // 0x0238(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxUpSpeedNewRangeForForward;                      // 0x0260(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BaseForwardMultiplier;                             // 0x0288(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpeedUpBoosterForwardMultiplier;                   // 0x02B0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SprintingForwardMultiplier;                        // 0x02D8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RightSpeedOldRangeForRight;                        // 0x0300(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RightSpeedNewRangeForRight;                        // 0x0328(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxUpSpeedOldRangeForRight;                        // 0x0350(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxUpSpeedNewRangeForRight;                        // 0x0378(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinForwardSpeedOldRangeForRight;                   // 0x03A0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxForwardSpeedOldRangeForRight;                   // 0x03C8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinForwardSpeedNewRangeForRight;                   // 0x03F0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxForwardSpeedNewRangeForRight;                   // 0x0418(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BaseRightMultiplier;                               // 0x0440(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpeedUpBoostRightMultiplier;                       // 0x0468(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SprintingRightMultiplier;                          // 0x0490(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CurrentRightInterpSpeed;                           // 0x04B8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         UpSpeedOldRangeForUp;                              // 0x04E0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         UpSpeedNewRangeForUp;                              // 0x0508(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CurrentUpInterpSpeed;                              // 0x0530(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BaseUpMultiplier;                                  // 0x0558(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpeedUpBoostUpMultiplier;                          // 0x0580(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SprintingUpMultiplier;                             // 0x05A8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinForwardSpeedOldRangeForLean;                    // 0x05D0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxForwardSpeedOldRangeForLean;                    // 0x05F8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinForwardSpeedNewRangeForLean;                    // 0x0620(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxForwardSpeedNewRangeForLean;                    // 0x0648(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MultiplierForMaxNewLeanRange;                      // 0x0670(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CurrentLeanInterpSpeed;                            // 0x0698(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxSpeedOldRangeForFOV;                            // 0x06C0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxSpeedNewRangeForFOV;                            // 0x06E8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BaseFOV;                                           // 0x0710(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpeedUpBoosterFOV;                                 // 0x0738(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SprintingFOV;                                      // 0x0760(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CurrentFOVInterpSpeed;                             // 0x0788(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DeltaDecreaseInZForOffset;                         // 0x07B0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CurrentOffsetInterpSpeed;                          // 0x07D8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         StraightnessMultiplierForOffset;                   // 0x0800(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         FinalOffsetForwardDelta;                           // 0x0828(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         FinalOffsetUpDelta;                                // 0x0850(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         FinalOffsetRightDelta;                             // 0x0878(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_8A0[0x50];                                     // 0x08A0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCachedUseNativeCalculation;                       // 0x08F0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8F1[0xCF];                                     // 0x08F1(0x00CF)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCameraModifier_Grinding">();
	}
	static class UFortCameraModifier_Grinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCameraModifier_Grinding>();
	}
};
static_assert(alignof(UFortCameraModifier_Grinding) == 0x000008, "Wrong alignment on UFortCameraModifier_Grinding");
static_assert(sizeof(UFortCameraModifier_Grinding) == 0x0009C0, "Wrong size on UFortCameraModifier_Grinding");
static_assert(offsetof(UFortCameraModifier_Grinding, bUseNativeCalculation) == 0x000048, "Member 'UFortCameraModifier_Grinding::bUseNativeCalculation' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, BlendInCurve) == 0x000070, "Member 'UFortCameraModifier_Grinding::BlendInCurve' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, BlendOutCurve) == 0x000078, "Member 'UFortCameraModifier_Grinding::BlendOutCurve' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, SnapToGrindingLocation) == 0x000080, "Member 'UFortCameraModifier_Grinding::SnapToGrindingLocation' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, ADSAlphaInterpSpeed) == 0x0000A8, "Member 'UFortCameraModifier_Grinding::ADSAlphaInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, CurrentForwardInterpSpeed) == 0x0000D0, "Member 'UFortCameraModifier_Grinding::CurrentForwardInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MaxRightSpeedOldRangeForForward) == 0x0000F8, "Member 'UFortCameraModifier_Grinding::MaxRightSpeedOldRangeForForward' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MaxRightSpeedNewRangeForForward) == 0x000120, "Member 'UFortCameraModifier_Grinding::MaxRightSpeedNewRangeForForward' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MinForwardSpeedOldRangeForForward) == 0x000148, "Member 'UFortCameraModifier_Grinding::MinForwardSpeedOldRangeForForward' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MaxForwardSpeedOldRangeForForward) == 0x000170, "Member 'UFortCameraModifier_Grinding::MaxForwardSpeedOldRangeForForward' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MinForwardSpeedNewRangeForForward) == 0x000198, "Member 'UFortCameraModifier_Grinding::MinForwardSpeedNewRangeForForward' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MaxForwardSpeedNewRangeForForward) == 0x0001C0, "Member 'UFortCameraModifier_Grinding::MaxForwardSpeedNewRangeForForward' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MinUpSpeedOldRangeForForward) == 0x0001E8, "Member 'UFortCameraModifier_Grinding::MinUpSpeedOldRangeForForward' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MaxUpSpeedOldRangeForForward) == 0x000210, "Member 'UFortCameraModifier_Grinding::MaxUpSpeedOldRangeForForward' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MinUpSpeedNewRangeForForward) == 0x000238, "Member 'UFortCameraModifier_Grinding::MinUpSpeedNewRangeForForward' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MaxUpSpeedNewRangeForForward) == 0x000260, "Member 'UFortCameraModifier_Grinding::MaxUpSpeedNewRangeForForward' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, BaseForwardMultiplier) == 0x000288, "Member 'UFortCameraModifier_Grinding::BaseForwardMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, SpeedUpBoosterForwardMultiplier) == 0x0002B0, "Member 'UFortCameraModifier_Grinding::SpeedUpBoosterForwardMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, SprintingForwardMultiplier) == 0x0002D8, "Member 'UFortCameraModifier_Grinding::SprintingForwardMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, RightSpeedOldRangeForRight) == 0x000300, "Member 'UFortCameraModifier_Grinding::RightSpeedOldRangeForRight' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, RightSpeedNewRangeForRight) == 0x000328, "Member 'UFortCameraModifier_Grinding::RightSpeedNewRangeForRight' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MaxUpSpeedOldRangeForRight) == 0x000350, "Member 'UFortCameraModifier_Grinding::MaxUpSpeedOldRangeForRight' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MaxUpSpeedNewRangeForRight) == 0x000378, "Member 'UFortCameraModifier_Grinding::MaxUpSpeedNewRangeForRight' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MinForwardSpeedOldRangeForRight) == 0x0003A0, "Member 'UFortCameraModifier_Grinding::MinForwardSpeedOldRangeForRight' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MaxForwardSpeedOldRangeForRight) == 0x0003C8, "Member 'UFortCameraModifier_Grinding::MaxForwardSpeedOldRangeForRight' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MinForwardSpeedNewRangeForRight) == 0x0003F0, "Member 'UFortCameraModifier_Grinding::MinForwardSpeedNewRangeForRight' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MaxForwardSpeedNewRangeForRight) == 0x000418, "Member 'UFortCameraModifier_Grinding::MaxForwardSpeedNewRangeForRight' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, BaseRightMultiplier) == 0x000440, "Member 'UFortCameraModifier_Grinding::BaseRightMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, SpeedUpBoostRightMultiplier) == 0x000468, "Member 'UFortCameraModifier_Grinding::SpeedUpBoostRightMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, SprintingRightMultiplier) == 0x000490, "Member 'UFortCameraModifier_Grinding::SprintingRightMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, CurrentRightInterpSpeed) == 0x0004B8, "Member 'UFortCameraModifier_Grinding::CurrentRightInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, UpSpeedOldRangeForUp) == 0x0004E0, "Member 'UFortCameraModifier_Grinding::UpSpeedOldRangeForUp' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, UpSpeedNewRangeForUp) == 0x000508, "Member 'UFortCameraModifier_Grinding::UpSpeedNewRangeForUp' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, CurrentUpInterpSpeed) == 0x000530, "Member 'UFortCameraModifier_Grinding::CurrentUpInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, BaseUpMultiplier) == 0x000558, "Member 'UFortCameraModifier_Grinding::BaseUpMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, SpeedUpBoostUpMultiplier) == 0x000580, "Member 'UFortCameraModifier_Grinding::SpeedUpBoostUpMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, SprintingUpMultiplier) == 0x0005A8, "Member 'UFortCameraModifier_Grinding::SprintingUpMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MinForwardSpeedOldRangeForLean) == 0x0005D0, "Member 'UFortCameraModifier_Grinding::MinForwardSpeedOldRangeForLean' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MaxForwardSpeedOldRangeForLean) == 0x0005F8, "Member 'UFortCameraModifier_Grinding::MaxForwardSpeedOldRangeForLean' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MinForwardSpeedNewRangeForLean) == 0x000620, "Member 'UFortCameraModifier_Grinding::MinForwardSpeedNewRangeForLean' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MaxForwardSpeedNewRangeForLean) == 0x000648, "Member 'UFortCameraModifier_Grinding::MaxForwardSpeedNewRangeForLean' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MultiplierForMaxNewLeanRange) == 0x000670, "Member 'UFortCameraModifier_Grinding::MultiplierForMaxNewLeanRange' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, CurrentLeanInterpSpeed) == 0x000698, "Member 'UFortCameraModifier_Grinding::CurrentLeanInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MaxSpeedOldRangeForFOV) == 0x0006C0, "Member 'UFortCameraModifier_Grinding::MaxSpeedOldRangeForFOV' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, MaxSpeedNewRangeForFOV) == 0x0006E8, "Member 'UFortCameraModifier_Grinding::MaxSpeedNewRangeForFOV' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, BaseFOV) == 0x000710, "Member 'UFortCameraModifier_Grinding::BaseFOV' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, SpeedUpBoosterFOV) == 0x000738, "Member 'UFortCameraModifier_Grinding::SpeedUpBoosterFOV' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, SprintingFOV) == 0x000760, "Member 'UFortCameraModifier_Grinding::SprintingFOV' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, CurrentFOVInterpSpeed) == 0x000788, "Member 'UFortCameraModifier_Grinding::CurrentFOVInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, DeltaDecreaseInZForOffset) == 0x0007B0, "Member 'UFortCameraModifier_Grinding::DeltaDecreaseInZForOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, CurrentOffsetInterpSpeed) == 0x0007D8, "Member 'UFortCameraModifier_Grinding::CurrentOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, StraightnessMultiplierForOffset) == 0x000800, "Member 'UFortCameraModifier_Grinding::StraightnessMultiplierForOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, FinalOffsetForwardDelta) == 0x000828, "Member 'UFortCameraModifier_Grinding::FinalOffsetForwardDelta' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, FinalOffsetUpDelta) == 0x000850, "Member 'UFortCameraModifier_Grinding::FinalOffsetUpDelta' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, FinalOffsetRightDelta) == 0x000878, "Member 'UFortCameraModifier_Grinding::FinalOffsetRightDelta' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Grinding, bCachedUseNativeCalculation) == 0x0008F0, "Member 'UFortCameraModifier_Grinding::bCachedUseNativeCalculation' has a wrong offset!");

// Class GrindRailRuntime.FortGrindRail
// 0x00B0 (0x0AE0 - 0x0A30)
class AFortGrindRail : public ABuildingGameplayActor
{
public:
	TArray<struct FGrindRailMeshInfo>             GrindRailMeshInfos;                                // 0x0A30(0x0010)(BlueprintVisible, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGrindRailBoosterInfo>          BoosterInfos;                                      // 0x0A40(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class USplineComponent*                       SplineComponent;                                   // 0x0A50(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         EnableBoosters;                                    // 0x0A58(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         EnableGrinding;                                    // 0x0A80(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         EnableProjectileCollision;                         // 0x0AA8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bDisableBooster;                                   // 0x0AD0(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AD1[0xF];                                      // 0x0AD1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPRerunConstructionScript();
	void ForceClearBoosters();
	void GetConnectionForGrinding(const float DistanceToTravel, const float CurrentDistanceAlongSpline, const float NextDistanceOnRail, const float RightLeanValue, bool* bNewRail, float* DistanceAlongNewRail, class AFortGrindRail** TheNewRail, bool* bNewRailReverseDirection);
	bool IsTipCapped(const bool bStartTip);
	bool IsTipConnected(const bool bStartTip);
	void NativeGetNextPositionToGrind(const float DistanceToTravel, const float CurrentDistanceAlongSpline, const float RightLeanValue, struct FVector* OutNextLocation, bool* bGotToEnd, float* NextLocationOnRail, EGrindRailBoosterMode* BoosterMode, bool* bHitObstacle, bool* bNewRail, float* DistanceAlongNewRail, class AFortGrindRail** TheNewRail, bool* bNewRailReverseDirection);
	void OnPlaylistDataReady(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnRep_DisableBooster();
	void SetupMeshInfo(class USplineMeshComponent* SplineMeshComponent, const int32 StartIndex, const int32 EndIndex, const float StartDistance, const float EndDistance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGrindRail">();
	}
	static class AFortGrindRail* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortGrindRail>();
	}
};
static_assert(alignof(AFortGrindRail) == 0x000008, "Wrong alignment on AFortGrindRail");
static_assert(sizeof(AFortGrindRail) == 0x000AE0, "Wrong size on AFortGrindRail");
static_assert(offsetof(AFortGrindRail, GrindRailMeshInfos) == 0x000A30, "Member 'AFortGrindRail::GrindRailMeshInfos' has a wrong offset!");
static_assert(offsetof(AFortGrindRail, BoosterInfos) == 0x000A40, "Member 'AFortGrindRail::BoosterInfos' has a wrong offset!");
static_assert(offsetof(AFortGrindRail, SplineComponent) == 0x000A50, "Member 'AFortGrindRail::SplineComponent' has a wrong offset!");
static_assert(offsetof(AFortGrindRail, EnableBoosters) == 0x000A58, "Member 'AFortGrindRail::EnableBoosters' has a wrong offset!");
static_assert(offsetof(AFortGrindRail, EnableGrinding) == 0x000A80, "Member 'AFortGrindRail::EnableGrinding' has a wrong offset!");
static_assert(offsetof(AFortGrindRail, EnableProjectileCollision) == 0x000AA8, "Member 'AFortGrindRail::EnableProjectileCollision' has a wrong offset!");
static_assert(offsetof(AFortGrindRail, bDisableBooster) == 0x000AD0, "Member 'AFortGrindRail::bDisableBooster' has a wrong offset!");

// Class GrindRailRuntime.FortGrindRailConnector
// 0x0000 (0x0A30 - 0x0A30)
class AFortGrindRailConnector : public ABuildingGameplayActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGrindRailConnector">();
	}
	static class AFortGrindRailConnector* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortGrindRailConnector>();
	}
};
static_assert(alignof(AFortGrindRailConnector) == 0x000008, "Wrong alignment on AFortGrindRailConnector");
static_assert(sizeof(AFortGrindRailConnector) == 0x000A30, "Wrong size on AFortGrindRailConnector");

// Class GrindRailRuntime.FortGrindRailLayerAnimInstance
// 0x02F0 (0x0730 - 0x0440)
class UFortGrindRailLayerAnimInstance : public UFortBaseLayerAnimInstance
{
public:
	class UAnimMontage*                           LancePickaxeMontage;                               // 0x0440(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ScythePickaxeMontage;                              // 0x0448(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FruitCakePickaxeMontage;                           // 0x0450(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeanAlphaCurve;                                    // 0x0458(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeleeTwistCurve;                                   // 0x045C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InterruptibleCurve;                                // 0x0460(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      SlopeWarpingCurveMap;                              // 0x0468(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	double                                        LeanBwdVelocityThreshold;                          // 0x04B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedAnimRelevancyData               BwdStartCachedData;                                // 0x04C0(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D4[0x4];                                      // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IsMovingThresholdSpeed;                            // 0x04D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        NoisePlayRateSprintSpeedThreshold;                 // 0x04E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NoisePlayRateNormalSpeedInputRange;                // 0x04E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NoisePlayRateNormalSpeedOutputRange;               // 0x04F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NoisePlayRateHighSpeedInputRange;                  // 0x0508(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NoisePlayRateHighSpeedOutputRange;                 // 0x0518(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CombatNoisePlayRateSpeedInputRange;                // 0x0528(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CombatNoisePlayRateSpeedOutputRange;               // 0x0538(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CombatNoiseAlphaTargeting;                         // 0x0548(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CombatNoiseAlphaNonTargeting;                      // 0x0550(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RootLeanAlphaInterpSpeed;                          // 0x0558(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SlopeWarpAlphaInterpSpeed;                         // 0x0560(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SplineRelativeAimYawDeltaThreshold;                // 0x0568(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AimYawSmoothInterpolationCoefficient;              // 0x0570(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        IsSmoothingYawThreshold;                           // 0x0578(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LeanBWDThreshold;                                  // 0x0580(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MuteUpperBodyAlphaMeleeWeapon;                     // 0x0588(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MuteUpperBodyAlphaNonMeleeWeapon;                  // 0x0590(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MuteUpperBodyAlphaFruitcakePickaxe;                // 0x0598(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MuteUpperBodyAlphaLanceSyctheOrDualWeild;          // 0x05A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        BaseLeanDirection;                                 // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGrinding;                                       // 0x05B0(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B1[0x7];                                      // 0x05B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentSpeed;                                      // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LeanDirection;                                     // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSprinting;                                        // 0x05C8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C9[0x7];                                      // 0x05C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LeanForward;                                       // 0x05D0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWeaponActive;                                   // 0x05D8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D9[0x7];                                      // 0x05D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               SplineRelativeAim;                                 // 0x05E0(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortAnimInput_GrindRail               GrindRailInput;                                    // 0x05F8(0x0018)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UFortPawnComponent_GrindRail> GrindingComponent;                                 // 0x0610(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UCharacterMovementComponent> MovementComponent;                                 // 0x0618(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortPlayerPawn>         FortPlayerPawn;                                    // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFalling;                                        // 0x0628(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LeanAlpha;                                         // 0x0630(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMoving;                                         // 0x0638(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShould180Turn;                                    // 0x0639(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPlayEntry;                                  // 0x063A(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63B[0x5];                                      // 0x063B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NoisePlayRate;                                     // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeanBwd;                                        // 0x0648(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeft180Turn;                                    // 0x0649(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShould180TurnAgain;                               // 0x064A(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTurning;                                        // 0x064B(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldExitLocomotion;                             // 0x064C(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBoosting;                                       // 0x064D(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEarlyExitFromEntry;                               // 0x064E(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAimFWD;                                           // 0x064F(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAimBWD;                                           // 0x0650(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAimLFT;                                           // 0x0651(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAimRGT;                                           // 0x0652(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_653[0x5];                                      // 0x0653(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AimFWDDeltaAngleDegrees;                           // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AimBWDDeltaAngleDegrees;                           // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AimLFTDeltaAngleDegrees;                           // 0x0668(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AimRGTDeltaAngleDegrees;                           // 0x0670(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        NegativeYaw;                                       // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MeleeTwistRot;                                     // 0x0680(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	double                                        BwdStartCachedTime;                                // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Velocity;                                          // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEntryLeft;                                      // 0x06A8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEntryFromAir;                                   // 0x06A9(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEntryRight;                                     // 0x06AA(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnteredFromInteraction;                           // 0x06AB(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6AC[0x4];                                      // 0x06AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SlopeWarpAlpha;                                    // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SplineRelativeAimYaw;                              // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AimYawSmoothed;                                    // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSmoothingYaw;                                   // 0x06C8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C9[0x7];                                      // 0x06C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LastSplineRelativeAimYaw;                          // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RootLeanAlpha;                                     // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MuteUpperBodyAlpha;                                // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLanceType;                                      // 0x06E8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSprinting;                                     // 0x06E9(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateRuleToBoostLoop;                             // 0x06EA(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInAction;                                       // 0x06EB(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6EC[0x4];                                      // 0x06EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CombatNoisePlayRate;                               // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CombatNoiseAlpha;                                  // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTwoHandedMelee;                                 // 0x0700(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldCorrectUpperBody;                           // 0x0701(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBothHandsDown;                                    // 0x0702(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_703[0x5];                                      // 0x0703(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TurnInPlaceAnimCurveValue;                         // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TurnRotationAmountCurveValue;                      // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_718[0x18];                                     // 0x0718(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnimNotify_EntryEnter(const class UAnimNotify* Notify);
	void AnimNotify_EntryExit(const class UAnimNotify* Notify);
	void AnimNotify_IdleEnter(const class UAnimNotify* Notify);
	void HandleBegunGrinding(bool bWasAlreadyGrinding, bool bWasJumpingFromRail, bool bFromInteraction, const struct FVector& PreviousPlayerLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGrindRailLayerAnimInstance">();
	}
	static class UFortGrindRailLayerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGrindRailLayerAnimInstance>();
	}
};
static_assert(alignof(UFortGrindRailLayerAnimInstance) == 0x000010, "Wrong alignment on UFortGrindRailLayerAnimInstance");
static_assert(sizeof(UFortGrindRailLayerAnimInstance) == 0x000730, "Wrong size on UFortGrindRailLayerAnimInstance");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, LancePickaxeMontage) == 0x000440, "Member 'UFortGrindRailLayerAnimInstance::LancePickaxeMontage' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, ScythePickaxeMontage) == 0x000448, "Member 'UFortGrindRailLayerAnimInstance::ScythePickaxeMontage' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, FruitCakePickaxeMontage) == 0x000450, "Member 'UFortGrindRailLayerAnimInstance::FruitCakePickaxeMontage' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, LeanAlphaCurve) == 0x000458, "Member 'UFortGrindRailLayerAnimInstance::LeanAlphaCurve' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, MeleeTwistCurve) == 0x00045C, "Member 'UFortGrindRailLayerAnimInstance::MeleeTwistCurve' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, InterruptibleCurve) == 0x000460, "Member 'UFortGrindRailLayerAnimInstance::InterruptibleCurve' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, SlopeWarpingCurveMap) == 0x000468, "Member 'UFortGrindRailLayerAnimInstance::SlopeWarpingCurveMap' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, LeanBwdVelocityThreshold) == 0x0004B8, "Member 'UFortGrindRailLayerAnimInstance::LeanBwdVelocityThreshold' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, BwdStartCachedData) == 0x0004C0, "Member 'UFortGrindRailLayerAnimInstance::BwdStartCachedData' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, IsMovingThresholdSpeed) == 0x0004D8, "Member 'UFortGrindRailLayerAnimInstance::IsMovingThresholdSpeed' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, NoisePlayRateSprintSpeedThreshold) == 0x0004E0, "Member 'UFortGrindRailLayerAnimInstance::NoisePlayRateSprintSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, NoisePlayRateNormalSpeedInputRange) == 0x0004E8, "Member 'UFortGrindRailLayerAnimInstance::NoisePlayRateNormalSpeedInputRange' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, NoisePlayRateNormalSpeedOutputRange) == 0x0004F8, "Member 'UFortGrindRailLayerAnimInstance::NoisePlayRateNormalSpeedOutputRange' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, NoisePlayRateHighSpeedInputRange) == 0x000508, "Member 'UFortGrindRailLayerAnimInstance::NoisePlayRateHighSpeedInputRange' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, NoisePlayRateHighSpeedOutputRange) == 0x000518, "Member 'UFortGrindRailLayerAnimInstance::NoisePlayRateHighSpeedOutputRange' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, CombatNoisePlayRateSpeedInputRange) == 0x000528, "Member 'UFortGrindRailLayerAnimInstance::CombatNoisePlayRateSpeedInputRange' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, CombatNoisePlayRateSpeedOutputRange) == 0x000538, "Member 'UFortGrindRailLayerAnimInstance::CombatNoisePlayRateSpeedOutputRange' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, CombatNoiseAlphaTargeting) == 0x000548, "Member 'UFortGrindRailLayerAnimInstance::CombatNoiseAlphaTargeting' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, CombatNoiseAlphaNonTargeting) == 0x000550, "Member 'UFortGrindRailLayerAnimInstance::CombatNoiseAlphaNonTargeting' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, RootLeanAlphaInterpSpeed) == 0x000558, "Member 'UFortGrindRailLayerAnimInstance::RootLeanAlphaInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, SlopeWarpAlphaInterpSpeed) == 0x000560, "Member 'UFortGrindRailLayerAnimInstance::SlopeWarpAlphaInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, SplineRelativeAimYawDeltaThreshold) == 0x000568, "Member 'UFortGrindRailLayerAnimInstance::SplineRelativeAimYawDeltaThreshold' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, AimYawSmoothInterpolationCoefficient) == 0x000570, "Member 'UFortGrindRailLayerAnimInstance::AimYawSmoothInterpolationCoefficient' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, IsSmoothingYawThreshold) == 0x000578, "Member 'UFortGrindRailLayerAnimInstance::IsSmoothingYawThreshold' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, LeanBWDThreshold) == 0x000580, "Member 'UFortGrindRailLayerAnimInstance::LeanBWDThreshold' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, MuteUpperBodyAlphaMeleeWeapon) == 0x000588, "Member 'UFortGrindRailLayerAnimInstance::MuteUpperBodyAlphaMeleeWeapon' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, MuteUpperBodyAlphaNonMeleeWeapon) == 0x000590, "Member 'UFortGrindRailLayerAnimInstance::MuteUpperBodyAlphaNonMeleeWeapon' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, MuteUpperBodyAlphaFruitcakePickaxe) == 0x000598, "Member 'UFortGrindRailLayerAnimInstance::MuteUpperBodyAlphaFruitcakePickaxe' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, MuteUpperBodyAlphaLanceSyctheOrDualWeild) == 0x0005A0, "Member 'UFortGrindRailLayerAnimInstance::MuteUpperBodyAlphaLanceSyctheOrDualWeild' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, BaseLeanDirection) == 0x0005A8, "Member 'UFortGrindRailLayerAnimInstance::BaseLeanDirection' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bIsGrinding) == 0x0005B0, "Member 'UFortGrindRailLayerAnimInstance::bIsGrinding' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, CurrentSpeed) == 0x0005B8, "Member 'UFortGrindRailLayerAnimInstance::CurrentSpeed' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, LeanDirection) == 0x0005C0, "Member 'UFortGrindRailLayerAnimInstance::LeanDirection' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bSprinting) == 0x0005C8, "Member 'UFortGrindRailLayerAnimInstance::bSprinting' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, LeanForward) == 0x0005D0, "Member 'UFortGrindRailLayerAnimInstance::LeanForward' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bIsWeaponActive) == 0x0005D8, "Member 'UFortGrindRailLayerAnimInstance::bIsWeaponActive' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, SplineRelativeAim) == 0x0005E0, "Member 'UFortGrindRailLayerAnimInstance::SplineRelativeAim' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, GrindRailInput) == 0x0005F8, "Member 'UFortGrindRailLayerAnimInstance::GrindRailInput' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, GrindingComponent) == 0x000610, "Member 'UFortGrindRailLayerAnimInstance::GrindingComponent' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, MovementComponent) == 0x000618, "Member 'UFortGrindRailLayerAnimInstance::MovementComponent' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, FortPlayerPawn) == 0x000620, "Member 'UFortGrindRailLayerAnimInstance::FortPlayerPawn' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bIsFalling) == 0x000628, "Member 'UFortGrindRailLayerAnimInstance::bIsFalling' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, LeanAlpha) == 0x000630, "Member 'UFortGrindRailLayerAnimInstance::LeanAlpha' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bIsMoving) == 0x000638, "Member 'UFortGrindRailLayerAnimInstance::bIsMoving' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bShould180Turn) == 0x000639, "Member 'UFortGrindRailLayerAnimInstance::bShould180Turn' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bShouldPlayEntry) == 0x00063A, "Member 'UFortGrindRailLayerAnimInstance::bShouldPlayEntry' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, NoisePlayRate) == 0x000640, "Member 'UFortGrindRailLayerAnimInstance::NoisePlayRate' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bIsLeanBwd) == 0x000648, "Member 'UFortGrindRailLayerAnimInstance::bIsLeanBwd' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bIsLeft180Turn) == 0x000649, "Member 'UFortGrindRailLayerAnimInstance::bIsLeft180Turn' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bShould180TurnAgain) == 0x00064A, "Member 'UFortGrindRailLayerAnimInstance::bShould180TurnAgain' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bIsTurning) == 0x00064B, "Member 'UFortGrindRailLayerAnimInstance::bIsTurning' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bShouldExitLocomotion) == 0x00064C, "Member 'UFortGrindRailLayerAnimInstance::bShouldExitLocomotion' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bIsBoosting) == 0x00064D, "Member 'UFortGrindRailLayerAnimInstance::bIsBoosting' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bEarlyExitFromEntry) == 0x00064E, "Member 'UFortGrindRailLayerAnimInstance::bEarlyExitFromEntry' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bAimFWD) == 0x00064F, "Member 'UFortGrindRailLayerAnimInstance::bAimFWD' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bAimBWD) == 0x000650, "Member 'UFortGrindRailLayerAnimInstance::bAimBWD' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bAimLFT) == 0x000651, "Member 'UFortGrindRailLayerAnimInstance::bAimLFT' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bAimRGT) == 0x000652, "Member 'UFortGrindRailLayerAnimInstance::bAimRGT' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, AimFWDDeltaAngleDegrees) == 0x000658, "Member 'UFortGrindRailLayerAnimInstance::AimFWDDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, AimBWDDeltaAngleDegrees) == 0x000660, "Member 'UFortGrindRailLayerAnimInstance::AimBWDDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, AimLFTDeltaAngleDegrees) == 0x000668, "Member 'UFortGrindRailLayerAnimInstance::AimLFTDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, AimRGTDeltaAngleDegrees) == 0x000670, "Member 'UFortGrindRailLayerAnimInstance::AimRGTDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, NegativeYaw) == 0x000678, "Member 'UFortGrindRailLayerAnimInstance::NegativeYaw' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, MeleeTwistRot) == 0x000680, "Member 'UFortGrindRailLayerAnimInstance::MeleeTwistRot' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, BwdStartCachedTime) == 0x000698, "Member 'UFortGrindRailLayerAnimInstance::BwdStartCachedTime' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, Velocity) == 0x0006A0, "Member 'UFortGrindRailLayerAnimInstance::Velocity' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bIsEntryLeft) == 0x0006A8, "Member 'UFortGrindRailLayerAnimInstance::bIsEntryLeft' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bIsEntryFromAir) == 0x0006A9, "Member 'UFortGrindRailLayerAnimInstance::bIsEntryFromAir' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bIsEntryRight) == 0x0006AA, "Member 'UFortGrindRailLayerAnimInstance::bIsEntryRight' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bEnteredFromInteraction) == 0x0006AB, "Member 'UFortGrindRailLayerAnimInstance::bEnteredFromInteraction' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, SlopeWarpAlpha) == 0x0006B0, "Member 'UFortGrindRailLayerAnimInstance::SlopeWarpAlpha' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, SplineRelativeAimYaw) == 0x0006B8, "Member 'UFortGrindRailLayerAnimInstance::SplineRelativeAimYaw' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, AimYawSmoothed) == 0x0006C0, "Member 'UFortGrindRailLayerAnimInstance::AimYawSmoothed' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bIsSmoothingYaw) == 0x0006C8, "Member 'UFortGrindRailLayerAnimInstance::bIsSmoothingYaw' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, LastSplineRelativeAimYaw) == 0x0006D0, "Member 'UFortGrindRailLayerAnimInstance::LastSplineRelativeAimYaw' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, RootLeanAlpha) == 0x0006D8, "Member 'UFortGrindRailLayerAnimInstance::RootLeanAlpha' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, MuteUpperBodyAlpha) == 0x0006E0, "Member 'UFortGrindRailLayerAnimInstance::MuteUpperBodyAlpha' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bIsLanceType) == 0x0006E8, "Member 'UFortGrindRailLayerAnimInstance::bIsLanceType' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bWasSprinting) == 0x0006E9, "Member 'UFortGrindRailLayerAnimInstance::bWasSprinting' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bStateRuleToBoostLoop) == 0x0006EA, "Member 'UFortGrindRailLayerAnimInstance::bStateRuleToBoostLoop' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bIsInAction) == 0x0006EB, "Member 'UFortGrindRailLayerAnimInstance::bIsInAction' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, CombatNoisePlayRate) == 0x0006F0, "Member 'UFortGrindRailLayerAnimInstance::CombatNoisePlayRate' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, CombatNoiseAlpha) == 0x0006F8, "Member 'UFortGrindRailLayerAnimInstance::CombatNoiseAlpha' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bIsTwoHandedMelee) == 0x000700, "Member 'UFortGrindRailLayerAnimInstance::bIsTwoHandedMelee' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bShouldCorrectUpperBody) == 0x000701, "Member 'UFortGrindRailLayerAnimInstance::bShouldCorrectUpperBody' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, bBothHandsDown) == 0x000702, "Member 'UFortGrindRailLayerAnimInstance::bBothHandsDown' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, TurnInPlaceAnimCurveValue) == 0x000708, "Member 'UFortGrindRailLayerAnimInstance::TurnInPlaceAnimCurveValue' has a wrong offset!");
static_assert(offsetof(UFortGrindRailLayerAnimInstance, TurnRotationAmountCurveValue) == 0x000710, "Member 'UFortGrindRailLayerAnimInstance::TurnRotationAmountCurveValue' has a wrong offset!");

// Class GrindRailRuntime.GrindRailMovementControls
// 0x0000 (0x0030 - 0x0030)
class UGrindRailMovementControls final : public UFortMovementControls
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GrindRailMovementControls">();
	}
	static class UGrindRailMovementControls* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGrindRailMovementControls>();
	}
};
static_assert(alignof(UGrindRailMovementControls) == 0x000008, "Wrong alignment on UGrindRailMovementControls");
static_assert(sizeof(UGrindRailMovementControls) == 0x000030, "Wrong size on UGrindRailMovementControls");

// Class GrindRailRuntime.FortAthenaAIBotEvaluator_GrindRail
// 0x0068 (0x00F8 - 0x0090)
class UFortAthenaAIBotEvaluator_GrindRail final : public UFortAthenaAIBotEvaluator
{
public:
	struct FGameplayTag                           GrindRailTag;                                      // 0x0090(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         GrindDuration;                                     // 0x0098(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         GrindDurationRandomDeviation;                      // 0x00C0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x10];                                      // 0x00E8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaAIBotEvaluator_GrindRail">();
	}
	static class UFortAthenaAIBotEvaluator_GrindRail* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaAIBotEvaluator_GrindRail>();
	}
};
static_assert(alignof(UFortAthenaAIBotEvaluator_GrindRail) == 0x000008, "Wrong alignment on UFortAthenaAIBotEvaluator_GrindRail");
static_assert(sizeof(UFortAthenaAIBotEvaluator_GrindRail) == 0x0000F8, "Wrong size on UFortAthenaAIBotEvaluator_GrindRail");
static_assert(offsetof(UFortAthenaAIBotEvaluator_GrindRail, GrindRailTag) == 0x000090, "Member 'UFortAthenaAIBotEvaluator_GrindRail::GrindRailTag' has a wrong offset!");
static_assert(offsetof(UFortAthenaAIBotEvaluator_GrindRail, GrindDuration) == 0x000098, "Member 'UFortAthenaAIBotEvaluator_GrindRail::GrindDuration' has a wrong offset!");
static_assert(offsetof(UFortAthenaAIBotEvaluator_GrindRail, GrindDurationRandomDeviation) == 0x0000C0, "Member 'UFortAthenaAIBotEvaluator_GrindRail::GrindDurationRandomDeviation' has a wrong offset!");

// Class GrindRailRuntime.FortGameplayCueNotifyLoop_Grinding
// 0x0190 (0x0AF0 - 0x0960)
class AFortGameplayCueNotifyLoop_Grinding : public AFortGameplayCueNotify_Loop
{
public:
	bool                                          bFeetHasLanded;                                    // 0x0960(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableNativeAudioUpdate;                          // 0x0961(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_962[0x2];                                      // 0x0962(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForwardChangedValueThreshold;                      // 0x0964(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAudioFloatParameter               Speed;                                             // 0x0968(0x0038)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortAudioFloatParameter               Forward;                                           // 0x09A0(0x0038)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortAudioFloatParameter               Boost;                                             // 0x09D8(0x0038)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortAudioFloatParameter               Curve;                                             // 0x0A10(0x0038)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortAudioFloatParameter               IsGrinding;                                        // 0x0A48(0x0038)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortAudioFloatParameter               IsSlowDown;                                        // 0x0A80(0x0038)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   LeanForwardSpeedName;                              // 0x0AB8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TurnOnSpeedFXName;                                 // 0x0ABC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnOnSpeedFXThreshold;                            // 0x0AC0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UFXSystemComponent>      EffectsComponent;                                  // 0x0AC4(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_ACC[0x4];                                      // 0x0ACC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        AudioComponent;                                    // 0x0AD0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0AD8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortPawnComponent_GrindRail*           GrindComponent;                                    // 0x0AE0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AE8[0x8];                                      // 0x0AE8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CacheReferences(class UAudioComponent* InAudioComponent, class UFXSystemComponent* InEffectsComponent, class AFortPlayerPawn* InPlayerPawn, class UFortPawnComponent_GrindRail* InGrindComponent);
	void OnForwardChanged(bool bNewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameplayCueNotifyLoop_Grinding">();
	}
	static class AFortGameplayCueNotifyLoop_Grinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortGameplayCueNotifyLoop_Grinding>();
	}
};
static_assert(alignof(AFortGameplayCueNotifyLoop_Grinding) == 0x000008, "Wrong alignment on AFortGameplayCueNotifyLoop_Grinding");
static_assert(sizeof(AFortGameplayCueNotifyLoop_Grinding) == 0x000AF0, "Wrong size on AFortGameplayCueNotifyLoop_Grinding");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, bFeetHasLanded) == 0x000960, "Member 'AFortGameplayCueNotifyLoop_Grinding::bFeetHasLanded' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, bEnableNativeAudioUpdate) == 0x000961, "Member 'AFortGameplayCueNotifyLoop_Grinding::bEnableNativeAudioUpdate' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, ForwardChangedValueThreshold) == 0x000964, "Member 'AFortGameplayCueNotifyLoop_Grinding::ForwardChangedValueThreshold' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, Speed) == 0x000968, "Member 'AFortGameplayCueNotifyLoop_Grinding::Speed' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, Forward) == 0x0009A0, "Member 'AFortGameplayCueNotifyLoop_Grinding::Forward' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, Boost) == 0x0009D8, "Member 'AFortGameplayCueNotifyLoop_Grinding::Boost' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, Curve) == 0x000A10, "Member 'AFortGameplayCueNotifyLoop_Grinding::Curve' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, IsGrinding) == 0x000A48, "Member 'AFortGameplayCueNotifyLoop_Grinding::IsGrinding' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, IsSlowDown) == 0x000A80, "Member 'AFortGameplayCueNotifyLoop_Grinding::IsSlowDown' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, LeanForwardSpeedName) == 0x000AB8, "Member 'AFortGameplayCueNotifyLoop_Grinding::LeanForwardSpeedName' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, TurnOnSpeedFXName) == 0x000ABC, "Member 'AFortGameplayCueNotifyLoop_Grinding::TurnOnSpeedFXName' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, TurnOnSpeedFXThreshold) == 0x000AC0, "Member 'AFortGameplayCueNotifyLoop_Grinding::TurnOnSpeedFXThreshold' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, EffectsComponent) == 0x000AC4, "Member 'AFortGameplayCueNotifyLoop_Grinding::EffectsComponent' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, AudioComponent) == 0x000AD0, "Member 'AFortGameplayCueNotifyLoop_Grinding::AudioComponent' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, PlayerPawn) == 0x000AD8, "Member 'AFortGameplayCueNotifyLoop_Grinding::PlayerPawn' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Grinding, GrindComponent) == 0x000AE0, "Member 'AFortGameplayCueNotifyLoop_Grinding::GrindComponent' has a wrong offset!");

// Class GrindRailRuntime.FortPawnComponent_GrindRail
// 0x0BA8 (0x0C50 - 0x00A8)
class UFortPawnComponent_GrindRail : public UFortPawnComponent
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseNativeSpeedCalculation;                        // 0x00B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(struct FGrindRailMeshInfo& PreviousRailMeshInfo, struct FGrindRailMeshInfo& NewRailMeshInfo)> GrindMeshChangedDelegate;                          // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AFortGrindRail* OldRail, class AFortGrindRail* NewRail)> GrindRailChangedDelegate;                          // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasAlreadyGrinding, bool bWasJumpingFromRail, bool bEnteredFromInteraction, const struct FVector& PreviousPlayerLocation)> BegunGrindingDelegate;                             // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              HitObstacleWhenGrindingDelegate;                   // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EGrindRailBoosterMode PreviousBoosterMode)> BoosterModeChangedDelegate;                        // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bNewIsSprinting)> SprintingStateChangedDelegate;                     // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              EndedGrindingDelegate;                             // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         LeanForward;                                       // 0x0128(0x0004)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanRight;                                         // 0x012C(0x0004)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseLeanRight;                                     // 0x0130(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentSpeedAlongSpline;                           // 0x0134(0x0004)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentDirection;                                  // 0x0138(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGrindRailBoosterMode                         CurrentBoosterMode;                                // 0x0150(0x0001)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShould180Turn;                                    // 0x0151(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShould180TurnAgain;                               // 0x0152(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseProtoRotation;                                 // 0x0153(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         BaseMaxLeanAngularSpeed;                           // 0x0158(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BaseLeanInterpSpeed;                               // 0x0180(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortGrindRail>          ReplicatedGrindingRail;                            // 0x01A8(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortGrindRail>          PreviousGrindingRail;                              // 0x01B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortGrindRail>          GrindingRail;                                      // 0x01B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortGrindRail>          NextGrindingRail;                                  // 0x01C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGrindRailMeshInfo                     CurrentRailMeshInfo;                               // 0x01C8(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsGrinding;                                       // 0x01E0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsGrindJumping;                                   // 0x01E1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSprinting;                                      // 0x01E2(0x0001)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWeaponHolstered;                                  // 0x01E3(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bJumpInputReady;                                   // 0x01E4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E5[0x3];                                      // 0x01E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GrindStartDistance;                                // 0x01E8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentDistanceAlongSpline;                        // 0x01EC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                NativeLastRailLocation;                            // 0x01F0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NativeMaxSpeed;                                    // 0x0208(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               GoalRotation;                                      // 0x0210(0x0018)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIs180Turning;                                     // 0x0228(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HorizontalSplineAngleDeltaDegrees;                 // 0x022C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxAllowedInclineSplinePitch;                      // 0x0230(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxAllowedDeclineSplinePitch;                      // 0x0258(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxAllowedShootingSplinePitch;                     // 0x0280(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         TurnAngleThreshold;                                // 0x02A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AnimatedTurnDuration;                              // 0x02D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BaseGrindRailYawRotationInterpSpeed;               // 0x02F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         InclineGrindRailPitchRotationInterpSpeed;          // 0x0320(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DeclineGrindRailPitchRotationInterpSpeed;          // 0x0348(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ShootingGrindRailRotationInterpSpeed;              // 0x0370(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         NextGrindRailDetectionOffset;                      // 0x0398(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CancelGrindingTag;                                 // 0x03C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         GrindInteractionReentryCooldownTime;               // 0x03C8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ForceGrindingFromWalking;                          // 0x03F0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinTimeBeforeJumpSinceEntry;                       // 0x0418(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CancelSprintLeanBackThreshold;                     // 0x0440(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         WeaponHolsterCooldown;                             // 0x0468(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         WeaponIsShootingCooldown;                          // 0x0490(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         GravityForceWhenGoingDown;                         // 0x04B8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         GravityForceWhenGoingUp;                           // 0x04E0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BoosterSprintingAccelerationOnSlowDownBooster;     // 0x0508(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BoosterAccelerationOnSpeedUpBooster;               // 0x0530(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BoosterSlowDownBoosterDragMultiplier;              // 0x0558(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BoosterSlowDownBoosterGoalSpeed;                   // 0x0580(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BoosterMaxSpeed;                                   // 0x05A8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ShootingMaxSpeedMultiplier;                        // 0x05D0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AngleForMaxSpeedIncreaseFromDownwardSlope;         // 0x05F8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxSpeedIncreaseFromDownwardSlope;                 // 0x0620(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxDragForSpeedSoftCap;                            // 0x0648(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpeedHardCap;                                      // 0x0670(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SprintingAcceleration;                             // 0x0698(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SprintingMaxSpeed;                                 // 0x06C0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpeedThresholdForTurn;                             // 0x06E8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         TimeToTurnAround;                                  // 0x0710(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpeedForMaxLeanAcceleration;                       // 0x0738(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpeedForMinLeanAcceleration;                       // 0x0760(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxLeanAcceleration;                               // 0x0788(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinLeanAcceleration;                               // 0x07B0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CanAccelerateByLeaningIntoTurns;                   // 0x07D8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CurvatureForMaxLeanIntoTurnsAcceleration;          // 0x0800(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         LeanIntoTurnsMaxAcceleration;                      // 0x0828(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         IncreasedMaxSpeedFromLeanIntoTurn;                 // 0x0850(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         UseNewCalculationForSidewaysLeanBoost;             // 0x0878(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SidewaysLeanBoostReductionRate;                    // 0x08A0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpeedForMaxBaseAcceleration;                       // 0x08C8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpeedForMinBaseAcceleration;                       // 0x08F0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxBaseAcceleration;                               // 0x0918(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinBaseAcceleration;                               // 0x0940(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BaseGoalSpeed;                                     // 0x0968(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BaseMaxSpeed;                                      // 0x0990(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         EnableFriction;                                    // 0x09B8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BaseGoalDecelerationSpeed;                         // 0x09E0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         FrictionWhenNotLeaning;                            // 0x0A08(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpeedMultiplierOnHitRailCap;                       // 0x0A30(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinSpeedAfterBouncedOffRailCap;                    // 0x0A58(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_A80[0x38];                                     // 0x0A80(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGrindRailMeshInfo                     PreviousRailMeshInfo;                              // 0x0AB8(0x0018)(Transient, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AD0[0x180];                                    // 0x0AD0(0x0180)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddMoveIgnoreActor(class ABuildingActor* BuildingActor);
	bool AttemptDestroyVehicleWhileGrinding(class AFortAthenaVehicle* Vehicle);
	void BeginGrinding(class AFortGrindRail* GrindRail, const float OptionalStartDistance, const bool bFromInteraction);
	void CalculateVelocity(const float DeltaTime, const bool bReplayingMovement, struct FVector* OutVelocity);
	bool CanBeginGrinding();
	void EndGrinding(const bool bSetEndMovementMode);
	void HandleGrindFinishedAfterJumping();
	void HandleGrindingBegun();
	void HandleGrindingEnded();
	void HandleGrindingEndedFromReplication();
	void HandleHitWhenGrinding(const struct FHitResult& Hit);
	void HandleJumpOffEnd();
	void HandleRailJump();
	void OnBaseMeshReady(class AFortPlayerPawn* Pawn, class USkeletalMeshComponent* MeshComponent);
	void OnIgnoredBuildingEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void OnJumpInput(bool bPressed);
	void OnMovementModeChanged(class ACharacter* InCharacter, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void OnReloadInput();
	void OnRep_CurrentBoosterMode(const EGrindRailBoosterMode PreviousBoosterMode);
	void OnRep_CurrentRailMeshInfo();
	void OnRep_GrindingRail();
	void OnRep_IsSprinting();
	void OnWalkingBaseChanged(class AActor* NewBase);
	void RemoveMoveIgnoreActors();
	void ServerUpdateWeaponHolstered(const bool bNewHolstered, const bool bPlayEquipAnim);
	void SetGrindBaseActor(class AActor* NewBaseActor);
	void SetGrindDistanceOnSpline(const float NewDistanceOnSpline);
	void SetIsSprinting(const bool bNewIsSprinting);
	void SetMovementStatus(const struct FVector& NewStatus);

	void DrawDebugHUD(class AHUD* HUD, class UCanvas* Canvas) const;
	void GetCameraOrientedLeanValues(const float RawLeanForward, const float RawLeanRight, float* OrientedLeanForward, float* OrientedLeanRight) const;
	class AActor* GetGrindBaseActor() const;
	float GetGrindDistanceOnSpline() const;
	bool GetGrindRequestJump() const;
	float GetHorizontalSplineAngleDeltaDegrees() const;
	float GetLeanForwardSpeedNormalized() const;
	struct FVector GetMovementStatus() const;
	float GetSpeedHardCap() const;
	bool GetWantsToGrind() const;
	bool IsGrinding() const;
	bool IsUsingToggleSprint() const;
	bool IsWeaponActive() const;
	bool IsWeaponADS() const;
	bool NativeIsShooting() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPawnComponent_GrindRail">();
	}
	static class UFortPawnComponent_GrindRail* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPawnComponent_GrindRail>();
	}
};
static_assert(alignof(UFortPawnComponent_GrindRail) == 0x000008, "Wrong alignment on UFortPawnComponent_GrindRail");
static_assert(sizeof(UFortPawnComponent_GrindRail) == 0x000C50, "Wrong size on UFortPawnComponent_GrindRail");
static_assert(offsetof(UFortPawnComponent_GrindRail, bUseNativeSpeedCalculation) == 0x0000B0, "Member 'UFortPawnComponent_GrindRail::bUseNativeSpeedCalculation' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, GrindMeshChangedDelegate) == 0x0000B8, "Member 'UFortPawnComponent_GrindRail::GrindMeshChangedDelegate' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, GrindRailChangedDelegate) == 0x0000C8, "Member 'UFortPawnComponent_GrindRail::GrindRailChangedDelegate' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, BegunGrindingDelegate) == 0x0000D8, "Member 'UFortPawnComponent_GrindRail::BegunGrindingDelegate' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, HitObstacleWhenGrindingDelegate) == 0x0000E8, "Member 'UFortPawnComponent_GrindRail::HitObstacleWhenGrindingDelegate' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, BoosterModeChangedDelegate) == 0x0000F8, "Member 'UFortPawnComponent_GrindRail::BoosterModeChangedDelegate' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, SprintingStateChangedDelegate) == 0x000108, "Member 'UFortPawnComponent_GrindRail::SprintingStateChangedDelegate' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, EndedGrindingDelegate) == 0x000118, "Member 'UFortPawnComponent_GrindRail::EndedGrindingDelegate' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, LeanForward) == 0x000128, "Member 'UFortPawnComponent_GrindRail::LeanForward' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, LeanRight) == 0x00012C, "Member 'UFortPawnComponent_GrindRail::LeanRight' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, BaseLeanRight) == 0x000130, "Member 'UFortPawnComponent_GrindRail::BaseLeanRight' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, CurrentSpeedAlongSpline) == 0x000134, "Member 'UFortPawnComponent_GrindRail::CurrentSpeedAlongSpline' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, CurrentDirection) == 0x000138, "Member 'UFortPawnComponent_GrindRail::CurrentDirection' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, CurrentBoosterMode) == 0x000150, "Member 'UFortPawnComponent_GrindRail::CurrentBoosterMode' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, bShould180Turn) == 0x000151, "Member 'UFortPawnComponent_GrindRail::bShould180Turn' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, bShould180TurnAgain) == 0x000152, "Member 'UFortPawnComponent_GrindRail::bShould180TurnAgain' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, bUseProtoRotation) == 0x000153, "Member 'UFortPawnComponent_GrindRail::bUseProtoRotation' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, BaseMaxLeanAngularSpeed) == 0x000158, "Member 'UFortPawnComponent_GrindRail::BaseMaxLeanAngularSpeed' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, BaseLeanInterpSpeed) == 0x000180, "Member 'UFortPawnComponent_GrindRail::BaseLeanInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, ReplicatedGrindingRail) == 0x0001A8, "Member 'UFortPawnComponent_GrindRail::ReplicatedGrindingRail' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, PreviousGrindingRail) == 0x0001B0, "Member 'UFortPawnComponent_GrindRail::PreviousGrindingRail' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, GrindingRail) == 0x0001B8, "Member 'UFortPawnComponent_GrindRail::GrindingRail' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, NextGrindingRail) == 0x0001C0, "Member 'UFortPawnComponent_GrindRail::NextGrindingRail' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, CurrentRailMeshInfo) == 0x0001C8, "Member 'UFortPawnComponent_GrindRail::CurrentRailMeshInfo' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, bIsGrinding) == 0x0001E0, "Member 'UFortPawnComponent_GrindRail::bIsGrinding' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, bIsGrindJumping) == 0x0001E1, "Member 'UFortPawnComponent_GrindRail::bIsGrindJumping' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, bIsSprinting) == 0x0001E2, "Member 'UFortPawnComponent_GrindRail::bIsSprinting' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, bWeaponHolstered) == 0x0001E3, "Member 'UFortPawnComponent_GrindRail::bWeaponHolstered' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, bJumpInputReady) == 0x0001E4, "Member 'UFortPawnComponent_GrindRail::bJumpInputReady' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, GrindStartDistance) == 0x0001E8, "Member 'UFortPawnComponent_GrindRail::GrindStartDistance' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, CurrentDistanceAlongSpline) == 0x0001EC, "Member 'UFortPawnComponent_GrindRail::CurrentDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, NativeLastRailLocation) == 0x0001F0, "Member 'UFortPawnComponent_GrindRail::NativeLastRailLocation' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, NativeMaxSpeed) == 0x000208, "Member 'UFortPawnComponent_GrindRail::NativeMaxSpeed' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, GoalRotation) == 0x000210, "Member 'UFortPawnComponent_GrindRail::GoalRotation' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, bIs180Turning) == 0x000228, "Member 'UFortPawnComponent_GrindRail::bIs180Turning' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, HorizontalSplineAngleDeltaDegrees) == 0x00022C, "Member 'UFortPawnComponent_GrindRail::HorizontalSplineAngleDeltaDegrees' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, MaxAllowedInclineSplinePitch) == 0x000230, "Member 'UFortPawnComponent_GrindRail::MaxAllowedInclineSplinePitch' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, MaxAllowedDeclineSplinePitch) == 0x000258, "Member 'UFortPawnComponent_GrindRail::MaxAllowedDeclineSplinePitch' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, MaxAllowedShootingSplinePitch) == 0x000280, "Member 'UFortPawnComponent_GrindRail::MaxAllowedShootingSplinePitch' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, TurnAngleThreshold) == 0x0002A8, "Member 'UFortPawnComponent_GrindRail::TurnAngleThreshold' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, AnimatedTurnDuration) == 0x0002D0, "Member 'UFortPawnComponent_GrindRail::AnimatedTurnDuration' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, BaseGrindRailYawRotationInterpSpeed) == 0x0002F8, "Member 'UFortPawnComponent_GrindRail::BaseGrindRailYawRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, InclineGrindRailPitchRotationInterpSpeed) == 0x000320, "Member 'UFortPawnComponent_GrindRail::InclineGrindRailPitchRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, DeclineGrindRailPitchRotationInterpSpeed) == 0x000348, "Member 'UFortPawnComponent_GrindRail::DeclineGrindRailPitchRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, ShootingGrindRailRotationInterpSpeed) == 0x000370, "Member 'UFortPawnComponent_GrindRail::ShootingGrindRailRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, NextGrindRailDetectionOffset) == 0x000398, "Member 'UFortPawnComponent_GrindRail::NextGrindRailDetectionOffset' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, CancelGrindingTag) == 0x0003C0, "Member 'UFortPawnComponent_GrindRail::CancelGrindingTag' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, GrindInteractionReentryCooldownTime) == 0x0003C8, "Member 'UFortPawnComponent_GrindRail::GrindInteractionReentryCooldownTime' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, ForceGrindingFromWalking) == 0x0003F0, "Member 'UFortPawnComponent_GrindRail::ForceGrindingFromWalking' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, MinTimeBeforeJumpSinceEntry) == 0x000418, "Member 'UFortPawnComponent_GrindRail::MinTimeBeforeJumpSinceEntry' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, CancelSprintLeanBackThreshold) == 0x000440, "Member 'UFortPawnComponent_GrindRail::CancelSprintLeanBackThreshold' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, WeaponHolsterCooldown) == 0x000468, "Member 'UFortPawnComponent_GrindRail::WeaponHolsterCooldown' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, WeaponIsShootingCooldown) == 0x000490, "Member 'UFortPawnComponent_GrindRail::WeaponIsShootingCooldown' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, GravityForceWhenGoingDown) == 0x0004B8, "Member 'UFortPawnComponent_GrindRail::GravityForceWhenGoingDown' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, GravityForceWhenGoingUp) == 0x0004E0, "Member 'UFortPawnComponent_GrindRail::GravityForceWhenGoingUp' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, BoosterSprintingAccelerationOnSlowDownBooster) == 0x000508, "Member 'UFortPawnComponent_GrindRail::BoosterSprintingAccelerationOnSlowDownBooster' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, BoosterAccelerationOnSpeedUpBooster) == 0x000530, "Member 'UFortPawnComponent_GrindRail::BoosterAccelerationOnSpeedUpBooster' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, BoosterSlowDownBoosterDragMultiplier) == 0x000558, "Member 'UFortPawnComponent_GrindRail::BoosterSlowDownBoosterDragMultiplier' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, BoosterSlowDownBoosterGoalSpeed) == 0x000580, "Member 'UFortPawnComponent_GrindRail::BoosterSlowDownBoosterGoalSpeed' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, BoosterMaxSpeed) == 0x0005A8, "Member 'UFortPawnComponent_GrindRail::BoosterMaxSpeed' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, ShootingMaxSpeedMultiplier) == 0x0005D0, "Member 'UFortPawnComponent_GrindRail::ShootingMaxSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, AngleForMaxSpeedIncreaseFromDownwardSlope) == 0x0005F8, "Member 'UFortPawnComponent_GrindRail::AngleForMaxSpeedIncreaseFromDownwardSlope' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, MaxSpeedIncreaseFromDownwardSlope) == 0x000620, "Member 'UFortPawnComponent_GrindRail::MaxSpeedIncreaseFromDownwardSlope' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, MaxDragForSpeedSoftCap) == 0x000648, "Member 'UFortPawnComponent_GrindRail::MaxDragForSpeedSoftCap' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, SpeedHardCap) == 0x000670, "Member 'UFortPawnComponent_GrindRail::SpeedHardCap' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, SprintingAcceleration) == 0x000698, "Member 'UFortPawnComponent_GrindRail::SprintingAcceleration' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, SprintingMaxSpeed) == 0x0006C0, "Member 'UFortPawnComponent_GrindRail::SprintingMaxSpeed' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, SpeedThresholdForTurn) == 0x0006E8, "Member 'UFortPawnComponent_GrindRail::SpeedThresholdForTurn' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, TimeToTurnAround) == 0x000710, "Member 'UFortPawnComponent_GrindRail::TimeToTurnAround' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, SpeedForMaxLeanAcceleration) == 0x000738, "Member 'UFortPawnComponent_GrindRail::SpeedForMaxLeanAcceleration' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, SpeedForMinLeanAcceleration) == 0x000760, "Member 'UFortPawnComponent_GrindRail::SpeedForMinLeanAcceleration' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, MaxLeanAcceleration) == 0x000788, "Member 'UFortPawnComponent_GrindRail::MaxLeanAcceleration' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, MinLeanAcceleration) == 0x0007B0, "Member 'UFortPawnComponent_GrindRail::MinLeanAcceleration' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, CanAccelerateByLeaningIntoTurns) == 0x0007D8, "Member 'UFortPawnComponent_GrindRail::CanAccelerateByLeaningIntoTurns' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, CurvatureForMaxLeanIntoTurnsAcceleration) == 0x000800, "Member 'UFortPawnComponent_GrindRail::CurvatureForMaxLeanIntoTurnsAcceleration' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, LeanIntoTurnsMaxAcceleration) == 0x000828, "Member 'UFortPawnComponent_GrindRail::LeanIntoTurnsMaxAcceleration' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, IncreasedMaxSpeedFromLeanIntoTurn) == 0x000850, "Member 'UFortPawnComponent_GrindRail::IncreasedMaxSpeedFromLeanIntoTurn' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, UseNewCalculationForSidewaysLeanBoost) == 0x000878, "Member 'UFortPawnComponent_GrindRail::UseNewCalculationForSidewaysLeanBoost' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, SidewaysLeanBoostReductionRate) == 0x0008A0, "Member 'UFortPawnComponent_GrindRail::SidewaysLeanBoostReductionRate' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, SpeedForMaxBaseAcceleration) == 0x0008C8, "Member 'UFortPawnComponent_GrindRail::SpeedForMaxBaseAcceleration' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, SpeedForMinBaseAcceleration) == 0x0008F0, "Member 'UFortPawnComponent_GrindRail::SpeedForMinBaseAcceleration' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, MaxBaseAcceleration) == 0x000918, "Member 'UFortPawnComponent_GrindRail::MaxBaseAcceleration' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, MinBaseAcceleration) == 0x000940, "Member 'UFortPawnComponent_GrindRail::MinBaseAcceleration' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, BaseGoalSpeed) == 0x000968, "Member 'UFortPawnComponent_GrindRail::BaseGoalSpeed' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, BaseMaxSpeed) == 0x000990, "Member 'UFortPawnComponent_GrindRail::BaseMaxSpeed' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, EnableFriction) == 0x0009B8, "Member 'UFortPawnComponent_GrindRail::EnableFriction' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, BaseGoalDecelerationSpeed) == 0x0009E0, "Member 'UFortPawnComponent_GrindRail::BaseGoalDecelerationSpeed' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, FrictionWhenNotLeaning) == 0x000A08, "Member 'UFortPawnComponent_GrindRail::FrictionWhenNotLeaning' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, SpeedMultiplierOnHitRailCap) == 0x000A30, "Member 'UFortPawnComponent_GrindRail::SpeedMultiplierOnHitRailCap' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, MinSpeedAfterBouncedOffRailCap) == 0x000A58, "Member 'UFortPawnComponent_GrindRail::MinSpeedAfterBouncedOffRailCap' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_GrindRail, PreviousRailMeshInfo) == 0x000AB8, "Member 'UFortPawnComponent_GrindRail::PreviousRailMeshInfo' has a wrong offset!");

}

