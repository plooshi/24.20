#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CreativeRoyaleRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PlayspaceSystem_structs.hpp"


namespace SDK::Params
{

// Function CreativeRoyaleRuntime.FortPoiSwapManager.SwapPoi
// 0x0008 (0x0008 - 0x0000)
struct FortPoiSwapManager_SwapPoi final
{
public:
	const class AFortPoiVolume*                   PoiToSwap;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPoiSwapManager_SwapPoi) == 0x000008, "Wrong alignment on FortPoiSwapManager_SwapPoi");
static_assert(sizeof(FortPoiSwapManager_SwapPoi) == 0x000008, "Wrong size on FortPoiSwapManager_SwapPoi");
static_assert(offsetof(FortPoiSwapManager_SwapPoi, PoiToSwap) == 0x000000, "Member 'FortPoiSwapManager_SwapPoi::PoiToSwap' has a wrong offset!");

// Function CreativeRoyaleRuntime.AthenaAIServicePlayerBots_CreativeRoyale.OnPlayerJoiningInProgress
// 0x0008 (0x0008 - 0x0000)
struct AthenaAIServicePlayerBots_CreativeRoyale_OnPlayerJoiningInProgress final
{
public:
	const class AFortPlayerState*                 FortPlayerState;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIServicePlayerBots_CreativeRoyale_OnPlayerJoiningInProgress) == 0x000008, "Wrong alignment on AthenaAIServicePlayerBots_CreativeRoyale_OnPlayerJoiningInProgress");
static_assert(sizeof(AthenaAIServicePlayerBots_CreativeRoyale_OnPlayerJoiningInProgress) == 0x000008, "Wrong size on AthenaAIServicePlayerBots_CreativeRoyale_OnPlayerJoiningInProgress");
static_assert(offsetof(AthenaAIServicePlayerBots_CreativeRoyale_OnPlayerJoiningInProgress, FortPlayerState) == 0x000000, "Member 'AthenaAIServicePlayerBots_CreativeRoyale_OnPlayerJoiningInProgress::FortPlayerState' has a wrong offset!");

// Function CreativeRoyaleRuntime.CreativeRoyalePlayspaceComponent_LevelReset.BindActorToCallbacks
// 0x0008 (0x0008 - 0x0000)
struct CreativeRoyalePlayspaceComponent_LevelReset_BindActorToCallbacks final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeRoyalePlayspaceComponent_LevelReset_BindActorToCallbacks) == 0x000008, "Wrong alignment on CreativeRoyalePlayspaceComponent_LevelReset_BindActorToCallbacks");
static_assert(sizeof(CreativeRoyalePlayspaceComponent_LevelReset_BindActorToCallbacks) == 0x000008, "Wrong size on CreativeRoyalePlayspaceComponent_LevelReset_BindActorToCallbacks");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_BindActorToCallbacks, Actor) == 0x000000, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_BindActorToCallbacks::Actor' has a wrong offset!");

// Function CreativeRoyaleRuntime.CreativeRoyalePlayspaceComponent_LevelReset.HandleBuildingDamaged
// 0x0060 (0x0060 - 0x0000)
struct CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged) == 0x000008, "Wrong alignment on CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged");
static_assert(sizeof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged) == 0x000060, "Wrong size on CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged, DamagedActor) == 0x000000, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged::DamagedActor' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged, Damage) == 0x000008, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged::Damage' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged, InstigatedBy) == 0x000010, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged::InstigatedBy' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged, DamageCauser) == 0x000018, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged::DamageCauser' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged, HitLocation) == 0x000020, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged::HitLocation' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged, FHitComponent) == 0x000038, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged::FHitComponent' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged, BoneName) == 0x000040, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged::BoneName' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged, Momentum) == 0x000048, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDamaged::Momentum' has a wrong offset!");

// Function CreativeRoyaleRuntime.CreativeRoyalePlayspaceComponent_LevelReset.HandleBuildingDied
// 0x0060 (0x0060 - 0x0000)
struct CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied) == 0x000008, "Wrong alignment on CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied");
static_assert(sizeof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied) == 0x000060, "Wrong size on CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied, DamagedActor) == 0x000000, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied, Damage) == 0x000008, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied::Damage' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied, InstigatedBy) == 0x000010, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied, DamageCauser) == 0x000018, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied, HitLocation) == 0x000020, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied::HitLocation' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied, FHitComponent) == 0x000038, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied, BoneName) == 0x000040, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied::BoneName' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied, Momentum) == 0x000048, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleBuildingDied::Momentum' has a wrong offset!");

// Function CreativeRoyaleRuntime.CreativeRoyalePlayspaceComponent_LevelReset.HandleMinigameStateChanged
// 0x0010 (0x0010 - 0x0000)
struct CreativeRoyalePlayspaceComponent_LevelReset_HandleMinigameStateChanged final
{
public:
	class AFortMinigame*                          Minigame;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMinigameState                            NewMinigameState;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CreativeRoyalePlayspaceComponent_LevelReset_HandleMinigameStateChanged) == 0x000008, "Wrong alignment on CreativeRoyalePlayspaceComponent_LevelReset_HandleMinigameStateChanged");
static_assert(sizeof(CreativeRoyalePlayspaceComponent_LevelReset_HandleMinigameStateChanged) == 0x000010, "Wrong size on CreativeRoyalePlayspaceComponent_LevelReset_HandleMinigameStateChanged");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleMinigameStateChanged, Minigame) == 0x000000, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleMinigameStateChanged::Minigame' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_HandleMinigameStateChanged, NewMinigameState) == 0x000008, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_HandleMinigameStateChanged::NewMinigameState' has a wrong offset!");

// Function CreativeRoyaleRuntime.CreativeRoyalePlayspaceComponent_LevelReset.SaveActorToBeRespawned
// 0x0010 (0x0010 - 0x0000)
struct CreativeRoyalePlayspaceComponent_LevelReset_SaveActorToBeRespawned final
{
public:
	class AActor*                                 ActorToBeRespawned;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveDamagedActor;                               // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CreativeRoyalePlayspaceComponent_LevelReset_SaveActorToBeRespawned) == 0x000008, "Wrong alignment on CreativeRoyalePlayspaceComponent_LevelReset_SaveActorToBeRespawned");
static_assert(sizeof(CreativeRoyalePlayspaceComponent_LevelReset_SaveActorToBeRespawned) == 0x000010, "Wrong size on CreativeRoyalePlayspaceComponent_LevelReset_SaveActorToBeRespawned");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_SaveActorToBeRespawned, ActorToBeRespawned) == 0x000000, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_SaveActorToBeRespawned::ActorToBeRespawned' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_SaveActorToBeRespawned, bRemoveDamagedActor) == 0x000008, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_SaveActorToBeRespawned::bRemoveDamagedActor' has a wrong offset!");

// Function CreativeRoyaleRuntime.CreativeRoyalePlayspaceComponent_LevelReset.SaveDamagedActor
// 0x0008 (0x0008 - 0x0000)
struct CreativeRoyalePlayspaceComponent_LevelReset_SaveDamagedActor final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeRoyalePlayspaceComponent_LevelReset_SaveDamagedActor) == 0x000008, "Wrong alignment on CreativeRoyalePlayspaceComponent_LevelReset_SaveDamagedActor");
static_assert(sizeof(CreativeRoyalePlayspaceComponent_LevelReset_SaveDamagedActor) == 0x000008, "Wrong size on CreativeRoyalePlayspaceComponent_LevelReset_SaveDamagedActor");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LevelReset_SaveDamagedActor, DamagedActor) == 0x000000, "Member 'CreativeRoyalePlayspaceComponent_LevelReset_SaveDamagedActor::DamagedActor' has a wrong offset!");

// Function CreativeRoyaleRuntime.CreativeRoyalePlayspaceComponent_LoadingScreen.OnMinigameStateChanged
// 0x0010 (0x0010 - 0x0000)
struct CreativeRoyalePlayspaceComponent_LoadingScreen_OnMinigameStateChanged final
{
public:
	class AFortMinigame*                          Minigame;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMinigameState                            MinigameState;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CreativeRoyalePlayspaceComponent_LoadingScreen_OnMinigameStateChanged) == 0x000008, "Wrong alignment on CreativeRoyalePlayspaceComponent_LoadingScreen_OnMinigameStateChanged");
static_assert(sizeof(CreativeRoyalePlayspaceComponent_LoadingScreen_OnMinigameStateChanged) == 0x000010, "Wrong size on CreativeRoyalePlayspaceComponent_LoadingScreen_OnMinigameStateChanged");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LoadingScreen_OnMinigameStateChanged, Minigame) == 0x000000, "Member 'CreativeRoyalePlayspaceComponent_LoadingScreen_OnMinigameStateChanged::Minigame' has a wrong offset!");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LoadingScreen_OnMinigameStateChanged, MinigameState) == 0x000008, "Member 'CreativeRoyalePlayspaceComponent_LoadingScreen_OnMinigameStateChanged::MinigameState' has a wrong offset!");

// Function CreativeRoyaleRuntime.CreativeRoyalePlayspaceComponent_LoadingScreen.OnPlayspaceUserAdded
// 0x0058 (0x0058 - 0x0000)
struct CreativeRoyalePlayspaceComponent_LoadingScreen_OnPlayspaceUserAdded final
{
public:
	struct FPlayspaceUser                         AddedUser;                                         // 0x0000(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeRoyalePlayspaceComponent_LoadingScreen_OnPlayspaceUserAdded) == 0x000008, "Wrong alignment on CreativeRoyalePlayspaceComponent_LoadingScreen_OnPlayspaceUserAdded");
static_assert(sizeof(CreativeRoyalePlayspaceComponent_LoadingScreen_OnPlayspaceUserAdded) == 0x000058, "Wrong size on CreativeRoyalePlayspaceComponent_LoadingScreen_OnPlayspaceUserAdded");
static_assert(offsetof(CreativeRoyalePlayspaceComponent_LoadingScreen_OnPlayspaceUserAdded, AddedUser) == 0x000000, "Member 'CreativeRoyalePlayspaceComponent_LoadingScreen_OnPlayspaceUserAdded::AddedUser' has a wrong offset!");

// Function CreativeRoyaleRuntime.CreativeRoyaleRootPlayspace.BuildDataRegistryResolverScope_Implementation
// 0x0018 (0x0018 - 0x0000)
struct CreativeRoyaleRootPlayspace_BuildDataRegistryResolverScope_Implementation final
{
public:
	TArray<class FName>                           InOutResolverScopes;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InOutPriority;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CreativeRoyaleRootPlayspace_BuildDataRegistryResolverScope_Implementation) == 0x000008, "Wrong alignment on CreativeRoyaleRootPlayspace_BuildDataRegistryResolverScope_Implementation");
static_assert(sizeof(CreativeRoyaleRootPlayspace_BuildDataRegistryResolverScope_Implementation) == 0x000018, "Wrong size on CreativeRoyaleRootPlayspace_BuildDataRegistryResolverScope_Implementation");
static_assert(offsetof(CreativeRoyaleRootPlayspace_BuildDataRegistryResolverScope_Implementation, InOutResolverScopes) == 0x000000, "Member 'CreativeRoyaleRootPlayspace_BuildDataRegistryResolverScope_Implementation::InOutResolverScopes' has a wrong offset!");
static_assert(offsetof(CreativeRoyaleRootPlayspace_BuildDataRegistryResolverScope_Implementation, InOutPriority) == 0x000010, "Member 'CreativeRoyaleRootPlayspace_BuildDataRegistryResolverScope_Implementation::InOutPriority' has a wrong offset!");
static_assert(offsetof(CreativeRoyaleRootPlayspace_BuildDataRegistryResolverScope_Implementation, ReturnValue) == 0x000014, "Member 'CreativeRoyaleRootPlayspace_BuildDataRegistryResolverScope_Implementation::ReturnValue' has a wrong offset!");

// Function CreativeRoyaleRuntime.FortProjectEditComponent_CreativeRoyale.OnPlayerLoggedIn
// 0x0008 (0x0008 - 0x0000)
struct FortProjectEditComponent_CreativeRoyale_OnPlayerLoggedIn final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectEditComponent_CreativeRoyale_OnPlayerLoggedIn) == 0x000008, "Wrong alignment on FortProjectEditComponent_CreativeRoyale_OnPlayerLoggedIn");
static_assert(sizeof(FortProjectEditComponent_CreativeRoyale_OnPlayerLoggedIn) == 0x000008, "Wrong size on FortProjectEditComponent_CreativeRoyale_OnPlayerLoggedIn");
static_assert(offsetof(FortProjectEditComponent_CreativeRoyale_OnPlayerLoggedIn, PlayerController) == 0x000000, "Member 'FortProjectEditComponent_CreativeRoyale_OnPlayerLoggedIn::PlayerController' has a wrong offset!");

}

