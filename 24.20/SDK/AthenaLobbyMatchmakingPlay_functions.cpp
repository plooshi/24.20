#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AthenaLobbyMatchmakingPlay

#include "Basic.hpp"

#include "AthenaLobbyMatchmakingPlay_classes.hpp"
#include "AthenaLobbyMatchmakingPlay_parameters.hpp"


namespace SDK
{

// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.AnimateViolator
// (BlueprintCallable, BlueprintEvent)

void UAthenaLobbyMatchmakingPlay_C::AnimateViolator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "AnimateViolator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.BndEvt__PlayButton_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UCommonButtonLegacy*              Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UAthenaLobbyMatchmakingPlay_C::BndEvt__PlayButton_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature(class UCommonButtonLegacy* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "BndEvt__PlayButton_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature");

	Params::AthenaLobbyMatchmakingPlay_C_BndEvt__PlayButton_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UAthenaLobbyMatchmakingPlay_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.ExecuteUbergraph_AthenaLobbyMatchmakingPlay
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAthenaLobbyMatchmakingPlay_C::ExecuteUbergraph_AthenaLobbyMatchmakingPlay(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "ExecuteUbergraph_AthenaLobbyMatchmakingPlay");

	Params::AthenaLobbyMatchmakingPlay_C_ExecuteUbergraph_AthenaLobbyMatchmakingPlay Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.InitFonts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAthenaLobbyMatchmakingPlay_C::InitFonts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "InitFonts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.OnAvailablePlaylistsUpdated
// (Event, Protected, BlueprintEvent)

void UAthenaLobbyMatchmakingPlay_C::OnAvailablePlaylistsUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "OnAvailablePlaylistsUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.OnCrossplayPreferencesChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCrossplayEnabled                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAthenaLobbyMatchmakingPlay_C::OnCrossplayPreferencesChanged(bool IsCrossplayEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "OnCrossplayPreferencesChanged");

	Params::AthenaLobbyMatchmakingPlay_C_OnCrossplayPreferencesChanged Parms{};

	Parms.IsCrossplayEnabled = IsCrossplayEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.OnInitialized
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UAthenaLobbyMatchmakingPlay_C::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "OnInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.OnMatchmakingFinishedBlueprint
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UFortPlaylistAthena*              Playlist                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UAthenaLobbyMatchmakingPlay_C::OnMatchmakingFinishedBlueprint(bool bSuccess, const class UFortPlaylistAthena* Playlist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "OnMatchmakingFinishedBlueprint");

	Params::AthenaLobbyMatchmakingPlay_C_OnMatchmakingFinishedBlueprint Parms{};

	Parms.bSuccess = bSuccess;
	Parms.Playlist = Playlist;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.OnSetCancelButtonText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             CancelButtonText                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UAthenaLobbyMatchmakingPlay_C::OnSetCancelButtonText(const class FText& CancelButtonText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "OnSetCancelButtonText");

	Params::AthenaLobbyMatchmakingPlay_C_OnSetCancelButtonText Parms{};

	Parms.CancelButtonText = std::move(CancelButtonText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.OnSetPlayButtonText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             PlayButtonText                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UAthenaLobbyMatchmakingPlay_C::OnSetPlayButtonText(const class FText& PlayButtonText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "OnSetPlayButtonText");

	Params::AthenaLobbyMatchmakingPlay_C_OnSetPlayButtonText Parms{};

	Parms.PlayButtonText = std::move(PlayButtonText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.OnViolatorStyleRefreshed
// (Event, Protected, BlueprintEvent)
// Parameters:
// EFortMatchmakingViolatorStyle           NewViolatorStyle                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAthenaLobbyMatchmakingPlay_C::OnViolatorStyleRefreshed(const EFortMatchmakingViolatorStyle NewViolatorStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "OnViolatorStyleRefreshed");

	Params::AthenaLobbyMatchmakingPlay_C_OnViolatorStyleRefreshed Parms{};

	Parms.NewViolatorStyle = NewViolatorStyle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.PickMatchmakingSucceededSound
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USoundBase*                       SelectedMatchmakingSucceededSound                      (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UAthenaLobbyMatchmakingPlay_C::PickMatchmakingSucceededSound(class USoundBase** SelectedMatchmakingSucceededSound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "PickMatchmakingSucceededSound");

	Params::AthenaLobbyMatchmakingPlay_C_PickMatchmakingSucceededSound Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SelectedMatchmakingSucceededSound != nullptr)
		*SelectedMatchmakingSucceededSound = Parms.SelectedMatchmakingSucceededSound;
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.PlaylistActivityChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FPlaylistFrontEndData            NewPlaylist                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText                             ActivityName                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EFortLobbyType                          LobbyType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAthenaLobbyMatchmakingPlay_C::PlaylistActivityChanged(const struct FPlaylistFrontEndData& NewPlaylist, const class FText& ActivityName, EFortLobbyType LobbyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "PlaylistActivityChanged");

	Params::AthenaLobbyMatchmakingPlay_C_PlaylistActivityChanged Parms{};

	Parms.NewPlaylist = std::move(NewPlaylist);
	Parms.ActivityName = std::move(ActivityName);
	Parms.LobbyType = LobbyType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.PlaylistChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FPlaylistFrontEndData            NewPlaylist                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText                             PlaylistCMSOverrideName                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EFortLobbyType                          LobbyType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAthenaLobbyMatchmakingPlay_C::PlaylistChanged(const struct FPlaylistFrontEndData& NewPlaylist, const class FText& PlaylistCMSOverrideName, EFortLobbyType LobbyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "PlaylistChanged");

	Params::AthenaLobbyMatchmakingPlay_C_PlaylistChanged Parms{};

	Parms.NewPlaylist = std::move(NewPlaylist);
	Parms.PlaylistCMSOverrideName = std::move(PlaylistCMSOverrideName);
	Parms.LobbyType = LobbyType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.SetBasePanelColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     NewColor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAthenaLobbyMatchmakingPlay_C::SetBasePanelColor(const struct FLinearColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "SetBasePanelColor");

	Params::AthenaLobbyMatchmakingPlay_C_SetBasePanelColor Parms{};

	Parms.NewColor = std::move(NewColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.ShouldShowMatchmakingDetails
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bShow                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAthenaLobbyMatchmakingPlay_C::ShouldShowMatchmakingDetails(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "ShouldShowMatchmakingDetails");

	Params::AthenaLobbyMatchmakingPlay_C_ShouldShowMatchmakingDetails Parms{};

	Parms.bShow = bShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AthenaLobbyMatchmakingPlay.AthenaLobbyMatchmakingPlay_C.Update Playlist Info
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPlaylistFrontEndData            NewPlaylist                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText                             PlaylistTitleOverride                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EFortLobbyType                          LobbyType                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAthenaLobbyMatchmakingPlay_C::Update_Playlist_Info(struct FPlaylistFrontEndData& NewPlaylist, class FText& PlaylistTitleOverride, EFortLobbyType& LobbyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaLobbyMatchmakingPlay_C", "Update Playlist Info");

	Params::AthenaLobbyMatchmakingPlay_C_Update_Playlist_Info Parms{};

	Parms.NewPlaylist = std::move(NewPlaylist);
	Parms.PlaylistTitleOverride = std::move(PlaylistTitleOverride);
	Parms.LobbyType = LobbyType;

	UObject::ProcessEvent(Func, &Parms);

	NewPlaylist = std::move(Parms.NewPlaylist);
	PlaylistTitleOverride = std::move(Parms.PlaylistTitleOverride);
	LobbyType = Parms.LobbyType;
}

}

