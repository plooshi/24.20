#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseDevices_0

#include "Basic.hpp"

#include "EpicGamesTemporary_0_structs.hpp"
#include "EpicGamesTemporary_structs.hpp"


namespace SDK
{

// VerseEnum VerseDevices.Devices_CreativeAnimation_animation_controller_state
// NumValues: 0x0006
enum class EDevices_CreativeAnimation_animation_controller_state : uint8
{
	InvalidObject                            = 0,
	AnimationNotSet                          = 1,
	Stopped                                  = 2,
	Playing                                  = 3,
	Paused                                   = 4,
	Devices_CreativeAnimation_animation_controller_MAX = 5,
};

// VerseEnum VerseDevices.Devices_CreativeAnimation_animation_mode
// NumValues: 0x0004
enum class EDevices_CreativeAnimation_animation_mode : uint8
{
	OneShot                                  = 0,
	PingPong                                 = 1,
	Loop                                     = 2,
	Devices_CreativeAnimation_animation_MAX  = 3,
};

// VerseEnum VerseDevices.Devices_CreativeAnimation_await_next_keyframe_result
// NumValues: 0x0004
enum class EDevices_CreativeAnimation_await_next_keyframe_result : uint8
{
	KeyframeReached                          = 0,
	NotPlaying                               = 1,
	AnimationAborted                         = 2,
	Devices_CreativeAnimation_await_next_keyframe_MAX = 3,
};

// VerseEnum VerseDevices.Devices_CreativeAnimation_get_animation_controller_result
// NumValues: 0x0004
enum class EDevices_CreativeAnimation_get_animation_controller_result : uint8
{
	Ok                                       = 0,
	UnknownError                             = 1,
	InvalidObject                            = 2,
	Devices_CreativeAnimation_get_animation_controller_MAX = 3,
};

// VerseEnum VerseDevices.Devices_CreativeAnimation_playstoppause_result
// NumValues: 0x0004
enum class EDevices_CreativeAnimation_playstoppause_result : uint8
{
	Ok                                       = 0,
	AnimationNotSet                          = 1,
	InvalidObject                            = 2,
	Devices_CreativeAnimation_playstoppause_MAX = 3,
};

// VerseEnum VerseDevices.Devices_CreativeAnimation_set_animation_result
// NumValues: 0x000A
enum class EDevices_CreativeAnimation_set_animation_result : uint8
{
	Ok                                       = 0,
	UnknownError                             = 1,
	NoKeyframes                              = 2,
	LoopingAnimationDoesNotLoop              = 3,
	KeyframeOutOfBounds                      = 4,
	InvalidLocation                          = 5,
	InvalidTime                              = 6,
	InvalidInterpolationParameters           = 7,
	InvalidObject                            = 8,
	Devices_CreativeAnimation_set_animation_MAX = 9,
};

// VerseEnum VerseDevices.Devices_move_to_internal_result
// NumValues: 0x0008
enum class EDevices_move_to_internal_result : uint8
{
	DestinationReached                       = 0,
	WillNotReachDestination                  = 1,
	UnknownError                             = 2,
	InvalidDestination                       = 3,
	InvalidTime                              = 4,
	InvalidObject                            = 5,
	DestinationOutOfBounds                   = 6,
	Devices_move_to_internal_MAX             = 7,
};

// VerseEnum VerseDevices.Devices_move_to_result
// NumValues: 0x0003
enum class EDevices_move_to_result : uint8
{
	DestinationReached                       = 0,
	WillNotReachDestination                  = 1,
	Devices_move_to_MAX                      = 2,
};

// VerseEnum VerseDevices.Devices_spawn_prop_result
// NumValues: 0x0007
enum class EDevices_spawn_prop_result : uint8
{
	Ok                                       = 0,
	UnknownError                             = 1,
	InvalidSpawnPoint                        = 2,
	SpawnPointOutOfBounds                    = 3,
	InvalidAsset                             = 4,
	TooManyProps                             = 5,
	Devices_spawn_prop_MAX                   = 6,
};

// VerseEnum VerseDevices.Devices_teleport_to_result
// NumValues: 0x0006
enum class EDevices_teleport_to_result : uint8
{
	Ok                                       = 0,
	UnknownError                             = 1,
	InvalidDestination                       = 2,
	InvalidObject                            = 3,
	DestinationOutOfBounds                   = 4,
	Devices_teleport_to_MAX                  = 5,
};

// VerseStruct VerseDevices.Devices_CreativeAnimation_cubic_bezier_parameters
// 0x0020 (0x0020 - 0x0000)
struct FDevices_CreativeAnimation_cubic_bezier_parameters final
{
public:
	double                                        __verse_0xBBCFCA13_X0;                             // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x25CF60DF_Y0;                             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0xDEA876AB_X1;                             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x40A8DC67_Y1;                             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FDevices_CreativeAnimation_cubic_bezier_parameters) == 0x000008, "Wrong alignment on FDevices_CreativeAnimation_cubic_bezier_parameters");
static_assert(sizeof(FDevices_CreativeAnimation_cubic_bezier_parameters) == 0x000020, "Wrong size on FDevices_CreativeAnimation_cubic_bezier_parameters");
static_assert(offsetof(FDevices_CreativeAnimation_cubic_bezier_parameters, __verse_0xBBCFCA13_X0) == 0x000000, "Member 'FDevices_CreativeAnimation_cubic_bezier_parameters::__verse_0xBBCFCA13_X0' has a wrong offset!");
static_assert(offsetof(FDevices_CreativeAnimation_cubic_bezier_parameters, __verse_0x25CF60DF_Y0) == 0x000008, "Member 'FDevices_CreativeAnimation_cubic_bezier_parameters::__verse_0x25CF60DF_Y0' has a wrong offset!");
static_assert(offsetof(FDevices_CreativeAnimation_cubic_bezier_parameters, __verse_0xDEA876AB_X1) == 0x000010, "Member 'FDevices_CreativeAnimation_cubic_bezier_parameters::__verse_0xDEA876AB_X1' has a wrong offset!");
static_assert(offsetof(FDevices_CreativeAnimation_cubic_bezier_parameters, __verse_0x40A8DC67_Y1) == 0x000018, "Member 'FDevices_CreativeAnimation_cubic_bezier_parameters::__verse_0x40A8DC67_Y1' has a wrong offset!");

// VerseStruct VerseDevices.Devices_CreativeAnimation_keyframe_delta
// 0x0070 (0x0070 - 0x0000)
struct FDevices_CreativeAnimation_keyframe_delta final
{
public:
	struct FSpatialMath_vector3                   __verse_0xC51B5857_DeltaLocation;                  // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVerseRotation                         __verse_0x0D1E29AE_DeltaRotation;                  // 0x0020(0x0020)(InstancedReference, NoDestructor)
	double                                        __verse_0x742B3E02_Time;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDevices_CreativeAnimation_cubic_bezier_parameters __verse_0xB7FF3D07_Interpolation;                  // 0x0048(0x0020)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDevices_CreativeAnimation_keyframe_delta) == 0x000010, "Wrong alignment on FDevices_CreativeAnimation_keyframe_delta");
static_assert(sizeof(FDevices_CreativeAnimation_keyframe_delta) == 0x000070, "Wrong size on FDevices_CreativeAnimation_keyframe_delta");
static_assert(offsetof(FDevices_CreativeAnimation_keyframe_delta, __verse_0xC51B5857_DeltaLocation) == 0x000000, "Member 'FDevices_CreativeAnimation_keyframe_delta::__verse_0xC51B5857_DeltaLocation' has a wrong offset!");
static_assert(offsetof(FDevices_CreativeAnimation_keyframe_delta, __verse_0x0D1E29AE_DeltaRotation) == 0x000020, "Member 'FDevices_CreativeAnimation_keyframe_delta::__verse_0x0D1E29AE_DeltaRotation' has a wrong offset!");
static_assert(offsetof(FDevices_CreativeAnimation_keyframe_delta, __verse_0x742B3E02_Time) == 0x000040, "Member 'FDevices_CreativeAnimation_keyframe_delta::__verse_0x742B3E02_Time' has a wrong offset!");
static_assert(offsetof(FDevices_CreativeAnimation_keyframe_delta, __verse_0xB7FF3D07_Interpolation) == 0x000048, "Member 'FDevices_CreativeAnimation_keyframe_delta::__verse_0xB7FF3D07_Interpolation' has a wrong offset!");

// VerseStruct VerseDevices.tuple_L_Kchar_M_Kchar_R
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) VerseDevices_0::Ftuple_L_Kchar_M_Kchar_R final
{
public:
	FVerseStringProperty_                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0010)(InstancedReference, HasGetValueTypeHash)
	FVerseStringProperty_                         __verse_0x7D844C3C_Elem1;                          // 0x0010(0x0010)(InstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(VerseDevices_0::Ftuple_L_Kchar_M_Kchar_R) == 0x000008, "Wrong alignment on VerseDevices_0::Ftuple_L_Kchar_M_Kchar_R");
static_assert(sizeof(VerseDevices_0::Ftuple_L_Kchar_M_Kchar_R) == 0x000020, "Wrong size on VerseDevices_0::Ftuple_L_Kchar_M_Kchar_R");
static_assert(offsetof(VerseDevices_0::Ftuple_L_Kchar_M_Kchar_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'VerseDevices_0::Ftuple_L_Kchar_M_Kchar_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(VerseDevices_0::Ftuple_L_Kchar_M_Kchar_R, __verse_0x7D844C3C_Elem1) == 0x000010, "Member 'VerseDevices_0::Ftuple_L_Kchar_M_Kchar_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseDevices.tuple_L_Kchar_M_QLevel_Nlog__level_20_3d_20_2e_2e_2e_R
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) VerseDevices_0::Ftuple_L_Kchar_M_QLevel_Nlog__level_20_3d_20_2e_2e_2e_R final
{
public:
	FVerseStringProperty_                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0010)(InstancedReference, HasGetValueTypeHash)
	FOptionProperty_                              __verse_0x7D844C3C_Elem1;                          // 0x0010(0x0002)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(VerseDevices_0::Ftuple_L_Kchar_M_QLevel_Nlog__level_20_3d_20_2e_2e_2e_R) == 0x000008, "Wrong alignment on VerseDevices_0::Ftuple_L_Kchar_M_QLevel_Nlog__level_20_3d_20_2e_2e_2e_R");
static_assert(sizeof(VerseDevices_0::Ftuple_L_Kchar_M_QLevel_Nlog__level_20_3d_20_2e_2e_2e_R) == 0x000018, "Wrong size on VerseDevices_0::Ftuple_L_Kchar_M_QLevel_Nlog__level_20_3d_20_2e_2e_2e_R");
static_assert(offsetof(VerseDevices_0::Ftuple_L_Kchar_M_QLevel_Nlog__level_20_3d_20_2e_2e_2e_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'VerseDevices_0::Ftuple_L_Kchar_M_QLevel_Nlog__level_20_3d_20_2e_2e_2e_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(VerseDevices_0::Ftuple_L_Kchar_M_QLevel_Nlog__level_20_3d_20_2e_2e_2e_R, __verse_0x7D844C3C_Elem1) == 0x000010, "Member 'VerseDevices_0::Ftuple_L_Kchar_M_QLevel_Nlog__level_20_3d_20_2e_2e_2e_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseDevices.tuple_L_Kchar_M_QLevel_Nlog__level_R
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) Ftuple_L_Kchar_M_QLevel_Nlog__level_R final
{
public:
	FVerseStringProperty_                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0010)(InstancedReference, HasGetValueTypeHash)
	FOptionProperty_                              __verse_0x7D844C3C_Elem1;                          // 0x0010(0x0002)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_L_Kchar_M_QLevel_Nlog__level_R) == 0x000008, "Wrong alignment on Ftuple_L_Kchar_M_QLevel_Nlog__level_R");
static_assert(sizeof(Ftuple_L_Kchar_M_QLevel_Nlog__level_R) == 0x000018, "Wrong size on Ftuple_L_Kchar_M_QLevel_Nlog__level_R");
static_assert(offsetof(Ftuple_L_Kchar_M_QLevel_Nlog__level_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_L_Kchar_M_QLevel_Nlog__level_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_L_Kchar_M_QLevel_Nlog__level_R, __verse_0x7D844C3C_Elem1) == 0x000010, "Member 'Ftuple_L_Kchar_M_QLevel_Nlog__level_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseDevices.tuple_L_Kchar_Mplaystoppause__result_R
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) Ftuple_L_Kchar_Mplaystoppause__result_R final
{
public:
	FVerseStringProperty_                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0010)(InstancedReference, HasGetValueTypeHash)
	EDevices_CreativeAnimation_playstoppause_result __verse_0x7D844C3C_Elem1;                          // 0x0010(0x0001)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_L_Kchar_Mplaystoppause__result_R) == 0x000008, "Wrong alignment on Ftuple_L_Kchar_Mplaystoppause__result_R");
static_assert(sizeof(Ftuple_L_Kchar_Mplaystoppause__result_R) == 0x000018, "Wrong size on Ftuple_L_Kchar_Mplaystoppause__result_R");
static_assert(offsetof(Ftuple_L_Kchar_Mplaystoppause__result_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_L_Kchar_Mplaystoppause__result_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_L_Kchar_Mplaystoppause__result_R, __verse_0x7D844C3C_Elem1) == 0x000010, "Member 'Ftuple_L_Kchar_Mplaystoppause__result_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseDevices.tuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_20_3d_20_2e_2e_2e_R
// 0x0018 (0x0018 - 0x0000)
struct Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_20_3d_20_2e_2e_2e_R final
{
public:
	TArray<struct FDevices_CreativeAnimation_keyframe_delta> __verse_0x18E3F084_Elem0;                          // 0x0000(0x0010)(InstancedReference, ContainsInstancedReference)
	FOptionProperty_                              __verse_0x7D844C3C_Elem1;                          // 0x0010(0x0002)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_20_3d_20_2e_2e_2e_R) == 0x000008, "Wrong alignment on Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_20_3d_20_2e_2e_2e_R");
static_assert(sizeof(Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_20_3d_20_2e_2e_2e_R) == 0x000018, "Wrong size on Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_20_3d_20_2e_2e_2e_R");
static_assert(offsetof(Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_20_3d_20_2e_2e_2e_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_20_3d_20_2e_2e_2e_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_20_3d_20_2e_2e_2e_R, __verse_0x7D844C3C_Elem1) == 0x000010, "Member 'Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_20_3d_20_2e_2e_2e_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseDevices.tuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_R
// 0x0018 (0x0018 - 0x0000)
struct Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_R final
{
public:
	TArray<struct FDevices_CreativeAnimation_keyframe_delta> __verse_0x18E3F084_Elem0;                          // 0x0000(0x0010)(InstancedReference, ContainsInstancedReference)
	FOptionProperty_                              __verse_0x7D844C3C_Elem1;                          // 0x0010(0x0002)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_R) == 0x000008, "Wrong alignment on Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_R");
static_assert(sizeof(Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_R) == 0x000018, "Wrong size on Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_R");
static_assert(offsetof(Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_R, __verse_0x7D844C3C_Elem1) == 0x000010, "Member 'Ftuple_L_Kkeyframe__delta_M_QAnimationMode_Nanimation__mode_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseDevices.tuple_L_Kkeyframe__delta_M_QMode_Nanimation__mode_R
// 0x0018 (0x0018 - 0x0000)
struct Ftuple_L_Kkeyframe__delta_M_QMode_Nanimation__mode_R final
{
public:
	TArray<struct FDevices_CreativeAnimation_keyframe_delta> __verse_0x18E3F084_Elem0;                          // 0x0000(0x0010)(InstancedReference, ContainsInstancedReference)
	FOptionProperty_                              __verse_0x7D844C3C_Elem1;                          // 0x0010(0x0002)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_L_Kkeyframe__delta_M_QMode_Nanimation__mode_R) == 0x000008, "Wrong alignment on Ftuple_L_Kkeyframe__delta_M_QMode_Nanimation__mode_R");
static_assert(sizeof(Ftuple_L_Kkeyframe__delta_M_QMode_Nanimation__mode_R) == 0x000018, "Wrong size on Ftuple_L_Kkeyframe__delta_M_QMode_Nanimation__mode_R");
static_assert(offsetof(Ftuple_L_Kkeyframe__delta_M_QMode_Nanimation__mode_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_L_Kkeyframe__delta_M_QMode_Nanimation__mode_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_L_Kkeyframe__delta_M_QMode_Nanimation__mode_R, __verse_0x7D844C3C_Elem1) == 0x000010, "Member 'Ftuple_L_Kkeyframe__delta_M_QMode_Nanimation__mode_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseDevices.tuple_L_Qanimation__controller_Mget__animation__controller__result_R
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) Ftuple_L_Qanimation__controller_Mget__animation__controller__result_R final
{
public:
	FOptionProperty_                              __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	EDevices_CreativeAnimation_get_animation_controller_result __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0001)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_L_Qanimation__controller_Mget__animation__controller__result_R) == 0x000008, "Wrong alignment on Ftuple_L_Qanimation__controller_Mget__animation__controller__result_R");
static_assert(sizeof(Ftuple_L_Qanimation__controller_Mget__animation__controller__result_R) == 0x000010, "Wrong size on Ftuple_L_Qanimation__controller_Mget__animation__controller__result_R");
static_assert(offsetof(Ftuple_L_Qanimation__controller_Mget__animation__controller__result_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_L_Qanimation__controller_Mget__animation__controller__result_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_L_Qanimation__controller_Mget__animation__controller__result_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_L_Qanimation__controller_Mget__animation__controller__result_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseDevices.tuple_L_Qcreative__prop_Mspawn__prop__result_R
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) Ftuple_L_Qcreative__prop_Mspawn__prop__result_R final
{
public:
	FOptionProperty_                              __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	EDevices_spawn_prop_result                    __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0001)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_L_Qcreative__prop_Mspawn__prop__result_R) == 0x000008, "Wrong alignment on Ftuple_L_Qcreative__prop_Mspawn__prop__result_R");
static_assert(sizeof(Ftuple_L_Qcreative__prop_Mspawn__prop__result_R) == 0x000010, "Wrong size on Ftuple_L_Qcreative__prop_Mspawn__prop__result_R");
static_assert(offsetof(Ftuple_L_Qcreative__prop_Mspawn__prop__result_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_L_Qcreative__prop_Mspawn__prop__result_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_L_Qcreative__prop_Mspawn__prop__result_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_L_Qcreative__prop_Mspawn__prop__result_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseDevices.tuple_L_R
// 0x0001 (0x0001 - 0x0000)
struct VerseDevices_0::Ftuple_L_R final
{
public:
	uint8                                         _StructPaddingDummy;                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VerseDevices_0::Ftuple_L_R) == 0x000001, "Wrong alignment on VerseDevices_0::Ftuple_L_R");
static_assert(sizeof(VerseDevices_0::Ftuple_L_R) == 0x000001, "Wrong size on VerseDevices_0::Ftuple_L_R");
static_assert(offsetof(VerseDevices_0::Ftuple_L_R, _StructPaddingDummy) == 0x000000, "Member 'VerseDevices_0::Ftuple_L_R::_StructPaddingDummy' has a wrong offset!");

// VerseStruct VerseDevices.tuple_Lcreative__object__interface_Mtuple_L_R_Mtuple_L_R_R
// 0x0010 (0x0010 - 0x0000)
struct Ftuple_Lcreative__object__interface_Mtuple_L_R_Mtuple_L_R_R final
{
public:
	class UObject*                                __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct VerseDevices_0::Ftuple_L_R             __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0001)(InstancedReference, HasGetValueTypeHash)
	struct VerseDevices_0::Ftuple_L_R             __verse_0x932BF92E_Elem2;                          // 0x0009(0x0001)(InstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lcreative__object__interface_Mtuple_L_R_Mtuple_L_R_R) == 0x000008, "Wrong alignment on Ftuple_Lcreative__object__interface_Mtuple_L_R_Mtuple_L_R_R");
static_assert(sizeof(Ftuple_Lcreative__object__interface_Mtuple_L_R_Mtuple_L_R_R) == 0x000010, "Wrong size on Ftuple_Lcreative__object__interface_Mtuple_L_R_Mtuple_L_R_R");
static_assert(offsetof(Ftuple_Lcreative__object__interface_Mtuple_L_R_Mtuple_L_R_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lcreative__object__interface_Mtuple_L_R_Mtuple_L_R_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lcreative__object__interface_Mtuple_L_R_Mtuple_L_R_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lcreative__object__interface_Mtuple_L_R_Mtuple_L_R_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lcreative__object__interface_Mtuple_L_R_Mtuple_L_R_R, __verse_0x932BF92E_Elem2) == 0x000009, "Member 'Ftuple_Lcreative__object__interface_Mtuple_L_R_Mtuple_L_R_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// VerseStruct VerseDevices.tuple_Lcreative__prop__asset_Mvector3_Mrotation_R
// 0x0040 (0x0040 - 0x0000)
struct Ftuple_Lcreative__prop__asset_Mvector3_Mrotation_R final
{
public:
	class UDevices_creative_prop_asset*           __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FSpatialMath_vector3                   __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct FVerseRotation                         __verse_0x932BF92E_Elem2;                          // 0x0020(0x0020)(InstancedReference, NoDestructor)
};
static_assert(alignof(Ftuple_Lcreative__prop__asset_Mvector3_Mrotation_R) == 0x000010, "Wrong alignment on Ftuple_Lcreative__prop__asset_Mvector3_Mrotation_R");
static_assert(sizeof(Ftuple_Lcreative__prop__asset_Mvector3_Mrotation_R) == 0x000040, "Wrong size on Ftuple_Lcreative__prop__asset_Mvector3_Mrotation_R");
static_assert(offsetof(Ftuple_Lcreative__prop__asset_Mvector3_Mrotation_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lcreative__prop__asset_Mvector3_Mrotation_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lcreative__prop__asset_Mvector3_Mrotation_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lcreative__prop__asset_Mvector3_Mrotation_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lcreative__prop__asset_Mvector3_Mrotation_R, __verse_0x932BF92E_Elem2) == 0x000020, "Member 'Ftuple_Lcreative__prop__asset_Mvector3_Mrotation_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// VerseStruct VerseDevices.tuple_Lcreative__prop_Mtuple_L_R_Mtuple_L_R_R
// 0x0010 (0x0010 - 0x0000)
struct Ftuple_Lcreative__prop_Mtuple_L_R_Mtuple_L_R_R final
{
public:
	class UDevices_creative_prop*                 __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct VerseDevices_0::Ftuple_L_R             __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0001)(InstancedReference, HasGetValueTypeHash)
	struct VerseDevices_0::Ftuple_L_R             __verse_0x932BF92E_Elem2;                          // 0x0009(0x0001)(InstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lcreative__prop_Mtuple_L_R_Mtuple_L_R_R) == 0x000008, "Wrong alignment on Ftuple_Lcreative__prop_Mtuple_L_R_Mtuple_L_R_R");
static_assert(sizeof(Ftuple_Lcreative__prop_Mtuple_L_R_Mtuple_L_R_R) == 0x000010, "Wrong size on Ftuple_Lcreative__prop_Mtuple_L_R_Mtuple_L_R_R");
static_assert(offsetof(Ftuple_Lcreative__prop_Mtuple_L_R_Mtuple_L_R_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lcreative__prop_Mtuple_L_R_Mtuple_L_R_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lcreative__prop_Mtuple_L_R_Mtuple_L_R_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lcreative__prop_Mtuple_L_R_Mtuple_L_R_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lcreative__prop_Mtuple_L_R_Mtuple_L_R_R, __verse_0x932BF92E_Elem2) == 0x000009, "Member 'Ftuple_Lcreative__prop_Mtuple_L_R_Mtuple_L_R_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// VerseStruct VerseDevices.tuple_Lrotation_Mrotation_R
// 0x0040 (0x0040 - 0x0000)
struct VerseDevices_0::Ftuple_Lrotation_Mrotation_R final
{
public:
	struct FVerseRotation                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0020)(InstancedReference, NoDestructor)
	struct FVerseRotation                         __verse_0x7D844C3C_Elem1;                          // 0x0020(0x0020)(InstancedReference, NoDestructor)
};
static_assert(alignof(VerseDevices_0::Ftuple_Lrotation_Mrotation_R) == 0x000010, "Wrong alignment on VerseDevices_0::Ftuple_Lrotation_Mrotation_R");
static_assert(sizeof(VerseDevices_0::Ftuple_Lrotation_Mrotation_R) == 0x000040, "Wrong size on VerseDevices_0::Ftuple_Lrotation_Mrotation_R");
static_assert(offsetof(VerseDevices_0::Ftuple_Lrotation_Mrotation_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'VerseDevices_0::Ftuple_Lrotation_Mrotation_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(VerseDevices_0::Ftuple_Lrotation_Mrotation_R, __verse_0x7D844C3C_Elem1) == 0x000020, "Member 'VerseDevices_0::Ftuple_Lrotation_Mrotation_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseDevices.tuple_Lvector3_Mrotation_Mfloat_R
// 0x0050 (0x0050 - 0x0000)
struct Ftuple_Lvector3_Mrotation_Mfloat_R final
{
public:
	struct FSpatialMath_vector3                   __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVerseRotation                         __verse_0x7D844C3C_Elem1;                          // 0x0020(0x0020)(InstancedReference, NoDestructor)
	double                                        __verse_0x932BF92E_Elem2;                          // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lvector3_Mrotation_Mfloat_R) == 0x000010, "Wrong alignment on Ftuple_Lvector3_Mrotation_Mfloat_R");
static_assert(sizeof(Ftuple_Lvector3_Mrotation_Mfloat_R) == 0x000050, "Wrong size on Ftuple_Lvector3_Mrotation_Mfloat_R");
static_assert(offsetof(Ftuple_Lvector3_Mrotation_Mfloat_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector3_Mrotation_Mfloat_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mrotation_Mfloat_R, __verse_0x7D844C3C_Elem1) == 0x000020, "Member 'Ftuple_Lvector3_Mrotation_Mfloat_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mrotation_Mfloat_R, __verse_0x932BF92E_Elem2) == 0x000040, "Member 'Ftuple_Lvector3_Mrotation_Mfloat_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// VerseStruct VerseDevices.tuple_Lvector3_Mrotation_R
// 0x0040 (0x0040 - 0x0000)
struct VerseDevices_0::Ftuple_Lvector3_Mrotation_R final
{
public:
	struct FSpatialMath_vector3                   __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVerseRotation                         __verse_0x7D844C3C_Elem1;                          // 0x0020(0x0020)(InstancedReference, NoDestructor)
};
static_assert(alignof(VerseDevices_0::Ftuple_Lvector3_Mrotation_R) == 0x000010, "Wrong alignment on VerseDevices_0::Ftuple_Lvector3_Mrotation_R");
static_assert(sizeof(VerseDevices_0::Ftuple_Lvector3_Mrotation_R) == 0x000040, "Wrong size on VerseDevices_0::Ftuple_Lvector3_Mrotation_R");
static_assert(offsetof(VerseDevices_0::Ftuple_Lvector3_Mrotation_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'VerseDevices_0::Ftuple_Lvector3_Mrotation_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(VerseDevices_0::Ftuple_Lvector3_Mrotation_R, __verse_0x7D844C3C_Elem1) == 0x000020, "Member 'VerseDevices_0::Ftuple_Lvector3_Mrotation_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseDevices.tuple_Lvector3_Mvector3_R
// 0x0030 (0x0030 - 0x0000)
struct VerseDevices_0::Ftuple_Lvector3_Mvector3_R final
{
public:
	struct FSpatialMath_vector3                   __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct FSpatialMath_vector3                   __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VerseDevices_0::Ftuple_Lvector3_Mvector3_R) == 0x000008, "Wrong alignment on VerseDevices_0::Ftuple_Lvector3_Mvector3_R");
static_assert(sizeof(VerseDevices_0::Ftuple_Lvector3_Mvector3_R) == 0x000030, "Wrong size on VerseDevices_0::Ftuple_Lvector3_Mvector3_R");
static_assert(offsetof(VerseDevices_0::Ftuple_Lvector3_Mvector3_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'VerseDevices_0::Ftuple_Lvector3_Mvector3_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(VerseDevices_0::Ftuple_Lvector3_Mvector3_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'VerseDevices_0::Ftuple_Lvector3_Mvector3_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

}

