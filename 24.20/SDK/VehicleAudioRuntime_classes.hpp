#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleAudioRuntime

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "VehicleAudioRuntime_structs.hpp"


namespace SDK
{

// Class VehicleAudioRuntime.VehicleAudioLifecycleInterface
// 0x0000 (0x0028 - 0x0028)
class IVehicleAudioLifecycleInterface final : public IInterface
{
public:
	void OnInit();
	void OnShutdown();
	void OnUpdate(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleAudioLifecycleInterface">();
	}
	static class IVehicleAudioLifecycleInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IVehicleAudioLifecycleInterface>();
	}
};
static_assert(alignof(IVehicleAudioLifecycleInterface) == 0x000008, "Wrong alignment on IVehicleAudioLifecycleInterface");
static_assert(sizeof(IVehicleAudioLifecycleInterface) == 0x000028, "Wrong size on IVehicleAudioLifecycleInterface");

// Class VehicleAudioRuntime.FortVehicleAudioController
// 0x0060 (0x02E8 - 0x0288)
class AFortVehicleAudioController : public AActor
{
public:
	uint8                                         Pad_288[0x8];                                      // 0x0288(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortVehicleSoundData*                  VehicleSoundData;                                  // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_298[0x4];                                      // 0x0298(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentSignificance;                               // 0x029C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bListenerInRange;                                  // 0x02A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceUpdatePastListenerRange;                     // 0x02A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRedlineAllowed;                                   // 0x02A2(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A3[0x1];                                      // 0x02A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JitterTime;                                        // 0x02A4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortAthenaVehicle*                     VehicleBase;                                       // 0x02A8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortPhysicsVehicleConfigs*             PhysicsVehicleConfigs;                             // 0x02B0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLayeredAudioComponent*             LayeredAudioComponent;                             // 0x02B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioParameterComponent*               AudioParameterComponent;                           // 0x02C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioMotorModelComponent*              AudioMotorModelComponent;                          // 0x02C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UREVComponent*                          REVComponent;                                      // 0x02D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UFortVehicleSoundComponent*>     VehicleSoundComponents;                            // 0x02D8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void CacheJitterTime();
	void Init();
	void SetLayeredAudioComponent(class UFortLayeredAudioComponent* InComponent);
	void SetRedlineActive(bool bEnabled);
	void SetVehicle(class AFortAthenaVehicle* InVehicle);
	void Shutdown();
	void Update(float DeltaSeconds);
	void UpdateMotorModelNative(float DeltaSeconds);

	class UAudioMotorModelComponent* GetAudioMotorModelComponent() const;
	class UAudioParameterComponent* GetAudioParameterComponent() const;
	float GetBrakingNative() const;
	float GetJitterTime() const;
	class UFortLayeredAudioComponent* GetLayeredAudioComponent() const;
	const class UFortPhysicsVehicleConfigs* GetPhysicsVehicleConfigs() const;
	bool GetRedlineActive() const;
	class UREVComponent* GetREVComponent() const;
	float GetThrottleNative() const;
	class AFortAthenaVehicle* GetVehicleActor() const;
	bool IsNativizationEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleAudioController">();
	}
	static class AFortVehicleAudioController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortVehicleAudioController>();
	}
};
static_assert(alignof(AFortVehicleAudioController) == 0x000008, "Wrong alignment on AFortVehicleAudioController");
static_assert(sizeof(AFortVehicleAudioController) == 0x0002E8, "Wrong size on AFortVehicleAudioController");
static_assert(offsetof(AFortVehicleAudioController, VehicleSoundData) == 0x000290, "Member 'AFortVehicleAudioController::VehicleSoundData' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, CurrentSignificance) == 0x00029C, "Member 'AFortVehicleAudioController::CurrentSignificance' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, bListenerInRange) == 0x0002A0, "Member 'AFortVehicleAudioController::bListenerInRange' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, bForceUpdatePastListenerRange) == 0x0002A1, "Member 'AFortVehicleAudioController::bForceUpdatePastListenerRange' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, bRedlineAllowed) == 0x0002A2, "Member 'AFortVehicleAudioController::bRedlineAllowed' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, JitterTime) == 0x0002A4, "Member 'AFortVehicleAudioController::JitterTime' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, VehicleBase) == 0x0002A8, "Member 'AFortVehicleAudioController::VehicleBase' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, PhysicsVehicleConfigs) == 0x0002B0, "Member 'AFortVehicleAudioController::PhysicsVehicleConfigs' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, LayeredAudioComponent) == 0x0002B8, "Member 'AFortVehicleAudioController::LayeredAudioComponent' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, AudioParameterComponent) == 0x0002C0, "Member 'AFortVehicleAudioController::AudioParameterComponent' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, AudioMotorModelComponent) == 0x0002C8, "Member 'AFortVehicleAudioController::AudioMotorModelComponent' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, REVComponent) == 0x0002D0, "Member 'AFortVehicleAudioController::REVComponent' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, VehicleSoundComponents) == 0x0002D8, "Member 'AFortVehicleAudioController::VehicleSoundComponents' has a wrong offset!");

// Class VehicleAudioRuntime.FortVehicleSoundComponent
// 0x0010 (0x00B0 - 0x00A0)
class UFortVehicleSoundComponent : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AFortVehicleAudioController> AudioController;                                   // 0x00A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Init();
	void Shutdown();
	void Update(float DeltaSeconds);

	class AFortVehicleAudioController* GetAudioController() const;
	class UAudioParameterComponent* GetAudioParameterComponent() const;
	class UFortLayeredAudioComponent* GetLayeredAudioComponent() const;
	class UAudioMotorModelComponent* GetMotorModelComponent() const;
	const class UFortPhysicsVehicleConfigs* GetPhysicsVehicleConfigs() const;
	class UREVComponent* GetREVComponent() const;
	class USceneComponent* GetRootComponent() const;
	class AFortAthenaVehicle* GetVehicleActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleSoundComponent">();
	}
	static class UFortVehicleSoundComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleSoundComponent>();
	}
};
static_assert(alignof(UFortVehicleSoundComponent) == 0x000008, "Wrong alignment on UFortVehicleSoundComponent");
static_assert(sizeof(UFortVehicleSoundComponent) == 0x0000B0, "Wrong size on UFortVehicleSoundComponent");
static_assert(offsetof(UFortVehicleSoundComponent, AudioController) == 0x0000A8, "Member 'UFortVehicleSoundComponent::AudioController' has a wrong offset!");

// Class VehicleAudioRuntime.FortVehicleSoundComponent_Surface
// 0x00A8 (0x0158 - 0x00B0)
class UFortVehicleSoundComponent_Surface final : public UFortVehicleSoundComponent
{
public:
	struct FFortVehicleSoundComponent_SurfaceContext Context;                                           // 0x00B0(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void OnBrakingChanged(bool bNewState);
	void OnInAirChanged(bool bNewState);
	void OnSkiddingChanged(bool bNewState);
	void OnSurfaceChanged(EPhysicalSurface NewSurface);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleSoundComponent_Surface">();
	}
	static class UFortVehicleSoundComponent_Surface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleSoundComponent_Surface>();
	}
};
static_assert(alignof(UFortVehicleSoundComponent_Surface) == 0x000008, "Wrong alignment on UFortVehicleSoundComponent_Surface");
static_assert(sizeof(UFortVehicleSoundComponent_Surface) == 0x000158, "Wrong size on UFortVehicleSoundComponent_Surface");
static_assert(offsetof(UFortVehicleSoundComponent_Surface, Context) == 0x0000B0, "Member 'UFortVehicleSoundComponent_Surface::Context' has a wrong offset!");

// Class VehicleAudioRuntime.FortVehicleSoundData
// 0x0040 (0x0070 - 0x0030)
class UFortVehicleSoundData final : public UDataAsset
{
public:
	TArray<class UFortVehicleSoundComponent*>     SoundComponents;                                   // 0x0030(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         MaxListenerDistance;                               // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateDataFromController;                         // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxBrakeThreshold;                                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrottleMultiplier;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurfaceFrictionModifier;                           // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotorFrictionModifier;                             // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FrictionJitter;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanShiftOverride;                                 // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleSoundData">();
	}
	static class UFortVehicleSoundData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleSoundData>();
	}
};
static_assert(alignof(UFortVehicleSoundData) == 0x000008, "Wrong alignment on UFortVehicleSoundData");
static_assert(sizeof(UFortVehicleSoundData) == 0x000070, "Wrong size on UFortVehicleSoundData");
static_assert(offsetof(UFortVehicleSoundData, SoundComponents) == 0x000030, "Member 'UFortVehicleSoundData::SoundComponents' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, MaxListenerDistance) == 0x000040, "Member 'UFortVehicleSoundData::MaxListenerDistance' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, bUpdateDataFromController) == 0x000044, "Member 'UFortVehicleSoundData::bUpdateDataFromController' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, MaxBrakeThreshold) == 0x000048, "Member 'UFortVehicleSoundData::MaxBrakeThreshold' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, ThrottleMultiplier) == 0x00004C, "Member 'UFortVehicleSoundData::ThrottleMultiplier' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, SurfaceFrictionModifier) == 0x000050, "Member 'UFortVehicleSoundData::SurfaceFrictionModifier' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, MotorFrictionModifier) == 0x000054, "Member 'UFortVehicleSoundData::MotorFrictionModifier' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, FrictionJitter) == 0x000058, "Member 'UFortVehicleSoundData::FrictionJitter' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, bCanShiftOverride) == 0x000068, "Member 'UFortVehicleSoundData::bCanShiftOverride' has a wrong offset!");

}

