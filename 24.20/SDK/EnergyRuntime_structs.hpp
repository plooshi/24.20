#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnergyRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK
{

// ScriptStruct EnergyRuntime.EnergyChannelingData
// 0x0018 (0x0018 - 0x0000)
struct FEnergyChannelingData final
{
public:
	float                                         EnergyPerSecond;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnergyChannelingPurposeIdentifier;                 // 0x0004(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalEnergyChannelingSource;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldStopApplyingNextTick;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnergyChannelingData) == 0x000008, "Wrong alignment on FEnergyChannelingData");
static_assert(sizeof(FEnergyChannelingData) == 0x000018, "Wrong size on FEnergyChannelingData");
static_assert(offsetof(FEnergyChannelingData, EnergyPerSecond) == 0x000000, "Member 'FEnergyChannelingData::EnergyPerSecond' has a wrong offset!");
static_assert(offsetof(FEnergyChannelingData, EnergyChannelingPurposeIdentifier) == 0x000004, "Member 'FEnergyChannelingData::EnergyChannelingPurposeIdentifier' has a wrong offset!");
static_assert(offsetof(FEnergyChannelingData, OptionalEnergyChannelingSource) == 0x000008, "Member 'FEnergyChannelingData::OptionalEnergyChannelingSource' has a wrong offset!");
static_assert(offsetof(FEnergyChannelingData, bShouldStopApplyingNextTick) == 0x000010, "Member 'FEnergyChannelingData::bShouldStopApplyingNextTick' has a wrong offset!");

// ScriptStruct EnergyRuntime.EnergyRegenOverrideData
// 0x0010 (0x0010 - 0x0000)
struct FEnergyRegenOverrideData final
{
public:
	struct FGameplayTag                           EnergyRegenIdentifier;                             // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeAmountPerSecond;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeDelayInSeconds;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargePercentageLimit;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnergyRegenOverrideData) == 0x000004, "Wrong alignment on FEnergyRegenOverrideData");
static_assert(sizeof(FEnergyRegenOverrideData) == 0x000010, "Wrong size on FEnergyRegenOverrideData");
static_assert(offsetof(FEnergyRegenOverrideData, EnergyRegenIdentifier) == 0x000000, "Member 'FEnergyRegenOverrideData::EnergyRegenIdentifier' has a wrong offset!");
static_assert(offsetof(FEnergyRegenOverrideData, RechargeAmountPerSecond) == 0x000004, "Member 'FEnergyRegenOverrideData::RechargeAmountPerSecond' has a wrong offset!");
static_assert(offsetof(FEnergyRegenOverrideData, RechargeDelayInSeconds) == 0x000008, "Member 'FEnergyRegenOverrideData::RechargeDelayInSeconds' has a wrong offset!");
static_assert(offsetof(FEnergyRegenOverrideData, RechargePercentageLimit) == 0x00000C, "Member 'FEnergyRegenOverrideData::RechargePercentageLimit' has a wrong offset!");

}

