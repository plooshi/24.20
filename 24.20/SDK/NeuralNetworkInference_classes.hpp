#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NeuralNetworkInference

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "NeuralNetworkInference_structs.hpp"


namespace SDK
{

// Class NeuralNetworkInference.NeuralNetwork
// 0x00F0 (0x0118 - 0x0028)
class UNeuralNetwork final : public UObject
{
public:
	ENeuralDeviceType                             DeviceType;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENeuralDeviceType                             InputDeviceType;                                   // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENeuralDeviceType                             OutputDeviceType;                                  // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENeuralSynchronousMode                        SynchronousMode;                                   // 0x002B(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENeuralThreadMode                             ThreadModeDelegateForAsyncRunCompleted;            // 0x002C(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ModelFullFilePath;                                 // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsLoaded;                                         // 0x0040(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ModelReadFromFileInBytes;                          // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<bool>                                  AreInputTensorSizesVariable;                       // 0x0058(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0xB0];                                      // 0x0068(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NeuralNetwork">();
	}
	static class UNeuralNetwork* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNeuralNetwork>();
	}
};
static_assert(alignof(UNeuralNetwork) == 0x000008, "Wrong alignment on UNeuralNetwork");
static_assert(sizeof(UNeuralNetwork) == 0x000118, "Wrong size on UNeuralNetwork");
static_assert(offsetof(UNeuralNetwork, DeviceType) == 0x000028, "Member 'UNeuralNetwork::DeviceType' has a wrong offset!");
static_assert(offsetof(UNeuralNetwork, InputDeviceType) == 0x000029, "Member 'UNeuralNetwork::InputDeviceType' has a wrong offset!");
static_assert(offsetof(UNeuralNetwork, OutputDeviceType) == 0x00002A, "Member 'UNeuralNetwork::OutputDeviceType' has a wrong offset!");
static_assert(offsetof(UNeuralNetwork, SynchronousMode) == 0x00002B, "Member 'UNeuralNetwork::SynchronousMode' has a wrong offset!");
static_assert(offsetof(UNeuralNetwork, ThreadModeDelegateForAsyncRunCompleted) == 0x00002C, "Member 'UNeuralNetwork::ThreadModeDelegateForAsyncRunCompleted' has a wrong offset!");
static_assert(offsetof(UNeuralNetwork, ModelFullFilePath) == 0x000030, "Member 'UNeuralNetwork::ModelFullFilePath' has a wrong offset!");
static_assert(offsetof(UNeuralNetwork, bIsLoaded) == 0x000040, "Member 'UNeuralNetwork::bIsLoaded' has a wrong offset!");
static_assert(offsetof(UNeuralNetwork, ModelReadFromFileInBytes) == 0x000048, "Member 'UNeuralNetwork::ModelReadFromFileInBytes' has a wrong offset!");
static_assert(offsetof(UNeuralNetwork, AreInputTensorSizesVariable) == 0x000058, "Member 'UNeuralNetwork::AreInputTensorSizesVariable' has a wrong offset!");

}

