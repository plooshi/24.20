#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EventScreenBase

#include "Basic.hpp"

#include "EventScreenBase_classes.hpp"
#include "EventScreenBase_parameters.hpp"


namespace SDK
{

// Function EventScreenBase.FortEventMoreInfoModal.ExitModal
// (Native, Protected, BlueprintCallable)

void UFortEventMoreInfoModal::ExitModal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventMoreInfoModal", "ExitModal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EventScreenBase.FortEventMoreInfoModal.OnEventScreenDataSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UFortEventScreenData*             InEventScreenData                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventMoreInfoModal::OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventMoreInfoModal", "OnEventScreenDataSet");

	Params::FortEventMoreInfoModal_OnEventScreenDataSet Parms{};

	Parms.InEventScreenData = InEventScreenData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventMoreInfoModal.OnModalBackout
// (Event, Protected, BlueprintEvent)

void UFortEventMoreInfoModal::OnModalBackout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventMoreInfoModal", "OnModalBackout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EventScreenBase.FortEventMoreInfoModal.SetModalText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Header                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             SubHeader                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Body                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Legal                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventMoreInfoModal::SetModalText(const class FText& Header, const class FText& SubHeader, const class FText& Body, const class FText& Legal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventMoreInfoModal", "SetModalText");

	Params::FortEventMoreInfoModal_SetModalText Parms{};

	Parms.Header = std::move(Header);
	Parms.SubHeader = std::move(SubHeader);
	Parms.Body = std::move(Body);
	Parms.Legal = std::move(Legal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventMoreInfoModal.GetEventScreenData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UFortEventScreenData*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortEventScreenData* UFortEventMoreInfoModal::GetEventScreenData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventMoreInfoModal", "GetEventScreenData");

	Params::FortEventMoreInfoModal_GetEventScreenData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventPurchaseModal.HandlePurchaseComplete
// (Final, Native, Private, HasOutParams)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPurchasedItemInfo>       PurchasedItems                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           InOfferId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventPurchaseModal::HandlePurchaseComplete(bool bSuccess, const TArray<struct FPurchasedItemInfo>& PurchasedItems, const class FString& InOfferId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchaseModal", "HandlePurchaseComplete");

	Params::FortEventPurchaseModal_HandlePurchaseComplete Parms{};

	Parms.bSuccess = bSuccess;
	Parms.PurchasedItems = std::move(PurchasedItems);
	Parms.InOfferId = std::move(InOfferId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EventScreenBase.FortEventPurchaseModal.OnAmountChangeButtonClicked
// (Event, Protected, BlueprintEvent)

void UFortEventPurchaseModal::OnAmountChangeButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchaseModal", "OnAmountChangeButtonClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EventScreenBase.FortEventPurchaseModal.OnCMSTextApplied
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             LegalText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventPurchaseModal::OnCMSTextApplied(const class FText& LegalText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchaseModal", "OnCMSTextApplied");

	Params::FortEventPurchaseModal_OnCMSTextApplied Parms{};

	Parms.LegalText = std::move(LegalText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventPurchaseModal.OnEventScreenDataSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UFortEventScreenData*             InEventScreenData                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventPurchaseModal::OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchaseModal", "OnEventScreenDataSet");

	Params::FortEventPurchaseModal_OnEventScreenDataSet Parms{};

	Parms.InEventScreenData = InEventScreenData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventPurchaseModal.OnPurchaseAmountChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   PurchaseQuantity                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ResourceQuantity                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventPurchaseModal::OnPurchaseAmountChanged(const int32 PurchaseQuantity, const int32 ResourceQuantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchaseModal", "OnPurchaseAmountChanged");

	Params::FortEventPurchaseModal_OnPurchaseAmountChanged Parms{};

	Parms.PurchaseQuantity = PurchaseQuantity;
	Parms.ResourceQuantity = ResourceQuantity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventPurchaseModal.OnTotalPriceChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NewPrice                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventPurchaseModal::OnTotalPriceChanged(const int32 NewPrice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchaseModal", "OnTotalPriceChanged");

	Params::FortEventPurchaseModal_OnTotalPriceChanged Parms{};

	Parms.NewPrice = NewPrice;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventPurchaseModal.GetEventScreenData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UFortEventScreenData*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortEventScreenData* UFortEventPurchaseModal::GetEventScreenData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchaseModal", "GetEventScreenData");

	Params::FortEventPurchaseModal_GetEventScreenData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventRewardTracksWidget.BPOnEventScreenDataSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UFortEventScreenData*             InEventScreenData                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardTracksWidget::BPOnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardTracksWidget", "BPOnEventScreenDataSet");

	Params::FortEventRewardTracksWidget_BPOnEventScreenDataSet Parms{};

	Parms.InEventScreenData = InEventScreenData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardTracksWidget.BPOnSetRewardItem
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   RequiredProgress                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RemainingProgress                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RewardProgressPercent                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PreviewProgressPercent                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverallProgressPercent                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInPreviewMode                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardTracksWidget::BPOnSetRewardItem(const int32 RequiredProgress, const int32 RemainingProgress, const float RewardProgressPercent, const float PreviewProgressPercent, const float OverallProgressPercent, const bool bInPreviewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardTracksWidget", "BPOnSetRewardItem");

	Params::FortEventRewardTracksWidget_BPOnSetRewardItem Parms{};

	Parms.RequiredProgress = RequiredProgress;
	Parms.RemainingProgress = RemainingProgress;
	Parms.RewardProgressPercent = RewardProgressPercent;
	Parms.PreviewProgressPercent = PreviewProgressPercent;
	Parms.OverallProgressPercent = OverallProgressPercent;
	Parms.bInPreviewMode = bInPreviewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardTracksWidget.BPSetAllRewardsCollected
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bAllCollected                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardTracksWidget::BPSetAllRewardsCollected(const bool bAllCollected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardTracksWidget", "BPSetAllRewardsCollected");

	Params::FortEventRewardTracksWidget_BPSetAllRewardsCollected Parms{};

	Parms.bAllCollected = bAllCollected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.OnEventScreenDataSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UFortEventScreenData*             InEventScreenData                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "OnEventScreenDataSet");

	Params::FortEventRewardWidget_OnEventScreenDataSet Parms{};

	Parms.InEventScreenData = InEventScreenData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.OnInputMethodChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// ECommonInputType                        NewInputType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::OnInputMethodChanged(const ECommonInputType NewInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "OnInputMethodChanged");

	Params::FortEventRewardWidget_OnInputMethodChanged Parms{};

	Parms.NewInputType = NewInputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.OnSetRewardItem
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   RequiredProgress                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RemainingProgress                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RewardProgressPercent                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PreviewProgressPercent                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverallProgressPercent                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInPreviewMode                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::OnSetRewardItem(const int32 RequiredProgress, const int32 RemainingProgress, const float RewardProgressPercent, const float PreviewProgressPercent, const float OverallProgressPercent, const bool bInPreviewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "OnSetRewardItem");

	Params::FortEventRewardWidget_OnSetRewardItem Parms{};

	Parms.RequiredProgress = RequiredProgress;
	Parms.RemainingProgress = RemainingProgress;
	Parms.RewardProgressPercent = RewardProgressPercent;
	Parms.PreviewProgressPercent = PreviewProgressPercent;
	Parms.OverallProgressPercent = OverallProgressPercent;
	Parms.bInPreviewMode = bInPreviewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetAllRewardsCollected
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bAllCollected                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetAllRewardsCollected(const bool bAllCollected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetAllRewardsCollected");

	Params::FortEventRewardWidget_SetAllRewardsCollected Parms{};

	Parms.bAllCollected = bAllCollected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetCustomItemIcon
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UTexture2D*                       CustomItemIcon                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetCustomItemIcon(const class UTexture2D* CustomItemIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetCustomItemIcon");

	Params::FortEventRewardWidget_SetCustomItemIcon Parms{};

	Parms.CustomItemIcon = CustomItemIcon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetDoubleWidth
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bDoubleWidth                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetDoubleWidth(const bool bDoubleWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetDoubleWidth");

	Params::FortEventRewardWidget_SetDoubleWidth Parms{};

	Parms.bDoubleWidth = bDoubleWidth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetInPreviewedState
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bPreviewed                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetInPreviewedState(const bool bPreviewed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetInPreviewedState");

	Params::FortEventRewardWidget_SetInPreviewedState Parms{};

	Parms.bPreviewed = bPreviewed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetInPreviewSelectedState
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bSelected                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetInPreviewSelectedState(const bool bSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetInPreviewSelectedState");

	Params::FortEventRewardWidget_SetInPreviewSelectedState Parms{};

	Parms.bSelected = bSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetInSelectedState
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bSelected                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetInSelectedState(const bool bSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetInSelectedState");

	Params::FortEventRewardWidget_SetInSelectedState Parms{};

	Parms.bSelected = bSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetIsBannerItem
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsBanner                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetIsBannerItem(const bool bIsBanner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetIsBannerItem");

	Params::FortEventRewardWidget_SetIsBannerItem Parms{};

	Parms.bIsBanner = bIsBanner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetProgressPercent
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Percent                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetProgressPercent(const float Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetProgressPercent");

	Params::FortEventRewardWidget_SetProgressPercent Parms{};

	Parms.Percent = Percent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetTrackData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FEventScreenTrackData            TrackData                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetTrackData(const struct FEventScreenTrackData& TrackData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetTrackData");

	Params::FortEventRewardWidget_SetTrackData Parms{};

	Parms.TrackData = std::move(TrackData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.GetEventScreenData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UFortEventScreenData*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortEventScreenData* UFortEventRewardWidget::GetEventScreenData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "GetEventScreenData");

	Params::FortEventRewardWidget_GetEventScreenData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventScreenBase.HandleGiftBoxClosed
// (Final, Native, Private)

void UFortEventScreenBase::HandleGiftBoxClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "HandleGiftBoxClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EventScreenBase.FortEventScreenBase.HandleItemShown
// (Final, Native, Private)
// Parameters:
// class UFortAccountItemDefinition*       AccountItemDef                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventScreenBase::HandleItemShown(const class UFortAccountItemDefinition* AccountItemDef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "HandleItemShown");

	Params::FortEventScreenBase_HandleItemShown Parms{};

	Parms.AccountItemDef = AccountItemDef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EventScreenBase.FortEventScreenBase.HandleToggleFullscreenMap
// (Final, Native, Private)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventScreenBase::HandleToggleFullscreenMap(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "HandleToggleFullscreenMap");

	Params::FortEventScreenBase_HandleToggleFullscreenMap Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EventScreenBase.FortEventScreenBase.OnScreenViewEntered
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEventScreenView                        NewScreenView                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventScreenBase::OnScreenViewEntered(const EEventScreenView NewScreenView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "OnScreenViewEntered");

	Params::FortEventScreenBase_OnScreenViewEntered Parms{};

	Parms.NewScreenView = NewScreenView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenBase.RegisterLayoutSlots
// (Event, Protected, BlueprintEvent)

void UFortEventScreenBase::RegisterLayoutSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "RegisterLayoutSlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EventScreenBase.FortEventScreenBase.SetItemShopCallout
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             ItemShopCalloutText                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventScreenBase::SetItemShopCallout(const class FText& ItemShopCalloutText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "SetItemShopCallout");

	Params::FortEventScreenBase_SetItemShopCallout Parms{};

	Parms.ItemShopCalloutText = std::move(ItemShopCalloutText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenBase.SetItemShopOfferInfoVisibility
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventScreenBase::SetItemShopOfferInfoVisibility(bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "SetItemShopOfferInfoVisibility");

	Params::FortEventScreenBase_SetItemShopOfferInfoVisibility Parms{};

	Parms.bIsVisible = bIsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenBase.SetRewardTrackLegal
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             LegalText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventScreenBase::SetRewardTrackLegal(const class FText& LegalText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "SetRewardTrackLegal");

	Params::FortEventScreenBase_SetRewardTrackLegal Parms{};

	Parms.LegalText = std::move(LegalText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenBase.UpdateVariantCounter
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   CurrentVariantIndex                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalNumVariants                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventScreenBase::UpdateVariantCounter(int32 CurrentVariantIndex, int32 TotalNumVariants)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "UpdateVariantCounter");

	Params::FortEventScreenBase_UpdateVariantCounter Parms{};

	Parms.CurrentVariantIndex = CurrentVariantIndex;
	Parms.TotalNumVariants = TotalNumVariants;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.EventScreenListView.GetEventScreenData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UFortEventScreenData*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortEventScreenData* UEventScreenListView::GetEventScreenData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventScreenListView", "GetEventScreenData");

	Params::EventScreenListView_GetEventScreenData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventTokenCollectionWidget.OnRefreshIcon
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsCollected                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventTokenCollectionWidget::OnRefreshIcon(const bool IsCollected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTokenCollectionWidget", "OnRefreshIcon");

	Params::FortEventTokenCollectionWidget_OnRefreshIcon Parms{};

	Parms.IsCollected = IsCollected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule.OnModuleInitialized
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UFortEventScreenData*             InEventScreenData                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventTrackerModule::OnModuleInitialized(const class UFortEventScreenData* InEventScreenData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule", "OnModuleInitialized");

	Params::FortEventTrackerModule_OnModuleInitialized Parms{};

	Parms.InEventScreenData = InEventScreenData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule.GetEventScreenData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UFortEventScreenData*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortEventScreenData* UFortEventTrackerModule::GetEventScreenData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule", "GetEventScreenData");

	Params::FortEventTrackerModule_GetEventScreenData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventTrackerModule_EventDetails.OnPopulateEventDetailsText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             OutEventName                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             OutEventDescription                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_EventDetails::OnPopulateEventDetailsText(const class FText& OutEventName, const class FText& OutEventDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_EventDetails", "OnPopulateEventDetailsText");

	Params::FortEventTrackerModule_EventDetails_OnPopulateEventDetailsText Parms{};

	Parms.OutEventName = std::move(OutEventName);
	Parms.OutEventDescription = std::move(OutEventDescription);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_EventDetails.UpdateEventTimeRemaining
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             OutEventTimeRemaining                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_EventDetails::UpdateEventTimeRemaining(const class FText& OutEventTimeRemaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_EventDetails", "UpdateEventTimeRemaining");

	Params::FortEventTrackerModule_EventDetails_UpdateEventTimeRemaining Parms{};

	Parms.OutEventTimeRemaining = std::move(OutEventTimeRemaining);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_Header.OnPopulateEventResourceHeader
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Header                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ResourceValue                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_Header::OnPopulateEventResourceHeader(const class FText& Header, const int32 ResourceValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_Header", "OnPopulateEventResourceHeader");

	Params::FortEventTrackerModule_Header_OnPopulateEventResourceHeader Parms{};

	Parms.Header = std::move(Header);
	Parms.ResourceValue = ResourceValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_Header.OnPopulateEventResourceStarterHeader
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Header                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_Header::OnPopulateEventResourceStarterHeader(const class FText& Header)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_Header", "OnPopulateEventResourceStarterHeader");

	Params::FortEventTrackerModule_Header_OnPopulateEventResourceStarterHeader Parms{};

	Parms.Header = std::move(Header);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_RewardDetails.OnPopulateCompletedReward
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FText>                     RewardNames                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_RewardDetails::OnPopulateCompletedReward(const TArray<class FText>& RewardNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_RewardDetails", "OnPopulateCompletedReward");

	Params::FortEventTrackerModule_RewardDetails_OnPopulateCompletedReward Parms{};

	Parms.RewardNames = std::move(RewardNames);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_RewardDetails.OnPopulateNextReward
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FText>                     RewardNames                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_RewardDetails::OnPopulateNextReward(const TArray<class FText>& RewardNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_RewardDetails", "OnPopulateNextReward");

	Params::FortEventTrackerModule_RewardDetails_OnPopulateNextReward Parms{};

	Parms.RewardNames = std::move(RewardNames);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_RewardDetails.OnPopulateNextRewardDetails
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FText>                     RewardNames                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ResourceNeeded                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_RewardDetails::OnPopulateNextRewardDetails(const TArray<class FText>& RewardNames, const int32 ResourceNeeded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_RewardDetails", "OnPopulateNextRewardDetails");

	Params::FortEventTrackerModule_RewardDetails_OnPopulateNextRewardDetails Parms{};

	Parms.RewardNames = std::move(RewardNames);
	Parms.ResourceNeeded = ResourceNeeded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_ProgressiveRewards.OnPopulateCompletionMessage
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// bool                                    bIsComplete                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             CompletionText                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_ProgressiveRewards::OnPopulateCompletionMessage(const bool bIsComplete, const class FText& CompletionText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_ProgressiveRewards", "OnPopulateCompletionMessage");

	Params::FortEventTrackerModule_ProgressiveRewards_OnPopulateCompletionMessage Parms{};

	Parms.bIsComplete = bIsComplete;
	Parms.CompletionText = std::move(CompletionText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_Collection.OnGatherTokenCollectionWidgets
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UFortEventTokenCollectionWidget*>OutCollectionWidgets                                   (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_Collection::OnGatherTokenCollectionWidgets(TArray<class UFortEventTokenCollectionWidget*>* OutCollectionWidgets) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_Collection", "OnGatherTokenCollectionWidgets");

	Params::FortEventTrackerModule_Collection_OnGatherTokenCollectionWidgets Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutCollectionWidgets != nullptr)
		*OutCollectionWidgets = std::move(Parms.OutCollectionWidgets);
}


// Function EventScreenBase.FortEventTrackerModule_Banner.OnCTACompleted
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsComplete                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_Banner::OnCTACompleted(const bool bIsComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_Banner", "OnCTACompleted");

	Params::FortEventTrackerModule_Banner_OnCTACompleted Parms{};

	Parms.bIsComplete = bIsComplete;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_Banner.OnPopulateBannerText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             BannerText                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_Banner::OnPopulateBannerText(const class FText& BannerText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_Banner", "OnPopulateBannerText");

	Params::FortEventTrackerModule_Banner_OnPopulateBannerText Parms{};

	Parms.BannerText = std::move(BannerText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_Banner.OnPopulateHeaderCTAText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             HeaderCTAText                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_Banner::OnPopulateHeaderCTAText(const class FText& HeaderCTAText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_Banner", "OnPopulateHeaderCTAText");

	Params::FortEventTrackerModule_Banner_OnPopulateHeaderCTAText Parms{};

	Parms.HeaderCTAText = std::move(HeaderCTAText);

	UObject::ProcessEvent(Func, &Parms);
}

}

