#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIChart

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum UIChart.EWidgetStateComponentUnloadDefaultBehavior
// NumValues: 0x0003
enum class EWidgetStateComponentUnloadDefaultBehavior : uint32
{
	WaitForAnimations                        = 0,
	DoNotWaitForAnimations                   = 1,
	EWidgetStateComponentUnloadDefaultBehavior_MAX = 2,
};

// Enum UIChart.EUIStateTransitionUrgency
// NumValues: 0x0003
enum class EUIStateTransitionUrgency : uint8
{
	Normal                                   = 0,
	High                                     = 1,
	EUIStateTransitionUrgency_MAX            = 2,
};

// Enum UIChart.EUIStateAutomationType
// NumValues: 0x0003
enum class EUIStateAutomationType : uint8
{
	Initial                                  = 0,
	Continual                                = 1,
	EUIStateAutomationType_MAX               = 2,
};

// Enum UIChart.EUIStateChartContextConditionType
// NumValues: 0x000E
enum class EUIStateChartContextConditionType : uint32
{
	IsEmpty                                  = 0,
	IsNotEmpty                               = 1,
	IsEqualTo                                = 2,
	IsNotEqualTo                             = 3,
	IsGreaterThan                            = 4,
	IsGreaterThanOrEqualTo                   = 5,
	IsLessThan                               = 6,
	IsLessThanOrEqualTo                      = 7,
	IsTrue                                   = 8,
	IsNotTrue                                = 9,
	StartsWith                               = 10,
	EndsWith                                 = 11,
	Contains                                 = 12,
	EUIStateChartContextConditionType_MAX    = 13,
};

// Enum UIChart.EUIChartRegionTransitionScope
// NumValues: 0x0003
enum class EUIChartRegionTransitionScope : uint8
{
	ThisRegionOnly                           = 0,
	ThisRegionOrChildRegions                 = 1,
	EUIChartRegionTransitionScope_MAX        = 2,
};

// Enum UIChart.EStateComponentStatus
// NumValues: 0x0009
enum class EStateComponentStatus : uint32
{
	Inactive                                 = 0,
	PreparingForLoad                         = 1,
	Loading                                  = 2,
	DoneLoading                              = 3,
	Operational                              = 4,
	PreparingForUnload                       = 5,
	Unloading                                = 6,
	DoneUnloading                            = 7,
	EStateComponentStatus_MAX                = 8,
};

// Enum UIChart.EStateChartResourceScope
// NumValues: 0x0004
enum class EStateChartResourceScope : uint32
{
	StateChart                               = 0,
	Player                                   = 1,
	Global                                   = 2,
	EStateChartResourceScope_MAX             = 3,
};

// ScriptStruct UIChart.UIStateChartTransitionOperationParameters
// 0x0028 (0x0028 - 0x0000)
struct FUIStateChartTransitionOperationParameters final
{
public:
	struct FGameplayTagContainer                  AnimationHints;                                    // 0x0000(0x0020)(Protected, NativeAccessSpecifierProtected)
	EUIStateTransitionUrgency                     Urgency;                                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIStateChartTransitionOperationParameters) == 0x000008, "Wrong alignment on FUIStateChartTransitionOperationParameters");
static_assert(sizeof(FUIStateChartTransitionOperationParameters) == 0x000028, "Wrong size on FUIStateChartTransitionOperationParameters");
static_assert(offsetof(FUIStateChartTransitionOperationParameters, AnimationHints) == 0x000000, "Member 'FUIStateChartTransitionOperationParameters::AnimationHints' has a wrong offset!");
static_assert(offsetof(FUIStateChartTransitionOperationParameters, Urgency) == 0x000020, "Member 'FUIStateChartTransitionOperationParameters::Urgency' has a wrong offset!");

// ScriptStruct UIChart.ContextSetterSetEntry
// 0x0018 (0x0018 - 0x0000)
struct FContextSetterSetEntry final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextSetterSetEntry) == 0x000008, "Wrong alignment on FContextSetterSetEntry");
static_assert(sizeof(FContextSetterSetEntry) == 0x000018, "Wrong size on FContextSetterSetEntry");
static_assert(offsetof(FContextSetterSetEntry, Key) == 0x000000, "Member 'FContextSetterSetEntry::Key' has a wrong offset!");
static_assert(offsetof(FContextSetterSetEntry, Value) == 0x000008, "Member 'FContextSetterSetEntry::Value' has a wrong offset!");

// ScriptStruct UIChart.ContextSetterClearEntry
// 0x0004 (0x0004 - 0x0000)
struct FContextSetterClearEntry final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextSetterClearEntry) == 0x000004, "Wrong alignment on FContextSetterClearEntry");
static_assert(sizeof(FContextSetterClearEntry) == 0x000004, "Wrong size on FContextSetterClearEntry");
static_assert(offsetof(FContextSetterClearEntry, Key) == 0x000000, "Member 'FContextSetterClearEntry::Key' has a wrong offset!");

// ScriptStruct UIChart.ContextSetterChanges
// 0x0020 (0x0020 - 0x0000)
struct FContextSetterChanges final
{
public:
	TArray<struct FContextSetterSetEntry>         ValuesToSet;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FContextSetterClearEntry>       ValuesToClear;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextSetterChanges) == 0x000008, "Wrong alignment on FContextSetterChanges");
static_assert(sizeof(FContextSetterChanges) == 0x000020, "Wrong size on FContextSetterChanges");
static_assert(offsetof(FContextSetterChanges, ValuesToSet) == 0x000000, "Member 'FContextSetterChanges::ValuesToSet' has a wrong offset!");
static_assert(offsetof(FContextSetterChanges, ValuesToClear) == 0x000010, "Member 'FContextSetterChanges::ValuesToClear' has a wrong offset!");

// ScriptStruct UIChart.UIStateComponentInstanceStack
// 0x0010 (0x0010 - 0x0000)
struct FUIStateComponentInstanceStack final
{
public:
	TArray<class UStackingUIStateComponent*>      InstanceStack;                                     // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIStateComponentInstanceStack) == 0x000008, "Wrong alignment on FUIStateComponentInstanceStack");
static_assert(sizeof(FUIStateComponentInstanceStack) == 0x000010, "Wrong size on FUIStateComponentInstanceStack");
static_assert(offsetof(FUIStateComponentInstanceStack, InstanceStack) == 0x000000, "Member 'FUIStateComponentInstanceStack::InstanceStack' has a wrong offset!");

// ScriptStruct UIChart.UIStateConfigurationChildReference
// 0x0004 (0x0004 - 0x0000)
struct FUIStateConfigurationChildReference final
{
public:
	int32                                         ChildStateId;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIStateConfigurationChildReference) == 0x000004, "Wrong alignment on FUIStateConfigurationChildReference");
static_assert(sizeof(FUIStateConfigurationChildReference) == 0x000004, "Wrong size on FUIStateConfigurationChildReference");
static_assert(offsetof(FUIStateConfigurationChildReference, ChildStateId) == 0x000000, "Member 'FUIStateConfigurationChildReference::ChildStateId' has a wrong offset!");

// ScriptStruct UIChart.UIStateChartContextCondition
// 0x0018 (0x0018 - 0x0000)
struct FUIStateChartContextCondition final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIStateChartContextConditionType             ConditionType;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ComparisonConstant;                                // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIStateChartContextCondition) == 0x000008, "Wrong alignment on FUIStateChartContextCondition");
static_assert(sizeof(FUIStateChartContextCondition) == 0x000018, "Wrong size on FUIStateChartContextCondition");
static_assert(offsetof(FUIStateChartContextCondition, Key) == 0x000000, "Member 'FUIStateChartContextCondition::Key' has a wrong offset!");
static_assert(offsetof(FUIStateChartContextCondition, ConditionType) == 0x000004, "Member 'FUIStateChartContextCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(FUIStateChartContextCondition, ComparisonConstant) == 0x000008, "Member 'FUIStateChartContextCondition::ComparisonConstant' has a wrong offset!");

// ScriptStruct UIChart.UIStateAutomationRule
// 0x0018 (0x0018 - 0x0000)
struct FUIStateAutomationRule final
{
public:
	TArray<struct FUIStateChartContextCondition>  ContextConditions;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FUIStateConfigurationChildReference    ChildStateReference;                               // 0x0010(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIStateAutomationRule) == 0x000008, "Wrong alignment on FUIStateAutomationRule");
static_assert(sizeof(FUIStateAutomationRule) == 0x000018, "Wrong size on FUIStateAutomationRule");
static_assert(offsetof(FUIStateAutomationRule, ContextConditions) == 0x000000, "Member 'FUIStateAutomationRule::ContextConditions' has a wrong offset!");
static_assert(offsetof(FUIStateAutomationRule, ChildStateReference) == 0x000010, "Member 'FUIStateAutomationRule::ChildStateReference' has a wrong offset!");

// ScriptStruct UIChart.UIStateTransitionData
// 0x000C (0x000C - 0x0000)
struct FUIStateTransitionData final
{
public:
	struct FGameplayTag                           TriggerTag;                                        // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceStateId;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetStateId;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIStateTransitionData) == 0x000004, "Wrong alignment on FUIStateTransitionData");
static_assert(sizeof(FUIStateTransitionData) == 0x00000C, "Wrong size on FUIStateTransitionData");
static_assert(offsetof(FUIStateTransitionData, TriggerTag) == 0x000000, "Member 'FUIStateTransitionData::TriggerTag' has a wrong offset!");
static_assert(offsetof(FUIStateTransitionData, SourceStateId) == 0x000004, "Member 'FUIStateTransitionData::SourceStateId' has a wrong offset!");
static_assert(offsetof(FUIStateTransitionData, TargetStateId) == 0x000008, "Member 'FUIStateTransitionData::TargetStateId' has a wrong offset!");

// ScriptStruct UIChart.UIStateChartContextChangeSet
// 0x0050 (0x0050 - 0x0000)
struct FUIStateChartContextChangeSet final
{
public:
	TMap<struct FGameplayTag, class FString>      Changes;                                           // 0x0000(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FUIStateChartContextChangeSet) == 0x000008, "Wrong alignment on FUIStateChartContextChangeSet");
static_assert(sizeof(FUIStateChartContextChangeSet) == 0x000050, "Wrong size on FUIStateChartContextChangeSet");
static_assert(offsetof(FUIStateChartContextChangeSet, Changes) == 0x000000, "Member 'FUIStateChartContextChangeSet::Changes' has a wrong offset!");

// ScriptStruct UIChart.UIStateChartContextEntryOverride
// 0x0028 (0x0028 - 0x0000)
struct FUIStateChartContextEntryOverride final
{
public:
	class FString                                 OverrideValue;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIStateChartContextEntryOverride) == 0x000008, "Wrong alignment on FUIStateChartContextEntryOverride");
static_assert(sizeof(FUIStateChartContextEntryOverride) == 0x000028, "Wrong size on FUIStateChartContextEntryOverride");
static_assert(offsetof(FUIStateChartContextEntryOverride, OverrideValue) == 0x000000, "Member 'FUIStateChartContextEntryOverride::OverrideValue' has a wrong offset!");

// ScriptStruct UIChart.UIStateChartManagerChartDeactivationRequest
// 0x0088 (0x0088 - 0x0000)
struct alignas(0x08) FUIStateChartManagerChartDeactivationRequest final
{
public:
	uint8                                         Pad_0[0x88];                                       // 0x0000(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIStateChartManagerChartDeactivationRequest) == 0x000008, "Wrong alignment on FUIStateChartManagerChartDeactivationRequest");
static_assert(sizeof(FUIStateChartManagerChartDeactivationRequest) == 0x000088, "Wrong size on FUIStateChartManagerChartDeactivationRequest");

// ScriptStruct UIChart.UIStateRelayBaton
// 0x0028 (0x0028 - 0x0000)
struct FUIStateRelayBaton final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIStateComponent*                      OfferingComponent;                                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUIStateComponent>          OfferingComponentType;                             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIStateComponentConfiguration*         OfferingComponentConfiguration;                    // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIStateRelayBaton) == 0x000008, "Wrong alignment on FUIStateRelayBaton");
static_assert(sizeof(FUIStateRelayBaton) == 0x000028, "Wrong size on FUIStateRelayBaton");
static_assert(offsetof(FUIStateRelayBaton, OfferingComponent) == 0x000010, "Member 'FUIStateRelayBaton::OfferingComponent' has a wrong offset!");
static_assert(offsetof(FUIStateRelayBaton, OfferingComponentType) == 0x000018, "Member 'FUIStateRelayBaton::OfferingComponentType' has a wrong offset!");
static_assert(offsetof(FUIStateRelayBaton, OfferingComponentConfiguration) == 0x000020, "Member 'FUIStateRelayBaton::OfferingComponentConfiguration' has a wrong offset!");

// ScriptStruct UIChart.UIStateRelay
// 0x0028 (0x0028 - 0x0000)
struct FUIStateRelay final
{
public:
	TArray<struct FUIStateRelayBaton>             AvailableBatons;                                   // 0x0000(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FUIStateRelayBaton>             ClaimedBatons;                                     // 0x0010(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIStateRelay) == 0x000008, "Wrong alignment on FUIStateRelay");
static_assert(sizeof(FUIStateRelay) == 0x000028, "Wrong size on FUIStateRelay");
static_assert(offsetof(FUIStateRelay, AvailableBatons) == 0x000000, "Member 'FUIStateRelay::AvailableBatons' has a wrong offset!");
static_assert(offsetof(FUIStateRelay, ClaimedBatons) == 0x000010, "Member 'FUIStateRelay::ClaimedBatons' has a wrong offset!");

}

