#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModelProto

#include "Basic.hpp"


namespace SDK
{

// Enum ModelProto.EAttributeProtoAttributeType
// NumValues: 0x000E
enum class EAttributeProtoAttributeType : uint32
{
	UNDEFINED                                = 0,
	FLOAT                                    = 1,
	INT                                      = 2,
	STRING                                   = 3,
	TENSOR                                   = 4,
	GRAPH                                    = 5,
	SPARSE_TENSOR                            = 11,
	FLOATS                                   = 6,
	INTS                                     = 7,
	STRINGS                                  = 8,
	TENSORS                                  = 9,
	GRAPHS                                   = 10,
	SPARSE_TENSORS                           = 12,
	EAttributeProtoAttributeType_MAX         = 13,
};

// Enum ModelProto.ETensorProtoDataType
// NumValues: 0x0012
enum class ETensorProtoDataType : uint32
{
	UNDEFINED                                = 0,
	FLOAT                                    = 1,
	UINT8                                    = 2,
	INT8                                     = 3,
	UINT16                                   = 4,
	INT16                                    = 5,
	INT32                                    = 6,
	INT64                                    = 7,
	STRING                                   = 8,
	BOOL                                     = 9,
	FLOAT16                                  = 10,
	DOUBLE                                   = 11,
	UINT32                                   = 12,
	UINT64                                   = 13,
	COMPLEX64                                = 14,
	COMPLEX128                               = 15,
	BFLOAT16                                 = 16,
	ETensorProtoDataType_MAX                 = 17,
};

// Enum ModelProto.ETensorProtoDataLocation
// NumValues: 0x0003
enum class ETensorProtoDataLocation : uint32
{
	DEFAULT                                  = 0,
	EXTERNAL                                 = 1,
	ETensorProtoDataLocation_MAX             = 2,
};

// ScriptStruct ModelProto.TensorProtoSegment
// 0x0010 (0x0010 - 0x0000)
struct FTensorProtoSegment final
{
public:
	int64                                         Begin;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         End;                                               // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTensorProtoSegment) == 0x000008, "Wrong alignment on FTensorProtoSegment");
static_assert(sizeof(FTensorProtoSegment) == 0x000010, "Wrong size on FTensorProtoSegment");
static_assert(offsetof(FTensorProtoSegment, Begin) == 0x000000, "Member 'FTensorProtoSegment::Begin' has a wrong offset!");
static_assert(offsetof(FTensorProtoSegment, End) == 0x000008, "Member 'FTensorProtoSegment::End' has a wrong offset!");

// ScriptStruct ModelProto.StringStringEntryProto
// 0x0020 (0x0020 - 0x0000)
struct FStringStringEntryProto final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStringStringEntryProto) == 0x000008, "Wrong alignment on FStringStringEntryProto");
static_assert(sizeof(FStringStringEntryProto) == 0x000020, "Wrong size on FStringStringEntryProto");
static_assert(offsetof(FStringStringEntryProto, Key) == 0x000000, "Member 'FStringStringEntryProto::Key' has a wrong offset!");
static_assert(offsetof(FStringStringEntryProto, Value) == 0x000010, "Member 'FStringStringEntryProto::Value' has a wrong offset!");

// ScriptStruct ModelProto.TensorShapeProtoDimension
// 0x0028 (0x0028 - 0x0000)
struct FTensorShapeProtoDimension final
{
public:
	int64                                         DimValue;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DimParam;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Denotation;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTensorShapeProtoDimension) == 0x000008, "Wrong alignment on FTensorShapeProtoDimension");
static_assert(sizeof(FTensorShapeProtoDimension) == 0x000028, "Wrong size on FTensorShapeProtoDimension");
static_assert(offsetof(FTensorShapeProtoDimension, DimValue) == 0x000000, "Member 'FTensorShapeProtoDimension::DimValue' has a wrong offset!");
static_assert(offsetof(FTensorShapeProtoDimension, DimParam) == 0x000008, "Member 'FTensorShapeProtoDimension::DimParam' has a wrong offset!");
static_assert(offsetof(FTensorShapeProtoDimension, Denotation) == 0x000018, "Member 'FTensorShapeProtoDimension::Denotation' has a wrong offset!");

// ScriptStruct ModelProto.TensorShapeProto
// 0x0010 (0x0010 - 0x0000)
struct FTensorShapeProto final
{
public:
	TArray<struct FTensorShapeProtoDimension>     Dim;                                               // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTensorShapeProto) == 0x000008, "Wrong alignment on FTensorShapeProto");
static_assert(sizeof(FTensorShapeProto) == 0x000010, "Wrong size on FTensorShapeProto");
static_assert(offsetof(FTensorShapeProto, Dim) == 0x000000, "Member 'FTensorShapeProto::Dim' has a wrong offset!");

// ScriptStruct ModelProto.TensorProto
// 0x00D0 (0x00D0 - 0x0000)
struct FTensorProto final
{
public:
	TArray<int64>                                 Dimensions;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	ETensorProtoDataType                          DataType;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTensorProtoSegment                    Segment;                                           // 0x0018(0x0010)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FloatData;                                         // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Int32Data;                                         // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringData;                                        // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int64>                                 Int64Data;                                         // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0068(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DocString;                                         // 0x0078(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 RawData;                                           // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStringStringEntryProto>        ExternalData;                                      // 0x0098(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	ETensorProtoDataLocation                      DataLocation;                                      // 0x00A8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                DoubleData;                                        // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint64>                                UInt64Data;                                        // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTensorProto) == 0x000008, "Wrong alignment on FTensorProto");
static_assert(sizeof(FTensorProto) == 0x0000D0, "Wrong size on FTensorProto");
static_assert(offsetof(FTensorProto, Dimensions) == 0x000000, "Member 'FTensorProto::Dimensions' has a wrong offset!");
static_assert(offsetof(FTensorProto, DataType) == 0x000010, "Member 'FTensorProto::DataType' has a wrong offset!");
static_assert(offsetof(FTensorProto, Segment) == 0x000018, "Member 'FTensorProto::Segment' has a wrong offset!");
static_assert(offsetof(FTensorProto, FloatData) == 0x000028, "Member 'FTensorProto::FloatData' has a wrong offset!");
static_assert(offsetof(FTensorProto, Int32Data) == 0x000038, "Member 'FTensorProto::Int32Data' has a wrong offset!");
static_assert(offsetof(FTensorProto, StringData) == 0x000048, "Member 'FTensorProto::StringData' has a wrong offset!");
static_assert(offsetof(FTensorProto, Int64Data) == 0x000058, "Member 'FTensorProto::Int64Data' has a wrong offset!");
static_assert(offsetof(FTensorProto, Name) == 0x000068, "Member 'FTensorProto::Name' has a wrong offset!");
static_assert(offsetof(FTensorProto, DocString) == 0x000078, "Member 'FTensorProto::DocString' has a wrong offset!");
static_assert(offsetof(FTensorProto, RawData) == 0x000088, "Member 'FTensorProto::RawData' has a wrong offset!");
static_assert(offsetof(FTensorProto, ExternalData) == 0x000098, "Member 'FTensorProto::ExternalData' has a wrong offset!");
static_assert(offsetof(FTensorProto, DataLocation) == 0x0000A8, "Member 'FTensorProto::DataLocation' has a wrong offset!");
static_assert(offsetof(FTensorProto, DoubleData) == 0x0000B0, "Member 'FTensorProto::DoubleData' has a wrong offset!");
static_assert(offsetof(FTensorProto, UInt64Data) == 0x0000C0, "Member 'FTensorProto::UInt64Data' has a wrong offset!");

// ScriptStruct ModelProto.TypeProtoSequence
// 0x0001 (0x0001 - 0x0000)
struct FTypeProtoSequence final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypeProtoSequence) == 0x000001, "Wrong alignment on FTypeProtoSequence");
static_assert(sizeof(FTypeProtoSequence) == 0x000001, "Wrong size on FTypeProtoSequence");

// ScriptStruct ModelProto.TypeProtoTensor
// 0x0018 (0x0018 - 0x0000)
struct FTypeProtoTensor final
{
public:
	int32                                         ElemType;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTensorShapeProto                      Shape;                                             // 0x0008(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypeProtoTensor) == 0x000008, "Wrong alignment on FTypeProtoTensor");
static_assert(sizeof(FTypeProtoTensor) == 0x000018, "Wrong size on FTypeProtoTensor");
static_assert(offsetof(FTypeProtoTensor, ElemType) == 0x000000, "Member 'FTypeProtoTensor::ElemType' has a wrong offset!");
static_assert(offsetof(FTypeProtoTensor, Shape) == 0x000008, "Member 'FTypeProtoTensor::Shape' has a wrong offset!");

// ScriptStruct ModelProto.TypeProtoMap
// 0x0004 (0x0004 - 0x0000)
struct FTypeProtoMap final
{
public:
	int32                                         KeyType;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypeProtoMap) == 0x000004, "Wrong alignment on FTypeProtoMap");
static_assert(sizeof(FTypeProtoMap) == 0x000004, "Wrong size on FTypeProtoMap");
static_assert(offsetof(FTypeProtoMap, KeyType) == 0x000000, "Member 'FTypeProtoMap::KeyType' has a wrong offset!");

// ScriptStruct ModelProto.SparseTensorProto
// 0x01B0 (0x01B0 - 0x0000)
struct FSparseTensorProto final
{
public:
	struct FTensorProto                           Values;                                            // 0x0000(0x00D0)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FTensorProto                           Indices;                                           // 0x00D0(0x00D0)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<int64>                                 Dimensions;                                        // 0x01A0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSparseTensorProto) == 0x000008, "Wrong alignment on FSparseTensorProto");
static_assert(sizeof(FSparseTensorProto) == 0x0001B0, "Wrong size on FSparseTensorProto");
static_assert(offsetof(FSparseTensorProto, Values) == 0x000000, "Member 'FSparseTensorProto::Values' has a wrong offset!");
static_assert(offsetof(FSparseTensorProto, Indices) == 0x0000D0, "Member 'FSparseTensorProto::Indices' has a wrong offset!");
static_assert(offsetof(FSparseTensorProto, Dimensions) == 0x0001A0, "Member 'FSparseTensorProto::Dimensions' has a wrong offset!");

// ScriptStruct ModelProto.TypeProto
// 0x0028 (0x0028 - 0x0000)
struct FTypeProto final
{
public:
	struct FTypeProtoTensor                       TensorType;                                        // 0x0000(0x0018)(Edit, EditConst, NativeAccessSpecifierPublic)
	class FString                                 Denotation;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypeProto) == 0x000008, "Wrong alignment on FTypeProto");
static_assert(sizeof(FTypeProto) == 0x000028, "Wrong size on FTypeProto");
static_assert(offsetof(FTypeProto, TensorType) == 0x000000, "Member 'FTypeProto::TensorType' has a wrong offset!");
static_assert(offsetof(FTypeProto, Denotation) == 0x000018, "Member 'FTypeProto::Denotation' has a wrong offset!");

// ScriptStruct ModelProto.AttributeProto
// 0x0310 (0x0310 - 0x0000)
struct FAttributeProto final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DocString;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttributeProtoAttributeType                  Type;                                              // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         F;                                                 // 0x0024(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         I;                                                 // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 S;                                                 // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTensorProto                           T;                                                 // 0x0040(0x00D0)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FSparseTensorProto                     SparseTensor;                                      // 0x0110(0x01B0)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<float>                                 Floats;                                            // 0x02C0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<int64>                                 Integers;                                          // 0x02D0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         Strings;                                           // 0x02E0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FTensorProto>                   Tensors;                                           // 0x02F0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSparseTensorProto>             SparseTensors;                                     // 0x0300(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttributeProto) == 0x000008, "Wrong alignment on FAttributeProto");
static_assert(sizeof(FAttributeProto) == 0x000310, "Wrong size on FAttributeProto");
static_assert(offsetof(FAttributeProto, Name) == 0x000000, "Member 'FAttributeProto::Name' has a wrong offset!");
static_assert(offsetof(FAttributeProto, DocString) == 0x000010, "Member 'FAttributeProto::DocString' has a wrong offset!");
static_assert(offsetof(FAttributeProto, Type) == 0x000020, "Member 'FAttributeProto::Type' has a wrong offset!");
static_assert(offsetof(FAttributeProto, F) == 0x000024, "Member 'FAttributeProto::F' has a wrong offset!");
static_assert(offsetof(FAttributeProto, I) == 0x000028, "Member 'FAttributeProto::I' has a wrong offset!");
static_assert(offsetof(FAttributeProto, S) == 0x000030, "Member 'FAttributeProto::S' has a wrong offset!");
static_assert(offsetof(FAttributeProto, T) == 0x000040, "Member 'FAttributeProto::T' has a wrong offset!");
static_assert(offsetof(FAttributeProto, SparseTensor) == 0x000110, "Member 'FAttributeProto::SparseTensor' has a wrong offset!");
static_assert(offsetof(FAttributeProto, Floats) == 0x0002C0, "Member 'FAttributeProto::Floats' has a wrong offset!");
static_assert(offsetof(FAttributeProto, Integers) == 0x0002D0, "Member 'FAttributeProto::Integers' has a wrong offset!");
static_assert(offsetof(FAttributeProto, Strings) == 0x0002E0, "Member 'FAttributeProto::Strings' has a wrong offset!");
static_assert(offsetof(FAttributeProto, Tensors) == 0x0002F0, "Member 'FAttributeProto::Tensors' has a wrong offset!");
static_assert(offsetof(FAttributeProto, SparseTensors) == 0x000300, "Member 'FAttributeProto::SparseTensors' has a wrong offset!");

// ScriptStruct ModelProto.ValueInfoProto
// 0x0048 (0x0048 - 0x0000)
struct FValueInfoProto final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTypeProto                             Type;                                              // 0x0010(0x0028)(Edit, EditConst, NativeAccessSpecifierPublic)
	class FString                                 DocString;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValueInfoProto) == 0x000008, "Wrong alignment on FValueInfoProto");
static_assert(sizeof(FValueInfoProto) == 0x000048, "Wrong size on FValueInfoProto");
static_assert(offsetof(FValueInfoProto, Name) == 0x000000, "Member 'FValueInfoProto::Name' has a wrong offset!");
static_assert(offsetof(FValueInfoProto, Type) == 0x000010, "Member 'FValueInfoProto::Type' has a wrong offset!");
static_assert(offsetof(FValueInfoProto, DocString) == 0x000038, "Member 'FValueInfoProto::DocString' has a wrong offset!");

// ScriptStruct ModelProto.TensorAnnotation
// 0x0020 (0x0020 - 0x0000)
struct FTensorAnnotation final
{
public:
	class FString                                 TensorName;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStringStringEntryProto>        QuantParameterTensorNames;                         // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTensorAnnotation) == 0x000008, "Wrong alignment on FTensorAnnotation");
static_assert(sizeof(FTensorAnnotation) == 0x000020, "Wrong size on FTensorAnnotation");
static_assert(offsetof(FTensorAnnotation, TensorName) == 0x000000, "Member 'FTensorAnnotation::TensorName' has a wrong offset!");
static_assert(offsetof(FTensorAnnotation, QuantParameterTensorNames) == 0x000010, "Member 'FTensorAnnotation::QuantParameterTensorNames' has a wrong offset!");

// ScriptStruct ModelProto.NodeProto
// 0x0070 (0x0070 - 0x0000)
struct FNodeProto final
{
public:
	TArray<class FString>                         Input;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         Output;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OperatorType;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Domain;                                            // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAttributeProto>                Attribute;                                         // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FString                                 DocString;                                         // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNodeProto) == 0x000008, "Wrong alignment on FNodeProto");
static_assert(sizeof(FNodeProto) == 0x000070, "Wrong size on FNodeProto");
static_assert(offsetof(FNodeProto, Input) == 0x000000, "Member 'FNodeProto::Input' has a wrong offset!");
static_assert(offsetof(FNodeProto, Output) == 0x000010, "Member 'FNodeProto::Output' has a wrong offset!");
static_assert(offsetof(FNodeProto, Name) == 0x000020, "Member 'FNodeProto::Name' has a wrong offset!");
static_assert(offsetof(FNodeProto, OperatorType) == 0x000030, "Member 'FNodeProto::OperatorType' has a wrong offset!");
static_assert(offsetof(FNodeProto, Domain) == 0x000040, "Member 'FNodeProto::Domain' has a wrong offset!");
static_assert(offsetof(FNodeProto, Attribute) == 0x000050, "Member 'FNodeProto::Attribute' has a wrong offset!");
static_assert(offsetof(FNodeProto, DocString) == 0x000060, "Member 'FNodeProto::DocString' has a wrong offset!");

// ScriptStruct ModelProto.GraphProto
// 0x0098 (0x0098 - 0x0000)
struct FGraphProto final
{
public:
	bool                                          bIsLoaded;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNodeProto>                     Node;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTensorProto>                   Initializer;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSparseTensorProto>             SparseInitializer;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FString                                 DocString;                                         // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FValueInfoProto>                Input;                                             // 0x0058(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FValueInfoProto>                Output;                                            // 0x0068(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FValueInfoProto>                ValueInfo;                                         // 0x0078(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x10];                                      // 0x0088(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGraphProto) == 0x000008, "Wrong alignment on FGraphProto");
static_assert(sizeof(FGraphProto) == 0x000098, "Wrong size on FGraphProto");
static_assert(offsetof(FGraphProto, bIsLoaded) == 0x000000, "Member 'FGraphProto::bIsLoaded' has a wrong offset!");
static_assert(offsetof(FGraphProto, Node) == 0x000008, "Member 'FGraphProto::Node' has a wrong offset!");
static_assert(offsetof(FGraphProto, Name) == 0x000018, "Member 'FGraphProto::Name' has a wrong offset!");
static_assert(offsetof(FGraphProto, Initializer) == 0x000028, "Member 'FGraphProto::Initializer' has a wrong offset!");
static_assert(offsetof(FGraphProto, SparseInitializer) == 0x000038, "Member 'FGraphProto::SparseInitializer' has a wrong offset!");
static_assert(offsetof(FGraphProto, DocString) == 0x000048, "Member 'FGraphProto::DocString' has a wrong offset!");
static_assert(offsetof(FGraphProto, Input) == 0x000058, "Member 'FGraphProto::Input' has a wrong offset!");
static_assert(offsetof(FGraphProto, Output) == 0x000068, "Member 'FGraphProto::Output' has a wrong offset!");
static_assert(offsetof(FGraphProto, ValueInfo) == 0x000078, "Member 'FGraphProto::ValueInfo' has a wrong offset!");

// ScriptStruct ModelProto.TrainingInfoProto
// 0x0158 (0x0158 - 0x0000)
struct FTrainingInfoProto final
{
public:
	bool                                          bIsLoaded;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGraphProto                            Initialization;                                    // 0x0008(0x0098)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FGraphProto                            Algorithm;                                         // 0x00A0(0x0098)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FStringStringEntryProto>        InitializationBinding;                             // 0x0138(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FStringStringEntryProto>        UpdateBinding;                                     // 0x0148(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrainingInfoProto) == 0x000008, "Wrong alignment on FTrainingInfoProto");
static_assert(sizeof(FTrainingInfoProto) == 0x000158, "Wrong size on FTrainingInfoProto");
static_assert(offsetof(FTrainingInfoProto, bIsLoaded) == 0x000000, "Member 'FTrainingInfoProto::bIsLoaded' has a wrong offset!");
static_assert(offsetof(FTrainingInfoProto, Initialization) == 0x000008, "Member 'FTrainingInfoProto::Initialization' has a wrong offset!");
static_assert(offsetof(FTrainingInfoProto, Algorithm) == 0x0000A0, "Member 'FTrainingInfoProto::Algorithm' has a wrong offset!");
static_assert(offsetof(FTrainingInfoProto, InitializationBinding) == 0x000138, "Member 'FTrainingInfoProto::InitializationBinding' has a wrong offset!");
static_assert(offsetof(FTrainingInfoProto, UpdateBinding) == 0x000148, "Member 'FTrainingInfoProto::UpdateBinding' has a wrong offset!");

// ScriptStruct ModelProto.OperatorSetIdProto
// 0x0018 (0x0018 - 0x0000)
struct FOperatorSetIdProto final
{
public:
	class FString                                 Domain;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Version;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOperatorSetIdProto) == 0x000008, "Wrong alignment on FOperatorSetIdProto");
static_assert(sizeof(FOperatorSetIdProto) == 0x000018, "Wrong size on FOperatorSetIdProto");
static_assert(offsetof(FOperatorSetIdProto, Domain) == 0x000000, "Member 'FOperatorSetIdProto::Domain' has a wrong offset!");
static_assert(offsetof(FOperatorSetIdProto, Version) == 0x000010, "Member 'FOperatorSetIdProto::Version' has a wrong offset!");

// ScriptStruct ModelProto.ModelProto
// 0x0120 (0x0120 - 0x0000)
struct FModelProto final
{
public:
	bool                                          bIsLoaded;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         IRVersion;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOperatorSetIdProto>            OpsetImport;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FString                                 ProducerName;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProducerVersion;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Domain;                                            // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ModelVersion;                                      // 0x0050(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DocString;                                         // 0x0058(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGraphProto                            Graph;                                             // 0x0068(0x0098)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FStringStringEntryProto>        MetadataProps;                                     // 0x0100(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FTrainingInfoProto>             TrainingInfo;                                      // 0x0110(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModelProto) == 0x000008, "Wrong alignment on FModelProto");
static_assert(sizeof(FModelProto) == 0x000120, "Wrong size on FModelProto");
static_assert(offsetof(FModelProto, bIsLoaded) == 0x000000, "Member 'FModelProto::bIsLoaded' has a wrong offset!");
static_assert(offsetof(FModelProto, IRVersion) == 0x000008, "Member 'FModelProto::IRVersion' has a wrong offset!");
static_assert(offsetof(FModelProto, OpsetImport) == 0x000010, "Member 'FModelProto::OpsetImport' has a wrong offset!");
static_assert(offsetof(FModelProto, ProducerName) == 0x000020, "Member 'FModelProto::ProducerName' has a wrong offset!");
static_assert(offsetof(FModelProto, ProducerVersion) == 0x000030, "Member 'FModelProto::ProducerVersion' has a wrong offset!");
static_assert(offsetof(FModelProto, Domain) == 0x000040, "Member 'FModelProto::Domain' has a wrong offset!");
static_assert(offsetof(FModelProto, ModelVersion) == 0x000050, "Member 'FModelProto::ModelVersion' has a wrong offset!");
static_assert(offsetof(FModelProto, DocString) == 0x000058, "Member 'FModelProto::DocString' has a wrong offset!");
static_assert(offsetof(FModelProto, Graph) == 0x000068, "Member 'FModelProto::Graph' has a wrong offset!");
static_assert(offsetof(FModelProto, MetadataProps) == 0x000100, "Member 'FModelProto::MetadataProps' has a wrong offset!");
static_assert(offsetof(FModelProto, TrainingInfo) == 0x000110, "Member 'FModelProto::TrainingInfo' has a wrong offset!");

}

