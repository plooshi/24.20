#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NPCConvertedIndicatorMarker

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteAI_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function NPCConvertedIndicatorMarker.NPCConvertedIndicatorMarker_C.ExecuteUbergraph_NPCConvertedIndicatorMarker
// 0x0208 (0x0208 - 0x0000)
struct NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EPingCommandType CommandType)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortWorldMarkerData                   K2Node_Event_FortWorldMarkerData;                  // 0x0018(0x0180)(ConstParm)
	class ABP_PlayerPawn_Tandem_C*                K2Node_DynamicCast_AsBP_Player_Pawn_Tandem;        // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ANPC_Pawn_Wildlife_Parent_C*            K2Node_DynamicCast_AsNPC_Pawn_Wildlife_Parent;     // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortPawnComponent_Convert*             CallFunc_GetComponentByClass_ReturnValue;          // 0x01B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPingCommandType                              K2Node_CustomEvent_CommandType;                    // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetUIColor_ReturnValue;                   // 0x01C4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D5[0x3];                                      // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        CallFunc_GetConverterPawn_ReturnValue;             // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E2[0x6];                                      // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerState*                       CallFunc_AttemptGetPlayerStateForPawn_ReturnValue; // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 K2Node_DynamicCast_AsFort_Player_State_Athena;     // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0202(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0203(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0205(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPingCommandType                              Temp_byte_Variable_9;                              // 0x0206(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0207(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker) == 0x000008, "Wrong alignment on NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker");
static_assert(sizeof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker) == 0x000208, "Wrong size on NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, EntryPoint) == 0x000000, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::EntryPoint' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, Temp_byte_Variable) == 0x000004, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, Temp_byte_Variable_1) == 0x000005, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, Temp_byte_Variable_2) == 0x000006, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, Temp_byte_Variable_3) == 0x000007, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, K2Node_Event_FortWorldMarkerData) == 0x000018, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::K2Node_Event_FortWorldMarkerData' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, K2Node_DynamicCast_AsBP_Player_Pawn_Tandem) == 0x000198, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::K2Node_DynamicCast_AsBP_Player_Pawn_Tandem' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, K2Node_DynamicCast_bSuccess) == 0x0001A0, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, K2Node_DynamicCast_AsNPC_Pawn_Wildlife_Parent) == 0x0001A8, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::K2Node_DynamicCast_AsNPC_Pawn_Wildlife_Parent' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, K2Node_DynamicCast_bSuccess_1) == 0x0001B0, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, CallFunc_GetComponentByClass_ReturnValue) == 0x0001B8, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, K2Node_CustomEvent_CommandType) == 0x0001C0, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::K2Node_CustomEvent_CommandType' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, CallFunc_GetUIColor_ReturnValue) == 0x0001C4, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::CallFunc_GetUIColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, CallFunc_IsValid_ReturnValue) == 0x0001D4, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, CallFunc_GetConverterPawn_ReturnValue) == 0x0001D8, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::CallFunc_GetConverterPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, CallFunc_IsValid_ReturnValue_1) == 0x0001E0, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, CallFunc_IsLocallyControlled_ReturnValue) == 0x0001E1, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, CallFunc_AttemptGetPlayerStateForPawn_ReturnValue) == 0x0001E8, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::CallFunc_AttemptGetPlayerStateForPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, CallFunc_IsValid_ReturnValue_2) == 0x0001F0, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, K2Node_DynamicCast_AsFort_Player_State_Athena) == 0x0001F8, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::K2Node_DynamicCast_AsFort_Player_State_Athena' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, K2Node_DynamicCast_bSuccess_2) == 0x000200, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, Temp_byte_Variable_4) == 0x000201, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, Temp_byte_Variable_5) == 0x000202, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, Temp_byte_Variable_6) == 0x000203, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, Temp_byte_Variable_7) == 0x000204, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, Temp_byte_Variable_8) == 0x000205, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, Temp_byte_Variable_9) == 0x000206, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, K2Node_Select_Default) == 0x000207, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::K2Node_Select_Default' has a wrong offset!");

// Function NPCConvertedIndicatorMarker.NPCConvertedIndicatorMarker_C.OnPingCommandEvent
// 0x0001 (0x0001 - 0x0000)
struct NPCConvertedIndicatorMarker_C_OnPingCommandEvent final
{
public:
	EPingCommandType                              CommandType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NPCConvertedIndicatorMarker_C_OnPingCommandEvent) == 0x000001, "Wrong alignment on NPCConvertedIndicatorMarker_C_OnPingCommandEvent");
static_assert(sizeof(NPCConvertedIndicatorMarker_C_OnPingCommandEvent) == 0x000001, "Wrong size on NPCConvertedIndicatorMarker_C_OnPingCommandEvent");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_OnPingCommandEvent, CommandType) == 0x000000, "Member 'NPCConvertedIndicatorMarker_C_OnPingCommandEvent::CommandType' has a wrong offset!");

// Function NPCConvertedIndicatorMarker.NPCConvertedIndicatorMarker_C.OnSetMarkerData
// 0x0180 (0x0180 - 0x0000)
struct NPCConvertedIndicatorMarker_C_OnSetMarkerData final
{
public:
	struct FFortWorldMarkerData                   FortWorldMarkerData;                               // 0x0000(0x0180)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(NPCConvertedIndicatorMarker_C_OnSetMarkerData) == 0x000008, "Wrong alignment on NPCConvertedIndicatorMarker_C_OnSetMarkerData");
static_assert(sizeof(NPCConvertedIndicatorMarker_C_OnSetMarkerData) == 0x000180, "Wrong size on NPCConvertedIndicatorMarker_C_OnSetMarkerData");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_OnSetMarkerData, FortWorldMarkerData) == 0x000000, "Member 'NPCConvertedIndicatorMarker_C_OnSetMarkerData::FortWorldMarkerData' has a wrong offset!");

}

