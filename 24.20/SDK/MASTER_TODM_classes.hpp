#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MASTER_TODM

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MASTER_TODM.MASTER_TODM_C
// 0x02F0 (0x12E0 - 0x0FF0)
class AMASTER_TODM_C : public AFortTimeOfDayManager
{
public:
	uint8                                         Pad_FE8[0x8];                                      // 0x0FE8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0FF0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  HeavySSAO_Postprocess;                             // 0x0FF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  EditorPostProcessMaterial_HackToWorkAroundTheOutlineShaderBeingInjectedByCodeAtRuntime_; // 0x1000(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         New_Storm_Timeline_Wind_Strength_5E5E494B489306ED044096A143F228CF; // 0x1008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         New_Storm_Timeline_RainInt_5E5E494B489306ED044096A143F228CF; // 0x100C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         New_Storm_Timeline_Lightning_Modulator_5E5E494B489306ED044096A143F228CF; // 0x1010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         New_Storm_Timeline_Storm_Ramp_In_Value_5E5E494B489306ED044096A143F228CF; // 0x1014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            New_Storm_Timeline__Direction_5E5E494B489306ED044096A143F228CF; // 0x1018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1019[0x7];                                     // 0x1019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     New_Storm_Timeline;                                // 0x1020(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         FlashLightning_LightningColorLERP_FA5447C54EBAE729F521C3B243BEC285; // 0x1028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlashLightning_lightning_alpha_FA5447C54EBAE729F521C3B243BEC285; // 0x102C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlashLightning_Lightning_Intensity_FA5447C54EBAE729F521C3B243BEC285; // 0x1030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FlashLightning__Direction_FA5447C54EBAE729F521C3B243BEC285; // 0x1034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1035[0x3];                                     // 0x1035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FlashLightning;                                    // 0x1038(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        WindSpeed;                                         // 0x1040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RandomWeatherWaitTime;                             // 0x1048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentAmountOfRandomWeatherTimeLeft;              // 0x1050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewWeatherLerpAmount;                              // 0x1058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindStrength;                                      // 0x1060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FutureWindStrength;                                // 0x1068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FutureWindSpeed;                                   // 0x1070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPickNewWindConditions;                            // 0x1078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1079[0x7];                                     // 0x1079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LightningStrength;                                 // 0x1080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThreatCloudStormAmount;                            // 0x1088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRainWithStorms;                                 // 0x1090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Play_a_Particle_Effect_Near_the_players_Feet;      // 0x1091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WindEffects_Should_be_Active;                      // 0x1092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1093[0x5];                                     // 0x1093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               Storm_Foot_Particle_Outdoor;                       // 0x1098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Storm_Foot_Particle_While_on_Terrain;              // 0x10A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Storm_Foot_Particle_Indoor;                        // 0x10A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Storm_Foot_Particle_While_NOT_on_Terrain;          // 0x10B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Storm_Wind_Strength;                               // 0x10B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Generate_Foliage_Wind_Gusts;                       // 0x10C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C1[0x7];                                     // 0x10C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LightningStrikeTimerHandle;                        // 0x10C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PreviousDirectionalLightColor;                     // 0x10D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Lightning_Flash_Color;                             // 0x10E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Lightning_Flash_Timeline_Min;                      // 0x10F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Timeline_Max;                      // 0x10F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SkyboxFogMorningColor;                             // 0x1100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SkyboxFogMorningLitColor;                          // 0x1110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogMorningDistance;                          // 0x1120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogMorningDiffuseAmount;                     // 0x1128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogMorningEmissiveAmount;                    // 0x1130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogMorningLitLength;                         // 0x1138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogMorningLitRotation;                       // 0x1140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogMorningLitOffset;                         // 0x1148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SkyboxFogDayColor;                                 // 0x1150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SkyboxFogDayLitColor;                              // 0x1160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogDayDistance;                              // 0x1170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogDayDiffuseAmount;                         // 0x1178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogDayEmissiveAmount;                        // 0x1180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogDayLitLength;                             // 0x1188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogDayLitRotation;                           // 0x1190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogDayLitOffset;                             // 0x1198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SkyboxFogEveningColor;                             // 0x11A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SkyboxFogEveningLitColor;                          // 0x11B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogEveningDistance;                          // 0x11C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogEveningDiffuseAmount;                     // 0x11C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogEveningEmissiveAmount;                    // 0x11D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogEveningLitLength;                         // 0x11D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogEveningLitRotation;                       // 0x11E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogEveningLitOffset;                         // 0x11E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SkyboxFogNightColor;                               // 0x11F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SkyboxFogNightLitColor;                            // 0x1200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogNightDistance;                            // 0x1210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogNightDiffuseAmount;                       // 0x1218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogNightEmissiveAmount;                      // 0x1220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogNightLitLength;                           // 0x1228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogNightLitRotation;                         // 0x1230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkyboxFogNightLitOffset;                           // 0x1238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        World_Border_Cloud_Base_Color_Brightness;          // 0x1240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           World_Border_Cloud_Sub_Surface_Color_and_Opacity;  // 0x1248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableCometDynamicPlacement;                       // 0x1258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1259[0x7];                                     // 0x1259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               Night;                                             // 0x1260(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               Evening;                                           // 0x1280(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               Day;                                               // 0x12A0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               Morning;                                           // 0x12C0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void UpdateSSAO();
	void StartStorm();
	void SetHeavySSAO();
	void ReceiveBeginPlay();
	void New_Storm_Timeline__UpdateFunc();
	void OnStormStart();
	void New_Storm_Timeline__FireOffRain__EventFunc();
	void OnStormEnd();
	void FlashLightning__FinishedFunc();
	void New_Storm_Timeline__FinishedFunc();
	void ExecuteUbergraph_MASTER_TODM(int32 EntryPoint);
	void LightningStrike();
	void EnableHDRRendering();
	void FlashLightning__UpdateFunc();
	void EmptyTransform(struct FTransform* Transform);
	void DisableLightAndFog(bool Enable);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MASTER_TODM_C">();
	}
	static class AMASTER_TODM_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMASTER_TODM_C>();
	}
};
static_assert(alignof(AMASTER_TODM_C) == 0x000010, "Wrong alignment on AMASTER_TODM_C");
static_assert(sizeof(AMASTER_TODM_C) == 0x0012E0, "Wrong size on AMASTER_TODM_C");
static_assert(offsetof(AMASTER_TODM_C, UberGraphFrame) == 0x000FF0, "Member 'AMASTER_TODM_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, HeavySSAO_Postprocess) == 0x000FF8, "Member 'AMASTER_TODM_C::HeavySSAO_Postprocess' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, EditorPostProcessMaterial_HackToWorkAroundTheOutlineShaderBeingInjectedByCodeAtRuntime_) == 0x001000, "Member 'AMASTER_TODM_C::EditorPostProcessMaterial_HackToWorkAroundTheOutlineShaderBeingInjectedByCodeAtRuntime_' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, New_Storm_Timeline_Wind_Strength_5E5E494B489306ED044096A143F228CF) == 0x001008, "Member 'AMASTER_TODM_C::New_Storm_Timeline_Wind_Strength_5E5E494B489306ED044096A143F228CF' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, New_Storm_Timeline_RainInt_5E5E494B489306ED044096A143F228CF) == 0x00100C, "Member 'AMASTER_TODM_C::New_Storm_Timeline_RainInt_5E5E494B489306ED044096A143F228CF' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, New_Storm_Timeline_Lightning_Modulator_5E5E494B489306ED044096A143F228CF) == 0x001010, "Member 'AMASTER_TODM_C::New_Storm_Timeline_Lightning_Modulator_5E5E494B489306ED044096A143F228CF' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, New_Storm_Timeline_Storm_Ramp_In_Value_5E5E494B489306ED044096A143F228CF) == 0x001014, "Member 'AMASTER_TODM_C::New_Storm_Timeline_Storm_Ramp_In_Value_5E5E494B489306ED044096A143F228CF' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, New_Storm_Timeline__Direction_5E5E494B489306ED044096A143F228CF) == 0x001018, "Member 'AMASTER_TODM_C::New_Storm_Timeline__Direction_5E5E494B489306ED044096A143F228CF' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, New_Storm_Timeline) == 0x001020, "Member 'AMASTER_TODM_C::New_Storm_Timeline' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, FlashLightning_LightningColorLERP_FA5447C54EBAE729F521C3B243BEC285) == 0x001028, "Member 'AMASTER_TODM_C::FlashLightning_LightningColorLERP_FA5447C54EBAE729F521C3B243BEC285' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, FlashLightning_lightning_alpha_FA5447C54EBAE729F521C3B243BEC285) == 0x00102C, "Member 'AMASTER_TODM_C::FlashLightning_lightning_alpha_FA5447C54EBAE729F521C3B243BEC285' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, FlashLightning_Lightning_Intensity_FA5447C54EBAE729F521C3B243BEC285) == 0x001030, "Member 'AMASTER_TODM_C::FlashLightning_Lightning_Intensity_FA5447C54EBAE729F521C3B243BEC285' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, FlashLightning__Direction_FA5447C54EBAE729F521C3B243BEC285) == 0x001034, "Member 'AMASTER_TODM_C::FlashLightning__Direction_FA5447C54EBAE729F521C3B243BEC285' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, FlashLightning) == 0x001038, "Member 'AMASTER_TODM_C::FlashLightning' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, WindSpeed) == 0x001040, "Member 'AMASTER_TODM_C::WindSpeed' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, RandomWeatherWaitTime) == 0x001048, "Member 'AMASTER_TODM_C::RandomWeatherWaitTime' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, CurrentAmountOfRandomWeatherTimeLeft) == 0x001050, "Member 'AMASTER_TODM_C::CurrentAmountOfRandomWeatherTimeLeft' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, NewWeatherLerpAmount) == 0x001058, "Member 'AMASTER_TODM_C::NewWeatherLerpAmount' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, WindStrength) == 0x001060, "Member 'AMASTER_TODM_C::WindStrength' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, FutureWindStrength) == 0x001068, "Member 'AMASTER_TODM_C::FutureWindStrength' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, FutureWindSpeed) == 0x001070, "Member 'AMASTER_TODM_C::FutureWindSpeed' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, bPickNewWindConditions) == 0x001078, "Member 'AMASTER_TODM_C::bPickNewWindConditions' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, LightningStrength) == 0x001080, "Member 'AMASTER_TODM_C::LightningStrength' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, ThreatCloudStormAmount) == 0x001088, "Member 'AMASTER_TODM_C::ThreatCloudStormAmount' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, UseRainWithStorms) == 0x001090, "Member 'AMASTER_TODM_C::UseRainWithStorms' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, Play_a_Particle_Effect_Near_the_players_Feet) == 0x001091, "Member 'AMASTER_TODM_C::Play_a_Particle_Effect_Near_the_players_Feet' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, WindEffects_Should_be_Active) == 0x001092, "Member 'AMASTER_TODM_C::WindEffects_Should_be_Active' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, Storm_Foot_Particle_Outdoor) == 0x001098, "Member 'AMASTER_TODM_C::Storm_Foot_Particle_Outdoor' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, Storm_Foot_Particle_While_on_Terrain) == 0x0010A0, "Member 'AMASTER_TODM_C::Storm_Foot_Particle_While_on_Terrain' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, Storm_Foot_Particle_Indoor) == 0x0010A8, "Member 'AMASTER_TODM_C::Storm_Foot_Particle_Indoor' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, Storm_Foot_Particle_While_NOT_on_Terrain) == 0x0010B0, "Member 'AMASTER_TODM_C::Storm_Foot_Particle_While_NOT_on_Terrain' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, Storm_Wind_Strength) == 0x0010B8, "Member 'AMASTER_TODM_C::Storm_Wind_Strength' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, Generate_Foliage_Wind_Gusts) == 0x0010C0, "Member 'AMASTER_TODM_C::Generate_Foliage_Wind_Gusts' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, LightningStrikeTimerHandle) == 0x0010C8, "Member 'AMASTER_TODM_C::LightningStrikeTimerHandle' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, PreviousDirectionalLightColor) == 0x0010D0, "Member 'AMASTER_TODM_C::PreviousDirectionalLightColor' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, Lightning_Flash_Color) == 0x0010E0, "Member 'AMASTER_TODM_C::Lightning_Flash_Color' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, Lightning_Flash_Timeline_Min) == 0x0010F0, "Member 'AMASTER_TODM_C::Lightning_Flash_Timeline_Min' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, Lightning_Flash_Timeline_Max) == 0x0010F8, "Member 'AMASTER_TODM_C::Lightning_Flash_Timeline_Max' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogMorningColor) == 0x001100, "Member 'AMASTER_TODM_C::SkyboxFogMorningColor' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogMorningLitColor) == 0x001110, "Member 'AMASTER_TODM_C::SkyboxFogMorningLitColor' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogMorningDistance) == 0x001120, "Member 'AMASTER_TODM_C::SkyboxFogMorningDistance' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogMorningDiffuseAmount) == 0x001128, "Member 'AMASTER_TODM_C::SkyboxFogMorningDiffuseAmount' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogMorningEmissiveAmount) == 0x001130, "Member 'AMASTER_TODM_C::SkyboxFogMorningEmissiveAmount' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogMorningLitLength) == 0x001138, "Member 'AMASTER_TODM_C::SkyboxFogMorningLitLength' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogMorningLitRotation) == 0x001140, "Member 'AMASTER_TODM_C::SkyboxFogMorningLitRotation' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogMorningLitOffset) == 0x001148, "Member 'AMASTER_TODM_C::SkyboxFogMorningLitOffset' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogDayColor) == 0x001150, "Member 'AMASTER_TODM_C::SkyboxFogDayColor' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogDayLitColor) == 0x001160, "Member 'AMASTER_TODM_C::SkyboxFogDayLitColor' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogDayDistance) == 0x001170, "Member 'AMASTER_TODM_C::SkyboxFogDayDistance' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogDayDiffuseAmount) == 0x001178, "Member 'AMASTER_TODM_C::SkyboxFogDayDiffuseAmount' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogDayEmissiveAmount) == 0x001180, "Member 'AMASTER_TODM_C::SkyboxFogDayEmissiveAmount' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogDayLitLength) == 0x001188, "Member 'AMASTER_TODM_C::SkyboxFogDayLitLength' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogDayLitRotation) == 0x001190, "Member 'AMASTER_TODM_C::SkyboxFogDayLitRotation' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogDayLitOffset) == 0x001198, "Member 'AMASTER_TODM_C::SkyboxFogDayLitOffset' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogEveningColor) == 0x0011A0, "Member 'AMASTER_TODM_C::SkyboxFogEveningColor' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogEveningLitColor) == 0x0011B0, "Member 'AMASTER_TODM_C::SkyboxFogEveningLitColor' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogEveningDistance) == 0x0011C0, "Member 'AMASTER_TODM_C::SkyboxFogEveningDistance' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogEveningDiffuseAmount) == 0x0011C8, "Member 'AMASTER_TODM_C::SkyboxFogEveningDiffuseAmount' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogEveningEmissiveAmount) == 0x0011D0, "Member 'AMASTER_TODM_C::SkyboxFogEveningEmissiveAmount' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogEveningLitLength) == 0x0011D8, "Member 'AMASTER_TODM_C::SkyboxFogEveningLitLength' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogEveningLitRotation) == 0x0011E0, "Member 'AMASTER_TODM_C::SkyboxFogEveningLitRotation' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogEveningLitOffset) == 0x0011E8, "Member 'AMASTER_TODM_C::SkyboxFogEveningLitOffset' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogNightColor) == 0x0011F0, "Member 'AMASTER_TODM_C::SkyboxFogNightColor' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogNightLitColor) == 0x001200, "Member 'AMASTER_TODM_C::SkyboxFogNightLitColor' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogNightDistance) == 0x001210, "Member 'AMASTER_TODM_C::SkyboxFogNightDistance' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogNightDiffuseAmount) == 0x001218, "Member 'AMASTER_TODM_C::SkyboxFogNightDiffuseAmount' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogNightEmissiveAmount) == 0x001220, "Member 'AMASTER_TODM_C::SkyboxFogNightEmissiveAmount' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogNightLitLength) == 0x001228, "Member 'AMASTER_TODM_C::SkyboxFogNightLitLength' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogNightLitRotation) == 0x001230, "Member 'AMASTER_TODM_C::SkyboxFogNightLitRotation' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, SkyboxFogNightLitOffset) == 0x001238, "Member 'AMASTER_TODM_C::SkyboxFogNightLitOffset' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, World_Border_Cloud_Base_Color_Brightness) == 0x001240, "Member 'AMASTER_TODM_C::World_Border_Cloud_Base_Color_Brightness' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, World_Border_Cloud_Sub_Surface_Color_and_Opacity) == 0x001248, "Member 'AMASTER_TODM_C::World_Border_Cloud_Sub_Surface_Color_and_Opacity' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, EnableCometDynamicPlacement) == 0x001258, "Member 'AMASTER_TODM_C::EnableCometDynamicPlacement' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, Night) == 0x001260, "Member 'AMASTER_TODM_C::Night' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, Evening) == 0x001280, "Member 'AMASTER_TODM_C::Evening' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, Day) == 0x0012A0, "Member 'AMASTER_TODM_C::Day' has a wrong offset!");
static_assert(offsetof(AMASTER_TODM_C, Morning) == 0x0012C0, "Member 'AMASTER_TODM_C::Morning' has a wrong offset!");

}

