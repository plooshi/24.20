#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerAugmentsCodeRuntime

#include "Basic.hpp"

#include "FortniteAI_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "AIModule_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "DataRegistry_structs.hpp"
#include "PlayerAugmentsCodeRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class PlayerAugmentsCodeRuntime.FortAthenaAIBotEvaluator_Augments
// 0x0020 (0x00B0 - 0x0090)
class UFortAthenaAIBotEvaluator_Augments final : public UFortAthenaAIBotEvaluator
{
public:
	struct FGameplayTag                           InjectionTag;                                      // 0x0090(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBehaviorTree*                          BehaviorAsset;                                     // 0x0098(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AugmentStatusKeyName;                              // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AugmentItemKeyName;                                // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaAIBotEvaluator_Augments">();
	}
	static class UFortAthenaAIBotEvaluator_Augments* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaAIBotEvaluator_Augments>();
	}
};
static_assert(alignof(UFortAthenaAIBotEvaluator_Augments) == 0x000008, "Wrong alignment on UFortAthenaAIBotEvaluator_Augments");
static_assert(sizeof(UFortAthenaAIBotEvaluator_Augments) == 0x0000B0, "Wrong size on UFortAthenaAIBotEvaluator_Augments");
static_assert(offsetof(UFortAthenaAIBotEvaluator_Augments, InjectionTag) == 0x000090, "Member 'UFortAthenaAIBotEvaluator_Augments::InjectionTag' has a wrong offset!");
static_assert(offsetof(UFortAthenaAIBotEvaluator_Augments, BehaviorAsset) == 0x000098, "Member 'UFortAthenaAIBotEvaluator_Augments::BehaviorAsset' has a wrong offset!");
static_assert(offsetof(UFortAthenaAIBotEvaluator_Augments, AugmentStatusKeyName) == 0x0000A0, "Member 'UFortAthenaAIBotEvaluator_Augments::AugmentStatusKeyName' has a wrong offset!");
static_assert(offsetof(UFortAthenaAIBotEvaluator_Augments, AugmentItemKeyName) == 0x0000A4, "Member 'UFortAthenaAIBotEvaluator_Augments::AugmentItemKeyName' has a wrong offset!");

// Class PlayerAugmentsCodeRuntime.FortAthenaBTTask_Augments
// 0x0018 (0x0088 - 0x0070)
class UFortAthenaBTTask_Augments final : public UBTTaskNode
{
public:
	float                                         MinSelectionTime;                                  // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxSelectionTime;                                  // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AugmentStatusKeyName;                              // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AugmentItemKeyName;                                // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaBTTask_Augments">();
	}
	static class UFortAthenaBTTask_Augments* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaBTTask_Augments>();
	}
};
static_assert(alignof(UFortAthenaBTTask_Augments) == 0x000008, "Wrong alignment on UFortAthenaBTTask_Augments");
static_assert(sizeof(UFortAthenaBTTask_Augments) == 0x000088, "Wrong size on UFortAthenaBTTask_Augments");
static_assert(offsetof(UFortAthenaBTTask_Augments, MinSelectionTime) == 0x000070, "Member 'UFortAthenaBTTask_Augments::MinSelectionTime' has a wrong offset!");
static_assert(offsetof(UFortAthenaBTTask_Augments, MaxSelectionTime) == 0x000074, "Member 'UFortAthenaBTTask_Augments::MaxSelectionTime' has a wrong offset!");
static_assert(offsetof(UFortAthenaBTTask_Augments, AugmentStatusKeyName) == 0x000078, "Member 'UFortAthenaBTTask_Augments::AugmentStatusKeyName' has a wrong offset!");
static_assert(offsetof(UFortAthenaBTTask_Augments, AugmentItemKeyName) == 0x00007C, "Member 'UFortAthenaBTTask_Augments::AugmentItemKeyName' has a wrong offset!");

// Class PlayerAugmentsCodeRuntime.FortAugmentSelectionToolAbility
// 0x0078 (0x0BA0 - 0x0B28)
class UFortAugmentSelectionToolAbility final : public UFortGameplayAbility
{
public:
	class UInputComponent*                        SelectionInputComponent;                           // 0x0B28(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         InputPriority;                                     // 0x0B30(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	int32                                         NumChoices;                                        // 0x0B58(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HighlightedChoiceIndex;                            // 0x0B5C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B60[0x10];                                     // 0x0B60(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         RerollHoldInputSeconds;                            // 0x0B70(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B98[0x8];                                      // 0x0B98(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHighlightSelectionUpdated(int32 NewHighlightedChoiceIndex);
	void OnHoldRerollInputChanged(bool bIsPressed, bool bCompletedHold);
	void OnRerollPressedAndCannotAfford();
	void OnSelectedChoiceIndex(int32 ChoiceIndex);
	void SetHighlightedChoiceIndex(int32 NewChoiceIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAugmentSelectionToolAbility">();
	}
	static class UFortAugmentSelectionToolAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAugmentSelectionToolAbility>();
	}
};
static_assert(alignof(UFortAugmentSelectionToolAbility) == 0x000008, "Wrong alignment on UFortAugmentSelectionToolAbility");
static_assert(sizeof(UFortAugmentSelectionToolAbility) == 0x000BA0, "Wrong size on UFortAugmentSelectionToolAbility");
static_assert(offsetof(UFortAugmentSelectionToolAbility, SelectionInputComponent) == 0x000B28, "Member 'UFortAugmentSelectionToolAbility::SelectionInputComponent' has a wrong offset!");
static_assert(offsetof(UFortAugmentSelectionToolAbility, InputPriority) == 0x000B30, "Member 'UFortAugmentSelectionToolAbility::InputPriority' has a wrong offset!");
static_assert(offsetof(UFortAugmentSelectionToolAbility, NumChoices) == 0x000B58, "Member 'UFortAugmentSelectionToolAbility::NumChoices' has a wrong offset!");
static_assert(offsetof(UFortAugmentSelectionToolAbility, HighlightedChoiceIndex) == 0x000B5C, "Member 'UFortAugmentSelectionToolAbility::HighlightedChoiceIndex' has a wrong offset!");
static_assert(offsetof(UFortAugmentSelectionToolAbility, RerollHoldInputSeconds) == 0x000B70, "Member 'UFortAugmentSelectionToolAbility::RerollHoldInputSeconds' has a wrong offset!");

// Class PlayerAugmentsCodeRuntime.FortBattleRoyalePlayerAugmentSystem
// 0x00A0 (0x0148 - 0x00A8)
class UFortBattleRoyalePlayerAugmentSystem final : public UFortControllerComponent
{
public:
	float                                         ServerGrantingStartedTimestamp;                    // 0x00A8(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnMatchAugmentsResetEvent;                         // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bEnableAugmentCollectionUnlocking;                 // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C1[0xF];                                       // 0x00C1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         NumRollsForUnlock;                                 // 0x00D0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         EnableUnlocking;                                   // 0x00F8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         EnableBRAugmentSystem;                             // 0x0120(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void AuthoritySetServerGrantingStartedTimestamp(float ServerTimestamp);
	void BlueprintAugmentLog(const class FString& message, EBattleRoyaleBPAugmentLogVerbosity Verbosity, bool bAutonomousProxyOnly);
	void BP_GetAugmentController(EFortBRAugmentSystemCastResult* OutExec, class AController** OutController);
	void BP_GetAugmentPlayerPawn(EFortBRAugmentSystemCastResult* OutExec, class AFortPlayerPawn** OutFortPlayerPawn);
	struct FFortAugmentPassiveUnlockResult ChooseUnlockFromList(const TArray<struct FPlayerAugmentLockStatus>& LockedList);
	void HandlePossessedPawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	void OnMatchAugmentsReset();
	void OnPossedPawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	void OnRep_ServerGrantingStartedTimestamp();
	void OnServerAugmentGrantTimestampReplicated(float ServerGrantStartTimestamp);
	void ResetMatchAugments();
	struct FFortAugmentPassiveUnlockResult TryClaimUnlock();
	void TryIncrementUnlockRollCount();

	float GetServerGrantingStartedTimestamp() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattleRoyalePlayerAugmentSystem">();
	}
	static class UFortBattleRoyalePlayerAugmentSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattleRoyalePlayerAugmentSystem>();
	}
};
static_assert(alignof(UFortBattleRoyalePlayerAugmentSystem) == 0x000008, "Wrong alignment on UFortBattleRoyalePlayerAugmentSystem");
static_assert(sizeof(UFortBattleRoyalePlayerAugmentSystem) == 0x000148, "Wrong size on UFortBattleRoyalePlayerAugmentSystem");
static_assert(offsetof(UFortBattleRoyalePlayerAugmentSystem, ServerGrantingStartedTimestamp) == 0x0000A8, "Member 'UFortBattleRoyalePlayerAugmentSystem::ServerGrantingStartedTimestamp' has a wrong offset!");
static_assert(offsetof(UFortBattleRoyalePlayerAugmentSystem, OnMatchAugmentsResetEvent) == 0x0000B0, "Member 'UFortBattleRoyalePlayerAugmentSystem::OnMatchAugmentsResetEvent' has a wrong offset!");
static_assert(offsetof(UFortBattleRoyalePlayerAugmentSystem, bEnableAugmentCollectionUnlocking) == 0x0000C0, "Member 'UFortBattleRoyalePlayerAugmentSystem::bEnableAugmentCollectionUnlocking' has a wrong offset!");
static_assert(offsetof(UFortBattleRoyalePlayerAugmentSystem, NumRollsForUnlock) == 0x0000D0, "Member 'UFortBattleRoyalePlayerAugmentSystem::NumRollsForUnlock' has a wrong offset!");
static_assert(offsetof(UFortBattleRoyalePlayerAugmentSystem, EnableUnlocking) == 0x0000F8, "Member 'UFortBattleRoyalePlayerAugmentSystem::EnableUnlocking' has a wrong offset!");
static_assert(offsetof(UFortBattleRoyalePlayerAugmentSystem, EnableBRAugmentSystem) == 0x000120, "Member 'UFortBattleRoyalePlayerAugmentSystem::EnableBRAugmentSystem' has a wrong offset!");

// Class PlayerAugmentsCodeRuntime.FortCollectionDataEntryPlayerAugment
// 0x0020 (0x0050 - 0x0030)
class UFortCollectionDataEntryPlayerAugment final : public UFortCollectionDataEntry
{
public:
	class UFortPlayerAugmentItemDefinition*       PlayerAugmentItemDefinition;                       // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   AdditionalDescription;                             // 0x0038(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionDataEntryPlayerAugment">();
	}
	static class UFortCollectionDataEntryPlayerAugment* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionDataEntryPlayerAugment>();
	}
};
static_assert(alignof(UFortCollectionDataEntryPlayerAugment) == 0x000008, "Wrong alignment on UFortCollectionDataEntryPlayerAugment");
static_assert(sizeof(UFortCollectionDataEntryPlayerAugment) == 0x000050, "Wrong size on UFortCollectionDataEntryPlayerAugment");
static_assert(offsetof(UFortCollectionDataEntryPlayerAugment, PlayerAugmentItemDefinition) == 0x000030, "Member 'UFortCollectionDataEntryPlayerAugment::PlayerAugmentItemDefinition' has a wrong offset!");
static_assert(offsetof(UFortCollectionDataEntryPlayerAugment, AdditionalDescription) == 0x000038, "Member 'UFortCollectionDataEntryPlayerAugment::AdditionalDescription' has a wrong offset!");

// Class PlayerAugmentsCodeRuntime.FortCollectionDataPlayerAugment
// 0x0000 (0x0090 - 0x0090)
class UFortCollectionDataPlayerAugment final : public UFortCollectionData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCollectionDataPlayerAugment">();
	}
	static class UFortCollectionDataPlayerAugment* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCollectionDataPlayerAugment>();
	}
};
static_assert(alignof(UFortCollectionDataPlayerAugment) == 0x000008, "Wrong alignment on UFortCollectionDataPlayerAugment");
static_assert(sizeof(UFortCollectionDataPlayerAugment) == 0x000090, "Wrong size on UFortCollectionDataPlayerAugment");

// Class PlayerAugmentsCodeRuntime.FortContextualTutorial_MultipleAugmentsQueued
// 0x0000 (0x00F8 - 0x00F8)
class UFortContextualTutorial_MultipleAugmentsQueued final : public UFortContextualTutorial
{
public:
	void ActivationEventCallback(int8 NumPendingAugmentsToGrant);
	void CompletionEventCallback(const bool bIsOpened, const bool bViewingAugmentInventory);
	void HandleBindActivationTrigger(class AFortPlayerControllerZone* FortPCZone);
	void HandleBindCompletionTrigger(class AFortPlayerControllerZone* FortPCZone);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortContextualTutorial_MultipleAugmentsQueued">();
	}
	static class UFortContextualTutorial_MultipleAugmentsQueued* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortContextualTutorial_MultipleAugmentsQueued>();
	}
};
static_assert(alignof(UFortContextualTutorial_MultipleAugmentsQueued) == 0x000008, "Wrong alignment on UFortContextualTutorial_MultipleAugmentsQueued");
static_assert(sizeof(UFortContextualTutorial_MultipleAugmentsQueued) == 0x0000F8, "Wrong size on UFortContextualTutorial_MultipleAugmentsQueued");

// Class PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentGrantingSystem
// 0x0508 (0x05B0 - 0x00A8)
class UFortControllerComponent_AugmentGrantingSystem final : public UFortControllerComponent
{
public:
	TMulticastInlineDelegate<void(bool bCanSelectAugment)> OnCanSelectAugmentChanged;                         // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UFortPlayerAugmentItemDefinition* SelectedAugment)> OnSelectedAugmentForGrant;                         // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UFortControllerComponent_AugmentGrantingSystem* GrantingComponent)> OnAvailableAugmentsForGrantingUpdated;             // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(TArray<class UFortPlayerAugmentItemDefinition*>& IgnoreInRoll)> OnAuthorityRequestAugmentChoices;                  // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnLocalReroll;                                     // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x20];                                      // 0x00F8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int8 NumPendingAugmentsToGrant)> OnReplicateNumPendingAugmentsToGrant;              // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UFortWeaponItemDefinition*              AugmentSelectionModeItem;                          // 0x0128(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortWorldItem*                         SelectionModeWorldItem;                            // 0x0130(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         Enabled;                                           // 0x0138(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int8                                          ReplicatedNumPendingAugmentsToGrant;               // 0x0160(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlayerAugmentChoiceDatum>      ReplicatedAugmentChoices;                          // 0x0168(0x0010)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	int8                                          NumFreeRerolls;                                    // 0x0178(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          NumLockedSelectionChoices;                         // 0x0179(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_17A[0x6];                                      // 0x017A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputComponent*                        PrimaryInputComponentWeaponMode;                   // 0x0180(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInputComponent*                        PrimaryInputComponentBuildMode;                    // 0x0188(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInputComponent*                        TemporaryInputComponent;                           // 0x0190(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         AugmentSelectInputPriority;                        // 0x0198(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  SelectionBlockedPlayerTags;                        // 0x01C0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  AugmentSelectInputDisablePlayerTags;               // 0x01E0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_200[0x28];                                     // 0x0200(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortAugmentRerollCost>         RerollCosts;                                       // 0x0228(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FFortItemEntry                         SelectorItemEntry;                                 // 0x0238(0x01A0)(Net, Transient, RepNotify, NativeAccessSpecifierPrivate)
	struct FFortItemEntry                         LocalCachedPreviousWeapon;                         // 0x03D8(0x01A0)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_578[0x38];                                     // 0x0578(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFortControllerComponent_AugmentGrantingSystem* GetAugmentGrantingComponentFromController(const class AController* Controller);

	void AuthorityGrantFreeReroll();
	void AuthorityGrantNewAugment();
	void AuthorityIncrementLockedSelectionChoices(const int32 NumLocksToAdd);
	void AuthorityRequestSelectionToolItemGrant(class UObject* Instigator);
	void AuthorityResetAugmentData();
	void AuthoritySetAvailableAugmentChoices(const TArray<struct FPlayerAugmentChoiceDatum>& AvailableAugmentsToGrant);
	void ClientSelectAvailableAugmentToGrant(class UFortPlayerAugmentItemDefinition* ChosenAugmentDef);
	void HandleChangedBuildMode(bool bEnteredBuildMode);
	void HandleGamePhaseChanged(EAthenaGamePhase GamePhase);
	void HandleHolsteredEvent();
	void HandlePossessedPawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	void HandleToggleFullscreenMap(bool bVisible);
	void HandleUnHolsteredEvent();
	void OnLocalEquipAugmentSelectionPressed();
	void OnLocalUnequipAugmentSelectionPressed();
	void OnRep_NumFreeRerolls();
	void OnRep_NumLockedSelectionChoices();
	void OnRep_ReplicatedAugmentChoices();
	void OnRep_ReplicatedNumPendingAugmentsToGrant();
	void OnRep_SelectorItemEntry();
	void ServerGrantAugment(class UFortPlayerAugmentItemDefinition* ChosenAugmentDef);
	void ServerRequestReroll();

	bool CanReroll() const;
	TArray<struct FPlayerAugmentChoiceDatum> GetAvailableAugmentsToGrant() const;
	int32 GetNumFreeRerolls() const;
	int32 GetPendingAugmentsToGrant() const;
	bool IsSelectionChoicesLocked() const;
	bool IsSelectionItemEquipped() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerComponent_AugmentGrantingSystem">();
	}
	static class UFortControllerComponent_AugmentGrantingSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerComponent_AugmentGrantingSystem>();
	}
};
static_assert(alignof(UFortControllerComponent_AugmentGrantingSystem) == 0x000008, "Wrong alignment on UFortControllerComponent_AugmentGrantingSystem");
static_assert(sizeof(UFortControllerComponent_AugmentGrantingSystem) == 0x0005B0, "Wrong size on UFortControllerComponent_AugmentGrantingSystem");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, OnCanSelectAugmentChanged) == 0x0000A8, "Member 'UFortControllerComponent_AugmentGrantingSystem::OnCanSelectAugmentChanged' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, OnSelectedAugmentForGrant) == 0x0000B8, "Member 'UFortControllerComponent_AugmentGrantingSystem::OnSelectedAugmentForGrant' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, OnAvailableAugmentsForGrantingUpdated) == 0x0000C8, "Member 'UFortControllerComponent_AugmentGrantingSystem::OnAvailableAugmentsForGrantingUpdated' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, OnAuthorityRequestAugmentChoices) == 0x0000D8, "Member 'UFortControllerComponent_AugmentGrantingSystem::OnAuthorityRequestAugmentChoices' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, OnLocalReroll) == 0x0000E8, "Member 'UFortControllerComponent_AugmentGrantingSystem::OnLocalReroll' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, OnReplicateNumPendingAugmentsToGrant) == 0x000118, "Member 'UFortControllerComponent_AugmentGrantingSystem::OnReplicateNumPendingAugmentsToGrant' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, AugmentSelectionModeItem) == 0x000128, "Member 'UFortControllerComponent_AugmentGrantingSystem::AugmentSelectionModeItem' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, SelectionModeWorldItem) == 0x000130, "Member 'UFortControllerComponent_AugmentGrantingSystem::SelectionModeWorldItem' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, Enabled) == 0x000138, "Member 'UFortControllerComponent_AugmentGrantingSystem::Enabled' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, ReplicatedNumPendingAugmentsToGrant) == 0x000160, "Member 'UFortControllerComponent_AugmentGrantingSystem::ReplicatedNumPendingAugmentsToGrant' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, ReplicatedAugmentChoices) == 0x000168, "Member 'UFortControllerComponent_AugmentGrantingSystem::ReplicatedAugmentChoices' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, NumFreeRerolls) == 0x000178, "Member 'UFortControllerComponent_AugmentGrantingSystem::NumFreeRerolls' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, NumLockedSelectionChoices) == 0x000179, "Member 'UFortControllerComponent_AugmentGrantingSystem::NumLockedSelectionChoices' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, PrimaryInputComponentWeaponMode) == 0x000180, "Member 'UFortControllerComponent_AugmentGrantingSystem::PrimaryInputComponentWeaponMode' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, PrimaryInputComponentBuildMode) == 0x000188, "Member 'UFortControllerComponent_AugmentGrantingSystem::PrimaryInputComponentBuildMode' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, TemporaryInputComponent) == 0x000190, "Member 'UFortControllerComponent_AugmentGrantingSystem::TemporaryInputComponent' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, AugmentSelectInputPriority) == 0x000198, "Member 'UFortControllerComponent_AugmentGrantingSystem::AugmentSelectInputPriority' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, SelectionBlockedPlayerTags) == 0x0001C0, "Member 'UFortControllerComponent_AugmentGrantingSystem::SelectionBlockedPlayerTags' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, AugmentSelectInputDisablePlayerTags) == 0x0001E0, "Member 'UFortControllerComponent_AugmentGrantingSystem::AugmentSelectInputDisablePlayerTags' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, RerollCosts) == 0x000228, "Member 'UFortControllerComponent_AugmentGrantingSystem::RerollCosts' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, SelectorItemEntry) == 0x000238, "Member 'UFortControllerComponent_AugmentGrantingSystem::SelectorItemEntry' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentGrantingSystem, LocalCachedPreviousWeapon) == 0x0003D8, "Member 'UFortControllerComponent_AugmentGrantingSystem::LocalCachedPreviousWeapon' has a wrong offset!");

// Class PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentUIEvents
// 0x00A8 (0x0150 - 0x00A8)
class UFortControllerComponent_AugmentUIEvents final : public UFortControllerComponent
{
public:
	uint8                                         Pad_A8[0x20];                                      // 0x00A8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 ChoiceIndex)> OnAugmentSelectorHighlightedChoice;                // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 ChoiceIndex)> OnAugmentStartedSelectionOfChoice;                 // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAugmentGrantingTimersFinishedForMatch;           // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAugmentGrantingTimersResetForMatch;              // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EAugmentHoldInputRerollState HoldState, float HoldDurationSeconds)> AugmentHoldInputRerollChanged;                     // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool ViewingInventoryAugments)> OnAugmentToolViewSwap;                             // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x18];                                     // 0x0128(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumAugmentGrantRoundsForPlaylist;                  // 0x0140(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_144[0xC];                                      // 0x0144(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleAugmentSelectorOpenedStatusChanged(const bool bIsOpened, const bool bViewingInventory);
	void NotifyGrantingTimersFinished();
	void NotifyGrantingTimersReset();
	void SetNumGrantableAugmentsForPlaylist(const int32 NewNumRounds);
	void UpdatedTimerProgress(float TimeRemaining, float TimePercentage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerComponent_AugmentUIEvents">();
	}
	static class UFortControllerComponent_AugmentUIEvents* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerComponent_AugmentUIEvents>();
	}
};
static_assert(alignof(UFortControllerComponent_AugmentUIEvents) == 0x000008, "Wrong alignment on UFortControllerComponent_AugmentUIEvents");
static_assert(sizeof(UFortControllerComponent_AugmentUIEvents) == 0x000150, "Wrong size on UFortControllerComponent_AugmentUIEvents");
static_assert(offsetof(UFortControllerComponent_AugmentUIEvents, OnAugmentSelectorHighlightedChoice) == 0x0000C8, "Member 'UFortControllerComponent_AugmentUIEvents::OnAugmentSelectorHighlightedChoice' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentUIEvents, OnAugmentStartedSelectionOfChoice) == 0x0000D8, "Member 'UFortControllerComponent_AugmentUIEvents::OnAugmentStartedSelectionOfChoice' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentUIEvents, OnAugmentGrantingTimersFinishedForMatch) == 0x0000E8, "Member 'UFortControllerComponent_AugmentUIEvents::OnAugmentGrantingTimersFinishedForMatch' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentUIEvents, OnAugmentGrantingTimersResetForMatch) == 0x0000F8, "Member 'UFortControllerComponent_AugmentUIEvents::OnAugmentGrantingTimersResetForMatch' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentUIEvents, AugmentHoldInputRerollChanged) == 0x000108, "Member 'UFortControllerComponent_AugmentUIEvents::AugmentHoldInputRerollChanged' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentUIEvents, OnAugmentToolViewSwap) == 0x000118, "Member 'UFortControllerComponent_AugmentUIEvents::OnAugmentToolViewSwap' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_AugmentUIEvents, NumAugmentGrantRoundsForPlaylist) == 0x000140, "Member 'UFortControllerComponent_AugmentUIEvents::NumAugmentGrantRoundsForPlaylist' has a wrong offset!");

// Class PlayerAugmentsCodeRuntime.FortControllerComponent_DynamicRollPlayerComponent
// 0x00F8 (0x01A0 - 0x00A8)
class UFortControllerComponent_DynamicRollPlayerComponent : public UFortControllerComponent
{
public:
	TSubclassOf<class UFortGamestateComponent_DynamicRollTableManager> AssociatedManagerClass;                            // 0x00A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         Enabled;                                           // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UFortGamestateComponent_DynamicRollTableManager* TableManager;                                      // 0x00D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x64];                                      // 0x00E0(0x0064)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRandomStream                          SeededRNG;                                         // 0x0144(0x0008)(ZeroConstructor, Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14C[0x54];                                     // 0x014C(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FFortDynamicRollResult> AuthorityRollChoices(const int32 NumChoices, const TArray<class UFortItemDefinition*>& IgnoreItems);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerComponent_DynamicRollPlayerComponent">();
	}
	static class UFortControllerComponent_DynamicRollPlayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerComponent_DynamicRollPlayerComponent>();
	}
};
static_assert(alignof(UFortControllerComponent_DynamicRollPlayerComponent) == 0x000008, "Wrong alignment on UFortControllerComponent_DynamicRollPlayerComponent");
static_assert(sizeof(UFortControllerComponent_DynamicRollPlayerComponent) == 0x0001A0, "Wrong size on UFortControllerComponent_DynamicRollPlayerComponent");
static_assert(offsetof(UFortControllerComponent_DynamicRollPlayerComponent, AssociatedManagerClass) == 0x0000A8, "Member 'UFortControllerComponent_DynamicRollPlayerComponent::AssociatedManagerClass' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_DynamicRollPlayerComponent, Enabled) == 0x0000B0, "Member 'UFortControllerComponent_DynamicRollPlayerComponent::Enabled' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_DynamicRollPlayerComponent, TableManager) == 0x0000D8, "Member 'UFortControllerComponent_DynamicRollPlayerComponent::TableManager' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_DynamicRollPlayerComponent, SeededRNG) == 0x000144, "Member 'UFortControllerComponent_DynamicRollPlayerComponent::SeededRNG' has a wrong offset!");

// Class PlayerAugmentsCodeRuntime.FortControllerComponent_PlayerAugmentPersistence
// 0x00F8 (0x01A0 - 0x00A8)
class UFortControllerComponent_PlayerAugmentPersistence final : public UFortControllerComponent
{
public:
	struct FScalableFloat                         Enabled;                                           // 0x00A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         LockMissingCollectionAugmentsEnabled;              // 0x00D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class AFortPlayerControllerAthena*            PlayerController;                                  // 0x00F8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortCollectionDataPlayerAugment*       CollectionData;                                    // 0x0100(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPlayerAugmentsPersistenceData         LivePlayerAugmentsPersistenceData;                 // 0x0108(0x0018)(Edit, Net, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPrivate)
	TSet<class UFortPlayerAugmentItemDefinition*> AugmentsCollectedThisMatch;                        // 0x0120(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FReplicatedSharedPlayerAugment> ReplicatedSharedPlayerAugments;                    // 0x0170(0x0010)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x20];                                     // 0x0180(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AuthoritySetCarryOverPlayerAugments(const TArray<struct FCarryOverPlayerAugment>& NewCarryOverPlayerAugments);
	void AuthoritySetRollCountSinceLastRandomUnlock(int32 NewRollCount);
	void AuthorityUnlockPlayerAugment(class UFortPlayerAugmentItemDefinition* PlayerAugmentToUnlock);
	void HandleAthenaGamePhaseChanged(EAthenaGamePhase GamePhase);
	void HandleCollectionDataLoaded(TSoftObjectPtr<class UFortCollectionData> BaseCollectionDataSoftPtr);
	void HandleCollectionDataTableLoaded(TSoftObjectPtr<class UFortCollectionsDataTable> CollectionsDataTableSoftPtr);
	void HandleMcpProfilesInitialized();

	void GetCarryOverPlayerAugments(TArray<struct FCarryOverPlayerAugment>* OutCarryOverPlayerAugments) const;
	void GetLockedList(TArray<struct FPlayerAugmentLockStatus>* OutLockedList, bool bIncludeSharedAugments) const;
	struct FPlayerAugmentLockStatus GetLockStatus(class UFortPlayerAugmentItemDefinition* PlayerAugmentItemDefinition) const;
	void GetLockStatusForAll(TArray<struct FPlayerAugmentLockStatus>* OutLockStatusArray) const;
	int32 GetRollCountSinceLastRandomUnlock() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerComponent_PlayerAugmentPersistence">();
	}
	static class UFortControllerComponent_PlayerAugmentPersistence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerComponent_PlayerAugmentPersistence>();
	}
};
static_assert(alignof(UFortControllerComponent_PlayerAugmentPersistence) == 0x000008, "Wrong alignment on UFortControllerComponent_PlayerAugmentPersistence");
static_assert(sizeof(UFortControllerComponent_PlayerAugmentPersistence) == 0x0001A0, "Wrong size on UFortControllerComponent_PlayerAugmentPersistence");
static_assert(offsetof(UFortControllerComponent_PlayerAugmentPersistence, Enabled) == 0x0000A8, "Member 'UFortControllerComponent_PlayerAugmentPersistence::Enabled' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_PlayerAugmentPersistence, LockMissingCollectionAugmentsEnabled) == 0x0000D0, "Member 'UFortControllerComponent_PlayerAugmentPersistence::LockMissingCollectionAugmentsEnabled' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_PlayerAugmentPersistence, PlayerController) == 0x0000F8, "Member 'UFortControllerComponent_PlayerAugmentPersistence::PlayerController' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_PlayerAugmentPersistence, CollectionData) == 0x000100, "Member 'UFortControllerComponent_PlayerAugmentPersistence::CollectionData' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_PlayerAugmentPersistence, LivePlayerAugmentsPersistenceData) == 0x000108, "Member 'UFortControllerComponent_PlayerAugmentPersistence::LivePlayerAugmentsPersistenceData' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_PlayerAugmentPersistence, AugmentsCollectedThisMatch) == 0x000120, "Member 'UFortControllerComponent_PlayerAugmentPersistence::AugmentsCollectedThisMatch' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_PlayerAugmentPersistence, ReplicatedSharedPlayerAugments) == 0x000170, "Member 'UFortControllerComponent_PlayerAugmentPersistence::ReplicatedSharedPlayerAugments' has a wrong offset!");

// Class PlayerAugmentsCodeRuntime.FortGamestateComponent_DynamicRollTableManager
// 0x0238 (0x02D8 - 0x00A0)
class UFortGamestateComponent_DynamicRollTableManager : public UFortGameStateComponent
{
public:
	uint8                                         Pad_A0[0x30];                                      // 0x00A0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataRegistryType                      DataRegistryType_BaseWeights;                      // 0x00D0(0x0004)(ZeroConstructor, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataRegistryType                      DataRegistryType_WeightModifiers;                  // 0x00D4(0x0004)(ZeroConstructor, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         Enabled;                                           // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_100[0x1D8];                                    // 0x0100(0x01D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePlaylistDataReady(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGamestateComponent_DynamicRollTableManager">();
	}
	static class UFortGamestateComponent_DynamicRollTableManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGamestateComponent_DynamicRollTableManager>();
	}
};
static_assert(alignof(UFortGamestateComponent_DynamicRollTableManager) == 0x000008, "Wrong alignment on UFortGamestateComponent_DynamicRollTableManager");
static_assert(sizeof(UFortGamestateComponent_DynamicRollTableManager) == 0x0002D8, "Wrong size on UFortGamestateComponent_DynamicRollTableManager");
static_assert(offsetof(UFortGamestateComponent_DynamicRollTableManager, DataRegistryType_BaseWeights) == 0x0000D0, "Member 'UFortGamestateComponent_DynamicRollTableManager::DataRegistryType_BaseWeights' has a wrong offset!");
static_assert(offsetof(UFortGamestateComponent_DynamicRollTableManager, DataRegistryType_WeightModifiers) == 0x0000D4, "Member 'UFortGamestateComponent_DynamicRollTableManager::DataRegistryType_WeightModifiers' has a wrong offset!");
static_assert(offsetof(UFortGamestateComponent_DynamicRollTableManager, Enabled) == 0x0000D8, "Member 'UFortGamestateComponent_DynamicRollTableManager::Enabled' has a wrong offset!");

// Class PlayerAugmentsCodeRuntime.FortGamestateComponent_AugmentTableManager
// 0x0050 (0x0328 - 0x02D8)
class UFortGamestateComponent_AugmentTableManager final : public UFortGamestateComponent_DynamicRollTableManager
{
public:
	uint8                                         Pad_2D8[0x50];                                     // 0x02D8(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGamestateComponent_AugmentTableManager">();
	}
	static class UFortGamestateComponent_AugmentTableManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGamestateComponent_AugmentTableManager>();
	}
};
static_assert(alignof(UFortGamestateComponent_AugmentTableManager) == 0x000008, "Wrong alignment on UFortGamestateComponent_AugmentTableManager");
static_assert(sizeof(UFortGamestateComponent_AugmentTableManager) == 0x000328, "Wrong size on UFortGamestateComponent_AugmentTableManager");

// Class PlayerAugmentsCodeRuntime.FortControllerComponent_AugmentDynamicRollPlayerComponent
// 0x0000 (0x01A0 - 0x01A0)
class UFortControllerComponent_AugmentDynamicRollPlayerComponent final : public UFortControllerComponent_DynamicRollPlayerComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerComponent_AugmentDynamicRollPlayerComponent">();
	}
	static class UFortControllerComponent_AugmentDynamicRollPlayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerComponent_AugmentDynamicRollPlayerComponent>();
	}
};
static_assert(alignof(UFortControllerComponent_AugmentDynamicRollPlayerComponent) == 0x000008, "Wrong alignment on UFortControllerComponent_AugmentDynamicRollPlayerComponent");
static_assert(sizeof(UFortControllerComponent_AugmentDynamicRollPlayerComponent) == 0x0001A0, "Wrong size on UFortControllerComponent_AugmentDynamicRollPlayerComponent");

// Class PlayerAugmentsCodeRuntime.FortMcpCollectionPlayerAugment
// 0x0010 (0x00A8 - 0x0098)
class UFortMcpCollectionPlayerAugment final : public UFortMcpCollectionBase
{
public:
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void AddToPlayerCollection(const class AFortPlayerController* PlayerController, const struct FGameplayTag& PlayerAugmentVariantTag);
	static void MarkSeenForPlayer(class AFortPlayerController* PlayerController, const struct FGameplayTag& VariantTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMcpCollectionPlayerAugment">();
	}
	static class UFortMcpCollectionPlayerAugment* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMcpCollectionPlayerAugment>();
	}
};
static_assert(alignof(UFortMcpCollectionPlayerAugment) == 0x000008, "Wrong alignment on UFortMcpCollectionPlayerAugment");
static_assert(sizeof(UFortMcpCollectionPlayerAugment) == 0x0000A8, "Wrong size on UFortMcpCollectionPlayerAugment");

// Class PlayerAugmentsCodeRuntime.FortPlayerAugmentCheatManager
// 0x0000 (0x0028 - 0x0028)
class UFortPlayerAugmentCheatManager final : public UChildCheatManager
{
public:
	void ForceSelectionAugments(const class FString& AugmentNameFirst, const class FString& AugmentNameSecond);
	void GiveAugment(const class FString& AugmentName);
	void GiveAugmentToBots(const class FString& AugmentName);
	void LogPlayerAugmentsLockStatus();
	void RemoveAllAugments();
	void RemoveAllAugmentsFromBots();
	void ResetAugmentGrantingToSeed(const int32 Seed);
	void ServerLogDynamicWeightsForPlayer(bool bVeryDetailedReport);
	void SetPlayerAugmentRollCountSinceLastUnlock(const int32 RollCount);
	void StartAugmentGrantingFlow();

	void CollectAllPlayerAugments() const;
	void CollectPlayerAugment(const class FString& TagMatch) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentCheatManager">();
	}
	static class UFortPlayerAugmentCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentCheatManager>();
	}
};
static_assert(alignof(UFortPlayerAugmentCheatManager) == 0x000008, "Wrong alignment on UFortPlayerAugmentCheatManager");
static_assert(sizeof(UFortPlayerAugmentCheatManager) == 0x000028, "Wrong size on UFortPlayerAugmentCheatManager");

// Class PlayerAugmentsCodeRuntime.FortPlayerStateComponent_PlayerAugmentSystem
// 0x0108 (0x01A8 - 0x00A0)
class UFortPlayerStateComponent_PlayerAugmentSystem : public UFortPlayerStateComponent
{
public:
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UFortPlayerStateComponent_PlayerAugmentSystem* AugmentComponent)> OnAugmentListUpdated;                              // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScalableFloat                         EnableAugmentsFeature;                             // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            DynamicTagGEClass;                                 // 0x00F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<struct FPrimaryAssetId, struct FPlayerAugmentTrackedData> AugmentToRuntimeDataMap;                           // 0x00F8(0x0050)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UFortPlayerAugmentItemDefinition*> ActiveAugments;                                    // 0x0148(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayTag, double>             RuntimeAugmentMatchDataCacheFloat;                 // 0x0158(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	static TArray<class UFortPlayerAugmentItemDefinition*> GetActiveAugments(class AActor* Actor);
	static class UFortPlayerStateComponent_PlayerAugmentSystem* GetAugmentComponent(const class AActor* PlayerContextActor);
	static class UFortPlayerStateComponent_PlayerAugmentSystem* GetAugmentComponentValidated(EAugmentExecResult* OutExec, const class AActor* PlayerContextActor);

	void ClientClearMatchAugmentDataCache();
	double GetAugmentMatchDataCacheFloat(EAugmentExecResult* OutExec, const struct FGameplayTag& TargetAugmentCacheTag);
	void HandleBotPlayerPawnSpawned(class AFortAthenaAIBotController* BotController, class AFortPlayerPawnAthena* BotPawn);
	void HandlePlayerPawnSpawned();
	void OnRep_ActiveAugments();
	void SetAugmentMatchDataCacheFloat(const struct FGameplayTag& TargetAugmentCacheTag, double InData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerStateComponent_PlayerAugmentSystem">();
	}
	static class UFortPlayerStateComponent_PlayerAugmentSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerStateComponent_PlayerAugmentSystem>();
	}
};
static_assert(alignof(UFortPlayerStateComponent_PlayerAugmentSystem) == 0x000008, "Wrong alignment on UFortPlayerStateComponent_PlayerAugmentSystem");
static_assert(sizeof(UFortPlayerStateComponent_PlayerAugmentSystem) == 0x0001A8, "Wrong size on UFortPlayerStateComponent_PlayerAugmentSystem");
static_assert(offsetof(UFortPlayerStateComponent_PlayerAugmentSystem, OnAugmentListUpdated) == 0x0000B8, "Member 'UFortPlayerStateComponent_PlayerAugmentSystem::OnAugmentListUpdated' has a wrong offset!");
static_assert(offsetof(UFortPlayerStateComponent_PlayerAugmentSystem, EnableAugmentsFeature) == 0x0000C8, "Member 'UFortPlayerStateComponent_PlayerAugmentSystem::EnableAugmentsFeature' has a wrong offset!");
static_assert(offsetof(UFortPlayerStateComponent_PlayerAugmentSystem, DynamicTagGEClass) == 0x0000F0, "Member 'UFortPlayerStateComponent_PlayerAugmentSystem::DynamicTagGEClass' has a wrong offset!");
static_assert(offsetof(UFortPlayerStateComponent_PlayerAugmentSystem, AugmentToRuntimeDataMap) == 0x0000F8, "Member 'UFortPlayerStateComponent_PlayerAugmentSystem::AugmentToRuntimeDataMap' has a wrong offset!");
static_assert(offsetof(UFortPlayerStateComponent_PlayerAugmentSystem, ActiveAugments) == 0x000148, "Member 'UFortPlayerStateComponent_PlayerAugmentSystem::ActiveAugments' has a wrong offset!");
static_assert(offsetof(UFortPlayerStateComponent_PlayerAugmentSystem, RuntimeAugmentMatchDataCacheFloat) == 0x000158, "Member 'UFortPlayerStateComponent_PlayerAugmentSystem::RuntimeAugmentMatchDataCacheFloat' has a wrong offset!");

}

