#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RockVehicleRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum RockVehicleRuntime.ERockBoostLogic
// NumValues: 0x0004
enum class ERockBoostLogic : uint8
{
	Standard                                 = 0,
	Recharge                                 = 1,
	Infinite                                 = 2,
	ERockBoostLogic_MAX                      = 3,
};

// ScriptStruct RockVehicleRuntime.RockVehicleState
// 0x00E0 (0x00E0 - 0x0000)
struct FRockVehicleState final
{
public:
	struct FReplicatedPhysicsPawnState            RigidBodyState;                                    // 0x0000(0x0080)(NoDestructor, NativeAccessSpecifierPublic)
	struct FFortAthenaVehicleInputState           PrevDriverInput;                                   // 0x0080(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWheelsOnGround;                                   // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnyWheelsOnGround;                                // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AverageSpringNormal;                               // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRockVehicleState) == 0x000010, "Wrong alignment on FRockVehicleState");
static_assert(sizeof(FRockVehicleState) == 0x0000E0, "Wrong size on FRockVehicleState");
static_assert(offsetof(FRockVehicleState, RigidBodyState) == 0x000000, "Member 'FRockVehicleState::RigidBodyState' has a wrong offset!");
static_assert(offsetof(FRockVehicleState, PrevDriverInput) == 0x000080, "Member 'FRockVehicleState::PrevDriverInput' has a wrong offset!");
static_assert(offsetof(FRockVehicleState, bWheelsOnGround) == 0x0000C0, "Member 'FRockVehicleState::bWheelsOnGround' has a wrong offset!");
static_assert(offsetof(FRockVehicleState, bAnyWheelsOnGround) == 0x0000C1, "Member 'FRockVehicleState::bAnyWheelsOnGround' has a wrong offset!");
static_assert(offsetof(FRockVehicleState, AverageSpringNormal) == 0x0000C8, "Member 'FRockVehicleState::AverageSpringNormal' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.GroundTrailsData
// 0x0010 (0x0010 - 0x0000)
struct FGroundTrailsData final
{
public:
	EPhysicalSurface                              SurfaceType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         NiagaraFX;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroundTrailsData) == 0x000008, "Wrong alignment on FGroundTrailsData");
static_assert(sizeof(FGroundTrailsData) == 0x000010, "Wrong size on FGroundTrailsData");
static_assert(offsetof(FGroundTrailsData, SurfaceType) == 0x000000, "Member 'FGroundTrailsData::SurfaceType' has a wrong offset!");
static_assert(offsetof(FGroundTrailsData, NiagaraFX) == 0x000008, "Member 'FGroundTrailsData::NiagaraFX' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.GroundTrailsMap
// 0x0018 (0x0018 - 0x0000)
struct FGroundTrailsMap final
{
public:
	class UNiagaraSystem*                         DefaultTrails;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGroundTrailsData>              GroundTrails;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroundTrailsMap) == 0x000008, "Wrong alignment on FGroundTrailsMap");
static_assert(sizeof(FGroundTrailsMap) == 0x000018, "Wrong size on FGroundTrailsMap");
static_assert(offsetof(FGroundTrailsMap, DefaultTrails) == 0x000000, "Member 'FGroundTrailsMap::DefaultTrails' has a wrong offset!");
static_assert(offsetof(FGroundTrailsMap, GroundTrails) == 0x000008, "Member 'FGroundTrailsMap::GroundTrails' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockRuntimeConfigOverrides
// 0x0004 (0x0004 - 0x0000)
struct FRockRuntimeConfigOverrides final
{
public:
	bool                                          bDamageFriendlyVehicles;                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageOtherVehicles;                              // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageOwnVehicle;                                 // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageAllowedFromOtherVehicle;                    // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRockRuntimeConfigOverrides) == 0x000001, "Wrong alignment on FRockRuntimeConfigOverrides");
static_assert(sizeof(FRockRuntimeConfigOverrides) == 0x000004, "Wrong size on FRockRuntimeConfigOverrides");
static_assert(offsetof(FRockRuntimeConfigOverrides, bDamageFriendlyVehicles) == 0x000000, "Member 'FRockRuntimeConfigOverrides::bDamageFriendlyVehicles' has a wrong offset!");
static_assert(offsetof(FRockRuntimeConfigOverrides, bDamageOtherVehicles) == 0x000001, "Member 'FRockRuntimeConfigOverrides::bDamageOtherVehicles' has a wrong offset!");
static_assert(offsetof(FRockRuntimeConfigOverrides, bDamageOwnVehicle) == 0x000002, "Member 'FRockRuntimeConfigOverrides::bDamageOwnVehicle' has a wrong offset!");
static_assert(offsetof(FRockRuntimeConfigOverrides, bDamageAllowedFromOtherVehicle) == 0x000003, "Member 'FRockRuntimeConfigOverrides::bDamageAllowedFromOtherVehicle' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockScalableFloat
// 0x0008 (0x0030 - 0x0028)
struct FRockScalableFloat final : public FScalableFloat
{
public:
	float                                         CachedValue;                                       // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockScalableFloat) == 0x000008, "Wrong alignment on FRockScalableFloat");
static_assert(sizeof(FRockScalableFloat) == 0x000030, "Wrong size on FRockScalableFloat");
static_assert(offsetof(FRockScalableFloat, CachedValue) == 0x000028, "Member 'FRockScalableFloat::CachedValue' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.BouncyChassisState
// 0x000C (0x000C - 0x0000)
struct FBouncyChassisState final
{
public:
	float                                         PitchDegrees;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollDegrees;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslationZ;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBouncyChassisState) == 0x000004, "Wrong alignment on FBouncyChassisState");
static_assert(sizeof(FBouncyChassisState) == 0x00000C, "Wrong size on FBouncyChassisState");
static_assert(offsetof(FBouncyChassisState, PitchDegrees) == 0x000000, "Member 'FBouncyChassisState::PitchDegrees' has a wrong offset!");
static_assert(offsetof(FBouncyChassisState, RollDegrees) == 0x000004, "Member 'FBouncyChassisState::RollDegrees' has a wrong offset!");
static_assert(offsetof(FBouncyChassisState, TranslationZ) == 0x000008, "Member 'FBouncyChassisState::TranslationZ' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.AnimNode_RockVehicleController
// 0x0018 (0x00E0 - 0x00C8)
struct FAnimNode_RockVehicleController final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         ChassisBone;                                       // 0x00C8(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBouncyChassisState                    BouncyChassis;                                     // 0x00D4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_RockVehicleController) == 0x000008, "Wrong alignment on FAnimNode_RockVehicleController");
static_assert(sizeof(FAnimNode_RockVehicleController) == 0x0000E0, "Wrong size on FAnimNode_RockVehicleController");
static_assert(offsetof(FAnimNode_RockVehicleController, ChassisBone) == 0x0000C8, "Member 'FAnimNode_RockVehicleController::ChassisBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_RockVehicleController, BouncyChassis) == 0x0000D4, "Member 'FAnimNode_RockVehicleController::BouncyChassis' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockBoxSpringSetup
// 0x0050 (0x0050 - 0x0000)
struct FRockBoxSpringSetup final
{
public:
	struct FVector                                Strength;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Damping;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxDisplacement;                                   // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRockBoxSpringSetup) == 0x000008, "Wrong alignment on FRockBoxSpringSetup");
static_assert(sizeof(FRockBoxSpringSetup) == 0x000050, "Wrong size on FRockBoxSpringSetup");
static_assert(offsetof(FRockBoxSpringSetup, Strength) == 0x000000, "Member 'FRockBoxSpringSetup::Strength' has a wrong offset!");
static_assert(offsetof(FRockBoxSpringSetup, Damping) == 0x000018, "Member 'FRockBoxSpringSetup::Damping' has a wrong offset!");
static_assert(offsetof(FRockBoxSpringSetup, MaxDisplacement) == 0x000030, "Member 'FRockBoxSpringSetup::MaxDisplacement' has a wrong offset!");
static_assert(offsetof(FRockBoxSpringSetup, MaxSpeed) == 0x000048, "Member 'FRockBoxSpringSetup::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FRockBoxSpringSetup, Mass) == 0x00004C, "Member 'FRockBoxSpringSetup::Mass' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockBoxSpring
// 0x00B0 (0x00B0 - 0x0000)
struct FRockBoxSpring final
{
public:
	struct FRockBoxSpringSetup                    Setup;                                             // 0x0000(0x0050)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x60];                                      // 0x0050(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockBoxSpring) == 0x000008, "Wrong alignment on FRockBoxSpring");
static_assert(sizeof(FRockBoxSpring) == 0x0000B0, "Wrong size on FRockBoxSpring");
static_assert(offsetof(FRockBoxSpring, Setup) == 0x000000, "Member 'FRockBoxSpring::Setup' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.SpringSettings
// 0x0008 (0x0008 - 0x0000)
struct FSpringSettings final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpringSettings) == 0x000004, "Wrong alignment on FSpringSettings");
static_assert(sizeof(FSpringSettings) == 0x000008, "Wrong size on FSpringSettings");
static_assert(offsetof(FSpringSettings, Strength) == 0x000000, "Member 'FSpringSettings::Strength' has a wrong offset!");
static_assert(offsetof(FSpringSettings, Damping) == 0x000004, "Member 'FSpringSettings::Damping' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.BouncyChassisSetup
// 0x0058 (0x0058 - 0x0000)
struct FBouncyChassisSetup final
{
public:
	struct FSpringSettings                        PitchSpring;                                       // 0x0000(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PitchMaxAngleDegrees;                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpringSettings                        RollSpring;                                        // 0x000C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RollMaxAngleDegrees;                               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpringSettings                        ZSpring;                                           // 0x0018(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ZMaxDrop;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZMaxRaise;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxDisplacement;                                   // 0x0028(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MassOffset;                                        // 0x0040(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBouncyChassisSetup) == 0x000008, "Wrong alignment on FBouncyChassisSetup");
static_assert(sizeof(FBouncyChassisSetup) == 0x000058, "Wrong size on FBouncyChassisSetup");
static_assert(offsetof(FBouncyChassisSetup, PitchSpring) == 0x000000, "Member 'FBouncyChassisSetup::PitchSpring' has a wrong offset!");
static_assert(offsetof(FBouncyChassisSetup, PitchMaxAngleDegrees) == 0x000008, "Member 'FBouncyChassisSetup::PitchMaxAngleDegrees' has a wrong offset!");
static_assert(offsetof(FBouncyChassisSetup, RollSpring) == 0x00000C, "Member 'FBouncyChassisSetup::RollSpring' has a wrong offset!");
static_assert(offsetof(FBouncyChassisSetup, RollMaxAngleDegrees) == 0x000014, "Member 'FBouncyChassisSetup::RollMaxAngleDegrees' has a wrong offset!");
static_assert(offsetof(FBouncyChassisSetup, ZSpring) == 0x000018, "Member 'FBouncyChassisSetup::ZSpring' has a wrong offset!");
static_assert(offsetof(FBouncyChassisSetup, ZMaxDrop) == 0x000020, "Member 'FBouncyChassisSetup::ZMaxDrop' has a wrong offset!");
static_assert(offsetof(FBouncyChassisSetup, ZMaxRaise) == 0x000024, "Member 'FBouncyChassisSetup::ZMaxRaise' has a wrong offset!");
static_assert(offsetof(FBouncyChassisSetup, MaxDisplacement) == 0x000028, "Member 'FBouncyChassisSetup::MaxDisplacement' has a wrong offset!");
static_assert(offsetof(FBouncyChassisSetup, MassOffset) == 0x000040, "Member 'FBouncyChassisSetup::MassOffset' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.BouncyChassisInstance
// 0x0118 (0x0118 - 0x0000)
struct FBouncyChassisInstance final
{
public:
	struct FRockBoxSpring                         Spring;                                            // 0x0000(0x00B0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x68];                                      // 0x00B0(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBouncyChassisInstance) == 0x000008, "Wrong alignment on FBouncyChassisInstance");
static_assert(sizeof(FBouncyChassisInstance) == 0x000118, "Wrong size on FBouncyChassisInstance");
static_assert(offsetof(FBouncyChassisInstance, Spring) == 0x000000, "Member 'FBouncyChassisInstance::Spring' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityInPersistent
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FRockVehicleAbilityInPersistent
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehicleAbilityInPersistent) == 0x000008, "Wrong alignment on FRockVehicleAbilityInPersistent");
static_assert(sizeof(FRockVehicleAbilityInPersistent) == 0x000008, "Wrong size on FRockVehicleAbilityInPersistent");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityInPersistent_AirControl
// 0x0038 (0x0040 - 0x0008)
struct FRockVehicleAbilityInPersistent_AirControl final : public FRockVehicleAbilityInPersistent
{
public:
	struct FVector                                TorqueAccel;                                       // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TorqueDamping;                                     // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableForDodgeTime;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehicleAbilityInPersistent_AirControl) == 0x000008, "Wrong alignment on FRockVehicleAbilityInPersistent_AirControl");
static_assert(sizeof(FRockVehicleAbilityInPersistent_AirControl) == 0x000040, "Wrong size on FRockVehicleAbilityInPersistent_AirControl");
static_assert(offsetof(FRockVehicleAbilityInPersistent_AirControl, TorqueAccel) == 0x000008, "Member 'FRockVehicleAbilityInPersistent_AirControl::TorqueAccel' has a wrong offset!");
static_assert(offsetof(FRockVehicleAbilityInPersistent_AirControl, TorqueDamping) == 0x000020, "Member 'FRockVehicleAbilityInPersistent_AirControl::TorqueDamping' has a wrong offset!");
static_assert(offsetof(FRockVehicleAbilityInPersistent_AirControl, DisableForDodgeTime) == 0x000038, "Member 'FRockVehicleAbilityInPersistent_AirControl::DisableForDodgeTime' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityInContinuous
// 0x0040 (0x0040 - 0x0000)
struct FRockVehicleAbilityInContinuous
{
public:
	struct FFortAthenaVehicleInputState           InputState;                                        // 0x0000(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRockVehicleAbilityInContinuous) == 0x000008, "Wrong alignment on FRockVehicleAbilityInContinuous");
static_assert(sizeof(FRockVehicleAbilityInContinuous) == 0x000040, "Wrong size on FRockVehicleAbilityInContinuous");
static_assert(offsetof(FRockVehicleAbilityInContinuous, InputState) == 0x000000, "Member 'FRockVehicleAbilityInContinuous::InputState' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityInContinuous_AirControl
// 0x0008 (0x0048 - 0x0040)
struct FRockVehicleAbilityInContinuous_AirControl final : public FRockVehicleAbilityInContinuous
{
public:
	bool                                          bAnyWheelsOnGround;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDodgeActive;                                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoUprightActive;                                // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehicleAbilityInContinuous_AirControl) == 0x000008, "Wrong alignment on FRockVehicleAbilityInContinuous_AirControl");
static_assert(sizeof(FRockVehicleAbilityInContinuous_AirControl) == 0x000048, "Wrong size on FRockVehicleAbilityInContinuous_AirControl");
static_assert(offsetof(FRockVehicleAbilityInContinuous_AirControl, bAnyWheelsOnGround) == 0x000040, "Member 'FRockVehicleAbilityInContinuous_AirControl::bAnyWheelsOnGround' has a wrong offset!");
static_assert(offsetof(FRockVehicleAbilityInContinuous_AirControl, bDodgeActive) == 0x000041, "Member 'FRockVehicleAbilityInContinuous_AirControl::bDodgeActive' has a wrong offset!");
static_assert(offsetof(FRockVehicleAbilityInContinuous_AirControl, bAutoUprightActive) == 0x000042, "Member 'FRockVehicleAbilityInContinuous_AirControl::bAutoUprightActive' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityInPersistent_AutoUpright
// 0x0010 (0x0018 - 0x0008)
struct FRockVehicleAbilityInPersistent_AutoUpright final : public FRockVehicleAbilityInPersistent
{
public:
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehicleAbilityInPersistent_AutoUpright) == 0x000008, "Wrong alignment on FRockVehicleAbilityInPersistent_AutoUpright");
static_assert(sizeof(FRockVehicleAbilityInPersistent_AutoUpright) == 0x000018, "Wrong size on FRockVehicleAbilityInPersistent_AutoUpright");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityInContinuous_AutoUpright
// 0x0010 (0x0050 - 0x0040)
struct FRockVehicleAbilityInContinuous_AutoUpright final : public FRockVehicleAbilityInContinuous
{
public:
	int32                                         LastWorldContactFrame;                             // 0x0040(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWheelsOnGround;                                   // 0x0044(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnyWheelsOnGround;                                // 0x0045(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDodgeActive;                                      // 0x0046(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBodyContact;                                      // 0x0047(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceLastBodyContact;                          // 0x0048(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehicleAbilityInContinuous_AutoUpright) == 0x000008, "Wrong alignment on FRockVehicleAbilityInContinuous_AutoUpright");
static_assert(sizeof(FRockVehicleAbilityInContinuous_AutoUpright) == 0x000050, "Wrong size on FRockVehicleAbilityInContinuous_AutoUpright");
static_assert(offsetof(FRockVehicleAbilityInContinuous_AutoUpright, LastWorldContactFrame) == 0x000040, "Member 'FRockVehicleAbilityInContinuous_AutoUpright::LastWorldContactFrame' has a wrong offset!");
static_assert(offsetof(FRockVehicleAbilityInContinuous_AutoUpright, bWheelsOnGround) == 0x000044, "Member 'FRockVehicleAbilityInContinuous_AutoUpright::bWheelsOnGround' has a wrong offset!");
static_assert(offsetof(FRockVehicleAbilityInContinuous_AutoUpright, bAnyWheelsOnGround) == 0x000045, "Member 'FRockVehicleAbilityInContinuous_AutoUpright::bAnyWheelsOnGround' has a wrong offset!");
static_assert(offsetof(FRockVehicleAbilityInContinuous_AutoUpright, bDodgeActive) == 0x000046, "Member 'FRockVehicleAbilityInContinuous_AutoUpright::bDodgeActive' has a wrong offset!");
static_assert(offsetof(FRockVehicleAbilityInContinuous_AutoUpright, bBodyContact) == 0x000047, "Member 'FRockVehicleAbilityInContinuous_AutoUpright::bBodyContact' has a wrong offset!");
static_assert(offsetof(FRockVehicleAbilityInContinuous_AutoUpright, TimeSinceLastBodyContact) == 0x000048, "Member 'FRockVehicleAbilityInContinuous_AutoUpright::TimeSinceLastBodyContact' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityInPersistent_Boost
// 0x0008 (0x0010 - 0x0008)
struct FRockVehicleAbilityInPersistent_Boost final : public FRockVehicleAbilityInPersistent
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehicleAbilityInPersistent_Boost) == 0x000008, "Wrong alignment on FRockVehicleAbilityInPersistent_Boost");
static_assert(sizeof(FRockVehicleAbilityInPersistent_Boost) == 0x000010, "Wrong size on FRockVehicleAbilityInPersistent_Boost");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityInContinuous_Boost
// 0x0008 (0x0048 - 0x0040)
struct FRockVehicleAbilityInContinuous_Boost final : public FRockVehicleAbilityInContinuous
{
public:
	bool                                          bHasBoost;                                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehicleAbilityInContinuous_Boost) == 0x000008, "Wrong alignment on FRockVehicleAbilityInContinuous_Boost");
static_assert(sizeof(FRockVehicleAbilityInContinuous_Boost) == 0x000048, "Wrong size on FRockVehicleAbilityInContinuous_Boost");
static_assert(offsetof(FRockVehicleAbilityInContinuous_Boost, bHasBoost) == 0x000040, "Member 'FRockVehicleAbilityInContinuous_Boost::bHasBoost' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockDodgeImpulse_PhysicsThread
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FRockDodgeImpulse_PhysicsThread final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockDodgeImpulse_PhysicsThread) == 0x000004, "Wrong alignment on FRockDodgeImpulse_PhysicsThread");
static_assert(sizeof(FRockDodgeImpulse_PhysicsThread) == 0x000008, "Wrong size on FRockDodgeImpulse_PhysicsThread");

// ScriptStruct RockVehicleRuntime.RockDodgeImpulse
// 0x0060 (0x0060 - 0x0000)
struct FRockDodgeImpulse final
{
public:
	struct FRockScalableFloat                     VelocityChange;                                    // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     MaxSpeedScale;                                     // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRockDodgeImpulse) == 0x000008, "Wrong alignment on FRockDodgeImpulse");
static_assert(sizeof(FRockDodgeImpulse) == 0x000060, "Wrong size on FRockDodgeImpulse");
static_assert(offsetof(FRockDodgeImpulse, VelocityChange) == 0x000000, "Member 'FRockDodgeImpulse::VelocityChange' has a wrong offset!");
static_assert(offsetof(FRockDodgeImpulse, MaxSpeedScale) == 0x000030, "Member 'FRockDodgeImpulse::MaxSpeedScale' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityInPersistent_Dodge
// 0x0040 (0x0048 - 0x0008)
struct FRockVehicleAbilityInPersistent_Dodge final : public FRockVehicleAbilityInPersistent
{
public:
	uint8                                         Pad_8[0x40];                                       // 0x0008(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehicleAbilityInPersistent_Dodge) == 0x000008, "Wrong alignment on FRockVehicleAbilityInPersistent_Dodge");
static_assert(sizeof(FRockVehicleAbilityInPersistent_Dodge) == 0x000048, "Wrong size on FRockVehicleAbilityInPersistent_Dodge");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityInContinuous_Dodge
// 0x0008 (0x0048 - 0x0040)
struct FRockVehicleAbilityInContinuous_Dodge final : public FRockVehicleAbilityInContinuous
{
public:
	bool                                          bWheelsOnGround;                                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehicleAbilityInContinuous_Dodge) == 0x000008, "Wrong alignment on FRockVehicleAbilityInContinuous_Dodge");
static_assert(sizeof(FRockVehicleAbilityInContinuous_Dodge) == 0x000048, "Wrong size on FRockVehicleAbilityInContinuous_Dodge");
static_assert(offsetof(FRockVehicleAbilityInContinuous_Dodge, bWheelsOnGround) == 0x000040, "Member 'FRockVehicleAbilityInContinuous_Dodge::bWheelsOnGround' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityInPersistent_DoubleJump
// 0x0008 (0x0010 - 0x0008)
struct FRockVehicleAbilityInPersistent_DoubleJump final : public FRockVehicleAbilityInPersistent
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehicleAbilityInPersistent_DoubleJump) == 0x000008, "Wrong alignment on FRockVehicleAbilityInPersistent_DoubleJump");
static_assert(sizeof(FRockVehicleAbilityInPersistent_DoubleJump) == 0x000010, "Wrong size on FRockVehicleAbilityInPersistent_DoubleJump");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityInPersistent_Flip
// 0x0010 (0x0018 - 0x0008)
struct FRockVehicleAbilityInPersistent_Flip final : public FRockVehicleAbilityInPersistent
{
public:
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehicleAbilityInPersistent_Flip) == 0x000008, "Wrong alignment on FRockVehicleAbilityInPersistent_Flip");
static_assert(sizeof(FRockVehicleAbilityInPersistent_Flip) == 0x000018, "Wrong size on FRockVehicleAbilityInPersistent_Flip");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityInContinuous_Flip
// 0x0008 (0x0048 - 0x0040)
struct FRockVehicleAbilityInContinuous_Flip final : public FRockVehicleAbilityInContinuous
{
public:
	bool                                          bWheelsOnGround;                                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehicleAbilityInContinuous_Flip) == 0x000008, "Wrong alignment on FRockVehicleAbilityInContinuous_Flip");
static_assert(sizeof(FRockVehicleAbilityInContinuous_Flip) == 0x000048, "Wrong size on FRockVehicleAbilityInContinuous_Flip");
static_assert(offsetof(FRockVehicleAbilityInContinuous_Flip, bWheelsOnGround) == 0x000040, "Member 'FRockVehicleAbilityInContinuous_Flip::bWheelsOnGround' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityInPersistent_Jump
// 0x0010 (0x0018 - 0x0008)
struct FRockVehicleAbilityInPersistent_Jump final : public FRockVehicleAbilityInPersistent
{
public:
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehicleAbilityInPersistent_Jump) == 0x000008, "Wrong alignment on FRockVehicleAbilityInPersistent_Jump");
static_assert(sizeof(FRockVehicleAbilityInPersistent_Jump) == 0x000018, "Wrong size on FRockVehicleAbilityInPersistent_Jump");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityOutContinuous
// 0x0001 (0x0001 - 0x0000)
struct FRockVehicleAbilityOutContinuous final
{
public:
	bool                                          bShouldStayActive;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRockVehicleAbilityOutContinuous) == 0x000001, "Wrong alignment on FRockVehicleAbilityOutContinuous");
static_assert(sizeof(FRockVehicleAbilityOutContinuous) == 0x000001, "Wrong size on FRockVehicleAbilityOutContinuous");
static_assert(offsetof(FRockVehicleAbilityOutContinuous, bShouldStayActive) == 0x000000, "Member 'FRockVehicleAbilityOutContinuous::bShouldStayActive' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehicleAbilityOutPersistent
// 0x0004 (0x0004 - 0x0000)
struct FRockVehicleAbilityOutPersistent final
{
public:
	float                                         ActiveSeconds;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRockVehicleAbilityOutPersistent) == 0x000004, "Wrong alignment on FRockVehicleAbilityOutPersistent");
static_assert(sizeof(FRockVehicleAbilityOutPersistent) == 0x000004, "Wrong size on FRockVehicleAbilityOutPersistent");
static_assert(offsetof(FRockVehicleAbilityOutPersistent, ActiveSeconds) == 0x000000, "Member 'FRockVehicleAbilityOutPersistent::ActiveSeconds' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehileAbilityInContinous_StickyWheels
// 0x0020 (0x0060 - 0x0040)
struct FRockVehileAbilityInContinous_StickyWheels final : public FRockVehicleAbilityInContinuous
{
public:
	struct FVector                                ContactNormal;                                     // 0x0040(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnyWheelsOnGround;                                // 0x005C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehileAbilityInContinous_StickyWheels) == 0x000008, "Wrong alignment on FRockVehileAbilityInContinous_StickyWheels");
static_assert(sizeof(FRockVehileAbilityInContinous_StickyWheels) == 0x000060, "Wrong size on FRockVehileAbilityInContinous_StickyWheels");
static_assert(offsetof(FRockVehileAbilityInContinous_StickyWheels, ContactNormal) == 0x000040, "Member 'FRockVehileAbilityInContinous_StickyWheels::ContactNormal' has a wrong offset!");
static_assert(offsetof(FRockVehileAbilityInContinous_StickyWheels, Scale) == 0x000058, "Member 'FRockVehileAbilityInContinous_StickyWheels::Scale' has a wrong offset!");
static_assert(offsetof(FRockVehileAbilityInContinous_StickyWheels, bAnyWheelsOnGround) == 0x00005C, "Member 'FRockVehileAbilityInContinous_StickyWheels::bAnyWheelsOnGround' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehicleAnalyticsSession
// 0x0028 (0x0028 - 0x0000)
struct FRockVehicleAnalyticsSession final
{
public:
	class AFortPlayerController*                  DriverPC;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehicleAnalyticsSession) == 0x000008, "Wrong alignment on FRockVehicleAnalyticsSession");
static_assert(sizeof(FRockVehicleAnalyticsSession) == 0x000028, "Wrong size on FRockVehicleAnalyticsSession");
static_assert(offsetof(FRockVehicleAnalyticsSession, DriverPC) == 0x000000, "Member 'FRockVehicleAnalyticsSession::DriverPC' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehicleWheelAnimInfo
// 0x0014 (0x0014 - 0x0000)
struct FRockVehicleWheelAnimInfo final
{
public:
	float                                         SpringToWheelOffsetZ;                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         SpringTravelRange;                                 // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelRadius;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x4];                                       // 0x0010(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRockVehicleWheelAnimInfo) == 0x000004, "Wrong alignment on FRockVehicleWheelAnimInfo");
static_assert(sizeof(FRockVehicleWheelAnimInfo) == 0x000014, "Wrong size on FRockVehicleWheelAnimInfo");
static_assert(offsetof(FRockVehicleWheelAnimInfo, SpringToWheelOffsetZ) == 0x000000, "Member 'FRockVehicleWheelAnimInfo::SpringToWheelOffsetZ' has a wrong offset!");
static_assert(offsetof(FRockVehicleWheelAnimInfo, SpringTravelRange) == 0x000004, "Member 'FRockVehicleWheelAnimInfo::SpringTravelRange' has a wrong offset!");
static_assert(offsetof(FRockVehicleWheelAnimInfo, WheelRadius) == 0x00000C, "Member 'FRockVehicleWheelAnimInfo::WheelRadius' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockCameraSettings
// 0x001C (0x001C - 0x0000)
struct FRockCameraSettings final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwivelSpeed;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionSpeed;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRockCameraSettings) == 0x000004, "Wrong alignment on FRockCameraSettings");
static_assert(sizeof(FRockCameraSettings) == 0x00001C, "Wrong size on FRockCameraSettings");
static_assert(offsetof(FRockCameraSettings, FOV) == 0x000000, "Member 'FRockCameraSettings::FOV' has a wrong offset!");
static_assert(offsetof(FRockCameraSettings, Height) == 0x000004, "Member 'FRockCameraSettings::Height' has a wrong offset!");
static_assert(offsetof(FRockCameraSettings, Pitch) == 0x000008, "Member 'FRockCameraSettings::Pitch' has a wrong offset!");
static_assert(offsetof(FRockCameraSettings, Distance) == 0x00000C, "Member 'FRockCameraSettings::Distance' has a wrong offset!");
static_assert(offsetof(FRockCameraSettings, Stiffness) == 0x000010, "Member 'FRockCameraSettings::Stiffness' has a wrong offset!");
static_assert(offsetof(FRockCameraSettings, SwivelSpeed) == 0x000014, "Member 'FRockCameraSettings::SwivelSpeed' has a wrong offset!");
static_assert(offsetof(FRockCameraSettings, TransitionSpeed) == 0x000018, "Member 'FRockCameraSettings::TransitionSpeed' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockThrottledValue
// 0x0008 (0x0008 - 0x0000)
struct FRockThrottledValue final
{
public:
	float                                         RiseRate;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallRate;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRockThrottledValue) == 0x000004, "Wrong alignment on FRockThrottledValue");
static_assert(sizeof(FRockThrottledValue) == 0x000008, "Wrong size on FRockThrottledValue");
static_assert(offsetof(FRockThrottledValue, RiseRate) == 0x000000, "Member 'FRockThrottledValue::RiseRate' has a wrong offset!");
static_assert(offsetof(FRockThrottledValue, FallRate) == 0x000004, "Member 'FRockThrottledValue::FallRate' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehicleDriveConfig
// 0x0510 (0x0510 - 0x0000)
struct FRockVehicleDriveConfig final
{
public:
	struct FRockScalableFloat                     DriveAccel;                                        // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     DriveTopSpeed;                                     // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     BrakeAccel;                                        // 0x0060(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockScalableFloat                     StopSpeed;                                         // 0x0090(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         IdleBrakeFactor;                                   // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     DriveAccelCurve;                                   // 0x00C8(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     SteerAngleCurve;                                   // 0x0150(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     LatFrictionCurve;                                  // 0x01D8(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     LongFrictionCurve;                                 // 0x0260(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     WallFrictionCurve;                                 // 0x02E8(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     HandbrakeSteerAngleCurve;                          // 0x0370(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     HandbrakeLatFrictionCurve;                         // 0x03F8(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     HandbrakeLongFrictionCurve;                        // 0x0480(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRockThrottledValue                    HandbrakeRate;                                     // 0x0508(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRockVehicleDriveConfig) == 0x000008, "Wrong alignment on FRockVehicleDriveConfig");
static_assert(sizeof(FRockVehicleDriveConfig) == 0x000510, "Wrong size on FRockVehicleDriveConfig");
static_assert(offsetof(FRockVehicleDriveConfig, DriveAccel) == 0x000000, "Member 'FRockVehicleDriveConfig::DriveAccel' has a wrong offset!");
static_assert(offsetof(FRockVehicleDriveConfig, DriveTopSpeed) == 0x000030, "Member 'FRockVehicleDriveConfig::DriveTopSpeed' has a wrong offset!");
static_assert(offsetof(FRockVehicleDriveConfig, BrakeAccel) == 0x000060, "Member 'FRockVehicleDriveConfig::BrakeAccel' has a wrong offset!");
static_assert(offsetof(FRockVehicleDriveConfig, StopSpeed) == 0x000090, "Member 'FRockVehicleDriveConfig::StopSpeed' has a wrong offset!");
static_assert(offsetof(FRockVehicleDriveConfig, IdleBrakeFactor) == 0x0000C0, "Member 'FRockVehicleDriveConfig::IdleBrakeFactor' has a wrong offset!");
static_assert(offsetof(FRockVehicleDriveConfig, DriveAccelCurve) == 0x0000C8, "Member 'FRockVehicleDriveConfig::DriveAccelCurve' has a wrong offset!");
static_assert(offsetof(FRockVehicleDriveConfig, SteerAngleCurve) == 0x000150, "Member 'FRockVehicleDriveConfig::SteerAngleCurve' has a wrong offset!");
static_assert(offsetof(FRockVehicleDriveConfig, LatFrictionCurve) == 0x0001D8, "Member 'FRockVehicleDriveConfig::LatFrictionCurve' has a wrong offset!");
static_assert(offsetof(FRockVehicleDriveConfig, LongFrictionCurve) == 0x000260, "Member 'FRockVehicleDriveConfig::LongFrictionCurve' has a wrong offset!");
static_assert(offsetof(FRockVehicleDriveConfig, WallFrictionCurve) == 0x0002E8, "Member 'FRockVehicleDriveConfig::WallFrictionCurve' has a wrong offset!");
static_assert(offsetof(FRockVehicleDriveConfig, HandbrakeSteerAngleCurve) == 0x000370, "Member 'FRockVehicleDriveConfig::HandbrakeSteerAngleCurve' has a wrong offset!");
static_assert(offsetof(FRockVehicleDriveConfig, HandbrakeLatFrictionCurve) == 0x0003F8, "Member 'FRockVehicleDriveConfig::HandbrakeLatFrictionCurve' has a wrong offset!");
static_assert(offsetof(FRockVehicleDriveConfig, HandbrakeLongFrictionCurve) == 0x000480, "Member 'FRockVehicleDriveConfig::HandbrakeLongFrictionCurve' has a wrong offset!");
static_assert(offsetof(FRockVehicleDriveConfig, HandbrakeRate) == 0x000508, "Member 'FRockVehicleDriveConfig::HandbrakeRate' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehicleSuspensionConfig
// 0x0020 (0x0020 - 0x0000)
struct FRockVehicleSuspensionConfig final
{
public:
	float                                         MaxRaise;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDrop;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingCompression;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRelaxation;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RockDampingCompression;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RockDampingRelaxation;                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRockVehicleSuspensionConfig) == 0x000004, "Wrong alignment on FRockVehicleSuspensionConfig");
static_assert(sizeof(FRockVehicleSuspensionConfig) == 0x000020, "Wrong size on FRockVehicleSuspensionConfig");
static_assert(offsetof(FRockVehicleSuspensionConfig, MaxRaise) == 0x000000, "Member 'FRockVehicleSuspensionConfig::MaxRaise' has a wrong offset!");
static_assert(offsetof(FRockVehicleSuspensionConfig, MaxDrop) == 0x000004, "Member 'FRockVehicleSuspensionConfig::MaxDrop' has a wrong offset!");
static_assert(offsetof(FRockVehicleSuspensionConfig, Stiffness) == 0x000008, "Member 'FRockVehicleSuspensionConfig::Stiffness' has a wrong offset!");
static_assert(offsetof(FRockVehicleSuspensionConfig, DampingCompression) == 0x00000C, "Member 'FRockVehicleSuspensionConfig::DampingCompression' has a wrong offset!");
static_assert(offsetof(FRockVehicleSuspensionConfig, DampingRelaxation) == 0x000010, "Member 'FRockVehicleSuspensionConfig::DampingRelaxation' has a wrong offset!");
static_assert(offsetof(FRockVehicleSuspensionConfig, Strength) == 0x000014, "Member 'FRockVehicleSuspensionConfig::Strength' has a wrong offset!");
static_assert(offsetof(FRockVehicleSuspensionConfig, RockDampingCompression) == 0x000018, "Member 'FRockVehicleSuspensionConfig::RockDampingCompression' has a wrong offset!");
static_assert(offsetof(FRockVehicleSuspensionConfig, RockDampingRelaxation) == 0x00001C, "Member 'FRockVehicleSuspensionConfig::RockDampingRelaxation' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehicleAxleConfig
// 0x0034 (0x0034 - 0x0000)
struct FRockVehicleAxleConfig final
{
public:
	float                                         TranslateX;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslateY;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslateZ;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelRadius;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RestDistanceZ;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRockVehicleSuspensionConfig           Suspension;                                        // 0x0014(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRockVehicleAxleConfig) == 0x000004, "Wrong alignment on FRockVehicleAxleConfig");
static_assert(sizeof(FRockVehicleAxleConfig) == 0x000034, "Wrong size on FRockVehicleAxleConfig");
static_assert(offsetof(FRockVehicleAxleConfig, TranslateX) == 0x000000, "Member 'FRockVehicleAxleConfig::TranslateX' has a wrong offset!");
static_assert(offsetof(FRockVehicleAxleConfig, TranslateY) == 0x000004, "Member 'FRockVehicleAxleConfig::TranslateY' has a wrong offset!");
static_assert(offsetof(FRockVehicleAxleConfig, TranslateZ) == 0x000008, "Member 'FRockVehicleAxleConfig::TranslateZ' has a wrong offset!");
static_assert(offsetof(FRockVehicleAxleConfig, WheelRadius) == 0x00000C, "Member 'FRockVehicleAxleConfig::WheelRadius' has a wrong offset!");
static_assert(offsetof(FRockVehicleAxleConfig, RestDistanceZ) == 0x000010, "Member 'FRockVehicleAxleConfig::RestDistanceZ' has a wrong offset!");
static_assert(offsetof(FRockVehicleAxleConfig, Suspension) == 0x000014, "Member 'FRockVehicleAxleConfig::Suspension' has a wrong offset!");

// ScriptStruct RockVehicleRuntime.RockVehicleDemoConfig
// 0x0028 (0x0028 - 0x0000)
struct FRockVehicleDemoConfig final
{
public:
	struct FGameplayTagContainer                  VehiclesThatCanBeDemolished;                       // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DemolishAngleYaw;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DemolishAnglePitch;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRockVehicleDemoConfig) == 0x000008, "Wrong alignment on FRockVehicleDemoConfig");
static_assert(sizeof(FRockVehicleDemoConfig) == 0x000028, "Wrong size on FRockVehicleDemoConfig");
static_assert(offsetof(FRockVehicleDemoConfig, VehiclesThatCanBeDemolished) == 0x000000, "Member 'FRockVehicleDemoConfig::VehiclesThatCanBeDemolished' has a wrong offset!");
static_assert(offsetof(FRockVehicleDemoConfig, DemolishAngleYaw) == 0x000020, "Member 'FRockVehicleDemoConfig::DemolishAngleYaw' has a wrong offset!");
static_assert(offsetof(FRockVehicleDemoConfig, DemolishAnglePitch) == 0x000024, "Member 'FRockVehicleDemoConfig::DemolishAnglePitch' has a wrong offset!");

}

