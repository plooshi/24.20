#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayEventRouter

#include "Basic.hpp"


namespace SDK
{

// Enum GameplayEventRouter.EEventBubblingRule
// NumValues: 0x0004
enum class EEventBubblingRule : uint8
{
	None                                     = 0,
	Down                                     = 1,
	Up                                       = 2,
	EEventBubblingRule_MAX                   = 3,
};

// ScriptStruct GameplayEventRouter.GameplayEventId
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FGameplayEventId final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayEventId) == 0x000004, "Wrong alignment on FGameplayEventId");
static_assert(sizeof(FGameplayEventId) == 0x000010, "Wrong size on FGameplayEventId");

// ScriptStruct GameplayEventRouter.GameplayEventListenerHandle
// 0x001C (0x001C - 0x0000)
struct FGameplayEventListenerHandle final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Handle;                                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x8];                                       // 0x0014(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayEventListenerHandle) == 0x000004, "Wrong alignment on FGameplayEventListenerHandle");
static_assert(sizeof(FGameplayEventListenerHandle) == 0x00001C, "Wrong size on FGameplayEventListenerHandle");
static_assert(offsetof(FGameplayEventListenerHandle, Handle) == 0x000010, "Member 'FGameplayEventListenerHandle::Handle' has a wrong offset!");

// ScriptStruct GameplayEventRouter.GameplayEventListenerData
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FGameplayEventListenerData final
{
public:
	uint8                                         Pad_0[0xC0];                                       // 0x0000(0x00C0)(Fixing Size After Last Property [ Dumper-7 ])
	class UScriptStruct*                          EventType;                                         // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventContext;                                      // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x20];                                      // 0x00D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayEventListenerData) == 0x000010, "Wrong alignment on FGameplayEventListenerData");
static_assert(sizeof(FGameplayEventListenerData) == 0x0000F0, "Wrong size on FGameplayEventListenerData");
static_assert(offsetof(FGameplayEventListenerData, EventType) == 0x0000C0, "Member 'FGameplayEventListenerData::EventType' has a wrong offset!");
static_assert(offsetof(FGameplayEventListenerData, EventContext) == 0x0000C8, "Member 'FGameplayEventListenerData::EventContext' has a wrong offset!");

// ScriptStruct GameplayEventRouter.GameplayEventListenerList
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FGameplayEventListenerList final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayEventListenerList) == 0x000008, "Wrong alignment on FGameplayEventListenerList");
static_assert(sizeof(FGameplayEventListenerList) == 0x000038, "Wrong size on FGameplayEventListenerList");

}

