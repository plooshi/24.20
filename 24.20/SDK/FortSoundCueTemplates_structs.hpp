#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortSoundCueTemplates

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct FortSoundCueTemplates.FortContinuousModulatorConfig
// 0x0028 (0x0028 - 0x0000)
struct FFortContinuousModulatorConfig final
{
public:
	struct FVector2D                              VolumeRange;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PitchRange;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModulationParamMode                          VolumeMode;                                        // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModulationParamMode                          PitchMode;                                         // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortContinuousModulatorConfig) == 0x000008, "Wrong alignment on FFortContinuousModulatorConfig");
static_assert(sizeof(FFortContinuousModulatorConfig) == 0x000028, "Wrong size on FFortContinuousModulatorConfig");
static_assert(offsetof(FFortContinuousModulatorConfig, VolumeRange) == 0x000000, "Member 'FFortContinuousModulatorConfig::VolumeRange' has a wrong offset!");
static_assert(offsetof(FFortContinuousModulatorConfig, PitchRange) == 0x000010, "Member 'FFortContinuousModulatorConfig::PitchRange' has a wrong offset!");
static_assert(offsetof(FFortContinuousModulatorConfig, VolumeMode) == 0x000020, "Member 'FFortContinuousModulatorConfig::VolumeMode' has a wrong offset!");
static_assert(offsetof(FFortContinuousModulatorConfig, PitchMode) == 0x000021, "Member 'FFortContinuousModulatorConfig::PitchMode' has a wrong offset!");

// ScriptStruct FortSoundCueTemplates.FortSubmixPair
// 0x0010 (0x0010 - 0x0000)
struct FFortSubmixPair final
{
public:
	class USoundSubmixBase*                       Submix;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SendAmount;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSubmixPair) == 0x000008, "Wrong alignment on FFortSubmixPair");
static_assert(sizeof(FFortSubmixPair) == 0x000010, "Wrong size on FFortSubmixPair");
static_assert(offsetof(FFortSubmixPair, Submix) == 0x000000, "Member 'FFortSubmixPair::Submix' has a wrong offset!");
static_assert(offsetof(FFortSubmixPair, SendAmount) == 0x000008, "Member 'FFortSubmixPair::SendAmount' has a wrong offset!");

// ScriptStruct FortSoundCueTemplates.GliderThrustData
// 0x0058 (0x0058 - 0x0000)
struct FGliderThrustData final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PitchOutput;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              VolumeOutput;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWave*                             sound;                                             // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortContinuousModulatorConfig         Settings;                                          // 0x0030(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGliderThrustData) == 0x000008, "Wrong alignment on FGliderThrustData");
static_assert(sizeof(FGliderThrustData) == 0x000058, "Wrong size on FGliderThrustData");
static_assert(offsetof(FGliderThrustData, ParameterName) == 0x000000, "Member 'FGliderThrustData::ParameterName' has a wrong offset!");
static_assert(offsetof(FGliderThrustData, PitchOutput) == 0x000008, "Member 'FGliderThrustData::PitchOutput' has a wrong offset!");
static_assert(offsetof(FGliderThrustData, VolumeOutput) == 0x000018, "Member 'FGliderThrustData::VolumeOutput' has a wrong offset!");
static_assert(offsetof(FGliderThrustData, sound) == 0x000028, "Member 'FGliderThrustData::sound' has a wrong offset!");
static_assert(offsetof(FGliderThrustData, Settings) == 0x000030, "Member 'FGliderThrustData::Settings' has a wrong offset!");

// ScriptStruct FortSoundCueTemplates.PhysicsStateData
// 0x0090 (0x0090 - 0x0000)
struct FPhysicsStateData final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              VolumeOutput;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PitchOutput;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortContinuousModulatorConfig         Settings;                                          // 0x0028(0x0028)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FDistanceDatum                         CrossfadeInputSlow;                                // 0x0050(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundWave*                             SlowLoop;                                          // 0x0068(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDistanceDatum                         CrossfadeInputFast;                                // 0x0070(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundWave*                             FastLoop;                                          // 0x0088(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsStateData) == 0x000008, "Wrong alignment on FPhysicsStateData");
static_assert(sizeof(FPhysicsStateData) == 0x000090, "Wrong size on FPhysicsStateData");
static_assert(offsetof(FPhysicsStateData, ParameterName) == 0x000000, "Member 'FPhysicsStateData::ParameterName' has a wrong offset!");
static_assert(offsetof(FPhysicsStateData, VolumeOutput) == 0x000008, "Member 'FPhysicsStateData::VolumeOutput' has a wrong offset!");
static_assert(offsetof(FPhysicsStateData, PitchOutput) == 0x000018, "Member 'FPhysicsStateData::PitchOutput' has a wrong offset!");
static_assert(offsetof(FPhysicsStateData, Settings) == 0x000028, "Member 'FPhysicsStateData::Settings' has a wrong offset!");
static_assert(offsetof(FPhysicsStateData, CrossfadeInputSlow) == 0x000050, "Member 'FPhysicsStateData::CrossfadeInputSlow' has a wrong offset!");
static_assert(offsetof(FPhysicsStateData, SlowLoop) == 0x000068, "Member 'FPhysicsStateData::SlowLoop' has a wrong offset!");
static_assert(offsetof(FPhysicsStateData, CrossfadeInputFast) == 0x000070, "Member 'FPhysicsStateData::CrossfadeInputFast' has a wrong offset!");
static_assert(offsetof(FPhysicsStateData, FastLoop) == 0x000088, "Member 'FPhysicsStateData::FastLoop' has a wrong offset!");

// ScriptStruct FortSoundCueTemplates.PhysicsImpactData
// 0x0058 (0x0058 - 0x0000)
struct FPhysicsImpactData final
{
public:
	struct FVector2D                              VolumeOutput;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PitchOutput;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortContinuousModulatorConfig         Settings;                                          // 0x0020(0x0028)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class USoundWave*>                     Variations;                                        // 0x0048(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsImpactData) == 0x000008, "Wrong alignment on FPhysicsImpactData");
static_assert(sizeof(FPhysicsImpactData) == 0x000058, "Wrong size on FPhysicsImpactData");
static_assert(offsetof(FPhysicsImpactData, VolumeOutput) == 0x000000, "Member 'FPhysicsImpactData::VolumeOutput' has a wrong offset!");
static_assert(offsetof(FPhysicsImpactData, PitchOutput) == 0x000010, "Member 'FPhysicsImpactData::PitchOutput' has a wrong offset!");
static_assert(offsetof(FPhysicsImpactData, Settings) == 0x000020, "Member 'FPhysicsImpactData::Settings' has a wrong offset!");
static_assert(offsetof(FPhysicsImpactData, Variations) == 0x000048, "Member 'FPhysicsImpactData::Variations' has a wrong offset!");

}

