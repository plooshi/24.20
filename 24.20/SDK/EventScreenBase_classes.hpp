#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EventScreenBase

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_classes.hpp"
#include "EventScreenBase_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CommonUI_classes.hpp"
#include "UMG_classes.hpp"
#include "CommonInput_structs.hpp"
#include "FortniteUI_classes.hpp"


namespace SDK
{

// Class EventScreenBase.FortEventScreenData
// 0x05F0 (0x0620 - 0x0030)
class UFortEventScreenData final : public UDataAsset
{
public:
	class FString                                 EventCMSId;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountResourceName;                               // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelOfferId;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpsellOfferId;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortChallengeBundleItemDefinition> QuestBundle;                                       // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortItemDefinition>     SpecialRewardItem;                                 // 0x0098(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventScreenTrackData                  FreeTrackData;                                     // 0x00C0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEventScreenTrackData                  PremiumTrackData;                                  // 0x00E0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           QuestCategoryTag;                                  // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class URichTextBlockDecorator>> RichTextDecorators;                                // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     EventBackgroundMaterial;                           // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ProgressBarMaterial;                               // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CurrencyBrush;                                     // 0x0130(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CompletionBannerBrush;                             // 0x01F0(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            GlowForeground;                                    // 0x02B0(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            GlowBackground;                                    // 0x0370(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           EventBackgroundColor1;                             // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EventBackgroundColor2;                             // 0x0440(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RewardBackgroundColor1;                            // 0x0450(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RewardBackgroundColor2;                            // 0x0460(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RewardBackgroundColor3;                            // 0x0470(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AccentColor;                                       // 0x0480(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        RewardTileBackgroundColors;                        // 0x0490(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVaultWorldBackgroundData              PreviewScreenBackgroundData;                       // 0x04E0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   TimeRemainingFormat;                               // 0x0540(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class USoundBase*                             DefaultHoveredSound;                               // 0x0558(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             DefaultPressedSound;                               // 0x0560(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             BuyPressedSound;                                   // 0x0568(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             BuyHoldStartedSound;                               // 0x0570(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             BuyHoldCompletedSound;                             // 0x0578(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             BuyHoldAbortedSound;                               // 0x0580(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             BackPressedSound;                                  // 0x0588(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             AddPressedSound;                                   // 0x0590(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SubtractPressedSound;                              // 0x0598(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ProgressStartedSound;                              // 0x05A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ProgressEndedSound;                                // 0x05A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ProgressInterruptedSound;                          // 0x05B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RewardPreviewZoomLevel;                            // 0x05B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5BC[0x4];                                      // 0x05BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   MoreInfoModalClass;                                // 0x05C0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PurchaseModalClass;                                // 0x05E8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDoubleWidthItem>               DoubleWidthItems;                                  // 0x0610(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventScreenData">();
	}
	static class UFortEventScreenData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventScreenData>();
	}
};
static_assert(alignof(UFortEventScreenData) == 0x000010, "Wrong alignment on UFortEventScreenData");
static_assert(sizeof(UFortEventScreenData) == 0x000620, "Wrong size on UFortEventScreenData");
static_assert(offsetof(UFortEventScreenData, EventCMSId) == 0x000030, "Member 'UFortEventScreenData::EventCMSId' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, AccountResourceName) == 0x000040, "Member 'UFortEventScreenData::AccountResourceName' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, LevelOfferId) == 0x000050, "Member 'UFortEventScreenData::LevelOfferId' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, UpsellOfferId) == 0x000060, "Member 'UFortEventScreenData::UpsellOfferId' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, QuestBundle) == 0x000070, "Member 'UFortEventScreenData::QuestBundle' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, SpecialRewardItem) == 0x000098, "Member 'UFortEventScreenData::SpecialRewardItem' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, FreeTrackData) == 0x0000C0, "Member 'UFortEventScreenData::FreeTrackData' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, PremiumTrackData) == 0x0000E0, "Member 'UFortEventScreenData::PremiumTrackData' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, QuestCategoryTag) == 0x000100, "Member 'UFortEventScreenData::QuestCategoryTag' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, RichTextDecorators) == 0x000108, "Member 'UFortEventScreenData::RichTextDecorators' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, EventBackgroundMaterial) == 0x000118, "Member 'UFortEventScreenData::EventBackgroundMaterial' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, ProgressBarMaterial) == 0x000120, "Member 'UFortEventScreenData::ProgressBarMaterial' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, CurrencyBrush) == 0x000130, "Member 'UFortEventScreenData::CurrencyBrush' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, CompletionBannerBrush) == 0x0001F0, "Member 'UFortEventScreenData::CompletionBannerBrush' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, GlowForeground) == 0x0002B0, "Member 'UFortEventScreenData::GlowForeground' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, GlowBackground) == 0x000370, "Member 'UFortEventScreenData::GlowBackground' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, EventBackgroundColor1) == 0x000430, "Member 'UFortEventScreenData::EventBackgroundColor1' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, EventBackgroundColor2) == 0x000440, "Member 'UFortEventScreenData::EventBackgroundColor2' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, RewardBackgroundColor1) == 0x000450, "Member 'UFortEventScreenData::RewardBackgroundColor1' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, RewardBackgroundColor2) == 0x000460, "Member 'UFortEventScreenData::RewardBackgroundColor2' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, RewardBackgroundColor3) == 0x000470, "Member 'UFortEventScreenData::RewardBackgroundColor3' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, AccentColor) == 0x000480, "Member 'UFortEventScreenData::AccentColor' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, RewardTileBackgroundColors) == 0x000490, "Member 'UFortEventScreenData::RewardTileBackgroundColors' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, PreviewScreenBackgroundData) == 0x0004E0, "Member 'UFortEventScreenData::PreviewScreenBackgroundData' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, TimeRemainingFormat) == 0x000540, "Member 'UFortEventScreenData::TimeRemainingFormat' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, DefaultHoveredSound) == 0x000558, "Member 'UFortEventScreenData::DefaultHoveredSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, DefaultPressedSound) == 0x000560, "Member 'UFortEventScreenData::DefaultPressedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, BuyPressedSound) == 0x000568, "Member 'UFortEventScreenData::BuyPressedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, BuyHoldStartedSound) == 0x000570, "Member 'UFortEventScreenData::BuyHoldStartedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, BuyHoldCompletedSound) == 0x000578, "Member 'UFortEventScreenData::BuyHoldCompletedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, BuyHoldAbortedSound) == 0x000580, "Member 'UFortEventScreenData::BuyHoldAbortedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, BackPressedSound) == 0x000588, "Member 'UFortEventScreenData::BackPressedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, AddPressedSound) == 0x000590, "Member 'UFortEventScreenData::AddPressedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, SubtractPressedSound) == 0x000598, "Member 'UFortEventScreenData::SubtractPressedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, ProgressStartedSound) == 0x0005A0, "Member 'UFortEventScreenData::ProgressStartedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, ProgressEndedSound) == 0x0005A8, "Member 'UFortEventScreenData::ProgressEndedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, ProgressInterruptedSound) == 0x0005B0, "Member 'UFortEventScreenData::ProgressInterruptedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, RewardPreviewZoomLevel) == 0x0005B8, "Member 'UFortEventScreenData::RewardPreviewZoomLevel' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, MoreInfoModalClass) == 0x0005C0, "Member 'UFortEventScreenData::MoreInfoModalClass' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, PurchaseModalClass) == 0x0005E8, "Member 'UFortEventScreenData::PurchaseModalClass' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, DoubleWidthItems) == 0x000610, "Member 'UFortEventScreenData::DoubleWidthItems' has a wrong offset!");

// Class EventScreenBase.FortEventMoreInfoModal
// 0x0018 (0x03C0 - 0x03A8)
class UFortEventMoreInfoModal final : public UCommonActivatableWidget
{
public:
	class UCommonButtonBase*                      Button_Back;                                       // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_CloseMobile;                                // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B8[0x8];                                      // 0x03B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ExitModal();
	void OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData);
	void OnModalBackout();
	void SetModalText(const class FText& Header, const class FText& SubHeader, const class FText& Body, const class FText& Legal);

	const class UFortEventScreenData* GetEventScreenData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventMoreInfoModal">();
	}
	static class UFortEventMoreInfoModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventMoreInfoModal>();
	}
};
static_assert(alignof(UFortEventMoreInfoModal) == 0x000008, "Wrong alignment on UFortEventMoreInfoModal");
static_assert(sizeof(UFortEventMoreInfoModal) == 0x0003C0, "Wrong size on UFortEventMoreInfoModal");
static_assert(offsetof(UFortEventMoreInfoModal, Button_Back) == 0x0003A8, "Member 'UFortEventMoreInfoModal::Button_Back' has a wrong offset!");
static_assert(offsetof(UFortEventMoreInfoModal, Button_CloseMobile) == 0x0003B0, "Member 'UFortEventMoreInfoModal::Button_CloseMobile' has a wrong offset!");

// Class EventScreenBase.FortEventPurchaseModal
// 0x0078 (0x0420 - 0x03A8)
class UFortEventPurchaseModal final : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_3A8[0x8];                                      // 0x03A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      Button_Addition;                                   // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Subtraction;                                // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortHoldableButton*                    Button_Purchase;                                   // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_GetVBucks;                                  // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Back;                                       // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_CloseMobile;                                // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEventScreenListView*                   ListView_RewardPreview;                            // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentResourceValue;                              // 0x03E8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxResourceValue;                                  // 0x03EC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentVBucks;                                     // 0x03F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OfferResourceQuantity;                             // 0x03F4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemDefinition*                    LevelPreviewItem;                                  // 0x03F8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_400[0x20];                                     // 0x0400(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePurchaseComplete(bool bSuccess, const TArray<struct FPurchasedItemInfo>& PurchasedItems, const class FString& InOfferId);
	void OnAmountChangeButtonClicked();
	void OnCMSTextApplied(const class FText& LegalText);
	void OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData);
	void OnPurchaseAmountChanged(const int32 PurchaseQuantity, const int32 ResourceQuantity);
	void OnTotalPriceChanged(const int32 NewPrice);

	const class UFortEventScreenData* GetEventScreenData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventPurchaseModal">();
	}
	static class UFortEventPurchaseModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventPurchaseModal>();
	}
};
static_assert(alignof(UFortEventPurchaseModal) == 0x000008, "Wrong alignment on UFortEventPurchaseModal");
static_assert(sizeof(UFortEventPurchaseModal) == 0x000420, "Wrong size on UFortEventPurchaseModal");
static_assert(offsetof(UFortEventPurchaseModal, Button_Addition) == 0x0003B0, "Member 'UFortEventPurchaseModal::Button_Addition' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseModal, Button_Subtraction) == 0x0003B8, "Member 'UFortEventPurchaseModal::Button_Subtraction' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseModal, Button_Purchase) == 0x0003C0, "Member 'UFortEventPurchaseModal::Button_Purchase' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseModal, Button_GetVBucks) == 0x0003C8, "Member 'UFortEventPurchaseModal::Button_GetVBucks' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseModal, Button_Back) == 0x0003D0, "Member 'UFortEventPurchaseModal::Button_Back' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseModal, Button_CloseMobile) == 0x0003D8, "Member 'UFortEventPurchaseModal::Button_CloseMobile' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseModal, ListView_RewardPreview) == 0x0003E0, "Member 'UFortEventPurchaseModal::ListView_RewardPreview' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseModal, CurrentResourceValue) == 0x0003E8, "Member 'UFortEventPurchaseModal::CurrentResourceValue' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseModal, MaxResourceValue) == 0x0003EC, "Member 'UFortEventPurchaseModal::MaxResourceValue' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseModal, CurrentVBucks) == 0x0003F0, "Member 'UFortEventPurchaseModal::CurrentVBucks' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseModal, OfferResourceQuantity) == 0x0003F4, "Member 'UFortEventPurchaseModal::OfferResourceQuantity' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseModal, LevelPreviewItem) == 0x0003F8, "Member 'UFortEventPurchaseModal::LevelPreviewItem' has a wrong offset!");

// Class EventScreenBase.FortEventListViewWidgetBase
// 0x0008 (0x0270 - 0x0268)
class UFortEventListViewWidgetBase : public UUserWidget
{
public:
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventListViewWidgetBase">();
	}
	static class UFortEventListViewWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventListViewWidgetBase>();
	}
};
static_assert(alignof(UFortEventListViewWidgetBase) == 0x000008, "Wrong alignment on UFortEventListViewWidgetBase");
static_assert(sizeof(UFortEventListViewWidgetBase) == 0x000270, "Wrong size on UFortEventListViewWidgetBase");

// Class EventScreenBase.FortEventRewardTracksWidget
// 0x0050 (0x02C0 - 0x0270)
class UFortEventRewardTracksWidget final : public UFortEventListViewWidgetBase
{
public:
	class UDynamicEntryBox*                       DynamicEntryBox_RewardTracks;                      // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPreviewMode;                                      // 0x0278(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_279[0x47];                                     // 0x0279(0x0047)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPOnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData);
	void BPOnSetRewardItem(const int32 RequiredProgress, const int32 RemainingProgress, const float RewardProgressPercent, const float PreviewProgressPercent, const float OverallProgressPercent, const bool bInPreviewMode);
	void BPSetAllRewardsCollected(const bool bAllCollected);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventRewardTracksWidget">();
	}
	static class UFortEventRewardTracksWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventRewardTracksWidget>();
	}
};
static_assert(alignof(UFortEventRewardTracksWidget) == 0x000008, "Wrong alignment on UFortEventRewardTracksWidget");
static_assert(sizeof(UFortEventRewardTracksWidget) == 0x0002C0, "Wrong size on UFortEventRewardTracksWidget");
static_assert(offsetof(UFortEventRewardTracksWidget, DynamicEntryBox_RewardTracks) == 0x000270, "Member 'UFortEventRewardTracksWidget::DynamicEntryBox_RewardTracks' has a wrong offset!");
static_assert(offsetof(UFortEventRewardTracksWidget, bPreviewMode) == 0x000278, "Member 'UFortEventRewardTracksWidget::bPreviewMode' has a wrong offset!");

// Class EventScreenBase.FortEventSpacerWidget
// 0x0000 (0x0270 - 0x0270)
class UFortEventSpacerWidget final : public UFortEventListViewWidgetBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventSpacerWidget">();
	}
	static class UFortEventSpacerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventSpacerWidget>();
	}
};
static_assert(alignof(UFortEventSpacerWidget) == 0x000008, "Wrong alignment on UFortEventSpacerWidget");
static_assert(sizeof(UFortEventSpacerWidget) == 0x000270, "Wrong size on UFortEventSpacerWidget");

// Class EventScreenBase.FortEventRewardWidget
// 0x0080 (0x02E8 - 0x0268)
class UFortEventRewardWidget final : public UUserWidget
{
public:
	class UCommonButtonBase*                      Button_RewardPreview;                              // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCosmeticItemCard*                  UserWidget_ItemCard;                               // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPreviewMode;                                      // 0x0278(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_279[0x6F];                                     // 0x0279(0x006F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData);
	void OnInputMethodChanged(const ECommonInputType NewInputType);
	void OnSetRewardItem(const int32 RequiredProgress, const int32 RemainingProgress, const float RewardProgressPercent, const float PreviewProgressPercent, const float OverallProgressPercent, const bool bInPreviewMode);
	void SetAllRewardsCollected(const bool bAllCollected);
	void SetCustomItemIcon(const class UTexture2D* CustomItemIcon);
	void SetDoubleWidth(const bool bDoubleWidth);
	void SetInPreviewedState(const bool bPreviewed);
	void SetInPreviewSelectedState(const bool bSelected);
	void SetInSelectedState(const bool bSelected);
	void SetIsBannerItem(const bool bIsBanner);
	void SetProgressPercent(const float Percent);
	void SetTrackData(const struct FEventScreenTrackData& TrackData);

	const class UFortEventScreenData* GetEventScreenData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventRewardWidget">();
	}
	static class UFortEventRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventRewardWidget>();
	}
};
static_assert(alignof(UFortEventRewardWidget) == 0x000008, "Wrong alignment on UFortEventRewardWidget");
static_assert(sizeof(UFortEventRewardWidget) == 0x0002E8, "Wrong size on UFortEventRewardWidget");
static_assert(offsetof(UFortEventRewardWidget, Button_RewardPreview) == 0x000268, "Member 'UFortEventRewardWidget::Button_RewardPreview' has a wrong offset!");
static_assert(offsetof(UFortEventRewardWidget, UserWidget_ItemCard) == 0x000270, "Member 'UFortEventRewardWidget::UserWidget_ItemCard' has a wrong offset!");
static_assert(offsetof(UFortEventRewardWidget, bPreviewMode) == 0x000278, "Member 'UFortEventRewardWidget::bPreviewMode' has a wrong offset!");

// Class EventScreenBase.FortEventScreenBase
// 0x02F0 (0x0960 - 0x0670)
class UFortEventScreenBase final : public UFortItemPreviewScreen
{
public:
	uint8                                         Pad_670[0x8];                                      // 0x0670(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNamedSlot*>                     LayoutTemplateSlots;                               // 0x0678(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Panel_LandingScreen;                               // 0x0688(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLazyImage*                         LazyImage_KeyArt;                                  // 0x0690(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_ViewQuests;                                 // 0x0698(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_MoreInfo;                                   // 0x06A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_PurchaseReward;                             // 0x06A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Preview;                                    // 0x06B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_ShowInItemShop;                             // 0x06B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Panel_RewardPreview;                               // 0x06C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Previous;                                   // 0x06C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Next;                                       // 0x06D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Panel_LoadError;                                   // 0x06D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Close;                                      // 0x06E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_MobileClose;                                // 0x06E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_ItemDescription;                              // 0x06F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_ItemName;                                     // 0x06F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_SetDetails;                                   // 0x0700(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAthenaRewardItemTypeRarityTag*         ItemRewardTag;                                     // 0x0708(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortEventScreenData*                   EventScreenData;                                   // 0x0710(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortChallengeBundleItemDefinition*     LoadedQuestBundle;                                 // 0x0718(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortItemPreviewWorld*                  CachedVaultWorld;                                  // 0x0720(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_728[0x10];                                     // 0x0728(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeBetweenVariantsRestart;                        // 0x0738(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeBetweenVariants;                               // 0x073C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FFortCosmeticVariantPreview>    CachedVariantPreviews;                             // 0x0740(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UFortItem*                              DefaultItemToPreview;                              // 0x0750(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_758[0x208];                                    // 0x0758(0x0208)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleGiftBoxClosed();
	void HandleItemShown(const class UFortAccountItemDefinition* AccountItemDef);
	void HandleToggleFullscreenMap(bool bVisible);
	void OnScreenViewEntered(const EEventScreenView NewScreenView);
	void RegisterLayoutSlots();
	void SetItemShopCallout(const class FText& ItemShopCalloutText);
	void SetItemShopOfferInfoVisibility(bool bIsVisible);
	void SetRewardTrackLegal(const class FText& LegalText);
	void UpdateVariantCounter(int32 CurrentVariantIndex, int32 TotalNumVariants);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventScreenBase">();
	}
	static class UFortEventScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventScreenBase>();
	}
};
static_assert(alignof(UFortEventScreenBase) == 0x000008, "Wrong alignment on UFortEventScreenBase");
static_assert(sizeof(UFortEventScreenBase) == 0x000960, "Wrong size on UFortEventScreenBase");
static_assert(offsetof(UFortEventScreenBase, LayoutTemplateSlots) == 0x000678, "Member 'UFortEventScreenBase::LayoutTemplateSlots' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Panel_LandingScreen) == 0x000688, "Member 'UFortEventScreenBase::Panel_LandingScreen' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, LazyImage_KeyArt) == 0x000690, "Member 'UFortEventScreenBase::LazyImage_KeyArt' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_ViewQuests) == 0x000698, "Member 'UFortEventScreenBase::Button_ViewQuests' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_MoreInfo) == 0x0006A0, "Member 'UFortEventScreenBase::Button_MoreInfo' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_PurchaseReward) == 0x0006A8, "Member 'UFortEventScreenBase::Button_PurchaseReward' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_Preview) == 0x0006B0, "Member 'UFortEventScreenBase::Button_Preview' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_ShowInItemShop) == 0x0006B8, "Member 'UFortEventScreenBase::Button_ShowInItemShop' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Panel_RewardPreview) == 0x0006C0, "Member 'UFortEventScreenBase::Panel_RewardPreview' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_Previous) == 0x0006C8, "Member 'UFortEventScreenBase::Button_Previous' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_Next) == 0x0006D0, "Member 'UFortEventScreenBase::Button_Next' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Panel_LoadError) == 0x0006D8, "Member 'UFortEventScreenBase::Panel_LoadError' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_Close) == 0x0006E0, "Member 'UFortEventScreenBase::Button_Close' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_MobileClose) == 0x0006E8, "Member 'UFortEventScreenBase::Button_MobileClose' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Text_ItemDescription) == 0x0006F0, "Member 'UFortEventScreenBase::Text_ItemDescription' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Text_ItemName) == 0x0006F8, "Member 'UFortEventScreenBase::Text_ItemName' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Text_SetDetails) == 0x000700, "Member 'UFortEventScreenBase::Text_SetDetails' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, ItemRewardTag) == 0x000708, "Member 'UFortEventScreenBase::ItemRewardTag' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, EventScreenData) == 0x000710, "Member 'UFortEventScreenBase::EventScreenData' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, LoadedQuestBundle) == 0x000718, "Member 'UFortEventScreenBase::LoadedQuestBundle' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, CachedVaultWorld) == 0x000720, "Member 'UFortEventScreenBase::CachedVaultWorld' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, TimeBetweenVariantsRestart) == 0x000738, "Member 'UFortEventScreenBase::TimeBetweenVariantsRestart' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, TimeBetweenVariants) == 0x00073C, "Member 'UFortEventScreenBase::TimeBetweenVariants' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, CachedVariantPreviews) == 0x000740, "Member 'UFortEventScreenBase::CachedVariantPreviews' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, DefaultItemToPreview) == 0x000750, "Member 'UFortEventScreenBase::DefaultItemToPreview' has a wrong offset!");

// Class EventScreenBase.EventScreenListView
// 0x01A8 (0x0408 - 0x0260)
class UEventScreenListView final : public UListViewBase
{
public:
	uint8                                         Pad_260[0xD8];                                     // 0x0260(0x00D8)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnProgressBarAnimationStartedEvent;                // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnProgressBarAnimationCompletedEvent;              // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnProgressBarAnimationInterruptedEvent;            // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_368[0x20];                                     // 0x0368(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortEventRewardTracksWidget> RewardTrackWidgetClass;                            // 0x0388(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortEventSpacerWidget>     SpacerWidgetClass;                                 // 0x0390(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EntrySpacing;                                      // 0x0398(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxItemsInView;                                    // 0x039C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPreviewMode;                                      // 0x03A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ProgressAnimationCurve;                            // 0x03A8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B0[0x58];                                     // 0x03B0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const class UFortEventScreenData* GetEventScreenData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventScreenListView">();
	}
	static class UEventScreenListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventScreenListView>();
	}
};
static_assert(alignof(UEventScreenListView) == 0x000008, "Wrong alignment on UEventScreenListView");
static_assert(sizeof(UEventScreenListView) == 0x000408, "Wrong size on UEventScreenListView");
static_assert(offsetof(UEventScreenListView, OnProgressBarAnimationStartedEvent) == 0x000338, "Member 'UEventScreenListView::OnProgressBarAnimationStartedEvent' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, OnProgressBarAnimationCompletedEvent) == 0x000348, "Member 'UEventScreenListView::OnProgressBarAnimationCompletedEvent' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, OnProgressBarAnimationInterruptedEvent) == 0x000358, "Member 'UEventScreenListView::OnProgressBarAnimationInterruptedEvent' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, RewardTrackWidgetClass) == 0x000388, "Member 'UEventScreenListView::RewardTrackWidgetClass' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, SpacerWidgetClass) == 0x000390, "Member 'UEventScreenListView::SpacerWidgetClass' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, EntrySpacing) == 0x000398, "Member 'UEventScreenListView::EntrySpacing' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, MaxItemsInView) == 0x00039C, "Member 'UEventScreenListView::MaxItemsInView' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, bPreviewMode) == 0x0003A0, "Member 'UEventScreenListView::bPreviewMode' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, ProgressAnimationCurve) == 0x0003A8, "Member 'UEventScreenListView::ProgressAnimationCurve' has a wrong offset!");

// Class EventScreenBase.FortEventTokenCollectionWidget
// 0x0070 (0x02D8 - 0x0268)
class UFortEventTokenCollectionWidget final : public UUserWidget
{
public:
	class UCommonLazyImage*                       LazyImage_GhostIcon;                               // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonLazyImage*                       LazyImage_CompletedIcon;                           // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Image_Glow;                                        // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              FallbackBrush;                                     // 0x0280(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UFortTokenType>          TokenDefinition;                                   // 0x02A8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D0[0x8];                                      // 0x02D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRefreshIcon(const bool IsCollected);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTokenCollectionWidget">();
	}
	static class UFortEventTokenCollectionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTokenCollectionWidget>();
	}
};
static_assert(alignof(UFortEventTokenCollectionWidget) == 0x000008, "Wrong alignment on UFortEventTokenCollectionWidget");
static_assert(sizeof(UFortEventTokenCollectionWidget) == 0x0002D8, "Wrong size on UFortEventTokenCollectionWidget");
static_assert(offsetof(UFortEventTokenCollectionWidget, LazyImage_GhostIcon) == 0x000268, "Member 'UFortEventTokenCollectionWidget::LazyImage_GhostIcon' has a wrong offset!");
static_assert(offsetof(UFortEventTokenCollectionWidget, LazyImage_CompletedIcon) == 0x000270, "Member 'UFortEventTokenCollectionWidget::LazyImage_CompletedIcon' has a wrong offset!");
static_assert(offsetof(UFortEventTokenCollectionWidget, Image_Glow) == 0x000278, "Member 'UFortEventTokenCollectionWidget::Image_Glow' has a wrong offset!");
static_assert(offsetof(UFortEventTokenCollectionWidget, FallbackBrush) == 0x000280, "Member 'UFortEventTokenCollectionWidget::FallbackBrush' has a wrong offset!");
static_assert(offsetof(UFortEventTokenCollectionWidget, TokenDefinition) == 0x0002A8, "Member 'UFortEventTokenCollectionWidget::TokenDefinition' has a wrong offset!");

// Class EventScreenBase.FortEventTrackerModule
// 0x0008 (0x0270 - 0x0268)
class UFortEventTrackerModule : public UUserWidget
{
public:
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnModuleInitialized(const class UFortEventScreenData* InEventScreenData);

	const class UFortEventScreenData* GetEventScreenData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule">();
	}
	static class UFortEventTrackerModule* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule>();
	}
};
static_assert(alignof(UFortEventTrackerModule) == 0x000008, "Wrong alignment on UFortEventTrackerModule");
static_assert(sizeof(UFortEventTrackerModule) == 0x000270, "Wrong size on UFortEventTrackerModule");

// Class EventScreenBase.FortEventTrackerModule_EventDetails
// 0x0000 (0x0270 - 0x0270)
class UFortEventTrackerModule_EventDetails final : public UFortEventTrackerModule
{
public:
	void OnPopulateEventDetailsText(const class FText& OutEventName, const class FText& OutEventDescription);
	void UpdateEventTimeRemaining(const class FText& OutEventTimeRemaining);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule_EventDetails">();
	}
	static class UFortEventTrackerModule_EventDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule_EventDetails>();
	}
};
static_assert(alignof(UFortEventTrackerModule_EventDetails) == 0x000008, "Wrong alignment on UFortEventTrackerModule_EventDetails");
static_assert(sizeof(UFortEventTrackerModule_EventDetails) == 0x000270, "Wrong size on UFortEventTrackerModule_EventDetails");

// Class EventScreenBase.FortEventTrackerModule_Header
// 0x0000 (0x0270 - 0x0270)
class UFortEventTrackerModule_Header final : public UFortEventTrackerModule
{
public:
	void OnPopulateEventResourceHeader(const class FText& Header, const int32 ResourceValue);
	void OnPopulateEventResourceStarterHeader(const class FText& Header);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule_Header">();
	}
	static class UFortEventTrackerModule_Header* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule_Header>();
	}
};
static_assert(alignof(UFortEventTrackerModule_Header) == 0x000008, "Wrong alignment on UFortEventTrackerModule_Header");
static_assert(sizeof(UFortEventTrackerModule_Header) == 0x000270, "Wrong size on UFortEventTrackerModule_Header");

// Class EventScreenBase.FortEventTrackerModule_RewardDetails
// 0x0000 (0x0270 - 0x0270)
class UFortEventTrackerModule_RewardDetails final : public UFortEventTrackerModule
{
public:
	void OnPopulateCompletedReward(const TArray<class FText>& RewardNames);
	void OnPopulateNextReward(const TArray<class FText>& RewardNames);
	void OnPopulateNextRewardDetails(const TArray<class FText>& RewardNames, const int32 ResourceNeeded);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule_RewardDetails">();
	}
	static class UFortEventTrackerModule_RewardDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule_RewardDetails>();
	}
};
static_assert(alignof(UFortEventTrackerModule_RewardDetails) == 0x000008, "Wrong alignment on UFortEventTrackerModule_RewardDetails");
static_assert(sizeof(UFortEventTrackerModule_RewardDetails) == 0x000270, "Wrong size on UFortEventTrackerModule_RewardDetails");

// Class EventScreenBase.FortEventTrackerModule_ProgressiveRewards
// 0x0008 (0x0278 - 0x0270)
class UFortEventTrackerModule_ProgressiveRewards final : public UFortEventTrackerModule
{
public:
	class UEventScreenListView*                   ListView_Rewards;                                  // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnPopulateCompletionMessage(const bool bIsComplete, const class FText& CompletionText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule_ProgressiveRewards">();
	}
	static class UFortEventTrackerModule_ProgressiveRewards* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule_ProgressiveRewards>();
	}
};
static_assert(alignof(UFortEventTrackerModule_ProgressiveRewards) == 0x000008, "Wrong alignment on UFortEventTrackerModule_ProgressiveRewards");
static_assert(sizeof(UFortEventTrackerModule_ProgressiveRewards) == 0x000278, "Wrong size on UFortEventTrackerModule_ProgressiveRewards");
static_assert(offsetof(UFortEventTrackerModule_ProgressiveRewards, ListView_Rewards) == 0x000270, "Member 'UFortEventTrackerModule_ProgressiveRewards::ListView_Rewards' has a wrong offset!");

// Class EventScreenBase.FortEventTrackerModule_Collection
// 0x0000 (0x0270 - 0x0270)
class UFortEventTrackerModule_Collection final : public UFortEventTrackerModule
{
public:
	void OnGatherTokenCollectionWidgets(TArray<class UFortEventTokenCollectionWidget*>* OutCollectionWidgets) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule_Collection">();
	}
	static class UFortEventTrackerModule_Collection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule_Collection>();
	}
};
static_assert(alignof(UFortEventTrackerModule_Collection) == 0x000008, "Wrong alignment on UFortEventTrackerModule_Collection");
static_assert(sizeof(UFortEventTrackerModule_Collection) == 0x000270, "Wrong size on UFortEventTrackerModule_Collection");

// Class EventScreenBase.FortEventTrackerModule_Banner
// 0x0008 (0x0278 - 0x0270)
class UFortEventTrackerModule_Banner final : public UFortEventTrackerModule
{
public:
	class UFortLazyImage*                         LazyImage_BannerArt;                               // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnCTACompleted(const bool bIsComplete);
	void OnPopulateBannerText(const class FText& BannerText);
	void OnPopulateHeaderCTAText(const class FText& HeaderCTAText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule_Banner">();
	}
	static class UFortEventTrackerModule_Banner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule_Banner>();
	}
};
static_assert(alignof(UFortEventTrackerModule_Banner) == 0x000008, "Wrong alignment on UFortEventTrackerModule_Banner");
static_assert(sizeof(UFortEventTrackerModule_Banner) == 0x000278, "Wrong size on UFortEventTrackerModule_Banner");
static_assert(offsetof(UFortEventTrackerModule_Banner, LazyImage_BannerArt) == 0x000270, "Member 'UFortEventTrackerModule_Banner::LazyImage_BannerArt' has a wrong offset!");

}

