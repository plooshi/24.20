#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Augment_SelectionTimer

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.ExecuteUbergraph_WBP_Augment_SelectionTimer
// 0x00F0 (0x00F0 - 0x0000)
struct WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAugmentSelectionAvailable_IsEnabled;    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_TimeRemaining;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_TimePercentage;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bCanSelectAugment;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanSelectAugment_ReturnValue;             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  K2Node_Event_HiddenElementTagContainer;            // 0x0020(0x0020)(ConstParm)
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue_1;                     // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0050(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        K2Node_DynamicCast_AsFort_Player_Pawn;             // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSkydiving_ReturnValue;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDBNO_ReturnValue;                       // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bEnteredBuildMode;              // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77[0x1];                                       // 0x0077(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bEnteredBuildMode)>       K2Node_CreateDelegate_OutputDelegate_2;            // 0x0080(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  K2Node_DynamicCast_AsFort_Player_Controller;       // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue_1;               // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingTouch_ReturnValue;                 // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           K2Node_DynamicCast_AsPaper_Sprite;                 // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ISlateTextureAtlasInterface> CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput; // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default;                             // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateCountdown_InTimeLeft_ImplicitCast;  // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetMobileProgressTimer_FPercentLeft_ImplicitCast; // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer) == 0x0000F0, "Wrong size on WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, EntryPoint) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_IsAugmentSelectionAvailable_IsEnabled) == 0x000010, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_IsAugmentSelectionAvailable_IsEnabled' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_Event_TimeRemaining) == 0x000014, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_Event_TimeRemaining' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_Event_TimePercentage) == 0x000018, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_Event_TimePercentage' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_Event_bCanSelectAugment) == 0x00001C, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_Event_bCanSelectAugment' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_Event_IsDesignTime) == 0x00001D, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_CanSelectAugment_ReturnValue) == 0x00001E, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_CanSelectAugment_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_Event_HiddenElementTagContainer) == 0x000020, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_Event_HiddenElementTagContainer' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_HasTag_ReturnValue) == 0x000040, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_HasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_HasTag_ReturnValue_1) == 0x000041, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_HasTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_Not_PreBool_ReturnValue) == 0x000042, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000048, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_CreateDelegate_OutputDelegate_1) == 0x000050, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000060, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_AsFort_Player_Pawn) == 0x000068, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_AsFort_Player_Pawn' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_IsSkydiving_ReturnValue) == 0x000071, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_IsSkydiving_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_IsDBNO_ReturnValue) == 0x000072, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_IsDBNO_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_BooleanOR_ReturnValue) == 0x000073, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_BooleanOR_ReturnValue_1) == 0x000074, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_CustomEvent_bEnteredBuildMode) == 0x000075, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_CustomEvent_bEnteredBuildMode' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_Not_PreBool_ReturnValue_1) == 0x000076, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_GetOwningPlayer_ReturnValue) == 0x000078, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_CreateDelegate_OutputDelegate_2) == 0x000080, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_AsFort_Player_Controller) == 0x000090, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_AsFort_Player_Controller' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_bSuccess_1) == 0x000098, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_IsMobileGame_ReturnValue) == 0x000099, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_IsMobileGame_ReturnValue_1) == 0x00009A, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_IsMobileGame_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_IsUsingTouch_ReturnValue) == 0x00009B, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_IsUsingTouch_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_BooleanAND_ReturnValue) == 0x00009C, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, Temp_object_Variable) == 0x0000A0, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_AsPaper_Sprite) == 0x0000A8, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_AsPaper_Sprite' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_bSuccess_2) == 0x0000B0, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput) == 0x0000B8, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_CustomEvent_Loaded) == 0x0000C8, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, Temp_bool_Variable) == 0x0000D0, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_Select_Default) == 0x0000D8, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_UpdateCountdown_InTimeLeft_ImplicitCast) == 0x0000E0, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_UpdateCountdown_InTimeLeft_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_SetMobileProgressTimer_FPercentLeft_ImplicitCast) == 0x0000E8, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_SetMobileProgressTimer_FPercentLeft_ImplicitCast' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.ForceAugmentReadyState
// 0x0018 (0x0018 - 0x0000)
struct WBP_Augment_SelectionTimer_C_ForceAugmentReadyState final
{
public:
	bool                                          AugmentSelectionAvailable;                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_ForceAugmentReadyState) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_ForceAugmentReadyState");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_ForceAugmentReadyState) == 0x000018, "Wrong size on WBP_Augment_SelectionTimer_C_ForceAugmentReadyState");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ForceAugmentReadyState, AugmentSelectionAvailable) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_ForceAugmentReadyState::AugmentSelectionAvailable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ForceAugmentReadyState, CallFunc_SpawnSound2D_ReturnValue) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_ForceAugmentReadyState::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ForceAugmentReadyState, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'WBP_Augment_SelectionTimer_C_ForceAugmentReadyState::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.IsAugmentSelectionAvailable
// 0x0003 (0x0003 - 0x0000)
struct WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable) == 0x000001, "Wrong alignment on WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable) == 0x000003, "Wrong size on WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable, IsEnabled) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable::IsEnabled' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000001, "Member 'WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.OnAugmentReadyFadeInFinished
// 0x0008 (0x0008 - 0x0000)
struct WBP_Augment_SelectionTimer_C_OnAugmentReadyFadeInFinished final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_OnAugmentReadyFadeInFinished) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_OnAugmentReadyFadeInFinished");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_OnAugmentReadyFadeInFinished) == 0x000008, "Wrong size on WBP_Augment_SelectionTimer_C_OnAugmentReadyFadeInFinished");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnAugmentReadyFadeInFinished, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_OnAugmentReadyFadeInFinished::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.OnCanSelectAugmentChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_Augment_SelectionTimer_C_OnCanSelectAugmentChanged final
{
public:
	bool                                          bCanSelectAugment;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_OnCanSelectAugmentChanged) == 0x000001, "Wrong alignment on WBP_Augment_SelectionTimer_C_OnCanSelectAugmentChanged");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_OnCanSelectAugmentChanged) == 0x000001, "Wrong size on WBP_Augment_SelectionTimer_C_OnCanSelectAugmentChanged");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnCanSelectAugmentChanged, bCanSelectAugment) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_OnCanSelectAugmentChanged::bCanSelectAugment' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.OnHUDElementVisibilityChanged
// 0x0020 (0x0020 - 0x0000)
struct WBP_Augment_SelectionTimer_C_OnHUDElementVisibilityChanged final
{
public:
	struct FGameplayTagContainer                  HiddenElementTagContainer;                         // 0x0000(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_OnHUDElementVisibilityChanged) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_OnHUDElementVisibilityChanged");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_OnHUDElementVisibilityChanged) == 0x000020, "Wrong size on WBP_Augment_SelectionTimer_C_OnHUDElementVisibilityChanged");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnHUDElementVisibilityChanged, HiddenElementTagContainer) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_OnHUDElementVisibilityChanged::HiddenElementTagContainer' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.OnLoaded_7B3490DB452F1589FC28169C2C321233
// 0x0008 (0x0008 - 0x0000)
struct WBP_Augment_SelectionTimer_C_OnLoaded_7B3490DB452F1589FC28169C2C321233 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_OnLoaded_7B3490DB452F1589FC28169C2C321233) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_OnLoaded_7B3490DB452F1589FC28169C2C321233");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_OnLoaded_7B3490DB452F1589FC28169C2C321233) == 0x000008, "Wrong size on WBP_Augment_SelectionTimer_C_OnLoaded_7B3490DB452F1589FC28169C2C321233");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnLoaded_7B3490DB452F1589FC28169C2C321233, Loaded) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_OnLoaded_7B3490DB452F1589FC28169C2C321233::Loaded' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.OnNumPendingAugmentsToGrantUpdated
// 0x00D8 (0x00D8 - 0x0000)
struct WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated final
{
public:
	int32                                         NumPendingAugmentsToGrant;                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DidValueIncrease;                                  // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0038(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsAugmentSelectionAvailable_IsEnabled;    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00A0(0x0018)()
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00C0(0x0018)()
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated) == 0x0000D8, "Wrong size on WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, NumPendingAugmentsToGrant) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::NumPendingAugmentsToGrant' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, DidValueIncrease) == 0x000004, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::DidValueIncrease' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, Temp_bool_Variable) == 0x000005, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, Temp_text_Variable) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_SpawnSound2D_ReturnValue) == 0x000020, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_Greater_IntInt_ReturnValue) == 0x000028, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000029, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000030, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, K2Node_MakeStruct_FormatArgumentData) == 0x000038, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, K2Node_MakeArray_Array) == 0x000088, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_IsAugmentSelectionAvailable_IsEnabled) == 0x000098, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_IsAugmentSelectionAvailable_IsEnabled' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_Format_ReturnValue) == 0x0000A0, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_BooleanAND_ReturnValue) == 0x0000B8, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_Greater_IntInt_ReturnValue_2) == 0x0000B9, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, K2Node_Select_Default) == 0x0000C0, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::K2Node_Select_Default' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.OnPlayerChangedBuildMode
// 0x0001 (0x0001 - 0x0000)
struct WBP_Augment_SelectionTimer_C_OnPlayerChangedBuildMode final
{
public:
	bool                                          bEnteredBuildMode;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_OnPlayerChangedBuildMode) == 0x000001, "Wrong alignment on WBP_Augment_SelectionTimer_C_OnPlayerChangedBuildMode");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_OnPlayerChangedBuildMode) == 0x000001, "Wrong size on WBP_Augment_SelectionTimer_C_OnPlayerChangedBuildMode");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnPlayerChangedBuildMode, bEnteredBuildMode) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_OnPlayerChangedBuildMode::bEnteredBuildMode' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.OnTimerUpdated
// 0x0008 (0x0008 - 0x0000)
struct WBP_Augment_SelectionTimer_C_OnTimerUpdated final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimePercentage;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_OnTimerUpdated) == 0x000004, "Wrong alignment on WBP_Augment_SelectionTimer_C_OnTimerUpdated");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_OnTimerUpdated) == 0x000008, "Wrong size on WBP_Augment_SelectionTimer_C_OnTimerUpdated");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnTimerUpdated, TimeRemaining) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_OnTimerUpdated::TimeRemaining' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnTimerUpdated, TimePercentage) == 0x000004, "Member 'WBP_Augment_SelectionTimer_C_OnTimerUpdated::TimePercentage' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.PlayReminderAnimation
// 0x0008 (0x0008 - 0x0000)
struct WBP_Augment_SelectionTimer_C_PlayReminderAnimation final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_PlayReminderAnimation) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_PlayReminderAnimation");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_PlayReminderAnimation) == 0x000008, "Wrong size on WBP_Augment_SelectionTimer_C_PlayReminderAnimation");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_PlayReminderAnimation, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_PlayReminderAnimation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Augment_SelectionTimer_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Augment_SelectionTimer_C_PreConstruct");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_PreConstruct) == 0x000001, "Wrong size on WBP_Augment_SelectionTimer_C_PreConstruct");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.ResetAugmentReadyStateAnims
// 0x0018 (0x0018 - 0x0000)
struct WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims) == 0x000018, "Wrong size on WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims, CallFunc_GetEndTime_ReturnValue) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.SetAugmentReadyState
// 0x0020 (0x0020 - 0x0000)
struct WBP_Augment_SelectionTimer_C_SetAugmentReadyState final
{
public:
	bool                                          AugmentSelectionAvailable;                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingTouch_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_SetAugmentReadyState");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState) == 0x000020, "Wrong size on WBP_Augment_SelectionTimer_C_SetAugmentReadyState");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, AugmentSelectionAvailable) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::AugmentSelectionAvailable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, CallFunc_IsMobileGame_ReturnValue) == 0x000001, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, CallFunc_IsUsingTouch_ReturnValue) == 0x000002, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::CallFunc_IsUsingTouch_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000010, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000018, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x00001C, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.SetMobileProgressTimer
// 0x0010 (0x0010 - 0x0000)
struct WBP_Augment_SelectionTimer_C_SetMobileProgressTimer final
{
public:
	double                                        FPercentLeft;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_SetMobileProgressTimer) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_SetMobileProgressTimer");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_SetMobileProgressTimer) == 0x000010, "Wrong size on WBP_Augment_SelectionTimer_C_SetMobileProgressTimer");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileProgressTimer, FPercentLeft) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_SetMobileProgressTimer::FPercentLeft' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileProgressTimer, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_SetMobileProgressTimer::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.SetMobileVisuals
// 0x0198 (0x0198 - 0x0000)
struct WBP_Augment_SelectionTimer_C_SetMobileVisuals final
{
public:
	float                                         Temp_real_Variable;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_3;                            // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_4;                            // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_5;                            // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_1;          // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_2;          // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasChild_ReturnValue;                     // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_6;                            // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasChild_ReturnValue_1;                   // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue_1;    // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_7;                            // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_9;                              // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_9;                              // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            Temp_byte_Variable_10;                             // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            Temp_byte_Variable_11;                             // 0x00FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FF[0x1];                                       // 0x00FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x0100(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_10;                             // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable_2;                              // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue_1;          // 0x0110(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_3;                              // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_11;                             // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingTouch_ReturnValue;                 // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F[0x1];                                      // 0x011F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            K2Node_Select_Default_1;                           // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default_3;                           // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_4;                           // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_5;                           // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_6;                           // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_7;                           // 0x0153(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_8;                           // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_9;                           // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0168(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              K2Node_Select_Default_10;                          // 0x0178(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_11;                          // 0x0188(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_SetMobileVisuals) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_SetMobileVisuals");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_SetMobileVisuals) == 0x000198, "Wrong size on WBP_Augment_SelectionTimer_C_SetMobileVisuals");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_real_Variable) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable) == 0x000004, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable_1) == 0x000018, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_1) == 0x000028, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable_2) == 0x000030, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable_3) == 0x000040, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_2) == 0x000050, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable_4) == 0x000058, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable_5) == 0x000068, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_real_Variable_1) == 0x000078, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_3) == 0x00007C, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable) == 0x00007D, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000080, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_1) == 0x000088, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_SlotAsOverlaySlot_ReturnValue_1) == 0x000090, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_SlotAsOverlaySlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_4) == 0x000098, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_2) == 0x000099, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_3) == 0x00009A, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_5) == 0x00009B, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_SlotAsOverlaySlot_ReturnValue_2) == 0x0000A0, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_SlotAsOverlaySlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x0000A8, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_4) == 0x0000B0, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_HasChild_ReturnValue) == 0x0000B1, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_HasChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_5) == 0x0000B2, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_AddChildToOverlay_ReturnValue) == 0x0000B8, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_6) == 0x0000C0, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_6) == 0x0000C1, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_7) == 0x0000C2, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_7) == 0x0000C3, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable_6) == 0x0000C8, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_HasChild_ReturnValue_1) == 0x0000D8, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_HasChild_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_BooleanAND_ReturnValue) == 0x0000D9, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_AddChildToHorizontalBox_ReturnValue_1) == 0x0000E0, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_AddChildToHorizontalBox_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable_7) == 0x0000E8, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_8) == 0x0000F8, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_8) == 0x0000F9, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_9) == 0x0000FA, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_9) == 0x0000FB, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_10) == 0x0000FC, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_IsMobileGame_ReturnValue) == 0x0000FD, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_11) == 0x0000FE, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x000100, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_10) == 0x000108, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_real_Variable_2) == 0x00010C, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_AddChildToOverlay_ReturnValue_1) == 0x000110, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_AddChildToOverlay_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_real_Variable_3) == 0x000118, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_11) == 0x00011C, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_IsUsingTouch_ReturnValue) == 0x00011D, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_IsUsingTouch_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_BooleanAND_ReturnValue_1) == 0x00011E, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default) == 0x000120, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_1) == 0x000124, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_MakeStruct_Margin) == 0x000128, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_2) == 0x000138, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_3) == 0x000140, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_4) == 0x000150, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_5) == 0x000151, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_6) == 0x000152, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_7) == 0x000153, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_8) == 0x000154, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_9) == 0x000158, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_MakeStruct_Margin_1) == 0x000168, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_10) == 0x000178, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_10' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_11) == 0x000188, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_11' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.StartHideTimerEvent
// 0x0028 (0x0028 - 0x0000)
struct WBP_Augment_SelectionTimer_C_StartHideTimerEvent final
{
public:
	bool                                          CallFunc_IsUsingTouch_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetValueAsInteger_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_StartHideTimerEvent");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent) == 0x000028, "Wrong size on WBP_Augment_SelectionTimer_C_StartHideTimerEvent");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, CallFunc_IsUsingTouch_ReturnValue) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::CallFunc_IsUsingTouch_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, CallFunc_IsMobileGame_ReturnValue) == 0x000001, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, CallFunc_GetValueAsInteger_ReturnValue) == 0x000004, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::CallFunc_GetValueAsInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00000C, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.UpdateCanOpenSelector
// 0x0002 (0x0002 - 0x0000)
struct WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector final
{
public:
	bool                                          InPlayerAbleToOpenSelector;                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAugmentSelectionAvailable_IsEnabled;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector) == 0x000001, "Wrong alignment on WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector) == 0x000002, "Wrong size on WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector, InPlayerAbleToOpenSelector) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector::InPlayerAbleToOpenSelector' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector, CallFunc_IsAugmentSelectionAvailable_IsEnabled) == 0x000001, "Member 'WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector::CallFunc_IsAugmentSelectionAvailable_IsEnabled' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.UpdateCountdown
// 0x00A0 (0x00A0 - 0x0000)
struct WBP_Augment_SelectionTimer_C_UpdateCountdown final
{
public:
	double                                        InTimeLeft;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNewlyActivated;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewIsCountdownActive;                              // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeLeft;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetValueAsInteger_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCountdownVisible_IsVisible;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetValueAsInteger_ReturnValue_1;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0070(0x0018)()
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_B_ImplicitCast;       // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_UpdateCountdown) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_UpdateCountdown");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_UpdateCountdown) == 0x0000A0, "Wrong size on WBP_Augment_SelectionTimer_C_UpdateCountdown");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, InTimeLeft) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::InTimeLeft' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, IsNewlyActivated) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::IsNewlyActivated' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, NewIsCountdownActive) == 0x000009, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::NewIsCountdownActive' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, TimeLeft) == 0x00000C, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::TimeLeft' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_Round_ReturnValue) == 0x000010, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_Greater_IntInt_ReturnValue) == 0x000014, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_GetValueAsInteger_ReturnValue) == 0x000018, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_GetValueAsInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00001C, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x00001E, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_Not_PreBool_ReturnValue) == 0x00001F, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_IsCountdownVisible_IsVisible) == 0x000020, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_IsCountdownVisible_IsVisible' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_Not_PreBool_ReturnValue_1) == 0x000021, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_PlayAnimation_ReturnValue) == 0x000028, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_PlayAnimation_ReturnValue_1) == 0x000030, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_PlayAnimation_ReturnValue_2) == 0x000038, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000040, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_BooleanAND_ReturnValue_1) == 0x000041, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_BooleanAND_ReturnValue_2) == 0x000042, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000044, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_BooleanAND_ReturnValue_3) == 0x000048, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_GetValueAsInteger_ReturnValue_1) == 0x00004C, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_GetValueAsInteger_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000050, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000058, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000060, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000068, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_Conv_IntToText_ReturnValue) == 0x000070, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000088, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x00008C, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000090, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCountdown, CallFunc_Divide_DoubleDouble_B_ImplicitCast) == 0x000098, "Member 'WBP_Augment_SelectionTimer_C_UpdateCountdown::CallFunc_Divide_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.UpdateVisibility
// 0x000A (0x000A - 0x0000)
struct WBP_Augment_SelectionTimer_C_UpdateVisibility final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingTouch_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCountdownVisible_IsVisible;             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_UpdateVisibility) == 0x000001, "Wrong alignment on WBP_Augment_SelectionTimer_C_UpdateVisibility");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_UpdateVisibility) == 0x00000A, "Wrong size on WBP_Augment_SelectionTimer_C_UpdateVisibility");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, Temp_bool_Variable) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, Temp_byte_Variable) == 0x000001, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, CallFunc_IsMobileGame_ReturnValue) == 0x000003, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, CallFunc_IsUsingTouch_ReturnValue) == 0x000004, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::CallFunc_IsUsingTouch_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, CallFunc_IsCountdownVisible_IsVisible) == 0x000006, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::CallFunc_IsCountdownVisible_IsVisible' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, CallFunc_BooleanOR_ReturnValue) == 0x000007, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, CallFunc_BooleanOR_ReturnValue_1) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, K2Node_Select_Default) == 0x000009, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.IsCountdownVisible
// 0x0006 (0x0006 - 0x0000)
struct WBP_Augment_SelectionTimer_C_IsCountdownVisible final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_IsCountdownVisible) == 0x000001, "Wrong alignment on WBP_Augment_SelectionTimer_C_IsCountdownVisible");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_IsCountdownVisible) == 0x000006, "Wrong size on WBP_Augment_SelectionTimer_C_IsCountdownVisible");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_IsCountdownVisible, IsVisible_0) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_IsCountdownVisible::IsVisible_0' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_IsCountdownVisible, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000001, "Member 'WBP_Augment_SelectionTimer_C_IsCountdownVisible::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_IsCountdownVisible, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'WBP_Augment_SelectionTimer_C_IsCountdownVisible::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_IsCountdownVisible, CallFunc_Not_PreBool_ReturnValue_1) == 0x000003, "Member 'WBP_Augment_SelectionTimer_C_IsCountdownVisible::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_IsCountdownVisible, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'WBP_Augment_SelectionTimer_C_IsCountdownVisible::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_IsCountdownVisible, CallFunc_BooleanAND_ReturnValue_1) == 0x000005, "Member 'WBP_Augment_SelectionTimer_C_IsCountdownVisible::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

}

