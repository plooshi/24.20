#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EpicMediaOptions

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct EpicMediaOptions.EpicMediaOptions
// 0x0100 (0x0100 - 0x0000)
struct FEpicMediaOptions final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FrameRate;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResolutionForMediaStreaming;                    // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxElectraVerticalResolutionOf60fpsVideos;         // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxElectraVerticalResolutionOfWindowsSWD;          // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bElectraLiveUseConservativePresentationOffset;     // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bElectraUseDedicatedMediaSegmentDownloadThreads;   // 0x0015(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ElectraLivePresentationOffset;                     // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ElectraLiveAudioPresentationOffset;                // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StreamPlaylistFetchMethodOrder;                    // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableBlastURLStreamSource;                      // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCN;                                             // 0x002D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         VideoEVMap;                                        // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 CDNDistribution;                                   // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         VODHostNames;                                      // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         VODHostNamesCN;                                    // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         LiveHostNames;                                     // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         LiveHostNamesCN;                                   // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         VODHostNamesDev;                                   // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         LiveHostNamesDev;                                  // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         VODHostNamesHF;                                    // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         LiveHostNamesHF;                                   // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         VODHostNamesCNHF;                                  // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         LiveHostNamesCNHF;                                 // 0x00E0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEpicMediaOptions) == 0x000008, "Wrong alignment on FEpicMediaOptions");
static_assert(sizeof(FEpicMediaOptions) == 0x000100, "Wrong size on FEpicMediaOptions");
static_assert(offsetof(FEpicMediaOptions, FrameRate) == 0x000004, "Member 'FEpicMediaOptions::FrameRate' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, MaxResolutionForMediaStreaming) == 0x000008, "Member 'FEpicMediaOptions::MaxResolutionForMediaStreaming' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, MaxElectraVerticalResolutionOf60fpsVideos) == 0x00000C, "Member 'FEpicMediaOptions::MaxElectraVerticalResolutionOf60fpsVideos' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, MaxElectraVerticalResolutionOfWindowsSWD) == 0x000010, "Member 'FEpicMediaOptions::MaxElectraVerticalResolutionOfWindowsSWD' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, bElectraLiveUseConservativePresentationOffset) == 0x000014, "Member 'FEpicMediaOptions::bElectraLiveUseConservativePresentationOffset' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, bElectraUseDedicatedMediaSegmentDownloadThreads) == 0x000015, "Member 'FEpicMediaOptions::bElectraUseDedicatedMediaSegmentDownloadThreads' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, ElectraLivePresentationOffset) == 0x000018, "Member 'FEpicMediaOptions::ElectraLivePresentationOffset' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, ElectraLiveAudioPresentationOffset) == 0x000020, "Member 'FEpicMediaOptions::ElectraLiveAudioPresentationOffset' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, StreamPlaylistFetchMethodOrder) == 0x000028, "Member 'FEpicMediaOptions::StreamPlaylistFetchMethodOrder' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, bDisableBlastURLStreamSource) == 0x00002C, "Member 'FEpicMediaOptions::bDisableBlastURLStreamSource' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, bIsCN) == 0x00002D, "Member 'FEpicMediaOptions::bIsCN' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, VideoEVMap) == 0x000030, "Member 'FEpicMediaOptions::VideoEVMap' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, CDNDistribution) == 0x000040, "Member 'FEpicMediaOptions::CDNDistribution' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, VODHostNames) == 0x000050, "Member 'FEpicMediaOptions::VODHostNames' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, VODHostNamesCN) == 0x000060, "Member 'FEpicMediaOptions::VODHostNamesCN' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, LiveHostNames) == 0x000070, "Member 'FEpicMediaOptions::LiveHostNames' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, LiveHostNamesCN) == 0x000080, "Member 'FEpicMediaOptions::LiveHostNamesCN' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, VODHostNamesDev) == 0x000090, "Member 'FEpicMediaOptions::VODHostNamesDev' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, LiveHostNamesDev) == 0x0000A0, "Member 'FEpicMediaOptions::LiveHostNamesDev' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, VODHostNamesHF) == 0x0000B0, "Member 'FEpicMediaOptions::VODHostNamesHF' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, LiveHostNamesHF) == 0x0000C0, "Member 'FEpicMediaOptions::LiveHostNamesHF' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, VODHostNamesCNHF) == 0x0000D0, "Member 'FEpicMediaOptions::VODHostNamesCNHF' has a wrong offset!");
static_assert(offsetof(FEpicMediaOptions, LiveHostNamesCNHF) == 0x0000E0, "Member 'FEpicMediaOptions::LiveHostNamesCNHF' has a wrong offset!");

}

