#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HmxCore

#include "Basic.hpp"


namespace SDK
{

// Enum HmxCore.EMusicTimebase
// NumValues: 0x0004
enum class EMusicTimebase : uint8
{
	AudioRenderTime                          = 0,
	ExperiencedTime                          = 1,
	VideoRenderTime                          = 2,
	EMusicTimebase_MAX                       = 3,
};

// Enum HmxCore.EMusicTimeStart
// NumValues: 0x0003
enum class EMusicTimeStart : uint8
{
	FromContentStart                         = 0,
	FromSongStart                            = 1,
	EMusicTimeStart_MAX                      = 2,
};

// Enum HmxCore.ETempoListenerTimeSyncOption
// NumValues: 0x0004
enum class ETempoListenerTimeSyncOption : uint8
{
	None                                     = 0,
	TempoSync                                = 1,
	SpeedScale                               = 2,
	ETempoListenerTimeSyncOption_MAX         = 3,
};

// ScriptStruct HmxCore.SongPos
// 0x004C (0x004C - 0x0000)
struct FSongPos final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Milliseconds;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeSigNum;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeSigDenom;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tempo;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tick;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractionalTick;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Beat;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractionalBeat;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Measure;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractionalMeasure;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeatInMeasure;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractionalBeatInMeasure;                           // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TickInMeasure;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractionalTickInMeasure;                           // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TickInBeat;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractionalTickInBeat;                              // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PulseInMeasure;                                    // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractionalPulseInMeasure;                          // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSongPos) == 0x000004, "Wrong alignment on FSongPos");
static_assert(sizeof(FSongPos) == 0x00004C, "Wrong size on FSongPos");
static_assert(offsetof(FSongPos, Seconds) == 0x000000, "Member 'FSongPos::Seconds' has a wrong offset!");
static_assert(offsetof(FSongPos, Milliseconds) == 0x000004, "Member 'FSongPos::Milliseconds' has a wrong offset!");
static_assert(offsetof(FSongPos, TimeSigNum) == 0x000008, "Member 'FSongPos::TimeSigNum' has a wrong offset!");
static_assert(offsetof(FSongPos, TimeSigDenom) == 0x00000C, "Member 'FSongPos::TimeSigDenom' has a wrong offset!");
static_assert(offsetof(FSongPos, Tempo) == 0x000010, "Member 'FSongPos::Tempo' has a wrong offset!");
static_assert(offsetof(FSongPos, Tick) == 0x000014, "Member 'FSongPos::Tick' has a wrong offset!");
static_assert(offsetof(FSongPos, FractionalTick) == 0x000018, "Member 'FSongPos::FractionalTick' has a wrong offset!");
static_assert(offsetof(FSongPos, Beat) == 0x00001C, "Member 'FSongPos::Beat' has a wrong offset!");
static_assert(offsetof(FSongPos, FractionalBeat) == 0x000020, "Member 'FSongPos::FractionalBeat' has a wrong offset!");
static_assert(offsetof(FSongPos, Measure) == 0x000024, "Member 'FSongPos::Measure' has a wrong offset!");
static_assert(offsetof(FSongPos, FractionalMeasure) == 0x000028, "Member 'FSongPos::FractionalMeasure' has a wrong offset!");
static_assert(offsetof(FSongPos, BeatInMeasure) == 0x00002C, "Member 'FSongPos::BeatInMeasure' has a wrong offset!");
static_assert(offsetof(FSongPos, FractionalBeatInMeasure) == 0x000030, "Member 'FSongPos::FractionalBeatInMeasure' has a wrong offset!");
static_assert(offsetof(FSongPos, TickInMeasure) == 0x000034, "Member 'FSongPos::TickInMeasure' has a wrong offset!");
static_assert(offsetof(FSongPos, FractionalTickInMeasure) == 0x000038, "Member 'FSongPos::FractionalTickInMeasure' has a wrong offset!");
static_assert(offsetof(FSongPos, TickInBeat) == 0x00003C, "Member 'FSongPos::TickInBeat' has a wrong offset!");
static_assert(offsetof(FSongPos, FractionalTickInBeat) == 0x000040, "Member 'FSongPos::FractionalTickInBeat' has a wrong offset!");
static_assert(offsetof(FSongPos, PulseInMeasure) == 0x000044, "Member 'FSongPos::PulseInMeasure' has a wrong offset!");
static_assert(offsetof(FSongPos, FractionalPulseInMeasure) == 0x000048, "Member 'FSongPos::FractionalPulseInMeasure' has a wrong offset!");

}

