#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EpicMediaMetadataResolver

#include "Basic.hpp"

#include "EpicMediaUtilities_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class EpicMediaMetadataResolver.EpicMediaMetadataResolver
// 0x0188 (0x0228 - 0x00A0)
class UEpicMediaMetadataResolver : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(const class FString& RetrievedUrl)> OnSuccess;                                         // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& RetrievedUrl)> OnFailure;                                         // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FEpicMediaMetadataExt& FullMetaData, bool Succeeded)> MetadataResultExt;                                 // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UEpicMediaCDNHostnames*                 CDNHostNames;                                      // 0x00D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x150];                                     // 0x00D8(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetBlurl(const class FString& InVUID, const bool bInBlurlLive, const struct FEpicMediaOptions& InMediaOptions);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EpicMediaMetadataResolver">();
	}
	static class UEpicMediaMetadataResolver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEpicMediaMetadataResolver>();
	}
};
static_assert(alignof(UEpicMediaMetadataResolver) == 0x000008, "Wrong alignment on UEpicMediaMetadataResolver");
static_assert(sizeof(UEpicMediaMetadataResolver) == 0x000228, "Wrong size on UEpicMediaMetadataResolver");
static_assert(offsetof(UEpicMediaMetadataResolver, OnSuccess) == 0x0000A0, "Member 'UEpicMediaMetadataResolver::OnSuccess' has a wrong offset!");
static_assert(offsetof(UEpicMediaMetadataResolver, OnFailure) == 0x0000B0, "Member 'UEpicMediaMetadataResolver::OnFailure' has a wrong offset!");
static_assert(offsetof(UEpicMediaMetadataResolver, MetadataResultExt) == 0x0000C0, "Member 'UEpicMediaMetadataResolver::MetadataResultExt' has a wrong offset!");
static_assert(offsetof(UEpicMediaMetadataResolver, CDNHostNames) == 0x0000D0, "Member 'UEpicMediaMetadataResolver::CDNHostNames' has a wrong offset!");

}

