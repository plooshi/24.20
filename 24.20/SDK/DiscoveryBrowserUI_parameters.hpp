#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DiscoveryBrowserUI

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function DiscoveryBrowserUI.FortActivityBrowserTabButton.OnFavoriteChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserTabButton_OnFavoriteChanged final
{
public:
	bool                                          bIsFavorite;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserTabButton_OnFavoriteChanged) == 0x000001, "Wrong alignment on FortActivityBrowserTabButton_OnFavoriteChanged");
static_assert(sizeof(FortActivityBrowserTabButton_OnFavoriteChanged) == 0x000001, "Wrong size on FortActivityBrowserTabButton_OnFavoriteChanged");
static_assert(offsetof(FortActivityBrowserTabButton_OnFavoriteChanged, bIsFavorite) == 0x000000, "Member 'FortActivityBrowserTabButton_OnFavoriteChanged::bIsFavorite' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowser.HandleTabChanged
// 0x0004 (0x0004 - 0x0000)
struct FortActivityBrowser_HandleTabChanged final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowser_HandleTabChanged) == 0x000004, "Wrong alignment on FortActivityBrowser_HandleTabChanged");
static_assert(sizeof(FortActivityBrowser_HandleTabChanged) == 0x000004, "Wrong size on FortActivityBrowser_HandleTabChanged");
static_assert(offsetof(FortActivityBrowser_HandleTabChanged, TabId) == 0x000000, "Member 'FortActivityBrowser_HandleTabChanged::TabId' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowser.OnEnableColorScheme
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowser_OnEnableColorScheme final
{
public:
	bool                                          bIsColorSchemeActive;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowser_OnEnableColorScheme) == 0x000001, "Wrong alignment on FortActivityBrowser_OnEnableColorScheme");
static_assert(sizeof(FortActivityBrowser_OnEnableColorScheme) == 0x000001, "Wrong size on FortActivityBrowser_OnEnableColorScheme");
static_assert(offsetof(FortActivityBrowser_OnEnableColorScheme, bIsColorSchemeActive) == 0x000000, "Member 'FortActivityBrowser_OnEnableColorScheme::bIsColorSchemeActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowser.OnPlayerQueueTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowser_OnPlayerQueueTypeChanged final
{
public:
	EPlayerQueueType                              PlayerQueueType;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowser_OnPlayerQueueTypeChanged) == 0x000001, "Wrong alignment on FortActivityBrowser_OnPlayerQueueTypeChanged");
static_assert(sizeof(FortActivityBrowser_OnPlayerQueueTypeChanged) == 0x000001, "Wrong size on FortActivityBrowser_OnPlayerQueueTypeChanged");
static_assert(offsetof(FortActivityBrowser_OnPlayerQueueTypeChanged, PlayerQueueType) == 0x000000, "Member 'FortActivityBrowser_OnPlayerQueueTypeChanged::PlayerQueueType' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowser.OnSwapColorScheme
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowser_OnSwapColorScheme final
{
public:
	bool                                          bInIsUsingAlternateColorScheme;                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowser_OnSwapColorScheme) == 0x000001, "Wrong alignment on FortActivityBrowser_OnSwapColorScheme");
static_assert(sizeof(FortActivityBrowser_OnSwapColorScheme) == 0x000001, "Wrong size on FortActivityBrowser_OnSwapColorScheme");
static_assert(offsetof(FortActivityBrowser_OnSwapColorScheme, bInIsUsingAlternateColorScheme) == 0x000000, "Member 'FortActivityBrowser_OnSwapColorScheme::bInIsUsingAlternateColorScheme' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.OnTextureLoadingComplete
// 0x0008 (0x0008 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_OnTextureLoadingComplete final
{
public:
	const class UTexture*                         ThumbnailTexture;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_OnTextureLoadingComplete) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_OnTextureLoadingComplete");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_OnTextureLoadingComplete) == 0x000008, "Wrong size on FortActivityBrowserPlayWithFriendsTile_OnTextureLoadingComplete");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_OnTextureLoadingComplete, ThumbnailTexture) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_OnTextureLoadingComplete::ThumbnailTexture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.OnTileActiveSet
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_OnTileActiveSet final
{
public:
	bool                                          bIsTileActive;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_OnTileActiveSet) == 0x000001, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_OnTileActiveSet");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_OnTileActiveSet) == 0x000001, "Wrong size on FortActivityBrowserPlayWithFriendsTile_OnTileActiveSet");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_OnTileActiveSet, bIsTileActive) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_OnTileActiveSet::bIsTileActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.UpdateIslandInformation
// 0x0018 (0x0018 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformation final
{
public:
	class FText                                   ActivityName;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformation) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformation");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformation) == 0x000018, "Wrong size on FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformation");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformation, ActivityName) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformation::ActivityName' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.UpdateIslandInformationAndThumbnail
// 0x0020 (0x0020 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformationAndThumbnail final
{
public:
	class FText                                   ActivityName;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UTexture*                         ThumbnailTexture;                                  // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformationAndThumbnail) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformationAndThumbnail");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformationAndThumbnail) == 0x000020, "Wrong size on FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformationAndThumbnail");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformationAndThumbnail, ActivityName) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformationAndThumbnail::ActivityName' has a wrong offset!");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformationAndThumbnail, ThumbnailTexture) == 0x000018, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdateIslandInformationAndThumbnail::ThumbnailTexture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.UpdateJoinablePartySubText
// 0x0018 (0x0018 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_UpdateJoinablePartySubText final
{
public:
	class FText                                   JoinablePartySubText;                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_UpdateJoinablePartySubText) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_UpdateJoinablePartySubText");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_UpdateJoinablePartySubText) == 0x000018, "Wrong size on FortActivityBrowserPlayWithFriendsTile_UpdateJoinablePartySubText");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdateJoinablePartySubText, JoinablePartySubText) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdateJoinablePartySubText::JoinablePartySubText' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.UpdatePartyInformation
// 0x000C (0x000C - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_UpdatePartyInformation final
{
public:
	int32                                         CurrentPartyCount;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPartyCount;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActiveInvite;                                   // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPartyPrivate;                                   // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_UpdatePartyInformation) == 0x000004, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_UpdatePartyInformation");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_UpdatePartyInformation) == 0x00000C, "Wrong size on FortActivityBrowserPlayWithFriendsTile_UpdatePartyInformation");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdatePartyInformation, CurrentPartyCount) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdatePartyInformation::CurrentPartyCount' has a wrong offset!");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdatePartyInformation, MaxPartyCount) == 0x000004, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdatePartyInformation::MaxPartyCount' has a wrong offset!");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdatePartyInformation, bIsActiveInvite) == 0x000008, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdatePartyInformation::bIsActiveInvite' has a wrong offset!");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdatePartyInformation, bIsPartyPrivate) == 0x000009, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdatePartyInformation::bIsPartyPrivate' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.UpdatePartyMemberNames
// 0x0018 (0x0018 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_UpdatePartyMemberNames final
{
public:
	class FText                                   Names;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_UpdatePartyMemberNames) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_UpdatePartyMemberNames");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_UpdatePartyMemberNames) == 0x000018, "Wrong size on FortActivityBrowserPlayWithFriendsTile_UpdatePartyMemberNames");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdatePartyMemberNames, Names) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdatePartyMemberNames::Names' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.UpdateRichPresence
// 0x0018 (0x0018 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_UpdateRichPresence final
{
public:
	class FText                                   RichPresence;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_UpdateRichPresence) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_UpdateRichPresence");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_UpdateRichPresence) == 0x000018, "Wrong size on FortActivityBrowserPlayWithFriendsTile_UpdateRichPresence");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdateRichPresence, RichPresence) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdateRichPresence::RichPresence' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.OnCategoryItemChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_OnCategoryItemChanged final
{
public:
	bool                                          bPlayAnimation;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_OnCategoryItemChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRow_OnCategoryItemChanged");
static_assert(sizeof(FortActivityBrowserRow_OnCategoryItemChanged) == 0x000001, "Wrong size on FortActivityBrowserRow_OnCategoryItemChanged");
static_assert(offsetof(FortActivityBrowserRow_OnCategoryItemChanged, bPlayAnimation) == 0x000000, "Member 'FortActivityBrowserRow_OnCategoryItemChanged::bPlayAnimation' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.OnRowIsActiveChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_OnRowIsActiveChanged final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_OnRowIsActiveChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRow_OnRowIsActiveChanged");
static_assert(sizeof(FortActivityBrowserRow_OnRowIsActiveChanged) == 0x000001, "Wrong size on FortActivityBrowserRow_OnRowIsActiveChanged");
static_assert(offsetof(FortActivityBrowserRow_OnRowIsActiveChanged, bIsActive) == 0x000000, "Member 'FortActivityBrowserRow_OnRowIsActiveChanged::bIsActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.OnRowIsSelectedChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_OnRowIsSelectedChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_OnRowIsSelectedChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRow_OnRowIsSelectedChanged");
static_assert(sizeof(FortActivityBrowserRow_OnRowIsSelectedChanged) == 0x000001, "Wrong size on FortActivityBrowserRow_OnRowIsSelectedChanged");
static_assert(offsetof(FortActivityBrowserRow_OnRowIsSelectedChanged, bIsSelected) == 0x000000, "Member 'FortActivityBrowserRow_OnRowIsSelectedChanged::bIsSelected' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.OnRowMoveDown
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_OnRowMoveDown final
{
public:
	bool                                          bMovingOffscreen;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_OnRowMoveDown) == 0x000001, "Wrong alignment on FortActivityBrowserRow_OnRowMoveDown");
static_assert(sizeof(FortActivityBrowserRow_OnRowMoveDown) == 0x000001, "Wrong size on FortActivityBrowserRow_OnRowMoveDown");
static_assert(offsetof(FortActivityBrowserRow_OnRowMoveDown, bMovingOffscreen) == 0x000000, "Member 'FortActivityBrowserRow_OnRowMoveDown::bMovingOffscreen' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.OnRowMoveUp
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_OnRowMoveUp final
{
public:
	bool                                          bMovingOffscreen;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_OnRowMoveUp) == 0x000001, "Wrong alignment on FortActivityBrowserRow_OnRowMoveUp");
static_assert(sizeof(FortActivityBrowserRow_OnRowMoveUp) == 0x000001, "Wrong size on FortActivityBrowserRow_OnRowMoveUp");
static_assert(offsetof(FortActivityBrowserRow_OnRowMoveUp, bMovingOffscreen) == 0x000000, "Member 'FortActivityBrowserRow_OnRowMoveUp::bMovingOffscreen' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.OnRowPeekStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_OnRowPeekStateChanged final
{
public:
	bool                                          bIsInPeekState;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_OnRowPeekStateChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRow_OnRowPeekStateChanged");
static_assert(sizeof(FortActivityBrowserRow_OnRowPeekStateChanged) == 0x000001, "Wrong size on FortActivityBrowserRow_OnRowPeekStateChanged");
static_assert(offsetof(FortActivityBrowserRow_OnRowPeekStateChanged, bIsInPeekState) == 0x000000, "Member 'FortActivityBrowserRow_OnRowPeekStateChanged::bIsInPeekState' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.GetIsActive
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_GetIsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_GetIsActive) == 0x000001, "Wrong alignment on FortActivityBrowserRow_GetIsActive");
static_assert(sizeof(FortActivityBrowserRow_GetIsActive) == 0x000001, "Wrong size on FortActivityBrowserRow_GetIsActive");
static_assert(offsetof(FortActivityBrowserRow_GetIsActive, ReturnValue) == 0x000000, "Member 'FortActivityBrowserRow_GetIsActive::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.GetIsInPeekState
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_GetIsInPeekState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_GetIsInPeekState) == 0x000001, "Wrong alignment on FortActivityBrowserRow_GetIsInPeekState");
static_assert(sizeof(FortActivityBrowserRow_GetIsInPeekState) == 0x000001, "Wrong size on FortActivityBrowserRow_GetIsInPeekState");
static_assert(offsetof(FortActivityBrowserRow_GetIsInPeekState, ReturnValue) == 0x000000, "Member 'FortActivityBrowserRow_GetIsInPeekState::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.GetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_GetIsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_GetIsSelected) == 0x000001, "Wrong alignment on FortActivityBrowserRow_GetIsSelected");
static_assert(sizeof(FortActivityBrowserRow_GetIsSelected) == 0x000001, "Wrong size on FortActivityBrowserRow_GetIsSelected");
static_assert(offsetof(FortActivityBrowserRow_GetIsSelected, ReturnValue) == 0x000000, "Member 'FortActivityBrowserRow_GetIsSelected::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowHero.OnListViewFinishedAddingEntries
// 0x0004 (0x0004 - 0x0000)
struct FortActivityBrowserRowHero_OnListViewFinishedAddingEntries final
{
public:
	int32                                         ActivityCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowHero_OnListViewFinishedAddingEntries) == 0x000004, "Wrong alignment on FortActivityBrowserRowHero_OnListViewFinishedAddingEntries");
static_assert(sizeof(FortActivityBrowserRowHero_OnListViewFinishedAddingEntries) == 0x000004, "Wrong size on FortActivityBrowserRowHero_OnListViewFinishedAddingEntries");
static_assert(offsetof(FortActivityBrowserRowHero_OnListViewFinishedAddingEntries, ActivityCount) == 0x000000, "Member 'FortActivityBrowserRowHero_OnListViewFinishedAddingEntries::ActivityCount' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowHero.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityBrowserRowHero_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowHero_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortActivityBrowserRowHero_OnPreviewImageChanged");
static_assert(sizeof(FortActivityBrowserRowHero_OnPreviewImageChanged) == 0x000010, "Wrong size on FortActivityBrowserRowHero_OnPreviewImageChanged");
static_assert(offsetof(FortActivityBrowserRowHero_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityBrowserRowHero_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityBrowserRowHero_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortActivityBrowserRowHero_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowHero.OnQueryStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRowHero_OnQueryStatusChanged final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowHero_OnQueryStatusChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRowHero_OnQueryStatusChanged");
static_assert(sizeof(FortActivityBrowserRowHero_OnQueryStatusChanged) == 0x000001, "Wrong size on FortActivityBrowserRowHero_OnQueryStatusChanged");
static_assert(offsetof(FortActivityBrowserRowHero_OnQueryStatusChanged, bIsActive) == 0x000000, "Member 'FortActivityBrowserRowHero_OnQueryStatusChanged::bIsActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowHero.OnRowHeroFocusChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRowHero_OnRowHeroFocusChanged final
{
public:
	bool                                          bHasFocus;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowHero_OnRowHeroFocusChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRowHero_OnRowHeroFocusChanged");
static_assert(sizeof(FortActivityBrowserRowHero_OnRowHeroFocusChanged) == 0x000001, "Wrong size on FortActivityBrowserRowHero_OnRowHeroFocusChanged");
static_assert(offsetof(FortActivityBrowserRowHero_OnRowHeroFocusChanged, bHasFocus) == 0x000000, "Member 'FortActivityBrowserRowHero_OnRowHeroFocusChanged::bHasFocus' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowHero.GetCurrentTexture
// 0x0008 (0x0008 - 0x0000)
struct FortActivityBrowserRowHero_GetCurrentTexture final
{
public:
	const class UTexture*                         ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowHero_GetCurrentTexture) == 0x000008, "Wrong alignment on FortActivityBrowserRowHero_GetCurrentTexture");
static_assert(sizeof(FortActivityBrowserRowHero_GetCurrentTexture) == 0x000008, "Wrong size on FortActivityBrowserRowHero_GetCurrentTexture");
static_assert(offsetof(FortActivityBrowserRowHero_GetCurrentTexture, ReturnValue) == 0x000000, "Member 'FortActivityBrowserRowHero_GetCurrentTexture::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowHero.GetKeyArtOutroAnimation
// 0x0008 (0x0008 - 0x0000)
struct FortActivityBrowserRowHero_GetKeyArtOutroAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowHero_GetKeyArtOutroAnimation) == 0x000008, "Wrong alignment on FortActivityBrowserRowHero_GetKeyArtOutroAnimation");
static_assert(sizeof(FortActivityBrowserRowHero_GetKeyArtOutroAnimation) == 0x000008, "Wrong size on FortActivityBrowserRowHero_GetKeyArtOutroAnimation");
static_assert(offsetof(FortActivityBrowserRowHero_GetKeyArtOutroAnimation, ReturnValue) == 0x000000, "Member 'FortActivityBrowserRowHero_GetKeyArtOutroAnimation::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowHero.IsImageLoading
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRowHero_IsImageLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowHero_IsImageLoading) == 0x000001, "Wrong alignment on FortActivityBrowserRowHero_IsImageLoading");
static_assert(sizeof(FortActivityBrowserRowHero_IsImageLoading) == 0x000001, "Wrong size on FortActivityBrowserRowHero_IsImageLoading");
static_assert(offsetof(FortActivityBrowserRowHero_IsImageLoading, ReturnValue) == 0x000000, "Member 'FortActivityBrowserRowHero_IsImageLoading::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowHero.IsInOutroState
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRowHero_IsInOutroState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowHero_IsInOutroState) == 0x000001, "Wrong alignment on FortActivityBrowserRowHero_IsInOutroState");
static_assert(sizeof(FortActivityBrowserRowHero_IsInOutroState) == 0x000001, "Wrong size on FortActivityBrowserRowHero_IsInOutroState");
static_assert(offsetof(FortActivityBrowserRowHero_IsInOutroState, ReturnValue) == 0x000000, "Member 'FortActivityBrowserRowHero_IsInOutroState::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowHero.IsShowingSeasonalContent
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRowHero_IsShowingSeasonalContent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowHero_IsShowingSeasonalContent) == 0x000001, "Wrong alignment on FortActivityBrowserRowHero_IsShowingSeasonalContent");
static_assert(sizeof(FortActivityBrowserRowHero_IsShowingSeasonalContent) == 0x000001, "Wrong size on FortActivityBrowserRowHero_IsShowingSeasonalContent");
static_assert(offsetof(FortActivityBrowserRowHero_IsShowingSeasonalContent, ReturnValue) == 0x000000, "Member 'FortActivityBrowserRowHero_IsShowingSeasonalContent::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowList.OnQueryStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRowList_OnQueryStatusChanged final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowList_OnQueryStatusChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRowList_OnQueryStatusChanged");
static_assert(sizeof(FortActivityBrowserRowList_OnQueryStatusChanged) == 0x000001, "Wrong size on FortActivityBrowserRowList_OnQueryStatusChanged");
static_assert(offsetof(FortActivityBrowserRowList_OnQueryStatusChanged, bIsActive) == 0x000000, "Member 'FortActivityBrowserRowList_OnQueryStatusChanged::bIsActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowPromoted.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityBrowserRowPromoted_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowPromoted_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortActivityBrowserRowPromoted_OnPreviewImageChanged");
static_assert(sizeof(FortActivityBrowserRowPromoted_OnPreviewImageChanged) == 0x000010, "Wrong size on FortActivityBrowserRowPromoted_OnPreviewImageChanged");
static_assert(offsetof(FortActivityBrowserRowPromoted_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityBrowserRowPromoted_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityBrowserRowPromoted_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortActivityBrowserRowPromoted_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserView.GetInvalidActivityReason
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserView_GetInvalidActivityReason final
{
public:
	EFortInvalidActivityReason                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserView_GetInvalidActivityReason) == 0x000001, "Wrong alignment on FortActivityBrowserView_GetInvalidActivityReason");
static_assert(sizeof(FortActivityBrowserView_GetInvalidActivityReason) == 0x000001, "Wrong size on FortActivityBrowserView_GetInvalidActivityReason");
static_assert(offsetof(FortActivityBrowserView_GetInvalidActivityReason, ReturnValue) == 0x000000, "Member 'FortActivityBrowserView_GetInvalidActivityReason::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowView.OnRowChanged
// 0x0004 (0x0004 - 0x0000)
struct FortActivityBrowserRowView_OnRowChanged final
{
public:
	int32                                         NewCategoryIndex;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowView_OnRowChanged) == 0x000004, "Wrong alignment on FortActivityBrowserRowView_OnRowChanged");
static_assert(sizeof(FortActivityBrowserRowView_OnRowChanged) == 0x000004, "Wrong size on FortActivityBrowserRowView_OnRowChanged");
static_assert(offsetof(FortActivityBrowserRowView_OnRowChanged, NewCategoryIndex) == 0x000000, "Member 'FortActivityBrowserRowView_OnRowChanged::NewCategoryIndex' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityCategoryTile.OnTileActiveSet
// 0x0001 (0x0001 - 0x0000)
struct FortActivityCategoryTile_OnTileActiveSet final
{
public:
	bool                                          bIsTileActive;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityCategoryTile_OnTileActiveSet) == 0x000001, "Wrong alignment on FortActivityCategoryTile_OnTileActiveSet");
static_assert(sizeof(FortActivityCategoryTile_OnTileActiveSet) == 0x000001, "Wrong size on FortActivityCategoryTile_OnTileActiveSet");
static_assert(offsetof(FortActivityCategoryTile_OnTileActiveSet, bIsTileActive) == 0x000000, "Member 'FortActivityCategoryTile_OnTileActiveSet::bIsTileActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityCategoryView.NavigateFromPanel
// 0x0018 (0x0018 - 0x0000)
struct FortActivityCategoryView_NavigateFromPanel final
{
public:
	EUINavigation                                 Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortActivityCategoryTilePanel*         NavigatingPanel;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortActivityCategoryTilePanel*         ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityCategoryView_NavigateFromPanel) == 0x000008, "Wrong alignment on FortActivityCategoryView_NavigateFromPanel");
static_assert(sizeof(FortActivityCategoryView_NavigateFromPanel) == 0x000018, "Wrong size on FortActivityCategoryView_NavigateFromPanel");
static_assert(offsetof(FortActivityCategoryView_NavigateFromPanel, Direction) == 0x000000, "Member 'FortActivityCategoryView_NavigateFromPanel::Direction' has a wrong offset!");
static_assert(offsetof(FortActivityCategoryView_NavigateFromPanel, NavigatingPanel) == 0x000008, "Member 'FortActivityCategoryView_NavigateFromPanel::NavigatingPanel' has a wrong offset!");
static_assert(offsetof(FortActivityCategoryView_NavigateFromPanel, ReturnValue) == 0x000010, "Member 'FortActivityCategoryView_NavigateFromPanel::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityCategoryView.OnCategoryTilePanelSelected
// 0x0008 (0x0008 - 0x0000)
struct FortActivityCategoryView_OnCategoryTilePanelSelected final
{
public:
	const class UFortActivityCategoryTilePanel*   SelectedPanel;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityCategoryView_OnCategoryTilePanelSelected) == 0x000008, "Wrong alignment on FortActivityCategoryView_OnCategoryTilePanelSelected");
static_assert(sizeof(FortActivityCategoryView_OnCategoryTilePanelSelected) == 0x000008, "Wrong size on FortActivityCategoryView_OnCategoryTilePanelSelected");
static_assert(offsetof(FortActivityCategoryView_OnCategoryTilePanelSelected, SelectedPanel) == 0x000000, "Member 'FortActivityCategoryView_OnCategoryTilePanelSelected::SelectedPanel' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityCategoryView.GetCurrentSelectedPanel
// 0x0008 (0x0008 - 0x0000)
struct FortActivityCategoryView_GetCurrentSelectedPanel final
{
public:
	const class UFortActivityCategoryTilePanel*   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityCategoryView_GetCurrentSelectedPanel) == 0x000008, "Wrong alignment on FortActivityCategoryView_GetCurrentSelectedPanel");
static_assert(sizeof(FortActivityCategoryView_GetCurrentSelectedPanel) == 0x000008, "Wrong size on FortActivityCategoryView_GetCurrentSelectedPanel");
static_assert(offsetof(FortActivityCategoryView_GetCurrentSelectedPanel, ReturnValue) == 0x000000, "Member 'FortActivityCategoryView_GetCurrentSelectedPanel::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityCategoryView.GetTopMostVisiblePanel
// 0x0008 (0x0008 - 0x0000)
struct FortActivityCategoryView_GetTopMostVisiblePanel final
{
public:
	class UFortActivityCategoryTilePanel*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityCategoryView_GetTopMostVisiblePanel) == 0x000008, "Wrong alignment on FortActivityCategoryView_GetTopMostVisiblePanel");
static_assert(sizeof(FortActivityCategoryView_GetTopMostVisiblePanel) == 0x000008, "Wrong size on FortActivityCategoryView_GetTopMostVisiblePanel");
static_assert(offsetof(FortActivityCategoryView_GetTopMostVisiblePanel, ReturnValue) == 0x000000, "Member 'FortActivityCategoryView_GetTopMostVisiblePanel::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityCreateView.GetInvalidCreativeActivityReason
// 0x0001 (0x0001 - 0x0000)
struct FortActivityCreateView_GetInvalidCreativeActivityReason final
{
public:
	EFortInvalidActivityReason                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityCreateView_GetInvalidCreativeActivityReason) == 0x000001, "Wrong alignment on FortActivityCreateView_GetInvalidCreativeActivityReason");
static_assert(sizeof(FortActivityCreateView_GetInvalidCreativeActivityReason) == 0x000001, "Wrong size on FortActivityCreateView_GetInvalidCreativeActivityReason");
static_assert(offsetof(FortActivityCreateView_GetInvalidCreativeActivityReason, ReturnValue) == 0x000000, "Member 'FortActivityCreateView_GetInvalidCreativeActivityReason::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.OnMoviePlayingChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverView_OnMoviePlayingChanged final
{
public:
	bool                                          bIsPlaying;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_OnMoviePlayingChanged) == 0x000001, "Wrong alignment on FortActivityDiscoverView_OnMoviePlayingChanged");
static_assert(sizeof(FortActivityDiscoverView_OnMoviePlayingChanged) == 0x000001, "Wrong size on FortActivityDiscoverView_OnMoviePlayingChanged");
static_assert(offsetof(FortActivityDiscoverView_OnMoviePlayingChanged, bIsPlaying) == 0x000000, "Member 'FortActivityDiscoverView_OnMoviePlayingChanged::bIsPlaying' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityDiscoverView_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortActivityDiscoverView_OnPreviewImageChanged");
static_assert(sizeof(FortActivityDiscoverView_OnPreviewImageChanged) == 0x000010, "Wrong size on FortActivityDiscoverView_OnPreviewImageChanged");
static_assert(offsetof(FortActivityDiscoverView_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityDiscoverView_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityDiscoverView_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortActivityDiscoverView_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.GetCurrentTexture
// 0x0008 (0x0008 - 0x0000)
struct FortActivityDiscoverView_GetCurrentTexture final
{
public:
	const class UTexture*                         ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_GetCurrentTexture) == 0x000008, "Wrong alignment on FortActivityDiscoverView_GetCurrentTexture");
static_assert(sizeof(FortActivityDiscoverView_GetCurrentTexture) == 0x000008, "Wrong size on FortActivityDiscoverView_GetCurrentTexture");
static_assert(offsetof(FortActivityDiscoverView_GetCurrentTexture, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_GetCurrentTexture::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.GetKeyArtOutroAnimation
// 0x0008 (0x0008 - 0x0000)
struct FortActivityDiscoverView_GetKeyArtOutroAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_GetKeyArtOutroAnimation) == 0x000008, "Wrong alignment on FortActivityDiscoverView_GetKeyArtOutroAnimation");
static_assert(sizeof(FortActivityDiscoverView_GetKeyArtOutroAnimation) == 0x000008, "Wrong size on FortActivityDiscoverView_GetKeyArtOutroAnimation");
static_assert(offsetof(FortActivityDiscoverView_GetKeyArtOutroAnimation, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_GetKeyArtOutroAnimation::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.GetMovieWidget
// 0x0008 (0x0008 - 0x0000)
struct FortActivityDiscoverView_GetMovieWidget final
{
public:
	class UFortActivatableMovieWidget*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_GetMovieWidget) == 0x000008, "Wrong alignment on FortActivityDiscoverView_GetMovieWidget");
static_assert(sizeof(FortActivityDiscoverView_GetMovieWidget) == 0x000008, "Wrong size on FortActivityDiscoverView_GetMovieWidget");
static_assert(offsetof(FortActivityDiscoverView_GetMovieWidget, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_GetMovieWidget::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.GetPromotedMovieWidget
// 0x0008 (0x0008 - 0x0000)
struct FortActivityDiscoverView_GetPromotedMovieWidget final
{
public:
	class UFortActivatableMovieWidget*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_GetPromotedMovieWidget) == 0x000008, "Wrong alignment on FortActivityDiscoverView_GetPromotedMovieWidget");
static_assert(sizeof(FortActivityDiscoverView_GetPromotedMovieWidget) == 0x000008, "Wrong size on FortActivityDiscoverView_GetPromotedMovieWidget");
static_assert(offsetof(FortActivityDiscoverView_GetPromotedMovieWidget, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_GetPromotedMovieWidget::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.IsImageLoading
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverView_IsImageLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_IsImageLoading) == 0x000001, "Wrong alignment on FortActivityDiscoverView_IsImageLoading");
static_assert(sizeof(FortActivityDiscoverView_IsImageLoading) == 0x000001, "Wrong size on FortActivityDiscoverView_IsImageLoading");
static_assert(offsetof(FortActivityDiscoverView_IsImageLoading, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_IsImageLoading::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.IsInOutroState
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverView_IsInOutroState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_IsInOutroState) == 0x000001, "Wrong alignment on FortActivityDiscoverView_IsInOutroState");
static_assert(sizeof(FortActivityDiscoverView_IsInOutroState) == 0x000001, "Wrong size on FortActivityDiscoverView_IsInOutroState");
static_assert(offsetof(FortActivityDiscoverView_IsInOutroState, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_IsInOutroState::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.IsShowingPromotedContent
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverView_IsShowingPromotedContent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_IsShowingPromotedContent) == 0x000001, "Wrong alignment on FortActivityDiscoverView_IsShowingPromotedContent");
static_assert(sizeof(FortActivityDiscoverView_IsShowingPromotedContent) == 0x000001, "Wrong size on FortActivityDiscoverView_IsShowingPromotedContent");
static_assert(offsetof(FortActivityDiscoverView_IsShowingPromotedContent, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_IsShowingPromotedContent::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.IsShowingSeasonalContent
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverView_IsShowingSeasonalContent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_IsShowingSeasonalContent) == 0x000001, "Wrong alignment on FortActivityDiscoverView_IsShowingSeasonalContent");
static_assert(sizeof(FortActivityDiscoverView_IsShowingSeasonalContent) == 0x000001, "Wrong size on FortActivityDiscoverView_IsShowingSeasonalContent");
static_assert(offsetof(FortActivityDiscoverView_IsShowingSeasonalContent, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_IsShowingSeasonalContent::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverViewV2.IsShowingPromotedContent
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverViewV2_IsShowingPromotedContent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverViewV2_IsShowingPromotedContent) == 0x000001, "Wrong alignment on FortActivityDiscoverViewV2_IsShowingPromotedContent");
static_assert(sizeof(FortActivityDiscoverViewV2_IsShowingPromotedContent) == 0x000001, "Wrong size on FortActivityDiscoverViewV2_IsShowingPromotedContent");
static_assert(offsetof(FortActivityDiscoverViewV2_IsShowingPromotedContent, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverViewV2_IsShowingPromotedContent::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverViewV2.IsShowingSeasonalContent
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverViewV2_IsShowingSeasonalContent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverViewV2_IsShowingSeasonalContent) == 0x000001, "Wrong alignment on FortActivityDiscoverViewV2_IsShowingSeasonalContent");
static_assert(sizeof(FortActivityDiscoverViewV2_IsShowingSeasonalContent) == 0x000001, "Wrong size on FortActivityDiscoverViewV2_IsShowingSeasonalContent");
static_assert(offsetof(FortActivityDiscoverViewV2_IsShowingSeasonalContent, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverViewV2_IsShowingSeasonalContent::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityListView.GetInViewCount
// 0x0004 (0x0004 - 0x0000)
struct FortActivityListView_GetInViewCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityListView_GetInViewCount) == 0x000004, "Wrong alignment on FortActivityListView_GetInViewCount");
static_assert(sizeof(FortActivityListView_GetInViewCount) == 0x000004, "Wrong size on FortActivityListView_GetInViewCount");
static_assert(offsetof(FortActivityListView_GetInViewCount, ReturnValue) == 0x000000, "Member 'FortActivityListView_GetInViewCount::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityLobbyTile.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityLobbyTile_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityLobbyTile_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortActivityLobbyTile_OnPreviewImageChanged");
static_assert(sizeof(FortActivityLobbyTile_OnPreviewImageChanged) == 0x000010, "Wrong size on FortActivityLobbyTile_OnPreviewImageChanged");
static_assert(offsetof(FortActivityLobbyTile_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityLobbyTile_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityLobbyTile_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortActivityLobbyTile_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityLobbyTile.OnShowChildActivityChangedNotification
// 0x0018 (0x0018 - 0x0000)
struct FortActivityLobbyTile_OnShowChildActivityChangedNotification final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityLobbyTile_OnShowChildActivityChangedNotification) == 0x000008, "Wrong alignment on FortActivityLobbyTile_OnShowChildActivityChangedNotification");
static_assert(sizeof(FortActivityLobbyTile_OnShowChildActivityChangedNotification) == 0x000018, "Wrong size on FortActivityLobbyTile_OnShowChildActivityChangedNotification");
static_assert(offsetof(FortActivityLobbyTile_OnShowChildActivityChangedNotification, DisplayName) == 0x000000, "Member 'FortActivityLobbyTile_OnShowChildActivityChangedNotification::DisplayName' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityLobbyTile.GetChildActivityDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortActivityLobbyTile_GetChildActivityDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityLobbyTile_GetChildActivityDisplayName) == 0x000008, "Wrong alignment on FortActivityLobbyTile_GetChildActivityDisplayName");
static_assert(sizeof(FortActivityLobbyTile_GetChildActivityDisplayName) == 0x000018, "Wrong size on FortActivityLobbyTile_GetChildActivityDisplayName");
static_assert(offsetof(FortActivityLobbyTile_GetChildActivityDisplayName, ReturnValue) == 0x000000, "Member 'FortActivityLobbyTile_GetChildActivityDisplayName::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityLobbyTile.IsActivityEpicCreated
// 0x0001 (0x0001 - 0x0000)
struct FortActivityLobbyTile_IsActivityEpicCreated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityLobbyTile_IsActivityEpicCreated) == 0x000001, "Wrong alignment on FortActivityLobbyTile_IsActivityEpicCreated");
static_assert(sizeof(FortActivityLobbyTile_IsActivityEpicCreated) == 0x000001, "Wrong size on FortActivityLobbyTile_IsActivityEpicCreated");
static_assert(offsetof(FortActivityLobbyTile_IsActivityEpicCreated, ReturnValue) == 0x000000, "Member 'FortActivityLobbyTile_IsActivityEpicCreated::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityLobbyTile.IsModeSetActivity
// 0x0001 (0x0001 - 0x0000)
struct FortActivityLobbyTile_IsModeSetActivity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityLobbyTile_IsModeSetActivity) == 0x000001, "Wrong alignment on FortActivityLobbyTile_IsModeSetActivity");
static_assert(sizeof(FortActivityLobbyTile_IsModeSetActivity) == 0x000001, "Wrong size on FortActivityLobbyTile_IsModeSetActivity");
static_assert(offsetof(FortActivityLobbyTile_IsModeSetActivity, ReturnValue) == 0x000000, "Member 'FortActivityLobbyTile_IsModeSetActivity::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityModeSetSelectionModal.OnActivityChanged
// 0x0018 (0x0018 - 0x0000)
struct FortActivityModeSetSelectionModal_OnActivityChanged final
{
public:
	const class UFortGameActivity*                GameActivity;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartingSelectedMnemonic;                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityModeSetSelectionModal_OnActivityChanged) == 0x000008, "Wrong alignment on FortActivityModeSetSelectionModal_OnActivityChanged");
static_assert(sizeof(FortActivityModeSetSelectionModal_OnActivityChanged) == 0x000018, "Wrong size on FortActivityModeSetSelectionModal_OnActivityChanged");
static_assert(offsetof(FortActivityModeSetSelectionModal_OnActivityChanged, GameActivity) == 0x000000, "Member 'FortActivityModeSetSelectionModal_OnActivityChanged::GameActivity' has a wrong offset!");
static_assert(offsetof(FortActivityModeSetSelectionModal_OnActivityChanged, StartingSelectedMnemonic) == 0x000008, "Member 'FortActivityModeSetSelectionModal_OnActivityChanged::StartingSelectedMnemonic' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityModeSetSelectionModal.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityModeSetSelectionModal_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityModeSetSelectionModal_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortActivityModeSetSelectionModal_OnPreviewImageChanged");
static_assert(sizeof(FortActivityModeSetSelectionModal_OnPreviewImageChanged) == 0x000010, "Wrong size on FortActivityModeSetSelectionModal_OnPreviewImageChanged");
static_assert(offsetof(FortActivityModeSetSelectionModal_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityModeSetSelectionModal_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityModeSetSelectionModal_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortActivityModeSetSelectionModal_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivitySearchView.HandleTextChanged
// 0x0018 (0x0018 - 0x0000)
struct FortActivitySearchView_HandleTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivitySearchView_HandleTextChanged) == 0x000008, "Wrong alignment on FortActivitySearchView_HandleTextChanged");
static_assert(sizeof(FortActivitySearchView_HandleTextChanged) == 0x000018, "Wrong size on FortActivitySearchView_HandleTextChanged");
static_assert(offsetof(FortActivitySearchView_HandleTextChanged, Text) == 0x000000, "Member 'FortActivitySearchView_HandleTextChanged::Text' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivitySearchView.HandleTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct FortActivitySearchView_HandleTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitInfo;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortActivitySearchView_HandleTextCommitted) == 0x000008, "Wrong alignment on FortActivitySearchView_HandleTextCommitted");
static_assert(sizeof(FortActivitySearchView_HandleTextCommitted) == 0x000020, "Wrong size on FortActivitySearchView_HandleTextCommitted");
static_assert(offsetof(FortActivitySearchView_HandleTextCommitted, InText) == 0x000000, "Member 'FortActivitySearchView_HandleTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(FortActivitySearchView_HandleTextCommitted, CommitInfo) == 0x000018, "Member 'FortActivitySearchView_HandleTextCommitted::CommitInfo' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivitySearchView.OnActivityValidated
// 0x0001 (0x0001 - 0x0000)
struct FortActivitySearchView_OnActivityValidated final
{
public:
	EFortActivityValidationResult                 ValidateResult;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivitySearchView_OnActivityValidated) == 0x000001, "Wrong alignment on FortActivitySearchView_OnActivityValidated");
static_assert(sizeof(FortActivitySearchView_OnActivityValidated) == 0x000001, "Wrong size on FortActivitySearchView_OnActivityValidated");
static_assert(offsetof(FortActivitySearchView_OnActivityValidated, ValidateResult) == 0x000000, "Member 'FortActivitySearchView_OnActivityValidated::ValidateResult' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnIsFavoriteChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_OnIsFavoriteChanged final
{
public:
	bool                                          bIsFavorite;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnIsFavoriteChanged) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_OnIsFavoriteChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnIsFavoriteChanged) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_OnIsFavoriteChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnIsFavoriteChanged, bIsFavorite) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnIsFavoriteChanged::bIsFavorite' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnLogoImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityTileDetailsDisplay_OnLogoImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnLogoImageChanged) == 0x000008, "Wrong alignment on FortActivityTileDetailsDisplay_OnLogoImageChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnLogoImageChanged) == 0x000010, "Wrong size on FortActivityTileDetailsDisplay_OnLogoImageChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnLogoImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnLogoImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnLogoImageChanged, Texture) == 0x000008, "Member 'FortActivityTileDetailsDisplay_OnLogoImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnPartySizeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortActivityTileDetailsDisplay_OnPartySizeChanged final
{
public:
	int32                                         PartySize;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnPartySizeChanged) == 0x000004, "Wrong alignment on FortActivityTileDetailsDisplay_OnPartySizeChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnPartySizeChanged) == 0x000004, "Wrong size on FortActivityTileDetailsDisplay_OnPartySizeChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnPartySizeChanged, PartySize) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnPartySizeChanged::PartySize' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityTileDetailsDisplay_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortActivityTileDetailsDisplay_OnPreviewImageChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnPreviewImageChanged) == 0x000010, "Wrong size on FortActivityTileDetailsDisplay_OnPreviewImageChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortActivityTileDetailsDisplay_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnRequiresPurchaseChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_OnRequiresPurchaseChanged final
{
public:
	bool                                          bRequiresPurchase;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnRequiresPurchaseChanged) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_OnRequiresPurchaseChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnRequiresPurchaseChanged) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_OnRequiresPurchaseChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnRequiresPurchaseChanged, bRequiresPurchase) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnRequiresPurchaseChanged::bRequiresPurchase' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnSocialUsersPlayingChanged
// 0x0004 (0x0004 - 0x0000)
struct FortActivityTileDetailsDisplay_OnSocialUsersPlayingChanged final
{
public:
	int32                                         NumPlaying;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnSocialUsersPlayingChanged) == 0x000004, "Wrong alignment on FortActivityTileDetailsDisplay_OnSocialUsersPlayingChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnSocialUsersPlayingChanged) == 0x000004, "Wrong size on FortActivityTileDetailsDisplay_OnSocialUsersPlayingChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnSocialUsersPlayingChanged, NumPlaying) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnSocialUsersPlayingChanged::NumPlaying' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnTileActiveSet
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_OnTileActiveSet final
{
public:
	bool                                          bIsTileActive;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnTileActiveSet) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_OnTileActiveSet");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnTileActiveSet) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_OnTileActiveSet");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnTileActiveSet, bIsTileActive) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnTileActiveSet::bIsTileActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnUpdateColumnSize
// 0x0004 (0x0004 - 0x0000)
struct FortActivityTileDetailsDisplay_OnUpdateColumnSize final
{
public:
	int32                                         NewColumnSize;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnUpdateColumnSize) == 0x000004, "Wrong alignment on FortActivityTileDetailsDisplay_OnUpdateColumnSize");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnUpdateColumnSize) == 0x000004, "Wrong size on FortActivityTileDetailsDisplay_OnUpdateColumnSize");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnUpdateColumnSize, NewColumnSize) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnUpdateColumnSize::NewColumnSize' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.ShouldPlayTileVideo
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_ShouldPlayTileVideo final
{
public:
	bool                                          bOutResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_ShouldPlayTileVideo) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_ShouldPlayTileVideo");
static_assert(sizeof(FortActivityTileDetailsDisplay_ShouldPlayTileVideo) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_ShouldPlayTileVideo");
static_assert(offsetof(FortActivityTileDetailsDisplay_ShouldPlayTileVideo, bOutResult) == 0x000000, "Member 'FortActivityTileDetailsDisplay_ShouldPlayTileVideo::bOutResult' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.UpdateCCU
// 0x0004 (0x0004 - 0x0000)
struct FortActivityTileDetailsDisplay_UpdateCCU final
{
public:
	int32                                         CCUCount;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_UpdateCCU) == 0x000004, "Wrong alignment on FortActivityTileDetailsDisplay_UpdateCCU");
static_assert(sizeof(FortActivityTileDetailsDisplay_UpdateCCU) == 0x000004, "Wrong size on FortActivityTileDetailsDisplay_UpdateCCU");
static_assert(offsetof(FortActivityTileDetailsDisplay_UpdateCCU, CCUCount) == 0x000000, "Member 'FortActivityTileDetailsDisplay_UpdateCCU::CCUCount' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.DoesActivityRequirePurchase
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_DoesActivityRequirePurchase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_DoesActivityRequirePurchase) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_DoesActivityRequirePurchase");
static_assert(sizeof(FortActivityTileDetailsDisplay_DoesActivityRequirePurchase) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_DoesActivityRequirePurchase");
static_assert(offsetof(FortActivityTileDetailsDisplay_DoesActivityRequirePurchase, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_DoesActivityRequirePurchase::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.GetInvalidActivityReason
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_GetInvalidActivityReason final
{
public:
	EFortInvalidActivityReason                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_GetInvalidActivityReason) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_GetInvalidActivityReason");
static_assert(sizeof(FortActivityTileDetailsDisplay_GetInvalidActivityReason) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_GetInvalidActivityReason");
static_assert(offsetof(FortActivityTileDetailsDisplay_GetInvalidActivityReason, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_GetInvalidActivityReason::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.IsActivityEpicCreated
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_IsActivityEpicCreated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_IsActivityEpicCreated) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_IsActivityEpicCreated");
static_assert(sizeof(FortActivityTileDetailsDisplay_IsActivityEpicCreated) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_IsActivityEpicCreated");
static_assert(offsetof(FortActivityTileDetailsDisplay_IsActivityEpicCreated, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_IsActivityEpicCreated::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.IsActivityFavorited
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_IsActivityFavorited final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_IsActivityFavorited) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_IsActivityFavorited");
static_assert(sizeof(FortActivityTileDetailsDisplay_IsActivityFavorited) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_IsActivityFavorited");
static_assert(offsetof(FortActivityTileDetailsDisplay_IsActivityFavorited, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_IsActivityFavorited::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.IsModeSetActivity
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_IsModeSetActivity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_IsModeSetActivity) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_IsModeSetActivity");
static_assert(sizeof(FortActivityTileDetailsDisplay_IsModeSetActivity) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_IsModeSetActivity");
static_assert(offsetof(FortActivityTileDetailsDisplay_IsModeSetActivity, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_IsModeSetActivity::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileView.SetListenForMouseWheelInput
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileView_SetListenForMouseWheelInput final
{
public:
	bool                                          bListenForInput;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileView_SetListenForMouseWheelInput) == 0x000001, "Wrong alignment on FortActivityTileView_SetListenForMouseWheelInput");
static_assert(sizeof(FortActivityTileView_SetListenForMouseWheelInput) == 0x000001, "Wrong size on FortActivityTileView_SetListenForMouseWheelInput");
static_assert(offsetof(FortActivityTileView_SetListenForMouseWheelInput, bListenForInput) == 0x000000, "Member 'FortActivityTileView_SetListenForMouseWheelInput::bListenForInput' has a wrong offset!");

}

