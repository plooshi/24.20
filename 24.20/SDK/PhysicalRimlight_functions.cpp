#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhysicalRimlight

#include "Basic.hpp"

#include "PhysicalRimlight_classes.hpp"
#include "PhysicalRimlight_parameters.hpp"


namespace SDK
{

// Function PhysicalRimlight.PhysicalRimlight_C.Day Phase 
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EFortDayPhase                           CurrentDayPhase                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFortDayPhase                           PreviousDayPhase                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAtCreation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APhysicalRimlight_C::Day_Phase_(EFortDayPhase CurrentDayPhase, EFortDayPhase PreviousDayPhase, bool bAtCreation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalRimlight_C", "Day Phase ");

	Params::PhysicalRimlight_C_Day_Phase_ Parms{};

	Parms.CurrentDayPhase = CurrentDayPhase;
	Parms.PreviousDayPhase = PreviousDayPhase;
	Parms.bAtCreation = bAtCreation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PhysicalRimlight.PhysicalRimlight_C.ExecuteUbergraph_PhysicalRimlight
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APhysicalRimlight_C::ExecuteUbergraph_PhysicalRimlight(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalRimlight_C", "ExecuteUbergraph_PhysicalRimlight");

	Params::PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PhysicalRimlight.PhysicalRimlight_C.InitRim
// (BlueprintCallable, BlueprintEvent)

void APhysicalRimlight_C::InitRim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalRimlight_C", "InitRim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PhysicalRimlight.PhysicalRimlight_C.PhysicalRimlight_AutoGenFunc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CVarName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void APhysicalRimlight_C::PhysicalRimlight_AutoGenFunc(const class FString& CVarName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalRimlight_C", "PhysicalRimlight_AutoGenFunc");

	Params::PhysicalRimlight_C_PhysicalRimlight_AutoGenFunc Parms{};

	Parms.CVarName = std::move(CVarName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PhysicalRimlight.PhysicalRimlight_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void APhysicalRimlight_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalRimlight_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PhysicalRimlight.PhysicalRimlight_C.RimlightAttemptValidation
// (Public, BlueprintCallable, BlueprintEvent)

void APhysicalRimlight_C::RimlightAttemptValidation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalRimlight_C", "RimlightAttemptValidation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PhysicalRimlight.PhysicalRimlight_C.Set Rimlight Color and Intensity
// (Public, BlueprintCallable, BlueprintEvent)

void APhysicalRimlight_C::Set_Rimlight_Color_and_Intensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalRimlight_C", "Set Rimlight Color and Intensity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PhysicalRimlight.PhysicalRimlight_C.UpdateRimlight
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void APhysicalRimlight_C::UpdateRimlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalRimlight_C", "UpdateRimlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PhysicalRimlight.PhysicalRimlight_C.ValidateRimlight
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void APhysicalRimlight_C::ValidateRimlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicalRimlight_C", "ValidateRimlight");

	UObject::ProcessEvent(Func, nullptr);
}

}

