#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MantisRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "IrisCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Enum MantisRuntime.EFortMantisTechniqueActivationInputType
// NumValues: 0x0005
enum class EFortMantisTechniqueActivationInputType : uint8
{
	None                                     = 0,
	Primary                                  = 1,
	Secondary                                = 2,
	Max_Invalid                              = 3,
	EFortMantisTechniqueActivationInputType_MAX = 4,
};

// Enum MantisRuntime.EFortMantisTechniqueActivationTimingType
// NumValues: 0x0004
enum class EFortMantisTechniqueActivationTimingType : uint8
{
	None                                     = 0,
	Pressed                                  = 1,
	Released                                 = 2,
	EFortMantisTechniqueActivationTimingType_MAX = 3,
};

// Enum MantisRuntime.EFortMantisTechniqueAnimationType
// NumValues: 0x0004
enum class EFortMantisTechniqueAnimationType : uint8
{
	SingleMontage                            = 0,
	DynamicMontage                           = 1,
	AnimInstance                             = 2,
	EFortMantisTechniqueAnimationType_MAX    = 3,
};

// Enum MantisRuntime.EFortMantisTechniqueRootMotionType
// NumValues: 0x0003
enum class EFortMantisTechniqueRootMotionType : uint8
{
	None                                     = 0,
	ExtractFromMontageAndWarp                = 1,
	EFortMantisTechniqueRootMotionType_MAX   = 2,
};

// Enum MantisRuntime.EFortMantisNotifyEvent
// NumValues: 0x0004
enum class EFortMantisNotifyEvent : uint8
{
	Invalid                                  = 0,
	Branch                                   = 1,
	EndTechnique                             = 2,
	EFortMantisNotifyEvent_MAX               = 3,
};

// Enum MantisRuntime.EFortMantisNotifyWindow
// NumValues: 0x0006
enum class EFortMantisNotifyWindow : uint8
{
	Invalid                                  = 0,
	Input                                    = 1,
	Execution                                = 2,
	Damage                                   = 3,
	RootMotionWarp                           = 4,
	EFortMantisNotifyWindow_MAX              = 5,
};

// Enum MantisRuntime.EFortMantisNotifyRotationWarpRateRule
// NumValues: 0x0003
enum class EFortMantisNotifyRotationWarpRateRule : uint8
{
	Snap                                     = 0,
	WindowDurationLerp                       = 1,
	EFortMantisNotifyRotationWarpRateRule_MAX = 2,
};

// Enum MantisRuntime.EFortMantisBranchRule
// NumValues: 0x0004
enum class EFortMantisBranchRule : uint8
{
	Off                                      = 0,
	Any                                      = 1,
	Starter                                  = 2,
	EFortMantisBranchRule_MAX                = 3,
};

// Enum MantisRuntime.EFortMantisBranchPath
// NumValues: 0x0008
enum class EFortMantisBranchPath : uint8
{
	Default                                  = 0,
	Path_1                                   = 1,
	Path_2                                   = 2,
	Path_3                                   = 3,
	Path_4                                   = 4,
	Path_5                                   = 5,
	Blocked                                  = 6,
	EFortMantisBranchPath_MAX                = 7,
};

// ScriptStruct MantisRuntime.FortMantisRootMotionWarpInfo
// 0x0028 (0x0028 - 0x0000)
struct FFortMantisRootMotionWarpInfo final
{
public:
	TWeakObjectPtr<class AActor>                  WarpTarget;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector_NetQuantize                    LastValidWarpTargetLocation;                       // 0x0008(0x0018)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BitPad_20_0 : 1;                                   // 0x0020(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bAllowTranslationWarp : 1;                         // 0x0020(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bAllowRotationWarp : 1;                            // 0x0020(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bSnapshotTargetLocation : 1;                       // 0x0020(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMantisRootMotionWarpInfo) == 0x000008, "Wrong alignment on FFortMantisRootMotionWarpInfo");
static_assert(sizeof(FFortMantisRootMotionWarpInfo) == 0x000028, "Wrong size on FFortMantisRootMotionWarpInfo");
static_assert(offsetof(FFortMantisRootMotionWarpInfo, WarpTarget) == 0x000000, "Member 'FFortMantisRootMotionWarpInfo::WarpTarget' has a wrong offset!");
static_assert(offsetof(FFortMantisRootMotionWarpInfo, LastValidWarpTargetLocation) == 0x000008, "Member 'FFortMantisRootMotionWarpInfo::LastValidWarpTargetLocation' has a wrong offset!");

// ScriptStruct MantisRuntime.FortRootMotionSource_Mantis
// 0x0080 (0x0160 - 0x00E0)
struct FFortRootMotionSource_Mantis final : public FRootMotionSource
{
public:
	float                                         CurrentTechniqueTime;                              // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           TechniqueMontage;                                  // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMantisRootMotionWarpInfo          WarpInfo;                                          // 0x00E8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LatestRepMovementLocation;                         // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x38];                                     // 0x0128(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRootMotionSource_Mantis) == 0x000010, "Wrong alignment on FFortRootMotionSource_Mantis");
static_assert(sizeof(FFortRootMotionSource_Mantis) == 0x000160, "Wrong size on FFortRootMotionSource_Mantis");
static_assert(offsetof(FFortRootMotionSource_Mantis, CurrentTechniqueTime) == 0x0000D8, "Member 'FFortRootMotionSource_Mantis::CurrentTechniqueTime' has a wrong offset!");
static_assert(offsetof(FFortRootMotionSource_Mantis, TechniqueMontage) == 0x0000E0, "Member 'FFortRootMotionSource_Mantis::TechniqueMontage' has a wrong offset!");
static_assert(offsetof(FFortRootMotionSource_Mantis, WarpInfo) == 0x0000E8, "Member 'FFortRootMotionSource_Mantis::WarpInfo' has a wrong offset!");
static_assert(offsetof(FFortRootMotionSource_Mantis, LatestRepMovementLocation) == 0x000110, "Member 'FFortRootMotionSource_Mantis::LatestRepMovementLocation' has a wrong offset!");

// ScriptStruct MantisRuntime.FortMantisTechniqueMetadata
// 0x0140 (0x0140 - 0x0000)
struct FFortMantisTechniqueMetadata final
{
public:
	TMap<struct FGameplayTag, int32>              IntValues;                                         // 0x0000(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, float>              FloatValues;                                       // 0x0050(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FVector>     VectorValues;                                      // 0x00A0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, class FString>      StringValues;                                      // 0x00F0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMantisTechniqueMetadata) == 0x000008, "Wrong alignment on FFortMantisTechniqueMetadata");
static_assert(sizeof(FFortMantisTechniqueMetadata) == 0x000140, "Wrong size on FFortMantisTechniqueMetadata");
static_assert(offsetof(FFortMantisTechniqueMetadata, IntValues) == 0x000000, "Member 'FFortMantisTechniqueMetadata::IntValues' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueMetadata, FloatValues) == 0x000050, "Member 'FFortMantisTechniqueMetadata::FloatValues' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueMetadata, VectorValues) == 0x0000A0, "Member 'FFortMantisTechniqueMetadata::VectorValues' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueMetadata, StringValues) == 0x0000F0, "Member 'FFortMantisTechniqueMetadata::StringValues' has a wrong offset!");

// ScriptStruct MantisRuntime.FortMantisTargetData
// 0x0178 (0x0180 - 0x0008)
struct FFortMantisTargetData final : public FGameplayAbilityTargetData
{
public:
	struct FFortMantisRootMotionWarpInfo          TechniqueWarpInfo;                                 // 0x0008(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         TechniqueDataIndex;                                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLockedOn;                                       // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DynamicMontageName;                                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMantisTechniqueMetadata           TechniqueMetadata;                                 // 0x0040(0x0140)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMantisTargetData) == 0x000008, "Wrong alignment on FFortMantisTargetData");
static_assert(sizeof(FFortMantisTargetData) == 0x000180, "Wrong size on FFortMantisTargetData");
static_assert(offsetof(FFortMantisTargetData, TechniqueWarpInfo) == 0x000008, "Member 'FFortMantisTargetData::TechniqueWarpInfo' has a wrong offset!");
static_assert(offsetof(FFortMantisTargetData, TechniqueDataIndex) == 0x000030, "Member 'FFortMantisTargetData::TechniqueDataIndex' has a wrong offset!");
static_assert(offsetof(FFortMantisTargetData, bIsLockedOn) == 0x000034, "Member 'FFortMantisTargetData::bIsLockedOn' has a wrong offset!");
static_assert(offsetof(FFortMantisTargetData, DynamicMontageName) == 0x000038, "Member 'FFortMantisTargetData::DynamicMontageName' has a wrong offset!");
static_assert(offsetof(FFortMantisTargetData, TechniqueMetadata) == 0x000040, "Member 'FFortMantisTargetData::TechniqueMetadata' has a wrong offset!");

// ScriptStruct MantisRuntime.FortMantisTechniqueCharacterSettings
// 0x0018 (0x0018 - 0x0000)
struct FFortMantisTechniqueCharacterSettings final
{
public:
	bool                                          bDetachCharacterRotationFromCamera;                // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReattachCharacterRotationBlendTime;                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReattachCharacterRotationBlendExponent;            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindupCharacterRotationRate;                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExecutionCharacterRotationRate;                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryCharacterRotationRate;                     // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMantisTechniqueCharacterSettings) == 0x000004, "Wrong alignment on FFortMantisTechniqueCharacterSettings");
static_assert(sizeof(FFortMantisTechniqueCharacterSettings) == 0x000018, "Wrong size on FFortMantisTechniqueCharacterSettings");
static_assert(offsetof(FFortMantisTechniqueCharacterSettings, bDetachCharacterRotationFromCamera) == 0x000000, "Member 'FFortMantisTechniqueCharacterSettings::bDetachCharacterRotationFromCamera' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueCharacterSettings, ReattachCharacterRotationBlendTime) == 0x000004, "Member 'FFortMantisTechniqueCharacterSettings::ReattachCharacterRotationBlendTime' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueCharacterSettings, ReattachCharacterRotationBlendExponent) == 0x000008, "Member 'FFortMantisTechniqueCharacterSettings::ReattachCharacterRotationBlendExponent' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueCharacterSettings, WindupCharacterRotationRate) == 0x00000C, "Member 'FFortMantisTechniqueCharacterSettings::WindupCharacterRotationRate' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueCharacterSettings, ExecutionCharacterRotationRate) == 0x000010, "Member 'FFortMantisTechniqueCharacterSettings::ExecutionCharacterRotationRate' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueCharacterSettings, RecoveryCharacterRotationRate) == 0x000014, "Member 'FFortMantisTechniqueCharacterSettings::RecoveryCharacterRotationRate' has a wrong offset!");

// ScriptStruct MantisRuntime.FortMantisTechniqueData
// 0x0150 (0x0150 - 0x0000)
struct FFortMantisTechniqueData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartsSequence;                                   // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndsSequence;                                     // 0x0005(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxConsecutiveBranchesToSelf;                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMantisTechniqueAnimationType             AnimationType;                                     // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Montage;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UAnimMontage*>        DynamicMontages;                                   // 0x0018(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class FName                                   DefaultDynamicMontageName;                         // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMantisTechniqueRootMotionType            RootMotionType;                                    // 0x006C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputWindowDelay;                                  // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMantisTechniqueActivationInputType       ActivationInputType;                               // 0x0074(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMantisTechniqueActivationTimingType      ActivationTimingType;                              // 0x0075(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinInputHoldDuration;                              // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInputHoldDuration;                              // 0x007C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActivationGameplayCues;                            // 0x0080(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      ActivationTagQuery;                                // 0x00A0(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      OngoingTagQuery;                                   // 0x00E8(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActivationApplicationTag;                          // 0x0130(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DamageApplicationTag;                              // 0x0134(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMantisTechniqueCharacterSettings  CharacterSettings;                                 // 0x0138(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMantisTechniqueData) == 0x000008, "Wrong alignment on FFortMantisTechniqueData");
static_assert(sizeof(FFortMantisTechniqueData) == 0x000150, "Wrong size on FFortMantisTechniqueData");
static_assert(offsetof(FFortMantisTechniqueData, Name) == 0x000000, "Member 'FFortMantisTechniqueData::Name' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, bStartsSequence) == 0x000004, "Member 'FFortMantisTechniqueData::bStartsSequence' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, bEndsSequence) == 0x000005, "Member 'FFortMantisTechniqueData::bEndsSequence' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, MaxConsecutiveBranchesToSelf) == 0x000008, "Member 'FFortMantisTechniqueData::MaxConsecutiveBranchesToSelf' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, AnimationType) == 0x00000C, "Member 'FFortMantisTechniqueData::AnimationType' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, Montage) == 0x000010, "Member 'FFortMantisTechniqueData::Montage' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, DynamicMontages) == 0x000018, "Member 'FFortMantisTechniqueData::DynamicMontages' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, DefaultDynamicMontageName) == 0x000068, "Member 'FFortMantisTechniqueData::DefaultDynamicMontageName' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, RootMotionType) == 0x00006C, "Member 'FFortMantisTechniqueData::RootMotionType' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, InputWindowDelay) == 0x000070, "Member 'FFortMantisTechniqueData::InputWindowDelay' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, ActivationInputType) == 0x000074, "Member 'FFortMantisTechniqueData::ActivationInputType' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, ActivationTimingType) == 0x000075, "Member 'FFortMantisTechniqueData::ActivationTimingType' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, MinInputHoldDuration) == 0x000078, "Member 'FFortMantisTechniqueData::MinInputHoldDuration' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, MaxInputHoldDuration) == 0x00007C, "Member 'FFortMantisTechniqueData::MaxInputHoldDuration' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, ActivationGameplayCues) == 0x000080, "Member 'FFortMantisTechniqueData::ActivationGameplayCues' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, ActivationTagQuery) == 0x0000A0, "Member 'FFortMantisTechniqueData::ActivationTagQuery' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, OngoingTagQuery) == 0x0000E8, "Member 'FFortMantisTechniqueData::OngoingTagQuery' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, ActivationApplicationTag) == 0x000130, "Member 'FFortMantisTechniqueData::ActivationApplicationTag' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, DamageApplicationTag) == 0x000134, "Member 'FFortMantisTechniqueData::DamageApplicationTag' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueData, CharacterSettings) == 0x000138, "Member 'FFortMantisTechniqueData::CharacterSettings' has a wrong offset!");

// ScriptStruct MantisRuntime.FortMantisTechniqueBranch
// 0x000C (0x000C - 0x0000)
struct FFortMantisTechniqueBranch final
{
public:
	class FName                                   FromTechnique;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToTechnique;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMantisBranchPath                         BranchPath;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMantisTechniqueBranch) == 0x000004, "Wrong alignment on FFortMantisTechniqueBranch");
static_assert(sizeof(FFortMantisTechniqueBranch) == 0x00000C, "Wrong size on FFortMantisTechniqueBranch");
static_assert(offsetof(FFortMantisTechniqueBranch, FromTechnique) == 0x000000, "Member 'FFortMantisTechniqueBranch::FromTechnique' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueBranch, ToTechnique) == 0x000004, "Member 'FFortMantisTechniqueBranch::ToTechnique' has a wrong offset!");
static_assert(offsetof(FFortMantisTechniqueBranch, BranchPath) == 0x000008, "Member 'FFortMantisTechniqueBranch::BranchPath' has a wrong offset!");

// ScriptStruct MantisRuntime.FortMantisMontageData
// 0x0018 (0x0018 - 0x0000)
struct FFortMantisMontageData final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMantisMontageData) == 0x000008, "Wrong alignment on FFortMantisMontageData");
static_assert(sizeof(FFortMantisMontageData) == 0x000018, "Wrong size on FFortMantisMontageData");
static_assert(offsetof(FFortMantisMontageData, Montage) == 0x000000, "Member 'FFortMantisMontageData::Montage' has a wrong offset!");

// ScriptStruct MantisRuntime.FortMantisReplicatedAnimInstanceInfo
// 0x0010 (0x0010 - 0x0000)
struct FFortMantisReplicatedAnimInstanceInfo final
{
public:
	bool                                          bIsTechniqueActive;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActiveTechniqueName;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveTechniqueIndex;                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveTechniqueConsecutiveBranchesToSelf;          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMantisReplicatedAnimInstanceInfo) == 0x000004, "Wrong alignment on FFortMantisReplicatedAnimInstanceInfo");
static_assert(sizeof(FFortMantisReplicatedAnimInstanceInfo) == 0x000010, "Wrong size on FFortMantisReplicatedAnimInstanceInfo");
static_assert(offsetof(FFortMantisReplicatedAnimInstanceInfo, bIsTechniqueActive) == 0x000000, "Member 'FFortMantisReplicatedAnimInstanceInfo::bIsTechniqueActive' has a wrong offset!");
static_assert(offsetof(FFortMantisReplicatedAnimInstanceInfo, ActiveTechniqueName) == 0x000004, "Member 'FFortMantisReplicatedAnimInstanceInfo::ActiveTechniqueName' has a wrong offset!");
static_assert(offsetof(FFortMantisReplicatedAnimInstanceInfo, ActiveTechniqueIndex) == 0x000008, "Member 'FFortMantisReplicatedAnimInstanceInfo::ActiveTechniqueIndex' has a wrong offset!");
static_assert(offsetof(FFortMantisReplicatedAnimInstanceInfo, ActiveTechniqueConsecutiveBranchesToSelf) == 0x00000C, "Member 'FFortMantisReplicatedAnimInstanceInfo::ActiveTechniqueConsecutiveBranchesToSelf' has a wrong offset!");

// ScriptStruct MantisRuntime.FortMantisRootMotionWarpInfoNetSerializerConfig
// 0x0000 (0x0010 - 0x0010)
struct FFortMantisRootMotionWarpInfoNetSerializerConfig final : public FNetSerializerConfig
{
};
static_assert(alignof(FFortMantisRootMotionWarpInfoNetSerializerConfig) == 0x000008, "Wrong alignment on FFortMantisRootMotionWarpInfoNetSerializerConfig");
static_assert(sizeof(FFortMantisRootMotionWarpInfoNetSerializerConfig) == 0x000010, "Wrong size on FFortMantisRootMotionWarpInfoNetSerializerConfig");

}

