#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SaveTheWorldUI

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "SaveTheWorldUI_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CommonInput_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "CommonUI_structs.hpp"


namespace SDK::Params
{

// Function SaveTheWorldUI.FortQuestMapViewer.OnPlayLayoutOutroAnimation
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapViewer_OnPlayLayoutOutroAnimation final
{
public:
	EViewerNavigationDirection                    TravelDirection;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapViewer_OnPlayLayoutOutroAnimation) == 0x000001, "Wrong alignment on FortQuestMapViewer_OnPlayLayoutOutroAnimation");
static_assert(sizeof(FortQuestMapViewer_OnPlayLayoutOutroAnimation) == 0x000001, "Wrong size on FortQuestMapViewer_OnPlayLayoutOutroAnimation");
static_assert(offsetof(FortQuestMapViewer_OnPlayLayoutOutroAnimation, TravelDirection) == 0x000000, "Member 'FortQuestMapViewer_OnPlayLayoutOutroAnimation::TravelDirection' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapViewer.OnTryUpdateUserWidgetColor
// 0x0020 (0x0020 - 0x0000)
struct FortQuestMapViewer_OnTryUpdateUserWidgetColor final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            OverrideColor;                                     // 0x0008(0x0014)(Parm, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestMapViewer_OnTryUpdateUserWidgetColor) == 0x000008, "Wrong alignment on FortQuestMapViewer_OnTryUpdateUserWidgetColor");
static_assert(sizeof(FortQuestMapViewer_OnTryUpdateUserWidgetColor) == 0x000020, "Wrong size on FortQuestMapViewer_OnTryUpdateUserWidgetColor");
static_assert(offsetof(FortQuestMapViewer_OnTryUpdateUserWidgetColor, Widget) == 0x000000, "Member 'FortQuestMapViewer_OnTryUpdateUserWidgetColor::Widget' has a wrong offset!");
static_assert(offsetof(FortQuestMapViewer_OnTryUpdateUserWidgetColor, OverrideColor) == 0x000008, "Member 'FortQuestMapViewer_OnTryUpdateUserWidgetColor::OverrideColor' has a wrong offset!");

// Function SaveTheWorldUI.FortArmoryScreen.PushHeroLoadoutScreen
// 0x0008 (0x0008 - 0x0000)
struct FortArmoryScreen_PushHeroLoadoutScreen final
{
public:
	class UFortCampaignHeroLoadoutItem*           HeroLoadout;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortArmoryScreen_PushHeroLoadoutScreen) == 0x000008, "Wrong alignment on FortArmoryScreen_PushHeroLoadoutScreen");
static_assert(sizeof(FortArmoryScreen_PushHeroLoadoutScreen) == 0x000008, "Wrong size on FortArmoryScreen_PushHeroLoadoutScreen");
static_assert(offsetof(FortArmoryScreen_PushHeroLoadoutScreen, HeroLoadout) == 0x000000, "Member 'FortArmoryScreen_PushHeroLoadoutScreen::HeroLoadout' has a wrong offset!");

// Function SaveTheWorldUI.FortArmoryScreen.PushItemInspectionScreen
// 0x0020 (0x0020 - 0x0000)
struct FortArmoryScreen_PushItemInspectionScreen final
{
public:
	class UFortItem*                              ItemToInspect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemInspectionMode                       Mode;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemTileView*                      CycleTileView;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadOnly;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFavoriting;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTemporaryItem;                                  // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRarityUpgrading;                             // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortArmoryScreen_PushItemInspectionScreen) == 0x000008, "Wrong alignment on FortArmoryScreen_PushItemInspectionScreen");
static_assert(sizeof(FortArmoryScreen_PushItemInspectionScreen) == 0x000020, "Wrong size on FortArmoryScreen_PushItemInspectionScreen");
static_assert(offsetof(FortArmoryScreen_PushItemInspectionScreen, ItemToInspect) == 0x000000, "Member 'FortArmoryScreen_PushItemInspectionScreen::ItemToInspect' has a wrong offset!");
static_assert(offsetof(FortArmoryScreen_PushItemInspectionScreen, Mode) == 0x000008, "Member 'FortArmoryScreen_PushItemInspectionScreen::Mode' has a wrong offset!");
static_assert(offsetof(FortArmoryScreen_PushItemInspectionScreen, CycleTileView) == 0x000010, "Member 'FortArmoryScreen_PushItemInspectionScreen::CycleTileView' has a wrong offset!");
static_assert(offsetof(FortArmoryScreen_PushItemInspectionScreen, bReadOnly) == 0x000018, "Member 'FortArmoryScreen_PushItemInspectionScreen::bReadOnly' has a wrong offset!");
static_assert(offsetof(FortArmoryScreen_PushItemInspectionScreen, bAllowFavoriting) == 0x000019, "Member 'FortArmoryScreen_PushItemInspectionScreen::bAllowFavoriting' has a wrong offset!");
static_assert(offsetof(FortArmoryScreen_PushItemInspectionScreen, bIsTemporaryItem) == 0x00001A, "Member 'FortArmoryScreen_PushItemInspectionScreen::bIsTemporaryItem' has a wrong offset!");
static_assert(offsetof(FortArmoryScreen_PushItemInspectionScreen, bAllowRarityUpgrading) == 0x00001B, "Member 'FortArmoryScreen_PushItemInspectionScreen::bAllowRarityUpgrading' has a wrong offset!");

// Function SaveTheWorldUI.FortArmoryScreen.PushItemManagementScreen
// 0x0018 (0x0018 - 0x0000)
struct FortArmoryScreen_PushItemManagementScreen final
{
public:
	EFortFrontendInventoryFilter                  ItemManagementFilter;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              ItemToSelect;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAutoMulch;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortArmoryScreen_PushItemManagementScreen) == 0x000008, "Wrong alignment on FortArmoryScreen_PushItemManagementScreen");
static_assert(sizeof(FortArmoryScreen_PushItemManagementScreen) == 0x000018, "Wrong size on FortArmoryScreen_PushItemManagementScreen");
static_assert(offsetof(FortArmoryScreen_PushItemManagementScreen, ItemManagementFilter) == 0x000000, "Member 'FortArmoryScreen_PushItemManagementScreen::ItemManagementFilter' has a wrong offset!");
static_assert(offsetof(FortArmoryScreen_PushItemManagementScreen, ItemToSelect) == 0x000008, "Member 'FortArmoryScreen_PushItemManagementScreen::ItemToSelect' has a wrong offset!");
static_assert(offsetof(FortArmoryScreen_PushItemManagementScreen, bShowAutoMulch) == 0x000010, "Member 'FortArmoryScreen_PushItemManagementScreen::bShowAutoMulch' has a wrong offset!");

// Function SaveTheWorldUI.FortCommandScreen.PushHeroLoadoutScreen
// 0x0008 (0x0008 - 0x0000)
struct FortCommandScreen_PushHeroLoadoutScreen final
{
public:
	class UFortCampaignHeroLoadoutItem*           HeroLoadout;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCommandScreen_PushHeroLoadoutScreen) == 0x000008, "Wrong alignment on FortCommandScreen_PushHeroLoadoutScreen");
static_assert(sizeof(FortCommandScreen_PushHeroLoadoutScreen) == 0x000008, "Wrong size on FortCommandScreen_PushHeroLoadoutScreen");
static_assert(offsetof(FortCommandScreen_PushHeroLoadoutScreen, HeroLoadout) == 0x000000, "Member 'FortCommandScreen_PushHeroLoadoutScreen::HeroLoadout' has a wrong offset!");

// Function SaveTheWorldUI.FortCommandScreen.PushItemInspectionScreen
// 0x0020 (0x0020 - 0x0000)
struct FortCommandScreen_PushItemInspectionScreen final
{
public:
	class UFortItem*                              ItemToInspect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemInspectionMode                       Mode;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemTileView*                      CycleTileView;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadOnly;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFavoriting;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTemporaryItem;                                  // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRarityUpgrading;                             // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCommandScreen_PushItemInspectionScreen) == 0x000008, "Wrong alignment on FortCommandScreen_PushItemInspectionScreen");
static_assert(sizeof(FortCommandScreen_PushItemInspectionScreen) == 0x000020, "Wrong size on FortCommandScreen_PushItemInspectionScreen");
static_assert(offsetof(FortCommandScreen_PushItemInspectionScreen, ItemToInspect) == 0x000000, "Member 'FortCommandScreen_PushItemInspectionScreen::ItemToInspect' has a wrong offset!");
static_assert(offsetof(FortCommandScreen_PushItemInspectionScreen, Mode) == 0x000008, "Member 'FortCommandScreen_PushItemInspectionScreen::Mode' has a wrong offset!");
static_assert(offsetof(FortCommandScreen_PushItemInspectionScreen, CycleTileView) == 0x000010, "Member 'FortCommandScreen_PushItemInspectionScreen::CycleTileView' has a wrong offset!");
static_assert(offsetof(FortCommandScreen_PushItemInspectionScreen, bReadOnly) == 0x000018, "Member 'FortCommandScreen_PushItemInspectionScreen::bReadOnly' has a wrong offset!");
static_assert(offsetof(FortCommandScreen_PushItemInspectionScreen, bAllowFavoriting) == 0x000019, "Member 'FortCommandScreen_PushItemInspectionScreen::bAllowFavoriting' has a wrong offset!");
static_assert(offsetof(FortCommandScreen_PushItemInspectionScreen, bIsTemporaryItem) == 0x00001A, "Member 'FortCommandScreen_PushItemInspectionScreen::bIsTemporaryItem' has a wrong offset!");
static_assert(offsetof(FortCommandScreen_PushItemInspectionScreen, bAllowRarityUpgrading) == 0x00001B, "Member 'FortCommandScreen_PushItemInspectionScreen::bAllowRarityUpgrading' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookGenericRewardWidget.OnRewardStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookGenericRewardWidget_OnRewardStatusChanged final
{
public:
	ECollectionBookRewardStatus                   NewStatus;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookGenericRewardWidget_OnRewardStatusChanged) == 0x000001, "Wrong alignment on FortCollectionBookGenericRewardWidget_OnRewardStatusChanged");
static_assert(sizeof(FortCollectionBookGenericRewardWidget_OnRewardStatusChanged) == 0x000001, "Wrong size on FortCollectionBookGenericRewardWidget_OnRewardStatusChanged");
static_assert(offsetof(FortCollectionBookGenericRewardWidget_OnRewardStatusChanged, NewStatus) == 0x000000, "Member 'FortCollectionBookGenericRewardWidget_OnRewardStatusChanged::NewStatus' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookGenericRewardWidget.SetCurrentItemToDisplay
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookGenericRewardWidget_SetCurrentItemToDisplay final
{
public:
	class UFortItem*                              ItemToDisplay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookGenericRewardWidget_SetCurrentItemToDisplay) == 0x000008, "Wrong alignment on FortCollectionBookGenericRewardWidget_SetCurrentItemToDisplay");
static_assert(sizeof(FortCollectionBookGenericRewardWidget_SetCurrentItemToDisplay) == 0x000008, "Wrong size on FortCollectionBookGenericRewardWidget_SetCurrentItemToDisplay");
static_assert(offsetof(FortCollectionBookGenericRewardWidget_SetCurrentItemToDisplay, ItemToDisplay) == 0x000000, "Member 'FortCollectionBookGenericRewardWidget_SetCurrentItemToDisplay::ItemToDisplay' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookGenericRewardWidget.SetRewards
// 0x0030 (0x0030 - 0x0000)
struct FortCollectionBookGenericRewardWidget_SetRewards final
{
public:
	struct FFortRewardInfo                        Rewards;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookGenericRewardWidget_SetRewards) == 0x000008, "Wrong alignment on FortCollectionBookGenericRewardWidget_SetRewards");
static_assert(sizeof(FortCollectionBookGenericRewardWidget_SetRewards) == 0x000030, "Wrong size on FortCollectionBookGenericRewardWidget_SetRewards");
static_assert(offsetof(FortCollectionBookGenericRewardWidget_SetRewards, Rewards) == 0x000000, "Member 'FortCollectionBookGenericRewardWidget_SetRewards::Rewards' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookGenericRewardWidget.SetRewardStatus
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookGenericRewardWidget_SetRewardStatus final
{
public:
	ECollectionBookRewardStatus                   Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookGenericRewardWidget_SetRewardStatus) == 0x000001, "Wrong alignment on FortCollectionBookGenericRewardWidget_SetRewardStatus");
static_assert(sizeof(FortCollectionBookGenericRewardWidget_SetRewardStatus) == 0x000001, "Wrong size on FortCollectionBookGenericRewardWidget_SetRewardStatus");
static_assert(offsetof(FortCollectionBookGenericRewardWidget_SetRewardStatus, Status) == 0x000000, "Member 'FortCollectionBookGenericRewardWidget_SetRewardStatus::Status' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookGenericRewardWidget.GetRewardStatus
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookGenericRewardWidget_GetRewardStatus final
{
public:
	ECollectionBookRewardStatus                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookGenericRewardWidget_GetRewardStatus) == 0x000001, "Wrong alignment on FortCollectionBookGenericRewardWidget_GetRewardStatus");
static_assert(sizeof(FortCollectionBookGenericRewardWidget_GetRewardStatus) == 0x000001, "Wrong size on FortCollectionBookGenericRewardWidget_GetRewardStatus");
static_assert(offsetof(FortCollectionBookGenericRewardWidget_GetRewardStatus, ReturnValue) == 0x000000, "Member 'FortCollectionBookGenericRewardWidget_GetRewardStatus::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookGenericRewardWidget.HasRewards
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookGenericRewardWidget_HasRewards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookGenericRewardWidget_HasRewards) == 0x000001, "Wrong alignment on FortCollectionBookGenericRewardWidget_HasRewards");
static_assert(sizeof(FortCollectionBookGenericRewardWidget_HasRewards) == 0x000001, "Wrong size on FortCollectionBookGenericRewardWidget_HasRewards");
static_assert(offsetof(FortCollectionBookGenericRewardWidget_HasRewards, ReturnValue) == 0x000000, "Member 'FortCollectionBookGenericRewardWidget_HasRewards::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookItemPopupMenu.CanItemBePurchased
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookItemPopupMenu_CanItemBePurchased final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookItemPopupMenu_CanItemBePurchased) == 0x000001, "Wrong alignment on FortCollectionBookItemPopupMenu_CanItemBePurchased");
static_assert(sizeof(FortCollectionBookItemPopupMenu_CanItemBePurchased) == 0x000001, "Wrong size on FortCollectionBookItemPopupMenu_CanItemBePurchased");
static_assert(offsetof(FortCollectionBookItemPopupMenu_CanItemBePurchased, ReturnValue) == 0x000000, "Member 'FortCollectionBookItemPopupMenu_CanItemBePurchased::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookItemPopupMenu.CanItemBeUnslotted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookItemPopupMenu_CanItemBeUnslotted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookItemPopupMenu_CanItemBeUnslotted) == 0x000001, "Wrong alignment on FortCollectionBookItemPopupMenu_CanItemBeUnslotted");
static_assert(sizeof(FortCollectionBookItemPopupMenu_CanItemBeUnslotted) == 0x000001, "Wrong size on FortCollectionBookItemPopupMenu_CanItemBeUnslotted");
static_assert(offsetof(FortCollectionBookItemPopupMenu_CanItemBeUnslotted, ReturnValue) == 0x000000, "Member 'FortCollectionBookItemPopupMenu_CanItemBeUnslotted::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookItemPopupMenu.HandleItemChanged
// 0x0003 (0x0003 - 0x0000)
struct FortCollectionBookItemPopupMenu_HandleItemChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookItemPopupMenu_HandleItemChanged) == 0x000001, "Wrong alignment on FortCollectionBookItemPopupMenu_HandleItemChanged");
static_assert(sizeof(FortCollectionBookItemPopupMenu_HandleItemChanged) == 0x000003, "Wrong size on FortCollectionBookItemPopupMenu_HandleItemChanged");
static_assert(offsetof(FortCollectionBookItemPopupMenu_HandleItemChanged, bItemChanged) == 0x000000, "Member 'FortCollectionBookItemPopupMenu_HandleItemChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortCollectionBookItemPopupMenu_HandleItemChanged, bAmmoChanged) == 0x000001, "Member 'FortCollectionBookItemPopupMenu_HandleItemChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortCollectionBookItemPopupMenu_HandleItemChanged, bIngredientsChanged) == 0x000002, "Member 'FortCollectionBookItemPopupMenu_HandleItemChanged::bIngredientsChanged' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookItemPopupMenu.GetHostButton
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookItemPopupMenu_GetHostButton final
{
public:
	class UFortCollectionBookSlotButton*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookItemPopupMenu_GetHostButton) == 0x000008, "Wrong alignment on FortCollectionBookItemPopupMenu_GetHostButton");
static_assert(sizeof(FortCollectionBookItemPopupMenu_GetHostButton) == 0x000008, "Wrong size on FortCollectionBookItemPopupMenu_GetHostButton");
static_assert(offsetof(FortCollectionBookItemPopupMenu_GetHostButton, ReturnValue) == 0x000000, "Member 'FortCollectionBookItemPopupMenu_GetHostButton::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookOverviewWidget.HandlePagesChanged
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookOverviewWidget_HandlePagesChanged final
{
public:
	class UFortCollectionBookManager*             CBManager;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookOverviewWidget_HandlePagesChanged) == 0x000008, "Wrong alignment on FortCollectionBookOverviewWidget_HandlePagesChanged");
static_assert(sizeof(FortCollectionBookOverviewWidget_HandlePagesChanged) == 0x000008, "Wrong size on FortCollectionBookOverviewWidget_HandlePagesChanged");
static_assert(offsetof(FortCollectionBookOverviewWidget_HandlePagesChanged, CBManager) == 0x000000, "Member 'FortCollectionBookOverviewWidget_HandlePagesChanged::CBManager' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPageDetailsWidget.HandleRewardDetailsModalWidgetDeactivated
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPageDetailsWidget_HandleRewardDetailsModalWidgetDeactivated final
{
public:
	class UCommonActivatablePanelLegacy*          DeactivatedPanel;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPageDetailsWidget_HandleRewardDetailsModalWidgetDeactivated) == 0x000008, "Wrong alignment on FortCollectionBookPageDetailsWidget_HandleRewardDetailsModalWidgetDeactivated");
static_assert(sizeof(FortCollectionBookPageDetailsWidget_HandleRewardDetailsModalWidgetDeactivated) == 0x000008, "Wrong size on FortCollectionBookPageDetailsWidget_HandleRewardDetailsModalWidgetDeactivated");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_HandleRewardDetailsModalWidgetDeactivated, DeactivatedPanel) == 0x000000, "Member 'FortCollectionBookPageDetailsWidget_HandleRewardDetailsModalWidgetDeactivated::DeactivatedPanel' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPageDetailsWidget.OnDetailsPageChanged
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPageDetailsWidget_OnDetailsPageChanged final
{
public:
	const class UFortCollectionBookPage*          InNewDetailsPage;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPageDetailsWidget_OnDetailsPageChanged) == 0x000008, "Wrong alignment on FortCollectionBookPageDetailsWidget_OnDetailsPageChanged");
static_assert(sizeof(FortCollectionBookPageDetailsWidget_OnDetailsPageChanged) == 0x000008, "Wrong size on FortCollectionBookPageDetailsWidget_OnDetailsPageChanged");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnDetailsPageChanged, InNewDetailsPage) == 0x000000, "Member 'FortCollectionBookPageDetailsWidget_OnDetailsPageChanged::InNewDetailsPage' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPageDetailsWidget.OnPageProgressionUpdated
// 0x000C (0x000C - 0x0000)
struct FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated final
{
public:
	int32                                         TotalFilledSlots;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSlots;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCollectionBookState                      State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated) == 0x000004, "Wrong alignment on FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated");
static_assert(sizeof(FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated) == 0x00000C, "Wrong size on FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated, TotalFilledSlots) == 0x000000, "Member 'FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated::TotalFilledSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated, TotalSlots) == 0x000004, "Member 'FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated::TotalSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated, State) == 0x000008, "Member 'FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated::State' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPageDetailsWidget.OnSlotItemComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookPageDetailsWidget_OnSlotItemComplete final
{
public:
	const class UFortAccountItem*                 SlottedItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookPageDetailsWidget_OnSlotItemComplete) == 0x000008, "Wrong alignment on FortCollectionBookPageDetailsWidget_OnSlotItemComplete");
static_assert(sizeof(FortCollectionBookPageDetailsWidget_OnSlotItemComplete) == 0x000010, "Wrong size on FortCollectionBookPageDetailsWidget_OnSlotItemComplete");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnSlotItemComplete, SlottedItem) == 0x000000, "Member 'FortCollectionBookPageDetailsWidget_OnSlotItemComplete::SlottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnSlotItemComplete, SlotId) == 0x000008, "Member 'FortCollectionBookPageDetailsWidget_OnSlotItemComplete::SlotId' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPageDetailsWidget.OnUnslotItemComplete
// 0x0018 (0x0018 - 0x0000)
struct FortCollectionBookPageDetailsWidget_OnUnslotItemComplete final
{
public:
	const class UFortAccountItem*                 SlottedItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortAccountItem*                 OldItem;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookPageDetailsWidget_OnUnslotItemComplete) == 0x000008, "Wrong alignment on FortCollectionBookPageDetailsWidget_OnUnslotItemComplete");
static_assert(sizeof(FortCollectionBookPageDetailsWidget_OnUnslotItemComplete) == 0x000018, "Wrong size on FortCollectionBookPageDetailsWidget_OnUnslotItemComplete");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnUnslotItemComplete, SlottedItem) == 0x000000, "Member 'FortCollectionBookPageDetailsWidget_OnUnslotItemComplete::SlottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnUnslotItemComplete, OldItem) == 0x000008, "Member 'FortCollectionBookPageDetailsWidget_OnUnslotItemComplete::OldItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnUnslotItemComplete, SlotId) == 0x000010, "Member 'FortCollectionBookPageDetailsWidget_OnUnslotItemComplete::SlotId' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPageListWidget.OnCategoryDetailsUpdated
// 0x000C (0x000C - 0x0000)
struct FortCollectionBookPageListWidget_OnCategoryDetailsUpdated final
{
public:
	int32                                         AvailableSlots;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FilledSlots;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSlots;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPageListWidget_OnCategoryDetailsUpdated) == 0x000004, "Wrong alignment on FortCollectionBookPageListWidget_OnCategoryDetailsUpdated");
static_assert(sizeof(FortCollectionBookPageListWidget_OnCategoryDetailsUpdated) == 0x00000C, "Wrong size on FortCollectionBookPageListWidget_OnCategoryDetailsUpdated");
static_assert(offsetof(FortCollectionBookPageListWidget_OnCategoryDetailsUpdated, AvailableSlots) == 0x000000, "Member 'FortCollectionBookPageListWidget_OnCategoryDetailsUpdated::AvailableSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageListWidget_OnCategoryDetailsUpdated, FilledSlots) == 0x000004, "Member 'FortCollectionBookPageListWidget_OnCategoryDetailsUpdated::FilledSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageListWidget_OnCategoryDetailsUpdated, TotalSlots) == 0x000008, "Member 'FortCollectionBookPageListWidget_OnCategoryDetailsUpdated::TotalSlots' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPageListWidget.OnPageDetailsUpdated
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookPageListWidget_OnPageDetailsUpdated final
{
public:
	int32                                         AvailableSlots;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FilledSlots;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSlots;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCollectionBookState                      State;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookPageListWidget_OnPageDetailsUpdated) == 0x000004, "Wrong alignment on FortCollectionBookPageListWidget_OnPageDetailsUpdated");
static_assert(sizeof(FortCollectionBookPageListWidget_OnPageDetailsUpdated) == 0x000010, "Wrong size on FortCollectionBookPageListWidget_OnPageDetailsUpdated");
static_assert(offsetof(FortCollectionBookPageListWidget_OnPageDetailsUpdated, AvailableSlots) == 0x000000, "Member 'FortCollectionBookPageListWidget_OnPageDetailsUpdated::AvailableSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageListWidget_OnPageDetailsUpdated, FilledSlots) == 0x000004, "Member 'FortCollectionBookPageListWidget_OnPageDetailsUpdated::FilledSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageListWidget_OnPageDetailsUpdated, TotalSlots) == 0x000008, "Member 'FortCollectionBookPageListWidget_OnPageDetailsUpdated::TotalSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageListWidget_OnPageDetailsUpdated, State) == 0x00000C, "Member 'FortCollectionBookPageListWidget_OnPageDetailsUpdated::State' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPageListWidget.OnSlottedItemOperationComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookPageListWidget_OnSlottedItemOperationComplete final
{
public:
	const class UFortAccountItem*                 SlottedItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookPageListWidget_OnSlottedItemOperationComplete) == 0x000008, "Wrong alignment on FortCollectionBookPageListWidget_OnSlottedItemOperationComplete");
static_assert(sizeof(FortCollectionBookPageListWidget_OnSlottedItemOperationComplete) == 0x000010, "Wrong size on FortCollectionBookPageListWidget_OnSlottedItemOperationComplete");
static_assert(offsetof(FortCollectionBookPageListWidget_OnSlottedItemOperationComplete, SlottedItem) == 0x000000, "Member 'FortCollectionBookPageListWidget_OnSlottedItemOperationComplete::SlottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageListWidget_OnSlottedItemOperationComplete, SlotId) == 0x000008, "Member 'FortCollectionBookPageListWidget_OnSlottedItemOperationComplete::SlotId' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPageListWidget.SetupAsCategory
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPageListWidget_SetupAsCategory final
{
public:
	class UFortCollectionBookCategory*            category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPageListWidget_SetupAsCategory) == 0x000008, "Wrong alignment on FortCollectionBookPageListWidget_SetupAsCategory");
static_assert(sizeof(FortCollectionBookPageListWidget_SetupAsCategory) == 0x000008, "Wrong size on FortCollectionBookPageListWidget_SetupAsCategory");
static_assert(offsetof(FortCollectionBookPageListWidget_SetupAsCategory, category) == 0x000000, "Member 'FortCollectionBookPageListWidget_SetupAsCategory::category' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPageListWidget.SetupAsPage
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPageListWidget_SetupAsPage final
{
public:
	class UFortCollectionBookPage*                Page;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPageListWidget_SetupAsPage) == 0x000008, "Wrong alignment on FortCollectionBookPageListWidget_SetupAsPage");
static_assert(sizeof(FortCollectionBookPageListWidget_SetupAsPage) == 0x000008, "Wrong size on FortCollectionBookPageListWidget_SetupAsPage");
static_assert(offsetof(FortCollectionBookPageListWidget_SetupAsPage, Page) == 0x000000, "Member 'FortCollectionBookPageListWidget_SetupAsPage::Page' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPicker.ShowMulchDialogForItem
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPicker_ShowMulchDialogForItem final
{
public:
	class UFortItem*                              ItemToMulch;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPicker_ShowMulchDialogForItem) == 0x000008, "Wrong alignment on FortCollectionBookPicker_ShowMulchDialogForItem");
static_assert(sizeof(FortCollectionBookPicker_ShowMulchDialogForItem) == 0x000008, "Wrong size on FortCollectionBookPicker_ShowMulchDialogForItem");
static_assert(offsetof(FortCollectionBookPicker_ShowMulchDialogForItem, ItemToMulch) == 0x000000, "Member 'FortCollectionBookPicker_ShowMulchDialogForItem::ItemToMulch' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPrimaryPanel.OnBackActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookPrimaryPanel_OnBackActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPrimaryPanel_OnBackActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookPrimaryPanel_OnBackActionExecuted");
static_assert(sizeof(FortCollectionBookPrimaryPanel_OnBackActionExecuted) == 0x000001, "Wrong size on FortCollectionBookPrimaryPanel_OnBackActionExecuted");
static_assert(offsetof(FortCollectionBookPrimaryPanel_OnBackActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookPrimaryPanel_OnBackActionExecuted::bPassThrough' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPrimaryPanel.OnCollectionBookPageClicked
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPrimaryPanel_OnCollectionBookPageClicked final
{
public:
	const class UFortCollectionBookPage*          ClickedPage;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPrimaryPanel_OnCollectionBookPageClicked) == 0x000008, "Wrong alignment on FortCollectionBookPrimaryPanel_OnCollectionBookPageClicked");
static_assert(sizeof(FortCollectionBookPrimaryPanel_OnCollectionBookPageClicked) == 0x000008, "Wrong size on FortCollectionBookPrimaryPanel_OnCollectionBookPageClicked");
static_assert(offsetof(FortCollectionBookPrimaryPanel_OnCollectionBookPageClicked, ClickedPage) == 0x000000, "Member 'FortCollectionBookPrimaryPanel_OnCollectionBookPageClicked::ClickedPage' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPrimaryPanel.OnCollectionBookPageSelected
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPrimaryPanel_OnCollectionBookPageSelected final
{
public:
	const class UFortCollectionBookPage*          SelectedPage;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPrimaryPanel_OnCollectionBookPageSelected) == 0x000008, "Wrong alignment on FortCollectionBookPrimaryPanel_OnCollectionBookPageSelected");
static_assert(sizeof(FortCollectionBookPrimaryPanel_OnCollectionBookPageSelected) == 0x000008, "Wrong size on FortCollectionBookPrimaryPanel_OnCollectionBookPageSelected");
static_assert(offsetof(FortCollectionBookPrimaryPanel_OnCollectionBookPageSelected, SelectedPage) == 0x000000, "Member 'FortCollectionBookPrimaryPanel_OnCollectionBookPageSelected::SelectedPage' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPrimaryPanel.OnCollectionBookSectionClicked
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPrimaryPanel_OnCollectionBookSectionClicked final
{
public:
	const class UFortCollectionBookSection*       ClickedSection;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPrimaryPanel_OnCollectionBookSectionClicked) == 0x000008, "Wrong alignment on FortCollectionBookPrimaryPanel_OnCollectionBookSectionClicked");
static_assert(sizeof(FortCollectionBookPrimaryPanel_OnCollectionBookSectionClicked) == 0x000008, "Wrong size on FortCollectionBookPrimaryPanel_OnCollectionBookSectionClicked");
static_assert(offsetof(FortCollectionBookPrimaryPanel_OnCollectionBookSectionClicked, ClickedSection) == 0x000000, "Member 'FortCollectionBookPrimaryPanel_OnCollectionBookSectionClicked::ClickedSection' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPrimaryPanel.OnInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookPrimaryPanel_OnInputMethodChanged final
{
public:
	ECommonInputType                              CurrentInputType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPrimaryPanel_OnInputMethodChanged) == 0x000001, "Wrong alignment on FortCollectionBookPrimaryPanel_OnInputMethodChanged");
static_assert(sizeof(FortCollectionBookPrimaryPanel_OnInputMethodChanged) == 0x000001, "Wrong size on FortCollectionBookPrimaryPanel_OnInputMethodChanged");
static_assert(offsetof(FortCollectionBookPrimaryPanel_OnInputMethodChanged, CurrentInputType) == 0x000000, "Member 'FortCollectionBookPrimaryPanel_OnInputMethodChanged::CurrentInputType' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookPrimaryPanel.OnSummonInfoPanelExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookPrimaryPanel_OnSummonInfoPanelExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPrimaryPanel_OnSummonInfoPanelExecuted) == 0x000001, "Wrong alignment on FortCollectionBookPrimaryPanel_OnSummonInfoPanelExecuted");
static_assert(sizeof(FortCollectionBookPrimaryPanel_OnSummonInfoPanelExecuted) == 0x000001, "Wrong size on FortCollectionBookPrimaryPanel_OnSummonInfoPanelExecuted");
static_assert(offsetof(FortCollectionBookPrimaryPanel_OnSummonInfoPanelExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookPrimaryPanel_OnSummonInfoPanelExecuted::bPassThrough' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookProgressionRewardDetailInspectWidget.OnXPRequiredChanged
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookProgressionRewardDetailInspectWidget_OnXPRequiredChanged final
{
public:
	int32                                         NewXPRequired;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressionRewardDetailInspectWidget_OnXPRequiredChanged) == 0x000004, "Wrong alignment on FortCollectionBookProgressionRewardDetailInspectWidget_OnXPRequiredChanged");
static_assert(sizeof(FortCollectionBookProgressionRewardDetailInspectWidget_OnXPRequiredChanged) == 0x000004, "Wrong size on FortCollectionBookProgressionRewardDetailInspectWidget_OnXPRequiredChanged");
static_assert(offsetof(FortCollectionBookProgressionRewardDetailInspectWidget_OnXPRequiredChanged, NewXPRequired) == 0x000000, "Member 'FortCollectionBookProgressionRewardDetailInspectWidget_OnXPRequiredChanged::NewXPRequired' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookProgressionRewardDetailInspectWidget.SetAssociatedLevel
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookProgressionRewardDetailInspectWidget_SetAssociatedLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressionRewardDetailInspectWidget_SetAssociatedLevel) == 0x000004, "Wrong alignment on FortCollectionBookProgressionRewardDetailInspectWidget_SetAssociatedLevel");
static_assert(sizeof(FortCollectionBookProgressionRewardDetailInspectWidget_SetAssociatedLevel) == 0x000004, "Wrong size on FortCollectionBookProgressionRewardDetailInspectWidget_SetAssociatedLevel");
static_assert(offsetof(FortCollectionBookProgressionRewardDetailInspectWidget_SetAssociatedLevel, Level) == 0x000000, "Member 'FortCollectionBookProgressionRewardDetailInspectWidget_SetAssociatedLevel::Level' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookProgressionRewardDetailInspectWidget.GetXPRequired
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookProgressionRewardDetailInspectWidget_GetXPRequired final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressionRewardDetailInspectWidget_GetXPRequired) == 0x000004, "Wrong alignment on FortCollectionBookProgressionRewardDetailInspectWidget_GetXPRequired");
static_assert(sizeof(FortCollectionBookProgressionRewardDetailInspectWidget_GetXPRequired) == 0x000004, "Wrong size on FortCollectionBookProgressionRewardDetailInspectWidget_GetXPRequired");
static_assert(offsetof(FortCollectionBookProgressionRewardDetailInspectWidget_GetXPRequired, ReturnValue) == 0x000000, "Member 'FortCollectionBookProgressionRewardDetailInspectWidget_GetXPRequired::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookProgressionRewardsModalWidget.InspectItemBP
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookProgressionRewardsModalWidget_InspectItemBP final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressionRewardsModalWidget_InspectItemBP) == 0x000008, "Wrong alignment on FortCollectionBookProgressionRewardsModalWidget_InspectItemBP");
static_assert(sizeof(FortCollectionBookProgressionRewardsModalWidget_InspectItemBP) == 0x000008, "Wrong size on FortCollectionBookProgressionRewardsModalWidget_InspectItemBP");
static_assert(offsetof(FortCollectionBookProgressionRewardsModalWidget_InspectItemBP, Item) == 0x000000, "Member 'FortCollectionBookProgressionRewardsModalWidget_InspectItemBP::Item' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookProgressionRewardsModalWidget.OnLevelProgressionSet
// 0x000C (0x000C - 0x0000)
struct FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet final
{
public:
	int32                                         CurrentLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextLvlPct;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAchievedLevel;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet) == 0x000004, "Wrong alignment on FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet");
static_assert(sizeof(FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet) == 0x00000C, "Wrong size on FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet");
static_assert(offsetof(FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet, CurrentLevel) == 0x000000, "Member 'FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet, NextLvlPct) == 0x000004, "Member 'FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet::NextLvlPct' has a wrong offset!");
static_assert(offsetof(FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet, MaxAchievedLevel) == 0x000008, "Member 'FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet::MaxAchievedLevel' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookProgressionRewardsModalWidget.OnSelectedButtonChanged
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged final
{
public:
	class UCommonButtonLegacy*                    SelectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged) == 0x000008, "Wrong alignment on FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged");
static_assert(sizeof(FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged) == 0x000010, "Wrong size on FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged");
static_assert(offsetof(FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged, SelectedButton) == 0x000000, "Member 'FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged::SelectedButton' has a wrong offset!");
static_assert(offsetof(FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged, ButtonIndex) == 0x000008, "Member 'FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged::ButtonIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookProgressionRewardWidget.SetAssociatedLevel
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookProgressionRewardWidget_SetAssociatedLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressionRewardWidget_SetAssociatedLevel) == 0x000004, "Wrong alignment on FortCollectionBookProgressionRewardWidget_SetAssociatedLevel");
static_assert(sizeof(FortCollectionBookProgressionRewardWidget_SetAssociatedLevel) == 0x000004, "Wrong size on FortCollectionBookProgressionRewardWidget_SetAssociatedLevel");
static_assert(offsetof(FortCollectionBookProgressionRewardWidget_SetAssociatedLevel, Level) == 0x000000, "Member 'FortCollectionBookProgressionRewardWidget_SetAssociatedLevel::Level' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookProgressWidget.HandleDetailsModalWidgetDeactivated
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookProgressWidget_HandleDetailsModalWidgetDeactivated final
{
public:
	class UCommonActivatablePanelLegacy*          DeactivatedPanel;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressWidget_HandleDetailsModalWidgetDeactivated) == 0x000008, "Wrong alignment on FortCollectionBookProgressWidget_HandleDetailsModalWidgetDeactivated");
static_assert(sizeof(FortCollectionBookProgressWidget_HandleDetailsModalWidgetDeactivated) == 0x000008, "Wrong size on FortCollectionBookProgressWidget_HandleDetailsModalWidgetDeactivated");
static_assert(offsetof(FortCollectionBookProgressWidget_HandleDetailsModalWidgetDeactivated, DeactivatedPanel) == 0x000000, "Member 'FortCollectionBookProgressWidget_HandleDetailsModalWidgetDeactivated::DeactivatedPanel' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookProgressWidget.OnCollectionBookLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookProgressWidget_OnCollectionBookLevelChanged final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressWidget_OnCollectionBookLevelChanged) == 0x000004, "Wrong alignment on FortCollectionBookProgressWidget_OnCollectionBookLevelChanged");
static_assert(sizeof(FortCollectionBookProgressWidget_OnCollectionBookLevelChanged) == 0x000004, "Wrong size on FortCollectionBookProgressWidget_OnCollectionBookLevelChanged");
static_assert(offsetof(FortCollectionBookProgressWidget_OnCollectionBookLevelChanged, NewLevel) == 0x000000, "Member 'FortCollectionBookProgressWidget_OnCollectionBookLevelChanged::NewLevel' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookProgressWidget.OnCollectionBookLevelProgressionChanged
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookProgressWidget_OnCollectionBookLevelProgressionChanged final
{
public:
	float                                         NewCompletionPct;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressWidget_OnCollectionBookLevelProgressionChanged) == 0x000004, "Wrong alignment on FortCollectionBookProgressWidget_OnCollectionBookLevelProgressionChanged");
static_assert(sizeof(FortCollectionBookProgressWidget_OnCollectionBookLevelProgressionChanged) == 0x000004, "Wrong size on FortCollectionBookProgressWidget_OnCollectionBookLevelProgressionChanged");
static_assert(offsetof(FortCollectionBookProgressWidget_OnCollectionBookLevelProgressionChanged, NewCompletionPct) == 0x000000, "Member 'FortCollectionBookProgressWidget_OnCollectionBookLevelProgressionChanged::NewCompletionPct' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookProgressWidget.OnCollectionBookPageSelected
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookProgressWidget_OnCollectionBookPageSelected final
{
public:
	const class UFortCollectionBookPage*          SelectedPage;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressWidget_OnCollectionBookPageSelected) == 0x000008, "Wrong alignment on FortCollectionBookProgressWidget_OnCollectionBookPageSelected");
static_assert(sizeof(FortCollectionBookProgressWidget_OnCollectionBookPageSelected) == 0x000008, "Wrong size on FortCollectionBookProgressWidget_OnCollectionBookPageSelected");
static_assert(offsetof(FortCollectionBookProgressWidget_OnCollectionBookPageSelected, SelectedPage) == 0x000000, "Member 'FortCollectionBookProgressWidget_OnCollectionBookPageSelected::SelectedPage' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookProgressWidget.OnCollectionBookPreviewXPChange
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookProgressWidget_OnCollectionBookPreviewXPChange final
{
public:
	float                                         PreviewCompletionPct;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressWidget_OnCollectionBookPreviewXPChange) == 0x000004, "Wrong alignment on FortCollectionBookProgressWidget_OnCollectionBookPreviewXPChange");
static_assert(sizeof(FortCollectionBookProgressWidget_OnCollectionBookPreviewXPChange) == 0x000004, "Wrong size on FortCollectionBookProgressWidget_OnCollectionBookPreviewXPChange");
static_assert(offsetof(FortCollectionBookProgressWidget_OnCollectionBookPreviewXPChange, PreviewCompletionPct) == 0x000000, "Member 'FortCollectionBookProgressWidget_OnCollectionBookPreviewXPChange::PreviewCompletionPct' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookProgressWidget.OnSlottedItemOperationComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookProgressWidget_OnSlottedItemOperationComplete final
{
public:
	const class UFortAccountItem*                 ItemSlotted;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookProgressWidget_OnSlottedItemOperationComplete) == 0x000008, "Wrong alignment on FortCollectionBookProgressWidget_OnSlottedItemOperationComplete");
static_assert(sizeof(FortCollectionBookProgressWidget_OnSlottedItemOperationComplete) == 0x000010, "Wrong size on FortCollectionBookProgressWidget_OnSlottedItemOperationComplete");
static_assert(offsetof(FortCollectionBookProgressWidget_OnSlottedItemOperationComplete, ItemSlotted) == 0x000000, "Member 'FortCollectionBookProgressWidget_OnSlottedItemOperationComplete::ItemSlotted' has a wrong offset!");
static_assert(offsetof(FortCollectionBookProgressWidget_OnSlottedItemOperationComplete, SlotId) == 0x000008, "Member 'FortCollectionBookProgressWidget_OnSlottedItemOperationComplete::SlotId' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookRecycleSlotResultsWidget.SetCurrentItemToRecycle
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookRecycleSlotResultsWidget_SetCurrentItemToRecycle final
{
public:
	class UFortAccountItem*                       InItemToRecycle;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookRecycleSlotResultsWidget_SetCurrentItemToRecycle) == 0x000008, "Wrong alignment on FortCollectionBookRecycleSlotResultsWidget_SetCurrentItemToRecycle");
static_assert(sizeof(FortCollectionBookRecycleSlotResultsWidget_SetCurrentItemToRecycle) == 0x000008, "Wrong size on FortCollectionBookRecycleSlotResultsWidget_SetCurrentItemToRecycle");
static_assert(offsetof(FortCollectionBookRecycleSlotResultsWidget_SetCurrentItemToRecycle, InItemToRecycle) == 0x000000, "Member 'FortCollectionBookRecycleSlotResultsWidget_SetCurrentItemToRecycle::InItemToRecycle' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookRewardCardWidget.SetRewards
// 0x0030 (0x0030 - 0x0000)
struct FortCollectionBookRewardCardWidget_SetRewards final
{
public:
	struct FFortRewardInfo                        Rewards;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookRewardCardWidget_SetRewards) == 0x000008, "Wrong alignment on FortCollectionBookRewardCardWidget_SetRewards");
static_assert(sizeof(FortCollectionBookRewardCardWidget_SetRewards) == 0x000030, "Wrong size on FortCollectionBookRewardCardWidget_SetRewards");
static_assert(offsetof(FortCollectionBookRewardCardWidget_SetRewards, Rewards) == 0x000000, "Member 'FortCollectionBookRewardCardWidget_SetRewards::Rewards' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookRewardCardWidget.HasRewards
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookRewardCardWidget_HasRewards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookRewardCardWidget_HasRewards) == 0x000001, "Wrong alignment on FortCollectionBookRewardCardWidget_HasRewards");
static_assert(sizeof(FortCollectionBookRewardCardWidget_HasRewards) == 0x000001, "Wrong size on FortCollectionBookRewardCardWidget_HasRewards");
static_assert(offsetof(FortCollectionBookRewardCardWidget_HasRewards, ReturnValue) == 0x000000, "Member 'FortCollectionBookRewardCardWidget_HasRewards::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionCompletionRewardWidget.HandleRewardDetailsModalWidgetDeactivated
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookSectionCompletionRewardWidget_HandleRewardDetailsModalWidgetDeactivated final
{
public:
	class UCommonActivatablePanelLegacy*          DeactivatedPanel;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionCompletionRewardWidget_HandleRewardDetailsModalWidgetDeactivated) == 0x000008, "Wrong alignment on FortCollectionBookSectionCompletionRewardWidget_HandleRewardDetailsModalWidgetDeactivated");
static_assert(sizeof(FortCollectionBookSectionCompletionRewardWidget_HandleRewardDetailsModalWidgetDeactivated) == 0x000008, "Wrong size on FortCollectionBookSectionCompletionRewardWidget_HandleRewardDetailsModalWidgetDeactivated");
static_assert(offsetof(FortCollectionBookSectionCompletionRewardWidget_HandleRewardDetailsModalWidgetDeactivated, DeactivatedPanel) == 0x000000, "Member 'FortCollectionBookSectionCompletionRewardWidget_HandleRewardDetailsModalWidgetDeactivated::DeactivatedPanel' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionPanel.OnBackActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnBackActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnBackActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnBackActionExecuted");
static_assert(sizeof(FortCollectionBookSectionPanel_OnBackActionExecuted) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnBackActionExecuted");
static_assert(offsetof(FortCollectionBookSectionPanel_OnBackActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnBackActionExecuted::bPassThrough' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionPanel.OnInspectActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnInspectActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnInspectActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnInspectActionExecuted");
static_assert(sizeof(FortCollectionBookSectionPanel_OnInspectActionExecuted) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnInspectActionExecuted");
static_assert(offsetof(FortCollectionBookSectionPanel_OnInspectActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnInspectActionExecuted::bPassThrough' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionPanel.OnLogAllowedItemsActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnLogAllowedItemsActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnLogAllowedItemsActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnLogAllowedItemsActionExecuted");
static_assert(sizeof(FortCollectionBookSectionPanel_OnLogAllowedItemsActionExecuted) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnLogAllowedItemsActionExecuted");
static_assert(offsetof(FortCollectionBookSectionPanel_OnLogAllowedItemsActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnLogAllowedItemsActionExecuted::bPassThrough' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionPanel.OnOpenPickerActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnOpenPickerActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnOpenPickerActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnOpenPickerActionExecuted");
static_assert(sizeof(FortCollectionBookSectionPanel_OnOpenPickerActionExecuted) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnOpenPickerActionExecuted");
static_assert(offsetof(FortCollectionBookSectionPanel_OnOpenPickerActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnOpenPickerActionExecuted::bPassThrough' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionPanel.OnPurchaseItemActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnPurchaseItemActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnPurchaseItemActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnPurchaseItemActionExecuted");
static_assert(sizeof(FortCollectionBookSectionPanel_OnPurchaseItemActionExecuted) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnPurchaseItemActionExecuted");
static_assert(offsetof(FortCollectionBookSectionPanel_OnPurchaseItemActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnPurchaseItemActionExecuted::bPassThrough' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionPanel.OnResearchItemOperationComplete
// 0x0018 (0x0018 - 0x0000)
struct FortCollectionBookSectionPanel_OnResearchItemOperationComplete final
{
public:
	const class UFortAccountItem*                 NewItem;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TemplateId;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnResearchItemOperationComplete) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnResearchItemOperationComplete");
static_assert(sizeof(FortCollectionBookSectionPanel_OnResearchItemOperationComplete) == 0x000018, "Wrong size on FortCollectionBookSectionPanel_OnResearchItemOperationComplete");
static_assert(offsetof(FortCollectionBookSectionPanel_OnResearchItemOperationComplete, NewItem) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnResearchItemOperationComplete::NewItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnResearchItemOperationComplete, TemplateId) == 0x000008, "Member 'FortCollectionBookSectionPanel_OnResearchItemOperationComplete::TemplateId' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionPanel.OnSectionChanged
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookSectionPanel_OnSectionChanged final
{
public:
	const class UFortCollectionBookSection*       Section;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSectionChanged) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnSectionChanged");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSectionChanged) == 0x000008, "Wrong size on FortCollectionBookSectionPanel_OnSectionChanged");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSectionChanged, Section) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSectionChanged::Section' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionPanel.OnSlotButtonContextAction
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnSlotButtonContextAction final
{
public:
	EFortCollectionBookPopupButtonType            ContextAction;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSlotButtonContextAction) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnSlotButtonContextAction");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSlotButtonContextAction) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnSlotButtonContextAction");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlotButtonContextAction, ContextAction) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSlotButtonContextAction::ContextAction' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionPanel.OnSlotButtonHovered
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookSectionPanel_OnSlotButtonHovered final
{
public:
	int32                                         ButtonIx;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSlotButtonHovered) == 0x000004, "Wrong alignment on FortCollectionBookSectionPanel_OnSlotButtonHovered");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSlotButtonHovered) == 0x000004, "Wrong size on FortCollectionBookSectionPanel_OnSlotButtonHovered");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlotButtonHovered, ButtonIx) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSlotButtonHovered::ButtonIx' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionPanel.OnSlotButtonSelected
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookSectionPanel_OnSlotButtonSelected final
{
public:
	const class UFortCollectionBookSlotButton*    SlotButton;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSlotButtonSelected) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnSlotButtonSelected");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSlotButtonSelected) == 0x000008, "Wrong size on FortCollectionBookSectionPanel_OnSlotButtonSelected");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlotButtonSelected, SlotButton) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSlotButtonSelected::SlotButton' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionPanel.OnSlotItemActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnSlotItemActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSlotItemActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnSlotItemActionExecuted");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSlotItemActionExecuted) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnSlotItemActionExecuted");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlotItemActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSlotItemActionExecuted::bPassThrough' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionPanel.OnSlottedItemOperationComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSectionPanel_OnSlottedItemOperationComplete final
{
public:
	const class UFortAccountItem*                 SlottedItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSlottedItemOperationComplete) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnSlottedItemOperationComplete");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSlottedItemOperationComplete) == 0x000010, "Wrong size on FortCollectionBookSectionPanel_OnSlottedItemOperationComplete");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlottedItemOperationComplete, SlottedItem) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSlottedItemOperationComplete::SlottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlottedItemOperationComplete, SlotId) == 0x000008, "Member 'FortCollectionBookSectionPanel_OnSlottedItemOperationComplete::SlotId' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionPanel.OnUnslotItemActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnUnslotItemActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnUnslotItemActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnUnslotItemActionExecuted");
static_assert(sizeof(FortCollectionBookSectionPanel_OnUnslotItemActionExecuted) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnUnslotItemActionExecuted");
static_assert(offsetof(FortCollectionBookSectionPanel_OnUnslotItemActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnUnslotItemActionExecuted::bPassThrough' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionPanel.OnUnslotItemComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSectionPanel_OnUnslotItemComplete final
{
public:
	const class UFortItem*                        UnslottedItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSectionPanel_OnUnslotItemComplete) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnUnslotItemComplete");
static_assert(sizeof(FortCollectionBookSectionPanel_OnUnslotItemComplete) == 0x000010, "Wrong size on FortCollectionBookSectionPanel_OnUnslotItemComplete");
static_assert(offsetof(FortCollectionBookSectionPanel_OnUnslotItemComplete, UnslottedItem) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnUnslotItemComplete::UnslottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnUnslotItemComplete, SlotId) == 0x000008, "Member 'FortCollectionBookSectionPanel_OnUnslotItemComplete::SlotId' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionPanel.OnUnslotItemOperationComplete
// 0x0018 (0x0018 - 0x0000)
struct FortCollectionBookSectionPanel_OnUnslotItemOperationComplete final
{
public:
	const class UFortAccountItem*                 UnslottedItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortAccountItem*                 OldSlottedItem;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSectionPanel_OnUnslotItemOperationComplete) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnUnslotItemOperationComplete");
static_assert(sizeof(FortCollectionBookSectionPanel_OnUnslotItemOperationComplete) == 0x000018, "Wrong size on FortCollectionBookSectionPanel_OnUnslotItemOperationComplete");
static_assert(offsetof(FortCollectionBookSectionPanel_OnUnslotItemOperationComplete, UnslottedItem) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnUnslotItemOperationComplete::UnslottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnUnslotItemOperationComplete, OldSlottedItem) == 0x000008, "Member 'FortCollectionBookSectionPanel_OnUnslotItemOperationComplete::OldSlottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnUnslotItemOperationComplete, SlotId) == 0x000010, "Member 'FortCollectionBookSectionPanel_OnUnslotItemOperationComplete::SlotId' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionTileWidget.OnItemSlotted
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSectionTileWidget_OnItemSlotted final
{
public:
	const class UFortAccountItem*                 ItemSlotted;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSectionTileWidget_OnItemSlotted) == 0x000008, "Wrong alignment on FortCollectionBookSectionTileWidget_OnItemSlotted");
static_assert(sizeof(FortCollectionBookSectionTileWidget_OnItemSlotted) == 0x000010, "Wrong size on FortCollectionBookSectionTileWidget_OnItemSlotted");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnItemSlotted, ItemSlotted) == 0x000000, "Member 'FortCollectionBookSectionTileWidget_OnItemSlotted::ItemSlotted' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnItemSlotted, SlotId) == 0x000008, "Member 'FortCollectionBookSectionTileWidget_OnItemSlotted::SlotId' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionTileWidget.OnItemUnslotted
// 0x0018 (0x0018 - 0x0000)
struct FortCollectionBookSectionTileWidget_OnItemUnslotted final
{
public:
	const class UFortAccountItem*                 ItemUnslotted;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortAccountItem*                 OldSlottedItem;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSectionTileWidget_OnItemUnslotted) == 0x000008, "Wrong alignment on FortCollectionBookSectionTileWidget_OnItemUnslotted");
static_assert(sizeof(FortCollectionBookSectionTileWidget_OnItemUnslotted) == 0x000018, "Wrong size on FortCollectionBookSectionTileWidget_OnItemUnslotted");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnItemUnslotted, ItemUnslotted) == 0x000000, "Member 'FortCollectionBookSectionTileWidget_OnItemUnslotted::ItemUnslotted' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnItemUnslotted, OldSlottedItem) == 0x000008, "Member 'FortCollectionBookSectionTileWidget_OnItemUnslotted::OldSlottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnItemUnslotted, SlotId) == 0x000010, "Member 'FortCollectionBookSectionTileWidget_OnItemUnslotted::SlotId' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSectionTileWidget.OnSectionSlotUpdate
// 0x000C (0x000C - 0x0000)
struct FortCollectionBookSectionTileWidget_OnSectionSlotUpdate final
{
public:
	int32                                         NumFilledSlots;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSlots;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCollectionBookState                      SectionState;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSectionTileWidget_OnSectionSlotUpdate) == 0x000004, "Wrong alignment on FortCollectionBookSectionTileWidget_OnSectionSlotUpdate");
static_assert(sizeof(FortCollectionBookSectionTileWidget_OnSectionSlotUpdate) == 0x00000C, "Wrong size on FortCollectionBookSectionTileWidget_OnSectionSlotUpdate");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnSectionSlotUpdate, NumFilledSlots) == 0x000000, "Member 'FortCollectionBookSectionTileWidget_OnSectionSlotUpdate::NumFilledSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnSectionSlotUpdate, NumSlots) == 0x000004, "Member 'FortCollectionBookSectionTileWidget_OnSectionSlotUpdate::NumSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnSectionSlotUpdate, SectionState) == 0x000008, "Member 'FortCollectionBookSectionTileWidget_OnSectionSlotUpdate::SectionState' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSlotButton.GetPopupMenu
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookSlotButton_GetPopupMenu final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotButton_GetPopupMenu) == 0x000008, "Wrong alignment on FortCollectionBookSlotButton_GetPopupMenu");
static_assert(sizeof(FortCollectionBookSlotButton_GetPopupMenu) == 0x000008, "Wrong size on FortCollectionBookSlotButton_GetPopupMenu");
static_assert(offsetof(FortCollectionBookSlotButton_GetPopupMenu, ReturnValue) == 0x000000, "Member 'FortCollectionBookSlotButton_GetPopupMenu::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSlotButton.PopupMenuClosedWithAction
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSlotButton_PopupMenuClosedWithAction final
{
public:
	EFortCollectionBookPopupButtonType            Selection;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotButton_PopupMenuClosedWithAction) == 0x000001, "Wrong alignment on FortCollectionBookSlotButton_PopupMenuClosedWithAction");
static_assert(sizeof(FortCollectionBookSlotButton_PopupMenuClosedWithAction) == 0x000001, "Wrong size on FortCollectionBookSlotButton_PopupMenuClosedWithAction");
static_assert(offsetof(FortCollectionBookSlotButton_PopupMenuClosedWithAction, Selection) == 0x000000, "Member 'FortCollectionBookSlotButton_PopupMenuClosedWithAction::Selection' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSlotConfirmationModal.HandleSlotItemComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSlotConfirmationModal_HandleSlotItemComplete final
{
public:
	const class UFortAccountItem*                 SlottedItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSlotConfirmationModal_HandleSlotItemComplete) == 0x000008, "Wrong alignment on FortCollectionBookSlotConfirmationModal_HandleSlotItemComplete");
static_assert(sizeof(FortCollectionBookSlotConfirmationModal_HandleSlotItemComplete) == 0x000010, "Wrong size on FortCollectionBookSlotConfirmationModal_HandleSlotItemComplete");
static_assert(offsetof(FortCollectionBookSlotConfirmationModal_HandleSlotItemComplete, SlottedItem) == 0x000000, "Member 'FortCollectionBookSlotConfirmationModal_HandleSlotItemComplete::SlottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSlotConfirmationModal_HandleSlotItemComplete, SlotId) == 0x000008, "Member 'FortCollectionBookSlotConfirmationModal_HandleSlotItemComplete::SlotId' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSlotView.OnSelectedSlotButtonChanged
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSlotView_OnSelectedSlotButtonChanged final
{
public:
	class UCommonButtonLegacy*                    SelectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIdx;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSlotView_OnSelectedSlotButtonChanged) == 0x000008, "Wrong alignment on FortCollectionBookSlotView_OnSelectedSlotButtonChanged");
static_assert(sizeof(FortCollectionBookSlotView_OnSelectedSlotButtonChanged) == 0x000010, "Wrong size on FortCollectionBookSlotView_OnSelectedSlotButtonChanged");
static_assert(offsetof(FortCollectionBookSlotView_OnSelectedSlotButtonChanged, SelectedButton) == 0x000000, "Member 'FortCollectionBookSlotView_OnSelectedSlotButtonChanged::SelectedButton' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSlotView_OnSelectedSlotButtonChanged, ButtonIdx) == 0x000008, "Member 'FortCollectionBookSlotView_OnSelectedSlotButtonChanged::ButtonIdx' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSlotView.OnSlotButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSlotView_OnSlotButtonClicked final
{
public:
	class UCommonButtonLegacy*                    ClickedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIdx;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSlotView_OnSlotButtonClicked) == 0x000008, "Wrong alignment on FortCollectionBookSlotView_OnSlotButtonClicked");
static_assert(sizeof(FortCollectionBookSlotView_OnSlotButtonClicked) == 0x000010, "Wrong size on FortCollectionBookSlotView_OnSlotButtonClicked");
static_assert(offsetof(FortCollectionBookSlotView_OnSlotButtonClicked, ClickedButton) == 0x000000, "Member 'FortCollectionBookSlotView_OnSlotButtonClicked::ClickedButton' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSlotView_OnSlotButtonClicked, ButtonIdx) == 0x000008, "Member 'FortCollectionBookSlotView_OnSlotButtonClicked::ButtonIdx' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSlotView.OnSlotButtonHovered
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSlotView_OnSlotButtonHovered final
{
public:
	class UCommonButtonLegacy*                    HoveredButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIdx;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSlotView_OnSlotButtonHovered) == 0x000008, "Wrong alignment on FortCollectionBookSlotView_OnSlotButtonHovered");
static_assert(sizeof(FortCollectionBookSlotView_OnSlotButtonHovered) == 0x000010, "Wrong size on FortCollectionBookSlotView_OnSlotButtonHovered");
static_assert(offsetof(FortCollectionBookSlotView_OnSlotButtonHovered, HoveredButton) == 0x000000, "Member 'FortCollectionBookSlotView_OnSlotButtonHovered::HoveredButton' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSlotView_OnSlotButtonHovered, ButtonIdx) == 0x000008, "Member 'FortCollectionBookSlotView_OnSlotButtonHovered::ButtonIdx' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSlotWidget.HandleResearchItemComplete
// 0x0018 (0x0018 - 0x0000)
struct FortCollectionBookSlotWidget_HandleResearchItemComplete final
{
public:
	const class UFortAccountItem*                 ResearchedItem;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotId;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotWidget_HandleResearchItemComplete) == 0x000008, "Wrong alignment on FortCollectionBookSlotWidget_HandleResearchItemComplete");
static_assert(sizeof(FortCollectionBookSlotWidget_HandleResearchItemComplete) == 0x000018, "Wrong size on FortCollectionBookSlotWidget_HandleResearchItemComplete");
static_assert(offsetof(FortCollectionBookSlotWidget_HandleResearchItemComplete, ResearchedItem) == 0x000000, "Member 'FortCollectionBookSlotWidget_HandleResearchItemComplete::ResearchedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSlotWidget_HandleResearchItemComplete, SlotId) == 0x000008, "Member 'FortCollectionBookSlotWidget_HandleResearchItemComplete::SlotId' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSlotWidget.HandleSlottedItemOperationComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSlotWidget_HandleSlottedItemOperationComplete final
{
public:
	const class UFortAccountItem*                 NewItem;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TemplateId;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSlotWidget_HandleSlottedItemOperationComplete) == 0x000008, "Wrong alignment on FortCollectionBookSlotWidget_HandleSlottedItemOperationComplete");
static_assert(sizeof(FortCollectionBookSlotWidget_HandleSlottedItemOperationComplete) == 0x000010, "Wrong size on FortCollectionBookSlotWidget_HandleSlottedItemOperationComplete");
static_assert(offsetof(FortCollectionBookSlotWidget_HandleSlottedItemOperationComplete, NewItem) == 0x000000, "Member 'FortCollectionBookSlotWidget_HandleSlottedItemOperationComplete::NewItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSlotWidget_HandleSlottedItemOperationComplete, TemplateId) == 0x000008, "Member 'FortCollectionBookSlotWidget_HandleSlottedItemOperationComplete::TemplateId' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSlotWidget.HandleUnslotItemComplete
// 0x0018 (0x0018 - 0x0000)
struct FortCollectionBookSlotWidget_HandleUnslotItemComplete final
{
public:
	const class UFortAccountItem*                 UnslottedItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortAccountItem*                 OldItem;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSlotWidget_HandleUnslotItemComplete) == 0x000008, "Wrong alignment on FortCollectionBookSlotWidget_HandleUnslotItemComplete");
static_assert(sizeof(FortCollectionBookSlotWidget_HandleUnslotItemComplete) == 0x000018, "Wrong size on FortCollectionBookSlotWidget_HandleUnslotItemComplete");
static_assert(offsetof(FortCollectionBookSlotWidget_HandleUnslotItemComplete, UnslottedItem) == 0x000000, "Member 'FortCollectionBookSlotWidget_HandleUnslotItemComplete::UnslottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSlotWidget_HandleUnslotItemComplete, OldItem) == 0x000008, "Member 'FortCollectionBookSlotWidget_HandleUnslotItemComplete::OldItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSlotWidget_HandleUnslotItemComplete, SlotId) == 0x000010, "Member 'FortCollectionBookSlotWidget_HandleUnslotItemComplete::SlotId' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSlotWidget.GetNumItemsToSlot
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookSlotWidget_GetNumItemsToSlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotWidget_GetNumItemsToSlot) == 0x000004, "Wrong alignment on FortCollectionBookSlotWidget_GetNumItemsToSlot");
static_assert(sizeof(FortCollectionBookSlotWidget_GetNumItemsToSlot) == 0x000004, "Wrong size on FortCollectionBookSlotWidget_GetNumItemsToSlot");
static_assert(offsetof(FortCollectionBookSlotWidget_GetNumItemsToSlot, ReturnValue) == 0x000000, "Member 'FortCollectionBookSlotWidget_GetNumItemsToSlot::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSlotWidget.GetSlotRowName
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookSlotWidget_GetSlotRowName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotWidget_GetSlotRowName) == 0x000004, "Wrong alignment on FortCollectionBookSlotWidget_GetSlotRowName");
static_assert(sizeof(FortCollectionBookSlotWidget_GetSlotRowName) == 0x000004, "Wrong size on FortCollectionBookSlotWidget_GetSlotRowName");
static_assert(offsetof(FortCollectionBookSlotWidget_GetSlotRowName, ReturnValue) == 0x000000, "Member 'FortCollectionBookSlotWidget_GetSlotRowName::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSlotWidget.GetSlottedItemRepresentation
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookSlotWidget_GetSlottedItemRepresentation final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotWidget_GetSlottedItemRepresentation) == 0x000008, "Wrong alignment on FortCollectionBookSlotWidget_GetSlottedItemRepresentation");
static_assert(sizeof(FortCollectionBookSlotWidget_GetSlottedItemRepresentation) == 0x000008, "Wrong size on FortCollectionBookSlotWidget_GetSlottedItemRepresentation");
static_assert(offsetof(FortCollectionBookSlotWidget_GetSlottedItemRepresentation, ReturnValue) == 0x000000, "Member 'FortCollectionBookSlotWidget_GetSlottedItemRepresentation::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSlotWidget.HasItemsToSlot
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSlotWidget_HasItemsToSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotWidget_HasItemsToSlot) == 0x000001, "Wrong alignment on FortCollectionBookSlotWidget_HasItemsToSlot");
static_assert(sizeof(FortCollectionBookSlotWidget_HasItemsToSlot) == 0x000001, "Wrong size on FortCollectionBookSlotWidget_HasItemsToSlot");
static_assert(offsetof(FortCollectionBookSlotWidget_HasItemsToSlot, ReturnValue) == 0x000000, "Member 'FortCollectionBookSlotWidget_HasItemsToSlot::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookSlotWidget.IsItemSlotted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSlotWidget_IsItemSlotted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotWidget_IsItemSlotted) == 0x000001, "Wrong alignment on FortCollectionBookSlotWidget_IsItemSlotted");
static_assert(sizeof(FortCollectionBookSlotWidget_IsItemSlotted) == 0x000001, "Wrong size on FortCollectionBookSlotWidget_IsItemSlotted");
static_assert(offsetof(FortCollectionBookSlotWidget_IsItemSlotted, ReturnValue) == 0x000000, "Member 'FortCollectionBookSlotWidget_IsItemSlotted::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookWidget.OnCollectionBookPageClicked
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookWidget_OnCollectionBookPageClicked final
{
public:
	const class UFortCollectionBookPage*          ClickedPage;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookWidget_OnCollectionBookPageClicked) == 0x000008, "Wrong alignment on FortCollectionBookWidget_OnCollectionBookPageClicked");
static_assert(sizeof(FortCollectionBookWidget_OnCollectionBookPageClicked) == 0x000008, "Wrong size on FortCollectionBookWidget_OnCollectionBookPageClicked");
static_assert(offsetof(FortCollectionBookWidget_OnCollectionBookPageClicked, ClickedPage) == 0x000000, "Member 'FortCollectionBookWidget_OnCollectionBookPageClicked::ClickedPage' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookWidget.OnCollectionBookPageSelected
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookWidget_OnCollectionBookPageSelected final
{
public:
	const class UFortCollectionBookPage*          SelectedPage;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookWidget_OnCollectionBookPageSelected) == 0x000008, "Wrong alignment on FortCollectionBookWidget_OnCollectionBookPageSelected");
static_assert(sizeof(FortCollectionBookWidget_OnCollectionBookPageSelected) == 0x000008, "Wrong size on FortCollectionBookWidget_OnCollectionBookPageSelected");
static_assert(offsetof(FortCollectionBookWidget_OnCollectionBookPageSelected, SelectedPage) == 0x000000, "Member 'FortCollectionBookWidget_OnCollectionBookPageSelected::SelectedPage' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookWidget.OnCollectionBookSectionClicked
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookWidget_OnCollectionBookSectionClicked final
{
public:
	const class UFortCollectionBookSection*       ClickedSection;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookWidget_OnCollectionBookSectionClicked) == 0x000008, "Wrong alignment on FortCollectionBookWidget_OnCollectionBookSectionClicked");
static_assert(sizeof(FortCollectionBookWidget_OnCollectionBookSectionClicked) == 0x000008, "Wrong size on FortCollectionBookWidget_OnCollectionBookSectionClicked");
static_assert(offsetof(FortCollectionBookWidget_OnCollectionBookSectionClicked, ClickedSection) == 0x000000, "Member 'FortCollectionBookWidget_OnCollectionBookSectionClicked::ClickedSection' has a wrong offset!");

// Function SaveTheWorldUI.FortCollectionBookWidget.OnPreviewXPChangeRequest
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookWidget_OnPreviewXPChangeRequest final
{
public:
	int32                                         XPChange;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookWidget_OnPreviewXPChangeRequest) == 0x000004, "Wrong alignment on FortCollectionBookWidget_OnPreviewXPChangeRequest");
static_assert(sizeof(FortCollectionBookWidget_OnPreviewXPChangeRequest) == 0x000004, "Wrong size on FortCollectionBookWidget_OnPreviewXPChangeRequest");
static_assert(offsetof(FortCollectionBookWidget_OnPreviewXPChangeRequest, XPChange) == 0x000000, "Member 'FortCollectionBookWidget_OnPreviewXPChangeRequest::XPChange' has a wrong offset!");

// Function SaveTheWorldUI.FortAbilitySystemContext.RegisterForAttributeChanged
// 0x0058 (0x0058 - 0x0000)
struct FortAbilitySystemContext_RegisterForAttributeChanged final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                ASC;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0010(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Callback;                                          // 0x0048(0x000C)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilitySystemContext_RegisterForAttributeChanged) == 0x000008, "Wrong alignment on FortAbilitySystemContext_RegisterForAttributeChanged");
static_assert(sizeof(FortAbilitySystemContext_RegisterForAttributeChanged) == 0x000058, "Wrong size on FortAbilitySystemContext_RegisterForAttributeChanged");
static_assert(offsetof(FortAbilitySystemContext_RegisterForAttributeChanged, Widget) == 0x000000, "Member 'FortAbilitySystemContext_RegisterForAttributeChanged::Widget' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemContext_RegisterForAttributeChanged, ASC) == 0x000008, "Member 'FortAbilitySystemContext_RegisterForAttributeChanged::ASC' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemContext_RegisterForAttributeChanged, Attribute) == 0x000010, "Member 'FortAbilitySystemContext_RegisterForAttributeChanged::Attribute' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemContext_RegisterForAttributeChanged, Callback) == 0x000048, "Member 'FortAbilitySystemContext_RegisterForAttributeChanged::Callback' has a wrong offset!");

// Function SaveTheWorldUI.FortAbilitySystemContext.RemoveDelegatesFromWidget
// 0x0008 (0x0008 - 0x0000)
struct FortAbilitySystemContext_RemoveDelegatesFromWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilitySystemContext_RemoveDelegatesFromWidget) == 0x000008, "Wrong alignment on FortAbilitySystemContext_RemoveDelegatesFromWidget");
static_assert(sizeof(FortAbilitySystemContext_RemoveDelegatesFromWidget) == 0x000008, "Wrong size on FortAbilitySystemContext_RemoveDelegatesFromWidget");
static_assert(offsetof(FortAbilitySystemContext_RemoveDelegatesFromWidget, Widget) == 0x000000, "Member 'FortAbilitySystemContext_RemoveDelegatesFromWidget::Widget' has a wrong offset!");

// Function SaveTheWorldUI.FortAbilitySystemContext.HasMatchingGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct FortAbilitySystemContext_HasMatchingGameplayTag final
{
public:
	struct FGameplayTag                           TagToCheck;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilitySystemContext_HasMatchingGameplayTag) == 0x000004, "Wrong alignment on FortAbilitySystemContext_HasMatchingGameplayTag");
static_assert(sizeof(FortAbilitySystemContext_HasMatchingGameplayTag) == 0x000008, "Wrong size on FortAbilitySystemContext_HasMatchingGameplayTag");
static_assert(offsetof(FortAbilitySystemContext_HasMatchingGameplayTag, TagToCheck) == 0x000000, "Member 'FortAbilitySystemContext_HasMatchingGameplayTag::TagToCheck' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemContext_HasMatchingGameplayTag, ReturnValue) == 0x000004, "Member 'FortAbilitySystemContext_HasMatchingGameplayTag::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortDirectAcquisitionWidgetBase.IsTabsLayout
// 0x0001 (0x0001 - 0x0000)
struct FortDirectAcquisitionWidgetBase_IsTabsLayout final
{
public:
	bool                                          bShouldDisplayTabs;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_IsTabsLayout) == 0x000001, "Wrong alignment on FortDirectAcquisitionWidgetBase_IsTabsLayout");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_IsTabsLayout) == 0x000001, "Wrong size on FortDirectAcquisitionWidgetBase_IsTabsLayout");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_IsTabsLayout, bShouldDisplayTabs) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_IsTabsLayout::bShouldDisplayTabs' has a wrong offset!");

// Function SaveTheWorldUI.FortDirectAcquisitionWidgetBase.OnDisplayToast
// 0x0001 (0x0001 - 0x0000)
struct FortDirectAcquisitionWidgetBase_OnDisplayToast final
{
public:
	bool                                          bDisplayToast;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_OnDisplayToast) == 0x000001, "Wrong alignment on FortDirectAcquisitionWidgetBase_OnDisplayToast");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_OnDisplayToast) == 0x000001, "Wrong size on FortDirectAcquisitionWidgetBase_OnDisplayToast");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_OnDisplayToast, bDisplayToast) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_OnDisplayToast::bDisplayToast' has a wrong offset!");

// Function SaveTheWorldUI.FortDirectAcquisitionWidgetBase.GetDailyStoreEndDate
// 0x0008 (0x0008 - 0x0000)
struct FortDirectAcquisitionWidgetBase_GetDailyStoreEndDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_GetDailyStoreEndDate) == 0x000008, "Wrong alignment on FortDirectAcquisitionWidgetBase_GetDailyStoreEndDate");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_GetDailyStoreEndDate) == 0x000008, "Wrong size on FortDirectAcquisitionWidgetBase_GetDailyStoreEndDate");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_GetDailyStoreEndDate, ReturnValue) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_GetDailyStoreEndDate::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortDirectAcquisitionWidgetBase.GetSeasonStoreEndDate
// 0x0008 (0x0008 - 0x0000)
struct FortDirectAcquisitionWidgetBase_GetSeasonStoreEndDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_GetSeasonStoreEndDate) == 0x000008, "Wrong alignment on FortDirectAcquisitionWidgetBase_GetSeasonStoreEndDate");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_GetSeasonStoreEndDate) == 0x000008, "Wrong size on FortDirectAcquisitionWidgetBase_GetSeasonStoreEndDate");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_GetSeasonStoreEndDate, ReturnValue) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_GetSeasonStoreEndDate::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortDirectAcquisitionWidgetBase.GetStoreCurrencies
// 0x0010 (0x0010 - 0x0000)
struct FortDirectAcquisitionWidgetBase_GetStoreCurrencies final
{
public:
	TArray<class UFortAccountItemDefinition*>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_GetStoreCurrencies) == 0x000008, "Wrong alignment on FortDirectAcquisitionWidgetBase_GetStoreCurrencies");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_GetStoreCurrencies) == 0x000010, "Wrong size on FortDirectAcquisitionWidgetBase_GetStoreCurrencies");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_GetStoreCurrencies, ReturnValue) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_GetStoreCurrencies::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortDirectAcquisitionWidgetBase.GetWeeklyStoreEndDate
// 0x0008 (0x0008 - 0x0000)
struct FortDirectAcquisitionWidgetBase_GetWeeklyStoreEndDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_GetWeeklyStoreEndDate) == 0x000008, "Wrong alignment on FortDirectAcquisitionWidgetBase_GetWeeklyStoreEndDate");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_GetWeeklyStoreEndDate) == 0x000008, "Wrong size on FortDirectAcquisitionWidgetBase_GetWeeklyStoreEndDate");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_GetWeeklyStoreEndDate, ReturnValue) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_GetWeeklyStoreEndDate::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortDirectAcquisitionWidgetBase_Legacy.IsTabsLayout
// 0x0001 (0x0001 - 0x0000)
struct FortDirectAcquisitionWidgetBase_Legacy_IsTabsLayout final
{
public:
	bool                                          bShouldDisplayTabs;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_Legacy_IsTabsLayout) == 0x000001, "Wrong alignment on FortDirectAcquisitionWidgetBase_Legacy_IsTabsLayout");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_Legacy_IsTabsLayout) == 0x000001, "Wrong size on FortDirectAcquisitionWidgetBase_Legacy_IsTabsLayout");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_Legacy_IsTabsLayout, bShouldDisplayTabs) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_Legacy_IsTabsLayout::bShouldDisplayTabs' has a wrong offset!");

// Function SaveTheWorldUI.FortDirectAcquisitionWidgetBase_Legacy.OnDisplayToast
// 0x0001 (0x0001 - 0x0000)
struct FortDirectAcquisitionWidgetBase_Legacy_OnDisplayToast final
{
public:
	bool                                          bDisplayToast;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_Legacy_OnDisplayToast) == 0x000001, "Wrong alignment on FortDirectAcquisitionWidgetBase_Legacy_OnDisplayToast");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_Legacy_OnDisplayToast) == 0x000001, "Wrong size on FortDirectAcquisitionWidgetBase_Legacy_OnDisplayToast");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_Legacy_OnDisplayToast, bDisplayToast) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_Legacy_OnDisplayToast::bDisplayToast' has a wrong offset!");

// Function SaveTheWorldUI.FortDirectAcquisitionWidgetBase_Legacy.GetDailyStoreEndDate
// 0x0008 (0x0008 - 0x0000)
struct FortDirectAcquisitionWidgetBase_Legacy_GetDailyStoreEndDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_Legacy_GetDailyStoreEndDate) == 0x000008, "Wrong alignment on FortDirectAcquisitionWidgetBase_Legacy_GetDailyStoreEndDate");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_Legacy_GetDailyStoreEndDate) == 0x000008, "Wrong size on FortDirectAcquisitionWidgetBase_Legacy_GetDailyStoreEndDate");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_Legacy_GetDailyStoreEndDate, ReturnValue) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_Legacy_GetDailyStoreEndDate::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortDirectAcquisitionWidgetBase_Legacy.GetSeasonStoreEndDate
// 0x0008 (0x0008 - 0x0000)
struct FortDirectAcquisitionWidgetBase_Legacy_GetSeasonStoreEndDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_Legacy_GetSeasonStoreEndDate) == 0x000008, "Wrong alignment on FortDirectAcquisitionWidgetBase_Legacy_GetSeasonStoreEndDate");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_Legacy_GetSeasonStoreEndDate) == 0x000008, "Wrong size on FortDirectAcquisitionWidgetBase_Legacy_GetSeasonStoreEndDate");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_Legacy_GetSeasonStoreEndDate, ReturnValue) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_Legacy_GetSeasonStoreEndDate::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortDirectAcquisitionWidgetBase_Legacy.GetStoreCurrencies
// 0x0010 (0x0010 - 0x0000)
struct FortDirectAcquisitionWidgetBase_Legacy_GetStoreCurrencies final
{
public:
	TArray<class UFortAccountItemDefinition*>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_Legacy_GetStoreCurrencies) == 0x000008, "Wrong alignment on FortDirectAcquisitionWidgetBase_Legacy_GetStoreCurrencies");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_Legacy_GetStoreCurrencies) == 0x000010, "Wrong size on FortDirectAcquisitionWidgetBase_Legacy_GetStoreCurrencies");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_Legacy_GetStoreCurrencies, ReturnValue) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_Legacy_GetStoreCurrencies::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortDirectAcquisitionWidgetBase_Legacy.GetWeeklyStoreEndDate
// 0x0008 (0x0008 - 0x0000)
struct FortDirectAcquisitionWidgetBase_Legacy_GetWeeklyStoreEndDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_Legacy_GetWeeklyStoreEndDate) == 0x000008, "Wrong alignment on FortDirectAcquisitionWidgetBase_Legacy_GetWeeklyStoreEndDate");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_Legacy_GetWeeklyStoreEndDate) == 0x000008, "Wrong size on FortDirectAcquisitionWidgetBase_Legacy_GetWeeklyStoreEndDate");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_Legacy_GetWeeklyStoreEndDate, ReturnValue) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_Legacy_GetWeeklyStoreEndDate::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionBuildSquadWidget.ClearTemporaryExpeditionSquadState
// 0x0001 (0x0001 - 0x0000)
struct FortExpeditionBuildSquadWidget_ClearTemporaryExpeditionSquadState final
{
public:
	bool                                          bPreviewOnly;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionBuildSquadWidget_ClearTemporaryExpeditionSquadState) == 0x000001, "Wrong alignment on FortExpeditionBuildSquadWidget_ClearTemporaryExpeditionSquadState");
static_assert(sizeof(FortExpeditionBuildSquadWidget_ClearTemporaryExpeditionSquadState) == 0x000001, "Wrong size on FortExpeditionBuildSquadWidget_ClearTemporaryExpeditionSquadState");
static_assert(offsetof(FortExpeditionBuildSquadWidget_ClearTemporaryExpeditionSquadState, bPreviewOnly) == 0x000000, "Member 'FortExpeditionBuildSquadWidget_ClearTemporaryExpeditionSquadState::bPreviewOnly' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionBuildSquadWidget.HandleDifferentSquadSlotSelected
// 0x0004 (0x0004 - 0x0000)
struct FortExpeditionBuildSquadWidget_HandleDifferentSquadSlotSelected final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionBuildSquadWidget_HandleDifferentSquadSlotSelected) == 0x000004, "Wrong alignment on FortExpeditionBuildSquadWidget_HandleDifferentSquadSlotSelected");
static_assert(sizeof(FortExpeditionBuildSquadWidget_HandleDifferentSquadSlotSelected) == 0x000004, "Wrong size on FortExpeditionBuildSquadWidget_HandleDifferentSquadSlotSelected");
static_assert(offsetof(FortExpeditionBuildSquadWidget_HandleDifferentSquadSlotSelected, SquadSlotIndex) == 0x000000, "Member 'FortExpeditionBuildSquadWidget_HandleDifferentSquadSlotSelected::SquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionBuildSquadWidget.HandleRequestStartExpedition
// 0x0001 (0x0001 - 0x0000)
struct FortExpeditionBuildSquadWidget_HandleRequestStartExpedition final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionBuildSquadWidget_HandleRequestStartExpedition) == 0x000001, "Wrong alignment on FortExpeditionBuildSquadWidget_HandleRequestStartExpedition");
static_assert(sizeof(FortExpeditionBuildSquadWidget_HandleRequestStartExpedition) == 0x000001, "Wrong size on FortExpeditionBuildSquadWidget_HandleRequestStartExpedition");
static_assert(offsetof(FortExpeditionBuildSquadWidget_HandleRequestStartExpedition, bPassThrough) == 0x000000, "Member 'FortExpeditionBuildSquadWidget_HandleRequestStartExpedition::bPassThrough' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionBuildSquadWidget.IsExpeditionValidToStart
// 0x0001 (0x0001 - 0x0000)
struct FortExpeditionBuildSquadWidget_IsExpeditionValidToStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionBuildSquadWidget_IsExpeditionValidToStart) == 0x000001, "Wrong alignment on FortExpeditionBuildSquadWidget_IsExpeditionValidToStart");
static_assert(sizeof(FortExpeditionBuildSquadWidget_IsExpeditionValidToStart) == 0x000001, "Wrong size on FortExpeditionBuildSquadWidget_IsExpeditionValidToStart");
static_assert(offsetof(FortExpeditionBuildSquadWidget_IsExpeditionValidToStart, ReturnValue) == 0x000000, "Member 'FortExpeditionBuildSquadWidget_IsExpeditionValidToStart::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionBuildSquadWidget.SetCurrentSquadId
// 0x0004 (0x0004 - 0x0000)
struct FortExpeditionBuildSquadWidget_SetCurrentSquadId final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionBuildSquadWidget_SetCurrentSquadId) == 0x000004, "Wrong alignment on FortExpeditionBuildSquadWidget_SetCurrentSquadId");
static_assert(sizeof(FortExpeditionBuildSquadWidget_SetCurrentSquadId) == 0x000004, "Wrong size on FortExpeditionBuildSquadWidget_SetCurrentSquadId");
static_assert(offsetof(FortExpeditionBuildSquadWidget_SetCurrentSquadId, SquadId) == 0x000000, "Member 'FortExpeditionBuildSquadWidget_SetCurrentSquadId::SquadId' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionBuildSquadWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionBuildSquadWidget_SetData final
{
public:
	class UFortExpeditionItem*                    InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionBuildSquadWidget_SetData) == 0x000008, "Wrong alignment on FortExpeditionBuildSquadWidget_SetData");
static_assert(sizeof(FortExpeditionBuildSquadWidget_SetData) == 0x000008, "Wrong size on FortExpeditionBuildSquadWidget_SetData");
static_assert(offsetof(FortExpeditionBuildSquadWidget_SetData, InItem) == 0x000000, "Member 'FortExpeditionBuildSquadWidget_SetData::InItem' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionBuildSquadWidget.IsSquadSlotLocked
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionBuildSquadWidget_IsSquadSlotLocked final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionBuildSquadWidget_IsSquadSlotLocked) == 0x000004, "Wrong alignment on FortExpeditionBuildSquadWidget_IsSquadSlotLocked");
static_assert(sizeof(FortExpeditionBuildSquadWidget_IsSquadSlotLocked) == 0x000008, "Wrong size on FortExpeditionBuildSquadWidget_IsSquadSlotLocked");
static_assert(offsetof(FortExpeditionBuildSquadWidget_IsSquadSlotLocked, SlotIndex) == 0x000000, "Member 'FortExpeditionBuildSquadWidget_IsSquadSlotLocked::SlotIndex' has a wrong offset!");
static_assert(offsetof(FortExpeditionBuildSquadWidget_IsSquadSlotLocked, ReturnValue) == 0x000004, "Member 'FortExpeditionBuildSquadWidget_IsSquadSlotLocked::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionDetailsWidget.HandleAbandonExpeditionCompleted
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted) == 0x000008, "Wrong alignment on FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted");
static_assert(sizeof(FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted) == 0x000010, "Wrong size on FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted");
static_assert(offsetof(FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted, Expedition) == 0x000000, "Member 'FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted, bSuccess) == 0x000008, "Member 'FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted::bSuccess' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionDetailsWidget.SetCurrentSquadId
// 0x0004 (0x0004 - 0x0000)
struct FortExpeditionDetailsWidget_SetCurrentSquadId final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionDetailsWidget_SetCurrentSquadId) == 0x000004, "Wrong alignment on FortExpeditionDetailsWidget_SetCurrentSquadId");
static_assert(sizeof(FortExpeditionDetailsWidget_SetCurrentSquadId) == 0x000004, "Wrong size on FortExpeditionDetailsWidget_SetCurrentSquadId");
static_assert(offsetof(FortExpeditionDetailsWidget_SetCurrentSquadId, SquadId) == 0x000000, "Member 'FortExpeditionDetailsWidget_SetCurrentSquadId::SquadId' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionDetailsWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionDetailsWidget_SetData final
{
public:
	class UFortExpeditionItem*                    InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionDetailsWidget_SetData) == 0x000008, "Wrong alignment on FortExpeditionDetailsWidget_SetData");
static_assert(sizeof(FortExpeditionDetailsWidget_SetData) == 0x000008, "Wrong size on FortExpeditionDetailsWidget_SetData");
static_assert(offsetof(FortExpeditionDetailsWidget_SetData, InItem) == 0x000000, "Member 'FortExpeditionDetailsWidget_SetData::InItem' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionExpiresWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionExpiresWidget_SetData final
{
public:
	class UFortExpeditionItem*                    InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionExpiresWidget_SetData) == 0x000008, "Wrong alignment on FortExpeditionExpiresWidget_SetData");
static_assert(sizeof(FortExpeditionExpiresWidget_SetData) == 0x000008, "Wrong size on FortExpeditionExpiresWidget_SetData");
static_assert(offsetof(FortExpeditionExpiresWidget_SetData, InItem) == 0x000000, "Member 'FortExpeditionExpiresWidget_SetData::InItem' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionListViewWidget.SetExpeditionListSortType
// 0x0001 (0x0001 - 0x0000)
struct FortExpeditionListViewWidget_SetExpeditionListSortType final
{
public:
	EFortExpeditionListSort                       InSortType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionListViewWidget_SetExpeditionListSortType) == 0x000001, "Wrong alignment on FortExpeditionListViewWidget_SetExpeditionListSortType");
static_assert(sizeof(FortExpeditionListViewWidget_SetExpeditionListSortType) == 0x000001, "Wrong size on FortExpeditionListViewWidget_SetExpeditionListSortType");
static_assert(offsetof(FortExpeditionListViewWidget_SetExpeditionListSortType, InSortType) == 0x000000, "Member 'FortExpeditionListViewWidget_SetExpeditionListSortType::InSortType' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionListViewWidget.GetExpeditionListSortName
// 0x0018 (0x0018 - 0x0000)
struct FortExpeditionListViewWidget_GetExpeditionListSortName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionListViewWidget_GetExpeditionListSortName) == 0x000008, "Wrong alignment on FortExpeditionListViewWidget_GetExpeditionListSortName");
static_assert(sizeof(FortExpeditionListViewWidget_GetExpeditionListSortName) == 0x000018, "Wrong size on FortExpeditionListViewWidget_GetExpeditionListSortName");
static_assert(offsetof(FortExpeditionListViewWidget_GetExpeditionListSortName, ReturnValue) == 0x000000, "Member 'FortExpeditionListViewWidget_GetExpeditionListSortName::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionOverviewWidget.HandleExpeditionTabButtonCreated
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      TabButton;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated) == 0x000008, "Wrong alignment on FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated");
static_assert(sizeof(FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated) == 0x000010, "Wrong size on FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated");
static_assert(offsetof(FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated, TabNameID) == 0x000000, "Member 'FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated::TabNameID' has a wrong offset!");
static_assert(offsetof(FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated, TabButton) == 0x000008, "Member 'FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated::TabButton' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionOverviewWidget.HandleExpeditionTabSelected
// 0x0004 (0x0004 - 0x0000)
struct FortExpeditionOverviewWidget_HandleExpeditionTabSelected final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionOverviewWidget_HandleExpeditionTabSelected) == 0x000004, "Wrong alignment on FortExpeditionOverviewWidget_HandleExpeditionTabSelected");
static_assert(sizeof(FortExpeditionOverviewWidget_HandleExpeditionTabSelected) == 0x000004, "Wrong size on FortExpeditionOverviewWidget_HandleExpeditionTabSelected");
static_assert(offsetof(FortExpeditionOverviewWidget_HandleExpeditionTabSelected, TabNameID) == 0x000000, "Member 'FortExpeditionOverviewWidget_HandleExpeditionTabSelected::TabNameID' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionOverviewWidget.OnExpeditionTabSelected
// 0x0004 (0x0004 - 0x0000)
struct FortExpeditionOverviewWidget_OnExpeditionTabSelected final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionOverviewWidget_OnExpeditionTabSelected) == 0x000004, "Wrong alignment on FortExpeditionOverviewWidget_OnExpeditionTabSelected");
static_assert(sizeof(FortExpeditionOverviewWidget_OnExpeditionTabSelected) == 0x000004, "Wrong size on FortExpeditionOverviewWidget_OnExpeditionTabSelected");
static_assert(offsetof(FortExpeditionOverviewWidget_OnExpeditionTabSelected, TabNameID) == 0x000000, "Member 'FortExpeditionOverviewWidget_OnExpeditionTabSelected::TabNameID' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionPickVehicleWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionPickVehicleWidget_SetData final
{
public:
	class UFortExpeditionItem*                    InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionPickVehicleWidget_SetData) == 0x000008, "Wrong alignment on FortExpeditionPickVehicleWidget_SetData");
static_assert(sizeof(FortExpeditionPickVehicleWidget_SetData) == 0x000008, "Wrong size on FortExpeditionPickVehicleWidget_SetData");
static_assert(offsetof(FortExpeditionPickVehicleWidget_SetData, InItem) == 0x000000, "Member 'FortExpeditionPickVehicleWidget_SetData::InItem' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionReturnsWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionReturnsWidget_SetData final
{
public:
	class UFortExpeditionItem*                    InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionReturnsWidget_SetData) == 0x000008, "Wrong alignment on FortExpeditionReturnsWidget_SetData");
static_assert(sizeof(FortExpeditionReturnsWidget_SetData) == 0x000008, "Wrong size on FortExpeditionReturnsWidget_SetData");
static_assert(offsetof(FortExpeditionReturnsWidget_SetData, InItem) == 0x000000, "Member 'FortExpeditionReturnsWidget_SetData::InItem' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionRewardsWidget.HandleCollectionExpeditionCompleted
// 0x0028 (0x0028 - 0x0000)
struct FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted final
{
public:
	bool                                          bMcpSuccess;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortExpeditionItem*              Expedition;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExpeditionSuccess;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemInstanceQuantityPair>  Rewards;                                           // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted) == 0x000008, "Wrong alignment on FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted");
static_assert(sizeof(FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted) == 0x000028, "Wrong size on FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted");
static_assert(offsetof(FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted, bMcpSuccess) == 0x000000, "Member 'FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted::bMcpSuccess' has a wrong offset!");
static_assert(offsetof(FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted, Expedition) == 0x000008, "Member 'FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted, bExpeditionSuccess) == 0x000010, "Member 'FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted::bExpeditionSuccess' has a wrong offset!");
static_assert(offsetof(FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted, Rewards) == 0x000018, "Member 'FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted::Rewards' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionRewardsWidget.RefreshRewardsUI
// 0x0020 (0x0020 - 0x0000)
struct FortExpeditionRewardsWidget_RefreshRewardsUI final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExpeditionSucceeded;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemInstanceQuantityPair>  Rewards;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionRewardsWidget_RefreshRewardsUI) == 0x000008, "Wrong alignment on FortExpeditionRewardsWidget_RefreshRewardsUI");
static_assert(sizeof(FortExpeditionRewardsWidget_RefreshRewardsUI) == 0x000020, "Wrong size on FortExpeditionRewardsWidget_RefreshRewardsUI");
static_assert(offsetof(FortExpeditionRewardsWidget_RefreshRewardsUI, Expedition) == 0x000000, "Member 'FortExpeditionRewardsWidget_RefreshRewardsUI::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionRewardsWidget_RefreshRewardsUI, bExpeditionSucceeded) == 0x000008, "Member 'FortExpeditionRewardsWidget_RefreshRewardsUI::bExpeditionSucceeded' has a wrong offset!");
static_assert(offsetof(FortExpeditionRewardsWidget_RefreshRewardsUI, Rewards) == 0x000010, "Member 'FortExpeditionRewardsWidget_RefreshRewardsUI::Rewards' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionUtilities.AreAnyExpeditionsComplete
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionUtilities_AreAnyExpeditionsComplete final
{
public:
	const class UWidget*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionUtilities_AreAnyExpeditionsComplete) == 0x000008, "Wrong alignment on FortExpeditionUtilities_AreAnyExpeditionsComplete");
static_assert(sizeof(FortExpeditionUtilities_AreAnyExpeditionsComplete) == 0x000010, "Wrong size on FortExpeditionUtilities_AreAnyExpeditionsComplete");
static_assert(offsetof(FortExpeditionUtilities_AreAnyExpeditionsComplete, Widget) == 0x000000, "Member 'FortExpeditionUtilities_AreAnyExpeditionsComplete::Widget' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_AreAnyExpeditionsComplete, ReturnValue) == 0x000008, "Member 'FortExpeditionUtilities_AreAnyExpeditionsComplete::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionUtilities.AreExpeditionsUnlocked
// 0x0040 (0x0040 - 0x0000)
struct FortExpeditionUtilities_AreExpeditionsUnlocked final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionUtilities_AreExpeditionsUnlocked) == 0x000008, "Wrong alignment on FortExpeditionUtilities_AreExpeditionsUnlocked");
static_assert(sizeof(FortExpeditionUtilities_AreExpeditionsUnlocked) == 0x000040, "Wrong size on FortExpeditionUtilities_AreExpeditionsUnlocked");
static_assert(offsetof(FortExpeditionUtilities_AreExpeditionsUnlocked, WorldContextObject) == 0x000000, "Member 'FortExpeditionUtilities_AreExpeditionsUnlocked::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_AreExpeditionsUnlocked, UniqueId) == 0x000008, "Member 'FortExpeditionUtilities_AreExpeditionsUnlocked::UniqueId' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_AreExpeditionsUnlocked, ReturnValue) == 0x000038, "Member 'FortExpeditionUtilities_AreExpeditionsUnlocked::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionUtilities.CalculateExpeditionPercentageChanceForSuccess
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPower;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess) == 0x000008, "Wrong alignment on FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess");
static_assert(sizeof(FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess) == 0x000010, "Wrong size on FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess");
static_assert(offsetof(FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess, Expedition) == 0x000000, "Member 'FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess, TotalPower) == 0x000008, "Member 'FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess::TotalPower' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess, ReturnValue) == 0x00000C, "Member 'FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionUtilities.CalculateGlobalAndItemRatingModValuesBP
// 0x0030 (0x0030 - 0x0000)
struct FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      SlottedItems;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         GlobalPowerMod;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 SlottedItemMods;                                   // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP) == 0x000008, "Wrong alignment on FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP");
static_assert(sizeof(FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP) == 0x000030, "Wrong size on FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP");
static_assert(offsetof(FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP, Expedition) == 0x000000, "Member 'FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP, SlottedItems) == 0x000008, "Member 'FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP::SlottedItems' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP, GlobalPowerMod) == 0x000018, "Member 'FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP::GlobalPowerMod' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP, SlottedItemMods) == 0x000020, "Member 'FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP::SlottedItemMods' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionUtilities.CalculateTotalPower
// 0x0030 (0x0030 - 0x0000)
struct FortExpeditionUtilities_CalculateTotalPower final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortExpeditionItem*              Expedition;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SquadId;                                           // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortItem*>                      SlottedItems;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionUtilities_CalculateTotalPower) == 0x000008, "Wrong alignment on FortExpeditionUtilities_CalculateTotalPower");
static_assert(sizeof(FortExpeditionUtilities_CalculateTotalPower) == 0x000030, "Wrong size on FortExpeditionUtilities_CalculateTotalPower");
static_assert(offsetof(FortExpeditionUtilities_CalculateTotalPower, FortPC) == 0x000000, "Member 'FortExpeditionUtilities_CalculateTotalPower::FortPC' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateTotalPower, Expedition) == 0x000008, "Member 'FortExpeditionUtilities_CalculateTotalPower::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateTotalPower, SquadId) == 0x000010, "Member 'FortExpeditionUtilities_CalculateTotalPower::SquadId' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateTotalPower, SlottedItems) == 0x000018, "Member 'FortExpeditionUtilities_CalculateTotalPower::SlottedItems' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateTotalPower, ReturnValue) == 0x000028, "Member 'FortExpeditionUtilities_CalculateTotalPower::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionUtilities.GetAllExpeditionSquadIds
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionUtilities_GetAllExpeditionSquadIds final
{
public:
	TArray<class FName>                           OutExpeditionSquadIds;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionUtilities_GetAllExpeditionSquadIds) == 0x000008, "Wrong alignment on FortExpeditionUtilities_GetAllExpeditionSquadIds");
static_assert(sizeof(FortExpeditionUtilities_GetAllExpeditionSquadIds) == 0x000010, "Wrong size on FortExpeditionUtilities_GetAllExpeditionSquadIds");
static_assert(offsetof(FortExpeditionUtilities_GetAllExpeditionSquadIds, OutExpeditionSquadIds) == 0x000000, "Member 'FortExpeditionUtilities_GetAllExpeditionSquadIds::OutExpeditionSquadIds' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionUtilities.GetExpeditionSquadPower
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionUtilities_GetExpeditionSquadPower final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SquadId;                                           // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionUtilities_GetExpeditionSquadPower) == 0x000008, "Wrong alignment on FortExpeditionUtilities_GetExpeditionSquadPower");
static_assert(sizeof(FortExpeditionUtilities_GetExpeditionSquadPower) == 0x000010, "Wrong size on FortExpeditionUtilities_GetExpeditionSquadPower");
static_assert(offsetof(FortExpeditionUtilities_GetExpeditionSquadPower, FortPC) == 0x000000, "Member 'FortExpeditionUtilities_GetExpeditionSquadPower::FortPC' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetExpeditionSquadPower, SquadId) == 0x000008, "Member 'FortExpeditionUtilities_GetExpeditionSquadPower::SquadId' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetExpeditionSquadPower, ReturnValue) == 0x00000C, "Member 'FortExpeditionUtilities_GetExpeditionSquadPower::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionUtilities.GetExpeditionSquadsThatMatchRequirements
// 0x0040 (0x0040 - 0x0000)
struct FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements final
{
public:
	struct FGameplayTagContainer                  RequirementTags;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  FortPC;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OutExpeditionSquadIds;                             // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements) == 0x000008, "Wrong alignment on FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements");
static_assert(sizeof(FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements) == 0x000040, "Wrong size on FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements");
static_assert(offsetof(FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements, RequirementTags) == 0x000000, "Member 'FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements::RequirementTags' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements, FortPC) == 0x000020, "Member 'FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements::FortPC' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements, OutExpeditionSquadIds) == 0x000028, "Member 'FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements::OutExpeditionSquadIds' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements, ReturnValue) == 0x000038, "Member 'FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionUtilities.GetMatchedCriteriaTags
// 0x0028 (0x0028 - 0x0000)
struct FortExpeditionUtilities_GetMatchedCriteriaTags final
{
public:
	class UFortExpeditionItem*                    Expedition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      SlottedItems;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   OutMatchedCriteria;                                // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionUtilities_GetMatchedCriteriaTags) == 0x000008, "Wrong alignment on FortExpeditionUtilities_GetMatchedCriteriaTags");
static_assert(sizeof(FortExpeditionUtilities_GetMatchedCriteriaTags) == 0x000028, "Wrong size on FortExpeditionUtilities_GetMatchedCriteriaTags");
static_assert(offsetof(FortExpeditionUtilities_GetMatchedCriteriaTags, Expedition) == 0x000000, "Member 'FortExpeditionUtilities_GetMatchedCriteriaTags::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetMatchedCriteriaTags, SlottedItems) == 0x000008, "Member 'FortExpeditionUtilities_GetMatchedCriteriaTags::SlottedItems' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetMatchedCriteriaTags, OutMatchedCriteria) == 0x000018, "Member 'FortExpeditionUtilities_GetMatchedCriteriaTags::OutMatchedCriteria' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionUtilities.GetTotalExpeditionVehiclesAvailable
// 0x0028 (0x0028 - 0x0000)
struct FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable final
{
public:
	const class UWidget*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  FortPC;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutLandVehicles;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutLandVehiclesAvailable;                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSeaVehicles;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSeaVehiclesAvailable;                           // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutAirVehicles;                                    // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutAirVehiclesAvailable;                           // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable) == 0x000008, "Wrong alignment on FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable");
static_assert(sizeof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable) == 0x000028, "Wrong size on FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, Widget) == 0x000000, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::Widget' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, FortPC) == 0x000008, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::FortPC' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, OutLandVehicles) == 0x000010, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::OutLandVehicles' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, OutLandVehiclesAvailable) == 0x000014, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::OutLandVehiclesAvailable' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, OutSeaVehicles) == 0x000018, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::OutSeaVehicles' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, OutSeaVehiclesAvailable) == 0x00001C, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::OutSeaVehiclesAvailable' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, OutAirVehicles) == 0x000020, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::OutAirVehicles' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, OutAirVehiclesAvailable) == 0x000024, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::OutAirVehiclesAvailable' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionUtilities.GetVehicleTagFromSquadId
// 0x000C (0x000C - 0x0000)
struct FortExpeditionUtilities_GetVehicleTagFromSquadId final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OutFoundVehicleTag;                                // 0x0004(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionUtilities_GetVehicleTagFromSquadId) == 0x000004, "Wrong alignment on FortExpeditionUtilities_GetVehicleTagFromSquadId");
static_assert(sizeof(FortExpeditionUtilities_GetVehicleTagFromSquadId) == 0x00000C, "Wrong size on FortExpeditionUtilities_GetVehicleTagFromSquadId");
static_assert(offsetof(FortExpeditionUtilities_GetVehicleTagFromSquadId, SquadId) == 0x000000, "Member 'FortExpeditionUtilities_GetVehicleTagFromSquadId::SquadId' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetVehicleTagFromSquadId, OutFoundVehicleTag) == 0x000004, "Member 'FortExpeditionUtilities_GetVehicleTagFromSquadId::OutFoundVehicleTag' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetVehicleTagFromSquadId, ReturnValue) == 0x000008, "Member 'FortExpeditionUtilities_GetVehicleTagFromSquadId::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionUtilities.GetVehicleTagRequiredForExpedition
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionUtilities_GetVehicleTagRequiredForExpedition final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionUtilities_GetVehicleTagRequiredForExpedition) == 0x000008, "Wrong alignment on FortExpeditionUtilities_GetVehicleTagRequiredForExpedition");
static_assert(sizeof(FortExpeditionUtilities_GetVehicleTagRequiredForExpedition) == 0x000010, "Wrong size on FortExpeditionUtilities_GetVehicleTagRequiredForExpedition");
static_assert(offsetof(FortExpeditionUtilities_GetVehicleTagRequiredForExpedition, Expedition) == 0x000000, "Member 'FortExpeditionUtilities_GetVehicleTagRequiredForExpedition::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetVehicleTagRequiredForExpedition, ReturnValue) == 0x000008, "Member 'FortExpeditionUtilities_GetVehicleTagRequiredForExpedition::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionUtilities.IsSquadOnExpedition
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionUtilities_IsSquadOnExpedition final
{
public:
	const class UWidget*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SquadId;                                           // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionUtilities_IsSquadOnExpedition) == 0x000008, "Wrong alignment on FortExpeditionUtilities_IsSquadOnExpedition");
static_assert(sizeof(FortExpeditionUtilities_IsSquadOnExpedition) == 0x000010, "Wrong size on FortExpeditionUtilities_IsSquadOnExpedition");
static_assert(offsetof(FortExpeditionUtilities_IsSquadOnExpedition, Widget) == 0x000000, "Member 'FortExpeditionUtilities_IsSquadOnExpedition::Widget' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_IsSquadOnExpedition, SquadId) == 0x000008, "Member 'FortExpeditionUtilities_IsSquadOnExpedition::SquadId' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_IsSquadOnExpedition, ReturnValue) == 0x00000C, "Member 'FortExpeditionUtilities_IsSquadOnExpedition::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortExpeditionUtilities.TotalUnseenExpeditionsForTab
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionUtilities_TotalUnseenExpeditionsForTab final
{
public:
	const class UWidget*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TabNameID;                                         // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionUtilities_TotalUnseenExpeditionsForTab) == 0x000008, "Wrong alignment on FortExpeditionUtilities_TotalUnseenExpeditionsForTab");
static_assert(sizeof(FortExpeditionUtilities_TotalUnseenExpeditionsForTab) == 0x000010, "Wrong size on FortExpeditionUtilities_TotalUnseenExpeditionsForTab");
static_assert(offsetof(FortExpeditionUtilities_TotalUnseenExpeditionsForTab, Widget) == 0x000000, "Member 'FortExpeditionUtilities_TotalUnseenExpeditionsForTab::Widget' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_TotalUnseenExpeditionsForTab, TabNameID) == 0x000008, "Member 'FortExpeditionUtilities_TotalUnseenExpeditionsForTab::TabNameID' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_TotalUnseenExpeditionsForTab, ReturnValue) == 0x00000C, "Member 'FortExpeditionUtilities_TotalUnseenExpeditionsForTab::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortFeatureUnlockWidget.SetData
// 0x0010 (0x0010 - 0x0000)
struct FortFeatureUnlockWidget_SetData final
{
public:
	class FString                                 ItemTemplateID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeatureUnlockWidget_SetData) == 0x000008, "Wrong alignment on FortFeatureUnlockWidget_SetData");
static_assert(sizeof(FortFeatureUnlockWidget_SetData) == 0x000010, "Wrong size on FortFeatureUnlockWidget_SetData");
static_assert(offsetof(FortFeatureUnlockWidget_SetData, ItemTemplateID) == 0x000000, "Member 'FortFeatureUnlockWidget_SetData::ItemTemplateID' has a wrong offset!");

// Function SaveTheWorldUI.FortFeatureUnlockWidget.GetDescription
// 0x0018 (0x0018 - 0x0000)
struct FortFeatureUnlockWidget_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeatureUnlockWidget_GetDescription) == 0x000008, "Wrong alignment on FortFeatureUnlockWidget_GetDescription");
static_assert(sizeof(FortFeatureUnlockWidget_GetDescription) == 0x000018, "Wrong size on FortFeatureUnlockWidget_GetDescription");
static_assert(offsetof(FortFeatureUnlockWidget_GetDescription, ReturnValue) == 0x000000, "Member 'FortFeatureUnlockWidget_GetDescription::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortFeatureUnlockWidget.GetLargeIcon
// 0x0028 (0x0028 - 0x0000)
struct FortFeatureUnlockWidget_GetLargeIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeatureUnlockWidget_GetLargeIcon) == 0x000008, "Wrong alignment on FortFeatureUnlockWidget_GetLargeIcon");
static_assert(sizeof(FortFeatureUnlockWidget_GetLargeIcon) == 0x000028, "Wrong size on FortFeatureUnlockWidget_GetLargeIcon");
static_assert(offsetof(FortFeatureUnlockWidget_GetLargeIcon, ReturnValue) == 0x000000, "Member 'FortFeatureUnlockWidget_GetLargeIcon::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortFeatureUnlockWidget.GetSmallIcon
// 0x0028 (0x0028 - 0x0000)
struct FortFeatureUnlockWidget_GetSmallIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeatureUnlockWidget_GetSmallIcon) == 0x000008, "Wrong alignment on FortFeatureUnlockWidget_GetSmallIcon");
static_assert(sizeof(FortFeatureUnlockWidget_GetSmallIcon) == 0x000028, "Wrong size on FortFeatureUnlockWidget_GetSmallIcon");
static_assert(offsetof(FortFeatureUnlockWidget_GetSmallIcon, ReturnValue) == 0x000000, "Member 'FortFeatureUnlockWidget_GetSmallIcon::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortFeatureUnlockWidget.GetTitle
// 0x0018 (0x0018 - 0x0000)
struct FortFeatureUnlockWidget_GetTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeatureUnlockWidget_GetTitle) == 0x000008, "Wrong alignment on FortFeatureUnlockWidget_GetTitle");
static_assert(sizeof(FortFeatureUnlockWidget_GetTitle) == 0x000018, "Wrong size on FortFeatureUnlockWidget_GetTitle");
static_assert(offsetof(FortFeatureUnlockWidget_GetTitle, ReturnValue) == 0x000000, "Member 'FortFeatureUnlockWidget_GetTitle::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortFeatureUnlockWidget.GetVideo
// 0x0008 (0x0008 - 0x0000)
struct FortFeatureUnlockWidget_GetVideo final
{
public:
	class UMediaSource*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeatureUnlockWidget_GetVideo) == 0x000008, "Wrong alignment on FortFeatureUnlockWidget_GetVideo");
static_assert(sizeof(FortFeatureUnlockWidget_GetVideo) == 0x000008, "Wrong size on FortFeatureUnlockWidget_GetVideo");
static_assert(offsetof(FortFeatureUnlockWidget_GetVideo, ReturnValue) == 0x000000, "Member 'FortFeatureUnlockWidget_GetVideo::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResultsWidgetSTW.GetRewardsByType
// 0x0018 (0x0018 - 0x0000)
struct FortResultsWidgetSTW_GetRewardsByType final
{
public:
	EFortRewardItemTypeSTW                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortItem*>                      OutRewards;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidgetSTW_GetRewardsByType) == 0x000008, "Wrong alignment on FortResultsWidgetSTW_GetRewardsByType");
static_assert(sizeof(FortResultsWidgetSTW_GetRewardsByType) == 0x000018, "Wrong size on FortResultsWidgetSTW_GetRewardsByType");
static_assert(offsetof(FortResultsWidgetSTW_GetRewardsByType, Type) == 0x000000, "Member 'FortResultsWidgetSTW_GetRewardsByType::Type' has a wrong offset!");
static_assert(offsetof(FortResultsWidgetSTW_GetRewardsByType, OutRewards) == 0x000008, "Member 'FortResultsWidgetSTW_GetRewardsByType::OutRewards' has a wrong offset!");

// Function SaveTheWorldUI.FortResultsWidgetSTW.GetTotalMissionPointsEarned
// 0x0004 (0x0004 - 0x0000)
struct FortResultsWidgetSTW_GetTotalMissionPointsEarned final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidgetSTW_GetTotalMissionPointsEarned) == 0x000004, "Wrong alignment on FortResultsWidgetSTW_GetTotalMissionPointsEarned");
static_assert(sizeof(FortResultsWidgetSTW_GetTotalMissionPointsEarned) == 0x000004, "Wrong size on FortResultsWidgetSTW_GetTotalMissionPointsEarned");
static_assert(offsetof(FortResultsWidgetSTW_GetTotalMissionPointsEarned, ReturnValue) == 0x000000, "Member 'FortResultsWidgetSTW_GetTotalMissionPointsEarned::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResultsWidgetSTW.HandleEmoteClicked
// 0x0001 (0x0001 - 0x0000)
struct FortResultsWidgetSTW_HandleEmoteClicked final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidgetSTW_HandleEmoteClicked) == 0x000001, "Wrong alignment on FortResultsWidgetSTW_HandleEmoteClicked");
static_assert(sizeof(FortResultsWidgetSTW_HandleEmoteClicked) == 0x000001, "Wrong size on FortResultsWidgetSTW_HandleEmoteClicked");
static_assert(offsetof(FortResultsWidgetSTW_HandleEmoteClicked, bPassThrough) == 0x000000, "Member 'FortResultsWidgetSTW_HandleEmoteClicked::bPassThrough' has a wrong offset!");

// Function SaveTheWorldUI.FortResultsWidgetSTW.HandlePickerCancel
// 0x0001 (0x0001 - 0x0000)
struct FortResultsWidgetSTW_HandlePickerCancel final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidgetSTW_HandlePickerCancel) == 0x000001, "Wrong alignment on FortResultsWidgetSTW_HandlePickerCancel");
static_assert(sizeof(FortResultsWidgetSTW_HandlePickerCancel) == 0x000001, "Wrong size on FortResultsWidgetSTW_HandlePickerCancel");
static_assert(offsetof(FortResultsWidgetSTW_HandlePickerCancel, bPassThrough) == 0x000000, "Member 'FortResultsWidgetSTW_HandlePickerCancel::bPassThrough' has a wrong offset!");

// Function SaveTheWorldUI.FortResultsWidgetSTW.SendEndOfRoundFriendInviteAnalytic
// 0x0040 (0x0040 - 0x0000)
struct FortResultsWidgetSTW_SendEndOfRoundFriendInviteAnalytic final
{
public:
	struct FUniqueNetIdRepl                       TargetId;                                          // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetPlayerName;                                  // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidgetSTW_SendEndOfRoundFriendInviteAnalytic) == 0x000008, "Wrong alignment on FortResultsWidgetSTW_SendEndOfRoundFriendInviteAnalytic");
static_assert(sizeof(FortResultsWidgetSTW_SendEndOfRoundFriendInviteAnalytic) == 0x000040, "Wrong size on FortResultsWidgetSTW_SendEndOfRoundFriendInviteAnalytic");
static_assert(offsetof(FortResultsWidgetSTW_SendEndOfRoundFriendInviteAnalytic, TargetId) == 0x000000, "Member 'FortResultsWidgetSTW_SendEndOfRoundFriendInviteAnalytic::TargetId' has a wrong offset!");
static_assert(offsetof(FortResultsWidgetSTW_SendEndOfRoundFriendInviteAnalytic, TargetPlayerName) == 0x000030, "Member 'FortResultsWidgetSTW_SendEndOfRoundFriendInviteAnalytic::TargetPlayerName' has a wrong offset!");

// Function SaveTheWorldUI.FortResultsWidgetSTW.SendEndOfRoundScreenAnalytic
// 0x0018 (0x0018 - 0x0000)
struct FortResultsWidgetSTW_SendEndOfRoundScreenAnalytic final
{
public:
	class FString                                 ScreenName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Skipped;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeSpent;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidgetSTW_SendEndOfRoundScreenAnalytic) == 0x000008, "Wrong alignment on FortResultsWidgetSTW_SendEndOfRoundScreenAnalytic");
static_assert(sizeof(FortResultsWidgetSTW_SendEndOfRoundScreenAnalytic) == 0x000018, "Wrong size on FortResultsWidgetSTW_SendEndOfRoundScreenAnalytic");
static_assert(offsetof(FortResultsWidgetSTW_SendEndOfRoundScreenAnalytic, ScreenName) == 0x000000, "Member 'FortResultsWidgetSTW_SendEndOfRoundScreenAnalytic::ScreenName' has a wrong offset!");
static_assert(offsetof(FortResultsWidgetSTW_SendEndOfRoundScreenAnalytic, Skipped) == 0x000010, "Member 'FortResultsWidgetSTW_SendEndOfRoundScreenAnalytic::Skipped' has a wrong offset!");
static_assert(offsetof(FortResultsWidgetSTW_SendEndOfRoundScreenAnalytic, TimeSpent) == 0x000014, "Member 'FortResultsWidgetSTW_SendEndOfRoundScreenAnalytic::TimeSpent' has a wrong offset!");

// Function SaveTheWorldUI.FortResultsWidgetSTW.SendEndOfRoundUpVoteAnalytic
// 0x0040 (0x0040 - 0x0000)
struct FortResultsWidgetSTW_SendEndOfRoundUpVoteAnalytic final
{
public:
	struct FUniqueNetIdRepl                       TargetId;                                          // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetPlayerName;                                  // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidgetSTW_SendEndOfRoundUpVoteAnalytic) == 0x000008, "Wrong alignment on FortResultsWidgetSTW_SendEndOfRoundUpVoteAnalytic");
static_assert(sizeof(FortResultsWidgetSTW_SendEndOfRoundUpVoteAnalytic) == 0x000040, "Wrong size on FortResultsWidgetSTW_SendEndOfRoundUpVoteAnalytic");
static_assert(offsetof(FortResultsWidgetSTW_SendEndOfRoundUpVoteAnalytic, TargetId) == 0x000000, "Member 'FortResultsWidgetSTW_SendEndOfRoundUpVoteAnalytic::TargetId' has a wrong offset!");
static_assert(offsetof(FortResultsWidgetSTW_SendEndOfRoundUpVoteAnalytic, TargetPlayerName) == 0x000030, "Member 'FortResultsWidgetSTW_SendEndOfRoundUpVoteAnalytic::TargetPlayerName' has a wrong offset!");

// Function SaveTheWorldUI.FortResultsWidgetSTW.ToggleChat
// 0x0001 (0x0001 - 0x0000)
struct FortResultsWidgetSTW_ToggleChat final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidgetSTW_ToggleChat) == 0x000001, "Wrong alignment on FortResultsWidgetSTW_ToggleChat");
static_assert(sizeof(FortResultsWidgetSTW_ToggleChat) == 0x000001, "Wrong size on FortResultsWidgetSTW_ToggleChat");
static_assert(offsetof(FortResultsWidgetSTW_ToggleChat, bShow) == 0x000000, "Member 'FortResultsWidgetSTW_ToggleChat::bShow' has a wrong offset!");

// Function SaveTheWorldUI.FortResultsWidgetSTW.GetZoneCompletionResult
// 0x0001 (0x0001 - 0x0000)
struct FortResultsWidgetSTW_GetZoneCompletionResult final
{
public:
	EFortCompletionResult                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidgetSTW_GetZoneCompletionResult) == 0x000001, "Wrong alignment on FortResultsWidgetSTW_GetZoneCompletionResult");
static_assert(sizeof(FortResultsWidgetSTW_GetZoneCompletionResult) == 0x000001, "Wrong size on FortResultsWidgetSTW_GetZoneCompletionResult");
static_assert(offsetof(FortResultsWidgetSTW_GetZoneCompletionResult, ReturnValue) == 0x000000, "Member 'FortResultsWidgetSTW_GetZoneCompletionResult::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResultsWidgetSTW.GetZoneCompletionResultText
// 0x0018 (0x0018 - 0x0000)
struct FortResultsWidgetSTW_GetZoneCompletionResultText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidgetSTW_GetZoneCompletionResultText) == 0x000008, "Wrong alignment on FortResultsWidgetSTW_GetZoneCompletionResultText");
static_assert(sizeof(FortResultsWidgetSTW_GetZoneCompletionResultText) == 0x000018, "Wrong size on FortResultsWidgetSTW_GetZoneCompletionResultText");
static_assert(offsetof(FortResultsWidgetSTW_GetZoneCompletionResultText, ReturnValue) == 0x000000, "Member 'FortResultsWidgetSTW_GetZoneCompletionResultText::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResultsWidgetSTW.IsDataFinalized
// 0x0001 (0x0001 - 0x0000)
struct FortResultsWidgetSTW_IsDataFinalized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidgetSTW_IsDataFinalized) == 0x000001, "Wrong alignment on FortResultsWidgetSTW_IsDataFinalized");
static_assert(sizeof(FortResultsWidgetSTW_IsDataFinalized) == 0x000001, "Wrong size on FortResultsWidgetSTW_IsDataFinalized");
static_assert(offsetof(FortResultsWidgetSTW_IsDataFinalized, ReturnValue) == 0x000000, "Member 'FortResultsWidgetSTW_IsDataFinalized::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemAutoMulchActivatablePanel_STW.SetItemManagementScreen
// 0x0008 (0x0008 - 0x0000)
struct FortItemAutoMulchActivatablePanel_STW_SetItemManagementScreen final
{
public:
	class UFortItemManagementScreen_STW*          InItemManagementScreen;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemAutoMulchActivatablePanel_STW_SetItemManagementScreen) == 0x000008, "Wrong alignment on FortItemAutoMulchActivatablePanel_STW_SetItemManagementScreen");
static_assert(sizeof(FortItemAutoMulchActivatablePanel_STW_SetItemManagementScreen) == 0x000008, "Wrong size on FortItemAutoMulchActivatablePanel_STW_SetItemManagementScreen");
static_assert(offsetof(FortItemAutoMulchActivatablePanel_STW_SetItemManagementScreen, InItemManagementScreen) == 0x000000, "Member 'FortItemAutoMulchActivatablePanel_STW_SetItemManagementScreen::InItemManagementScreen' has a wrong offset!");

// Function SaveTheWorldUI.FortItemAutoMulchActivatablePanel_STW.GetFrontendInventoryFilter
// 0x0001 (0x0001 - 0x0000)
struct FortItemAutoMulchActivatablePanel_STW_GetFrontendInventoryFilter final
{
public:
	EFortFrontendInventoryFilter                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemAutoMulchActivatablePanel_STW_GetFrontendInventoryFilter) == 0x000001, "Wrong alignment on FortItemAutoMulchActivatablePanel_STW_GetFrontendInventoryFilter");
static_assert(sizeof(FortItemAutoMulchActivatablePanel_STW_GetFrontendInventoryFilter) == 0x000001, "Wrong size on FortItemAutoMulchActivatablePanel_STW_GetFrontendInventoryFilter");
static_assert(offsetof(FortItemAutoMulchActivatablePanel_STW_GetFrontendInventoryFilter, ReturnValue) == 0x000000, "Member 'FortItemAutoMulchActivatablePanel_STW_GetFrontendInventoryFilter::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemAutoMulchActivatablePanel_STW.GetMulchCategoriesForInventoryFilter
// 0x0010 (0x0010 - 0x0000)
struct FortItemAutoMulchActivatablePanel_STW_GetMulchCategoriesForInventoryFilter final
{
public:
	TArray<EFortAutoMulchCategory>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemAutoMulchActivatablePanel_STW_GetMulchCategoriesForInventoryFilter) == 0x000008, "Wrong alignment on FortItemAutoMulchActivatablePanel_STW_GetMulchCategoriesForInventoryFilter");
static_assert(sizeof(FortItemAutoMulchActivatablePanel_STW_GetMulchCategoriesForInventoryFilter) == 0x000010, "Wrong size on FortItemAutoMulchActivatablePanel_STW_GetMulchCategoriesForInventoryFilter");
static_assert(offsetof(FortItemAutoMulchActivatablePanel_STW_GetMulchCategoriesForInventoryFilter, ReturnValue) == 0x000000, "Member 'FortItemAutoMulchActivatablePanel_STW_GetMulchCategoriesForInventoryFilter::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemCraftingOptionsActivatablePanel_STW.OnBaseItemChanged
// 0x0008 (0x0008 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_STW_OnBaseItemChanged final
{
public:
	class UFortSchematicItem*                     NewBaseItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_STW_OnBaseItemChanged) == 0x000008, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_STW_OnBaseItemChanged");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_STW_OnBaseItemChanged) == 0x000008, "Wrong size on FortItemCraftingOptionsActivatablePanel_STW_OnBaseItemChanged");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_STW_OnBaseItemChanged, NewBaseItem) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_STW_OnBaseItemChanged::NewBaseItem' has a wrong offset!");

// Function SaveTheWorldUI.FortItemCraftingOptionsActivatablePanel_STW.OnMaxQuantityChanged
// 0x0004 (0x0004 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_STW_OnMaxQuantityChanged final
{
public:
	int32                                         NewMaxQuantity;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_STW_OnMaxQuantityChanged) == 0x000004, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_STW_OnMaxQuantityChanged");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_STW_OnMaxQuantityChanged) == 0x000004, "Wrong size on FortItemCraftingOptionsActivatablePanel_STW_OnMaxQuantityChanged");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_STW_OnMaxQuantityChanged, NewMaxQuantity) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_STW_OnMaxQuantityChanged::NewMaxQuantity' has a wrong offset!");

// Function SaveTheWorldUI.FortItemCraftingOptionsActivatablePanel_STW.OnSelectedQuantityChanged
// 0x0004 (0x0004 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_STW_OnSelectedQuantityChanged final
{
public:
	int32                                         NewSelectedQuantity;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_STW_OnSelectedQuantityChanged) == 0x000004, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_STW_OnSelectedQuantityChanged");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_STW_OnSelectedQuantityChanged) == 0x000004, "Wrong size on FortItemCraftingOptionsActivatablePanel_STW_OnSelectedQuantityChanged");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_STW_OnSelectedQuantityChanged, NewSelectedQuantity) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_STW_OnSelectedQuantityChanged::NewSelectedQuantity' has a wrong offset!");

// Function SaveTheWorldUI.FortItemCraftingOptionsActivatablePanel_STW.OnTargetItemChanged
// 0x0008 (0x0008 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_STW_OnTargetItemChanged final
{
public:
	class UFortSchematicItem*                     NewTargetItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_STW_OnTargetItemChanged) == 0x000008, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_STW_OnTargetItemChanged");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_STW_OnTargetItemChanged) == 0x000008, "Wrong size on FortItemCraftingOptionsActivatablePanel_STW_OnTargetItemChanged");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_STW_OnTargetItemChanged, NewTargetItem) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_STW_OnTargetItemChanged::NewTargetItem' has a wrong offset!");

// Function SaveTheWorldUI.FortItemCraftingOptionsActivatablePanel_STW.SetBaseSchematicItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_STW_SetBaseSchematicItem final
{
public:
	class UFortSchematicItem*                     InBaseItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_STW_SetBaseSchematicItem) == 0x000008, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_STW_SetBaseSchematicItem");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_STW_SetBaseSchematicItem) == 0x000008, "Wrong size on FortItemCraftingOptionsActivatablePanel_STW_SetBaseSchematicItem");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_STW_SetBaseSchematicItem, InBaseItem) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_STW_SetBaseSchematicItem::InBaseItem' has a wrong offset!");

// Function SaveTheWorldUI.FortItemCraftingOptionsActivatablePanel_STW.SetItemManagementScreen
// 0x0008 (0x0008 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_STW_SetItemManagementScreen final
{
public:
	class UFortItemManagementScreen_STW*          InItemManagementScreen;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_STW_SetItemManagementScreen) == 0x000008, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_STW_SetItemManagementScreen");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_STW_SetItemManagementScreen) == 0x000008, "Wrong size on FortItemCraftingOptionsActivatablePanel_STW_SetItemManagementScreen");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_STW_SetItemManagementScreen, InItemManagementScreen) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_STW_SetItemManagementScreen::InItemManagementScreen' has a wrong offset!");

// Function SaveTheWorldUI.FortItemCraftingOptionsActivatablePanel_STW.SetSelectedQuantity_BP
// 0x0004 (0x0004 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_STW_SetSelectedQuantity_BP final
{
public:
	int32                                         NewQuantity;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_STW_SetSelectedQuantity_BP) == 0x000004, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_STW_SetSelectedQuantity_BP");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_STW_SetSelectedQuantity_BP) == 0x000004, "Wrong size on FortItemCraftingOptionsActivatablePanel_STW_SetSelectedQuantity_BP");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_STW_SetSelectedQuantity_BP, NewQuantity) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_STW_SetSelectedQuantity_BP::NewQuantity' has a wrong offset!");

// Function SaveTheWorldUI.FortItemCraftingOptionsActivatablePanel_STW.SetTargetCraftingTierIndex
// 0x0004 (0x0004 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_STW_SetTargetCraftingTierIndex final
{
public:
	int32                                         NewTierIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_STW_SetTargetCraftingTierIndex) == 0x000004, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_STW_SetTargetCraftingTierIndex");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_STW_SetTargetCraftingTierIndex) == 0x000004, "Wrong size on FortItemCraftingOptionsActivatablePanel_STW_SetTargetCraftingTierIndex");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_STW_SetTargetCraftingTierIndex, NewTierIndex) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_STW_SetTargetCraftingTierIndex::NewTierIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortItemDetailsModeActivatablePanel_STW.HandleOnActiveWidgetChanged
// 0x0010 (0x0010 - 0x0000)
struct FortItemDetailsModeActivatablePanel_STW_HandleOnActiveWidgetChanged final
{
public:
	class UWidget*                                ActiveWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveWidgetIndex;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemDetailsModeActivatablePanel_STW_HandleOnActiveWidgetChanged) == 0x000008, "Wrong alignment on FortItemDetailsModeActivatablePanel_STW_HandleOnActiveWidgetChanged");
static_assert(sizeof(FortItemDetailsModeActivatablePanel_STW_HandleOnActiveWidgetChanged) == 0x000010, "Wrong size on FortItemDetailsModeActivatablePanel_STW_HandleOnActiveWidgetChanged");
static_assert(offsetof(FortItemDetailsModeActivatablePanel_STW_HandleOnActiveWidgetChanged, ActiveWidget) == 0x000000, "Member 'FortItemDetailsModeActivatablePanel_STW_HandleOnActiveWidgetChanged::ActiveWidget' has a wrong offset!");
static_assert(offsetof(FortItemDetailsModeActivatablePanel_STW_HandleOnActiveWidgetChanged, ActiveWidgetIndex) == 0x000008, "Member 'FortItemDetailsModeActivatablePanel_STW_HandleOnActiveWidgetChanged::ActiveWidgetIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementCustomFilterModalWidget_STW.OnEndCommitCustomFilter
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementCustomFilterModalWidget_STW_OnEndCommitCustomFilter final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementCustomFilterModalWidget_STW_OnEndCommitCustomFilter) == 0x000001, "Wrong alignment on FortItemManagementCustomFilterModalWidget_STW_OnEndCommitCustomFilter");
static_assert(sizeof(FortItemManagementCustomFilterModalWidget_STW_OnEndCommitCustomFilter) == 0x000001, "Wrong size on FortItemManagementCustomFilterModalWidget_STW_OnEndCommitCustomFilter");
static_assert(offsetof(FortItemManagementCustomFilterModalWidget_STW_OnEndCommitCustomFilter, bWasSuccessful) == 0x000000, "Member 'FortItemManagementCustomFilterModalWidget_STW_OnEndCommitCustomFilter::bWasSuccessful' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementCustomFilterModalWidget_STW.ToggleFilter
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementCustomFilterModalWidget_STW_ToggleFilter final
{
public:
	EFortInventoryCustomFilter                    Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementCustomFilterModalWidget_STW_ToggleFilter) == 0x000001, "Wrong alignment on FortItemManagementCustomFilterModalWidget_STW_ToggleFilter");
static_assert(sizeof(FortItemManagementCustomFilterModalWidget_STW_ToggleFilter) == 0x000001, "Wrong size on FortItemManagementCustomFilterModalWidget_STW_ToggleFilter");
static_assert(offsetof(FortItemManagementCustomFilterModalWidget_STW_ToggleFilter, Filter) == 0x000000, "Member 'FortItemManagementCustomFilterModalWidget_STW_ToggleFilter::Filter' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementCustomFilterModalWidget_STW.IsCustomFilterEnabled
// 0x0002 (0x0002 - 0x0000)
struct FortItemManagementCustomFilterModalWidget_STW_IsCustomFilterEnabled final
{
public:
	EFortInventoryCustomFilter                    Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementCustomFilterModalWidget_STW_IsCustomFilterEnabled) == 0x000001, "Wrong alignment on FortItemManagementCustomFilterModalWidget_STW_IsCustomFilterEnabled");
static_assert(sizeof(FortItemManagementCustomFilterModalWidget_STW_IsCustomFilterEnabled) == 0x000002, "Wrong size on FortItemManagementCustomFilterModalWidget_STW_IsCustomFilterEnabled");
static_assert(offsetof(FortItemManagementCustomFilterModalWidget_STW_IsCustomFilterEnabled, Filter) == 0x000000, "Member 'FortItemManagementCustomFilterModalWidget_STW_IsCustomFilterEnabled::Filter' has a wrong offset!");
static_assert(offsetof(FortItemManagementCustomFilterModalWidget_STW_IsCustomFilterEnabled, ReturnValue) == 0x000001, "Member 'FortItemManagementCustomFilterModalWidget_STW_IsCustomFilterEnabled::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.AddItemStackToMulch
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementInventoryPanel_STW_AddItemStackToMulch final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_AddItemStackToMulch) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_STW_AddItemStackToMulch");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_AddItemStackToMulch) == 0x000010, "Wrong size on FortItemManagementInventoryPanel_STW_AddItemStackToMulch");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_AddItemStackToMulch, Item) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_AddItemStackToMulch::Item' has a wrong offset!");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_AddItemStackToMulch, Count) == 0x000008, "Member 'FortItemManagementInventoryPanel_STW_AddItemStackToMulch::Count' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.GetShouldPrioritizeFavorites
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementInventoryPanel_STW_GetShouldPrioritizeFavorites final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_GetShouldPrioritizeFavorites) == 0x000001, "Wrong alignment on FortItemManagementInventoryPanel_STW_GetShouldPrioritizeFavorites");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_GetShouldPrioritizeFavorites) == 0x000001, "Wrong size on FortItemManagementInventoryPanel_STW_GetShouldPrioritizeFavorites");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_GetShouldPrioritizeFavorites, ReturnValue) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_GetShouldPrioritizeFavorites::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.HandleCursorModeChanged
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementInventoryPanel_STW_HandleCursorModeChanged final
{
public:
	bool                                          bCursorModeEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            CursorModeContentWidget;                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_HandleCursorModeChanged) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_STW_HandleCursorModeChanged");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_HandleCursorModeChanged) == 0x000010, "Wrong size on FortItemManagementInventoryPanel_STW_HandleCursorModeChanged");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_HandleCursorModeChanged, bCursorModeEnabled) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_HandleCursorModeChanged::bCursorModeEnabled' has a wrong offset!");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_HandleCursorModeChanged, ActionName) == 0x000004, "Member 'FortItemManagementInventoryPanel_STW_HandleCursorModeChanged::ActionName' has a wrong offset!");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_HandleCursorModeChanged, CursorModeContentWidget) == 0x000008, "Member 'FortItemManagementInventoryPanel_STW_HandleCursorModeChanged::CursorModeContentWidget' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.HandleCursorModeChangedBP
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementInventoryPanel_STW_HandleCursorModeChangedBP final
{
public:
	bool                                          bCursorModeEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            CursorModeContentWidget;                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_HandleCursorModeChangedBP) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_STW_HandleCursorModeChangedBP");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_HandleCursorModeChangedBP) == 0x000010, "Wrong size on FortItemManagementInventoryPanel_STW_HandleCursorModeChangedBP");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_HandleCursorModeChangedBP, bCursorModeEnabled) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_HandleCursorModeChangedBP::bCursorModeEnabled' has a wrong offset!");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_HandleCursorModeChangedBP, ActionName) == 0x000004, "Member 'FortItemManagementInventoryPanel_STW_HandleCursorModeChangedBP::ActionName' has a wrong offset!");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_HandleCursorModeChangedBP, CursorModeContentWidget) == 0x000008, "Member 'FortItemManagementInventoryPanel_STW_HandleCursorModeChangedBP::CursorModeContentWidget' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.HandleFilterTabButtonCreated
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementInventoryPanel_STW_HandleFilterTabButtonCreated final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      TabButton;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_HandleFilterTabButtonCreated) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_STW_HandleFilterTabButtonCreated");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_HandleFilterTabButtonCreated) == 0x000010, "Wrong size on FortItemManagementInventoryPanel_STW_HandleFilterTabButtonCreated");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_HandleFilterTabButtonCreated, TabNameID) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_HandleFilterTabButtonCreated::TabNameID' has a wrong offset!");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_HandleFilterTabButtonCreated, TabButton) == 0x000008, "Member 'FortItemManagementInventoryPanel_STW_HandleFilterTabButtonCreated::TabButton' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.HandleFilterTabSelected
// 0x0004 (0x0004 - 0x0000)
struct FortItemManagementInventoryPanel_STW_HandleFilterTabSelected final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_HandleFilterTabSelected) == 0x000004, "Wrong alignment on FortItemManagementInventoryPanel_STW_HandleFilterTabSelected");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_HandleFilterTabSelected) == 0x000004, "Wrong size on FortItemManagementInventoryPanel_STW_HandleFilterTabSelected");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_HandleFilterTabSelected, TabNameID) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_HandleFilterTabSelected::TabNameID' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.HandleItemBeginDrag
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementInventoryPanel_STW_HandleItemBeginDrag final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_HandleItemBeginDrag) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_STW_HandleItemBeginDrag");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_HandleItemBeginDrag) == 0x000008, "Wrong size on FortItemManagementInventoryPanel_STW_HandleItemBeginDrag");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_HandleItemBeginDrag, Item) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_HandleItemBeginDrag::Item' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.HandleQuickBarChangedBP
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementInventoryPanel_STW_HandleQuickBarChangedBP final
{
public:
	EFortQuickBars                                QuickBarType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_HandleQuickBarChangedBP) == 0x000001, "Wrong alignment on FortItemManagementInventoryPanel_STW_HandleQuickBarChangedBP");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_HandleQuickBarChangedBP) == 0x000001, "Wrong size on FortItemManagementInventoryPanel_STW_HandleQuickBarChangedBP");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_HandleQuickBarChangedBP, QuickBarType) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_HandleQuickBarChangedBP::QuickBarType' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.OnMulchRestrictionTextShown
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementInventoryPanel_STW_OnMulchRestrictionTextShown final
{
public:
	bool                                          bShown;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_OnMulchRestrictionTextShown) == 0x000001, "Wrong alignment on FortItemManagementInventoryPanel_STW_OnMulchRestrictionTextShown");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_OnMulchRestrictionTextShown) == 0x000001, "Wrong size on FortItemManagementInventoryPanel_STW_OnMulchRestrictionTextShown");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_OnMulchRestrictionTextShown, bShown) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_OnMulchRestrictionTextShown::bShown' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.SetFilter
// 0x0004 (0x0004 - 0x0000)
struct FortItemManagementInventoryPanel_STW_SetFilter final
{
public:
	class FName                                   FilterName;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_SetFilter) == 0x000004, "Wrong alignment on FortItemManagementInventoryPanel_STW_SetFilter");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_SetFilter) == 0x000004, "Wrong size on FortItemManagementInventoryPanel_STW_SetFilter");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_SetFilter, FilterName) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_SetFilter::FilterName' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.SetSortType
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementInventoryPanel_STW_SetSortType final
{
public:
	EInventoryContentSortType                     SortType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_SetSortType) == 0x000001, "Wrong alignment on FortItemManagementInventoryPanel_STW_SetSortType");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_SetSortType) == 0x000001, "Wrong size on FortItemManagementInventoryPanel_STW_SetSortType");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_SetSortType, SortType) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_SetSortType::SortType' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.CanDragItems
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementInventoryPanel_STW_CanDragItems final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_CanDragItems) == 0x000001, "Wrong alignment on FortItemManagementInventoryPanel_STW_CanDragItems");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_CanDragItems) == 0x000001, "Wrong size on FortItemManagementInventoryPanel_STW_CanDragItems");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_CanDragItems, ReturnValue) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_CanDragItems::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.GetQualifiedFilterDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortItemManagementInventoryPanel_STW_GetQualifiedFilterDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_GetQualifiedFilterDisplayName) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_STW_GetQualifiedFilterDisplayName");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_GetQualifiedFilterDisplayName) == 0x000018, "Wrong size on FortItemManagementInventoryPanel_STW_GetQualifiedFilterDisplayName");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_GetQualifiedFilterDisplayName, ReturnValue) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_GetQualifiedFilterDisplayName::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.GetSupportedSortTypesForCurrentInventory
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementInventoryPanel_STW_GetSupportedSortTypesForCurrentInventory final
{
public:
	TArray<EInventoryContentSortType>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_GetSupportedSortTypesForCurrentInventory) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_STW_GetSupportedSortTypesForCurrentInventory");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_GetSupportedSortTypesForCurrentInventory) == 0x000010, "Wrong size on FortItemManagementInventoryPanel_STW_GetSupportedSortTypesForCurrentInventory");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_GetSupportedSortTypesForCurrentInventory, ReturnValue) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_GetSupportedSortTypesForCurrentInventory::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.GetUpgradeItemDefinitionsForCurrentInventory
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementInventoryPanel_STW_GetUpgradeItemDefinitionsForCurrentInventory final
{
public:
	TArray<class UFortItemDefinition*>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_GetUpgradeItemDefinitionsForCurrentInventory) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_STW_GetUpgradeItemDefinitionsForCurrentInventory");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_GetUpgradeItemDefinitionsForCurrentInventory) == 0x000010, "Wrong size on FortItemManagementInventoryPanel_STW_GetUpgradeItemDefinitionsForCurrentInventory");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_GetUpgradeItemDefinitionsForCurrentInventory, ReturnValue) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_GetUpgradeItemDefinitionsForCurrentInventory::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.HasUnlockedStorageSlots
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementInventoryPanel_STW_HasUnlockedStorageSlots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_HasUnlockedStorageSlots) == 0x000001, "Wrong alignment on FortItemManagementInventoryPanel_STW_HasUnlockedStorageSlots");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_HasUnlockedStorageSlots) == 0x000001, "Wrong size on FortItemManagementInventoryPanel_STW_HasUnlockedStorageSlots");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_HasUnlockedStorageSlots, ReturnValue) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_HasUnlockedStorageSlots::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.IsSelectedItem
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementInventoryPanel_STW_IsSelectedItem final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_IsSelectedItem) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_STW_IsSelectedItem");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_IsSelectedItem) == 0x000010, "Wrong size on FortItemManagementInventoryPanel_STW_IsSelectedItem");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_IsSelectedItem, Item) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_IsSelectedItem::Item' has a wrong offset!");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_IsSelectedItem, ReturnValue) == 0x000008, "Member 'FortItemManagementInventoryPanel_STW_IsSelectedItem::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementInventoryPanel_STW.IsSwitchPanelAvailable
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementInventoryPanel_STW_IsSwitchPanelAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_STW_IsSwitchPanelAvailable) == 0x000001, "Wrong alignment on FortItemManagementInventoryPanel_STW_IsSwitchPanelAvailable");
static_assert(sizeof(FortItemManagementInventoryPanel_STW_IsSwitchPanelAvailable) == 0x000001, "Wrong size on FortItemManagementInventoryPanel_STW_IsSwitchPanelAvailable");
static_assert(offsetof(FortItemManagementInventoryPanel_STW_IsSwitchPanelAvailable, ReturnValue) == 0x000000, "Member 'FortItemManagementInventoryPanel_STW_IsSwitchPanelAvailable::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementItemTileButton_STW.GetPopupMenu
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementItemTileButton_STW_GetPopupMenu final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementItemTileButton_STW_GetPopupMenu) == 0x000008, "Wrong alignment on FortItemManagementItemTileButton_STW_GetPopupMenu");
static_assert(sizeof(FortItemManagementItemTileButton_STW_GetPopupMenu) == 0x000008, "Wrong size on FortItemManagementItemTileButton_STW_GetPopupMenu");
static_assert(offsetof(FortItemManagementItemTileButton_STW_GetPopupMenu, ReturnValue) == 0x000000, "Member 'FortItemManagementItemTileButton_STW_GetPopupMenu::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementItemTileButton_STW.HandleEquipSlotChanged
// 0x0004 (0x0004 - 0x0000)
struct FortItemManagementItemTileButton_STW_HandleEquipSlotChanged final
{
public:
	int32                                         EquipSlot;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementItemTileButton_STW_HandleEquipSlotChanged) == 0x000004, "Wrong alignment on FortItemManagementItemTileButton_STW_HandleEquipSlotChanged");
static_assert(sizeof(FortItemManagementItemTileButton_STW_HandleEquipSlotChanged) == 0x000004, "Wrong size on FortItemManagementItemTileButton_STW_HandleEquipSlotChanged");
static_assert(offsetof(FortItemManagementItemTileButton_STW_HandleEquipSlotChanged, EquipSlot) == 0x000000, "Member 'FortItemManagementItemTileButton_STW_HandleEquipSlotChanged::EquipSlot' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementItemTileButton_STW.OnSlotItemComplete
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementItemTileButton_STW_OnSlotItemComplete final
{
public:
	const class UFortAccountItem*                 SlottedItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemManagementItemTileButton_STW_OnSlotItemComplete) == 0x000008, "Wrong alignment on FortItemManagementItemTileButton_STW_OnSlotItemComplete");
static_assert(sizeof(FortItemManagementItemTileButton_STW_OnSlotItemComplete) == 0x000010, "Wrong size on FortItemManagementItemTileButton_STW_OnSlotItemComplete");
static_assert(offsetof(FortItemManagementItemTileButton_STW_OnSlotItemComplete, SlottedItem) == 0x000000, "Member 'FortItemManagementItemTileButton_STW_OnSlotItemComplete::SlottedItem' has a wrong offset!");
static_assert(offsetof(FortItemManagementItemTileButton_STW_OnSlotItemComplete, SlotId) == 0x000008, "Member 'FortItemManagementItemTileButton_STW_OnSlotItemComplete::SlotId' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementItemTileButton_STW.UpdateEquipSlotOverlay
// 0x0004 (0x0004 - 0x0000)
struct FortItemManagementItemTileButton_STW_UpdateEquipSlotOverlay final
{
public:
	int32                                         CurrentSlotIndex;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementItemTileButton_STW_UpdateEquipSlotOverlay) == 0x000004, "Wrong alignment on FortItemManagementItemTileButton_STW_UpdateEquipSlotOverlay");
static_assert(sizeof(FortItemManagementItemTileButton_STW_UpdateEquipSlotOverlay) == 0x000004, "Wrong size on FortItemManagementItemTileButton_STW_UpdateEquipSlotOverlay");
static_assert(offsetof(FortItemManagementItemTileButton_STW_UpdateEquipSlotOverlay, CurrentSlotIndex) == 0x000000, "Member 'FortItemManagementItemTileButton_STW_UpdateEquipSlotOverlay::CurrentSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementItemTileButton_STW.GetHomebaseSquadSlotForItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementItemTileButton_STW_GetHomebaseSquadSlotForItem final
{
public:
	struct FHomebaseSquadSlotId                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementItemTileButton_STW_GetHomebaseSquadSlotForItem) == 0x000004, "Wrong alignment on FortItemManagementItemTileButton_STW_GetHomebaseSquadSlotForItem");
static_assert(sizeof(FortItemManagementItemTileButton_STW_GetHomebaseSquadSlotForItem) == 0x000008, "Wrong size on FortItemManagementItemTileButton_STW_GetHomebaseSquadSlotForItem");
static_assert(offsetof(FortItemManagementItemTileButton_STW_GetHomebaseSquadSlotForItem, ReturnValue) == 0x000000, "Member 'FortItemManagementItemTileButton_STW_GetHomebaseSquadSlotForItem::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementItemTileButton_STW.GetItemManagementMode
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementItemTileButton_STW_GetItemManagementMode final
{
public:
	EFortItemManagementMode                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementItemTileButton_STW_GetItemManagementMode) == 0x000001, "Wrong alignment on FortItemManagementItemTileButton_STW_GetItemManagementMode");
static_assert(sizeof(FortItemManagementItemTileButton_STW_GetItemManagementMode) == 0x000001, "Wrong size on FortItemManagementItemTileButton_STW_GetItemManagementMode");
static_assert(offsetof(FortItemManagementItemTileButton_STW_GetItemManagementMode, ReturnValue) == 0x000000, "Member 'FortItemManagementItemTileButton_STW_GetItemManagementMode::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementItemTileButton_STW.IsValidEquipSlotOverlayIndex
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementItemTileButton_STW_IsValidEquipSlotOverlayIndex final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemManagementItemTileButton_STW_IsValidEquipSlotOverlayIndex) == 0x000004, "Wrong alignment on FortItemManagementItemTileButton_STW_IsValidEquipSlotOverlayIndex");
static_assert(sizeof(FortItemManagementItemTileButton_STW_IsValidEquipSlotOverlayIndex) == 0x000008, "Wrong size on FortItemManagementItemTileButton_STW_IsValidEquipSlotOverlayIndex");
static_assert(offsetof(FortItemManagementItemTileButton_STW_IsValidEquipSlotOverlayIndex, SlotIndex) == 0x000000, "Member 'FortItemManagementItemTileButton_STW_IsValidEquipSlotOverlayIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(FortItemManagementItemTileButton_STW_IsValidEquipSlotOverlayIndex, ReturnValue) == 0x000004, "Member 'FortItemManagementItemTileButton_STW_IsValidEquipSlotOverlayIndex::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementItemDetailsPanel_STW.GetAmmoTypeItemDefinitions
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementItemDetailsPanel_STW_GetAmmoTypeItemDefinitions final
{
public:
	TArray<class UFortAmmoItemDefinition*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementItemDetailsPanel_STW_GetAmmoTypeItemDefinitions) == 0x000008, "Wrong alignment on FortItemManagementItemDetailsPanel_STW_GetAmmoTypeItemDefinitions");
static_assert(sizeof(FortItemManagementItemDetailsPanel_STW_GetAmmoTypeItemDefinitions) == 0x000010, "Wrong size on FortItemManagementItemDetailsPanel_STW_GetAmmoTypeItemDefinitions");
static_assert(offsetof(FortItemManagementItemDetailsPanel_STW_GetAmmoTypeItemDefinitions, ReturnValue) == 0x000000, "Member 'FortItemManagementItemDetailsPanel_STW_GetAmmoTypeItemDefinitions::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementMulchDetailsPanel_STW.GetItemCountsToMulch
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementMulchDetailsPanel_STW_GetItemCountsToMulch final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementMulchDetailsPanel_STW_GetItemCountsToMulch) == 0x000008, "Wrong alignment on FortItemManagementMulchDetailsPanel_STW_GetItemCountsToMulch");
static_assert(sizeof(FortItemManagementMulchDetailsPanel_STW_GetItemCountsToMulch) == 0x000010, "Wrong size on FortItemManagementMulchDetailsPanel_STW_GetItemCountsToMulch");
static_assert(offsetof(FortItemManagementMulchDetailsPanel_STW_GetItemCountsToMulch, ReturnValue) == 0x000000, "Member 'FortItemManagementMulchDetailsPanel_STW_GetItemCountsToMulch::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementMulchDetailsPanel_STW.GetItemsToMulch
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementMulchDetailsPanel_STW_GetItemsToMulch final
{
public:
	TArray<class UFortItem*>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementMulchDetailsPanel_STW_GetItemsToMulch) == 0x000008, "Wrong alignment on FortItemManagementMulchDetailsPanel_STW_GetItemsToMulch");
static_assert(sizeof(FortItemManagementMulchDetailsPanel_STW_GetItemsToMulch) == 0x000010, "Wrong size on FortItemManagementMulchDetailsPanel_STW_GetItemsToMulch");
static_assert(offsetof(FortItemManagementMulchDetailsPanel_STW_GetItemsToMulch, ReturnValue) == 0x000000, "Member 'FortItemManagementMulchDetailsPanel_STW_GetItemsToMulch::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementMulchDetailsPanel_STW.IsSpaceAvailableForMulch
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementMulchDetailsPanel_STW_IsSpaceAvailableForMulch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementMulchDetailsPanel_STW_IsSpaceAvailableForMulch) == 0x000001, "Wrong alignment on FortItemManagementMulchDetailsPanel_STW_IsSpaceAvailableForMulch");
static_assert(sizeof(FortItemManagementMulchDetailsPanel_STW_IsSpaceAvailableForMulch) == 0x000001, "Wrong size on FortItemManagementMulchDetailsPanel_STW_IsSpaceAvailableForMulch");
static_assert(offsetof(FortItemManagementMulchDetailsPanel_STW_IsSpaceAvailableForMulch, ReturnValue) == 0x000000, "Member 'FortItemManagementMulchDetailsPanel_STW_IsSpaceAvailableForMulch::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementModeDetailsPanel_STW.GetItemManagementMode
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementModeDetailsPanel_STW_GetItemManagementMode final
{
public:
	EFortItemManagementMode                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementModeDetailsPanel_STW_GetItemManagementMode) == 0x000001, "Wrong alignment on FortItemManagementModeDetailsPanel_STW_GetItemManagementMode");
static_assert(sizeof(FortItemManagementModeDetailsPanel_STW_GetItemManagementMode) == 0x000001, "Wrong size on FortItemManagementModeDetailsPanel_STW_GetItemManagementMode");
static_assert(offsetof(FortItemManagementModeDetailsPanel_STW_GetItemManagementMode, ReturnValue) == 0x000000, "Member 'FortItemManagementModeDetailsPanel_STW_GetItemManagementMode::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.CanRequestPopupMenuForSelectedItem
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_STW_CanRequestPopupMenuForSelectedItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_CanRequestPopupMenuForSelectedItem) == 0x000001, "Wrong alignment on FortItemManagementScreen_STW_CanRequestPopupMenuForSelectedItem");
static_assert(sizeof(FortItemManagementScreen_STW_CanRequestPopupMenuForSelectedItem) == 0x000001, "Wrong size on FortItemManagementScreen_STW_CanRequestPopupMenuForSelectedItem");
static_assert(offsetof(FortItemManagementScreen_STW_CanRequestPopupMenuForSelectedItem, ReturnValue) == 0x000000, "Member 'FortItemManagementScreen_STW_CanRequestPopupMenuForSelectedItem::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.ConsumeItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_ConsumeItem final
{
public:
	class UFortConsumableAccountItem*             ConsumableItem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_ConsumeItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_ConsumeItem");
static_assert(sizeof(FortItemManagementScreen_STW_ConsumeItem) == 0x000008, "Wrong size on FortItemManagementScreen_STW_ConsumeItem");
static_assert(offsetof(FortItemManagementScreen_STW_ConsumeItem, ConsumableItem) == 0x000000, "Member 'FortItemManagementScreen_STW_ConsumeItem::ConsumableItem' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.CraftAndSlotItem
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementScreen_STW_CraftAndSlotItem final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 RequestedTier;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraftCount;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_CraftAndSlotItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_CraftAndSlotItem");
static_assert(sizeof(FortItemManagementScreen_STW_CraftAndSlotItem) == 0x000010, "Wrong size on FortItemManagementScreen_STW_CraftAndSlotItem");
static_assert(offsetof(FortItemManagementScreen_STW_CraftAndSlotItem, SchematicItem) == 0x000000, "Member 'FortItemManagementScreen_STW_CraftAndSlotItem::SchematicItem' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_STW_CraftAndSlotItem, RequestedTier) == 0x000008, "Member 'FortItemManagementScreen_STW_CraftAndSlotItem::RequestedTier' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_STW_CraftAndSlotItem, CraftCount) == 0x00000C, "Member 'FortItemManagementScreen_STW_CraftAndSlotItem::CraftCount' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.CraftItem
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementScreen_STW_CraftItem final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 RequestedTier;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraftCount;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_CraftItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_CraftItem");
static_assert(sizeof(FortItemManagementScreen_STW_CraftItem) == 0x000010, "Wrong size on FortItemManagementScreen_STW_CraftItem");
static_assert(offsetof(FortItemManagementScreen_STW_CraftItem, SchematicItem) == 0x000000, "Member 'FortItemManagementScreen_STW_CraftItem::SchematicItem' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_STW_CraftItem, RequestedTier) == 0x000008, "Member 'FortItemManagementScreen_STW_CraftItem::RequestedTier' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_STW_CraftItem, CraftCount) == 0x00000C, "Member 'FortItemManagementScreen_STW_CraftItem::CraftCount' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.DropItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_DropItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_DropItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_DropItem");
static_assert(sizeof(FortItemManagementScreen_STW_DropItem) == 0x000008, "Wrong size on FortItemManagementScreen_STW_DropItem");
static_assert(offsetof(FortItemManagementScreen_STW_DropItem, Item) == 0x000000, "Member 'FortItemManagementScreen_STW_DropItem::Item' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.EnterComparisonMode
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_EnterComparisonMode final
{
public:
	class UFortItem*                              ItemToCompareDetailsWith;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_EnterComparisonMode) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_EnterComparisonMode");
static_assert(sizeof(FortItemManagementScreen_STW_EnterComparisonMode) == 0x000008, "Wrong size on FortItemManagementScreen_STW_EnterComparisonMode");
static_assert(offsetof(FortItemManagementScreen_STW_EnterComparisonMode, ItemToCompareDetailsWith) == 0x000000, "Member 'FortItemManagementScreen_STW_EnterComparisonMode::ItemToCompareDetailsWith' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.EnterDetailsMode
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_EnterDetailsMode final
{
public:
	class UFortItem*                              ItemToDetail_0;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_EnterDetailsMode) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_EnterDetailsMode");
static_assert(sizeof(FortItemManagementScreen_STW_EnterDetailsMode) == 0x000008, "Wrong size on FortItemManagementScreen_STW_EnterDetailsMode");
static_assert(offsetof(FortItemManagementScreen_STW_EnterDetailsMode, ItemToDetail_0) == 0x000000, "Member 'FortItemManagementScreen_STW_EnterDetailsMode::ItemToDetail_0' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.EnterMulchMode
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_EnterMulchMode final
{
public:
	class UFortItem*                              ItemToMulch;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_EnterMulchMode) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_EnterMulchMode");
static_assert(sizeof(FortItemManagementScreen_STW_EnterMulchMode) == 0x000008, "Wrong size on FortItemManagementScreen_STW_EnterMulchMode");
static_assert(offsetof(FortItemManagementScreen_STW_EnterMulchMode, ItemToMulch) == 0x000000, "Member 'FortItemManagementScreen_STW_EnterMulchMode::ItemToMulch' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.EquipItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_EquipItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_EquipItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_EquipItem");
static_assert(sizeof(FortItemManagementScreen_STW_EquipItem) == 0x000008, "Wrong size on FortItemManagementScreen_STW_EquipItem");
static_assert(offsetof(FortItemManagementScreen_STW_EquipItem, Item) == 0x000000, "Member 'FortItemManagementScreen_STW_EquipItem::Item' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.GuardActionForReadOnlyWIFE
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_STW_GuardActionForReadOnlyWIFE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_GuardActionForReadOnlyWIFE) == 0x000001, "Wrong alignment on FortItemManagementScreen_STW_GuardActionForReadOnlyWIFE");
static_assert(sizeof(FortItemManagementScreen_STW_GuardActionForReadOnlyWIFE) == 0x000001, "Wrong size on FortItemManagementScreen_STW_GuardActionForReadOnlyWIFE");
static_assert(offsetof(FortItemManagementScreen_STW_GuardActionForReadOnlyWIFE, ReturnValue) == 0x000000, "Member 'FortItemManagementScreen_STW_GuardActionForReadOnlyWIFE::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.HandleConsumeItemBP
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_HandleConsumeItemBP final
{
public:
	class UFortConsumableAccountItem*             ConsumableItem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_HandleConsumeItemBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_HandleConsumeItemBP");
static_assert(sizeof(FortItemManagementScreen_STW_HandleConsumeItemBP) == 0x000008, "Wrong size on FortItemManagementScreen_STW_HandleConsumeItemBP");
static_assert(offsetof(FortItemManagementScreen_STW_HandleConsumeItemBP, ConsumableItem) == 0x000000, "Member 'FortItemManagementScreen_STW_HandleConsumeItemBP::ConsumableItem' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.HandleCraftAndSlotItemBP
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementScreen_STW_HandleCraftAndSlotItemBP final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 RequestedTier;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraftCount;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_HandleCraftAndSlotItemBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_HandleCraftAndSlotItemBP");
static_assert(sizeof(FortItemManagementScreen_STW_HandleCraftAndSlotItemBP) == 0x000010, "Wrong size on FortItemManagementScreen_STW_HandleCraftAndSlotItemBP");
static_assert(offsetof(FortItemManagementScreen_STW_HandleCraftAndSlotItemBP, SchematicItem) == 0x000000, "Member 'FortItemManagementScreen_STW_HandleCraftAndSlotItemBP::SchematicItem' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_STW_HandleCraftAndSlotItemBP, RequestedTier) == 0x000008, "Member 'FortItemManagementScreen_STW_HandleCraftAndSlotItemBP::RequestedTier' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_STW_HandleCraftAndSlotItemBP, CraftCount) == 0x00000C, "Member 'FortItemManagementScreen_STW_HandleCraftAndSlotItemBP::CraftCount' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.HandleCraftItemBP
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementScreen_STW_HandleCraftItemBP final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 RequestedTier;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraftCount;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_HandleCraftItemBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_HandleCraftItemBP");
static_assert(sizeof(FortItemManagementScreen_STW_HandleCraftItemBP) == 0x000010, "Wrong size on FortItemManagementScreen_STW_HandleCraftItemBP");
static_assert(offsetof(FortItemManagementScreen_STW_HandleCraftItemBP, SchematicItem) == 0x000000, "Member 'FortItemManagementScreen_STW_HandleCraftItemBP::SchematicItem' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_STW_HandleCraftItemBP, RequestedTier) == 0x000008, "Member 'FortItemManagementScreen_STW_HandleCraftItemBP::RequestedTier' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_STW_HandleCraftItemBP, CraftCount) == 0x00000C, "Member 'FortItemManagementScreen_STW_HandleCraftItemBP::CraftCount' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.HandleDropItemBP
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_HandleDropItemBP final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_HandleDropItemBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_HandleDropItemBP");
static_assert(sizeof(FortItemManagementScreen_STW_HandleDropItemBP) == 0x000008, "Wrong size on FortItemManagementScreen_STW_HandleDropItemBP");
static_assert(offsetof(FortItemManagementScreen_STW_HandleDropItemBP, Item) == 0x000000, "Member 'FortItemManagementScreen_STW_HandleDropItemBP::Item' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.HandleEquipItemBP
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_HandleEquipItemBP final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_HandleEquipItemBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_HandleEquipItemBP");
static_assert(sizeof(FortItemManagementScreen_STW_HandleEquipItemBP) == 0x000008, "Wrong size on FortItemManagementScreen_STW_HandleEquipItemBP");
static_assert(offsetof(FortItemManagementScreen_STW_HandleEquipItemBP, Item) == 0x000000, "Member 'FortItemManagementScreen_STW_HandleEquipItemBP::Item' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.HandleInspectItemBP
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_HandleInspectItemBP final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_HandleInspectItemBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_HandleInspectItemBP");
static_assert(sizeof(FortItemManagementScreen_STW_HandleInspectItemBP) == 0x000008, "Wrong size on FortItemManagementScreen_STW_HandleInspectItemBP");
static_assert(offsetof(FortItemManagementScreen_STW_HandleInspectItemBP, Item) == 0x000000, "Member 'FortItemManagementScreen_STW_HandleInspectItemBP::Item' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.HandleItemToCompareWithChanged
// 0x0003 (0x0003 - 0x0000)
struct FortItemManagementScreen_STW_HandleItemToCompareWithChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_HandleItemToCompareWithChanged) == 0x000001, "Wrong alignment on FortItemManagementScreen_STW_HandleItemToCompareWithChanged");
static_assert(sizeof(FortItemManagementScreen_STW_HandleItemToCompareWithChanged) == 0x000003, "Wrong size on FortItemManagementScreen_STW_HandleItemToCompareWithChanged");
static_assert(offsetof(FortItemManagementScreen_STW_HandleItemToCompareWithChanged, bItemChanged) == 0x000000, "Member 'FortItemManagementScreen_STW_HandleItemToCompareWithChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_STW_HandleItemToCompareWithChanged, bAmmoChanged) == 0x000001, "Member 'FortItemManagementScreen_STW_HandleItemToCompareWithChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_STW_HandleItemToCompareWithChanged, bIngredientsChanged) == 0x000002, "Member 'FortItemManagementScreen_STW_HandleItemToCompareWithChanged::bIngredientsChanged' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.HandleItemToDetailChanged
// 0x0003 (0x0003 - 0x0000)
struct FortItemManagementScreen_STW_HandleItemToDetailChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_HandleItemToDetailChanged) == 0x000001, "Wrong alignment on FortItemManagementScreen_STW_HandleItemToDetailChanged");
static_assert(sizeof(FortItemManagementScreen_STW_HandleItemToDetailChanged) == 0x000003, "Wrong size on FortItemManagementScreen_STW_HandleItemToDetailChanged");
static_assert(offsetof(FortItemManagementScreen_STW_HandleItemToDetailChanged, bItemChanged) == 0x000000, "Member 'FortItemManagementScreen_STW_HandleItemToDetailChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_STW_HandleItemToDetailChanged, bAmmoChanged) == 0x000001, "Member 'FortItemManagementScreen_STW_HandleItemToDetailChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_STW_HandleItemToDetailChanged, bIngredientsChanged) == 0x000002, "Member 'FortItemManagementScreen_STW_HandleItemToDetailChanged::bIngredientsChanged' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.HandleMulchQuantitySelection
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_HandleMulchQuantitySelection final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_HandleMulchQuantitySelection) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_HandleMulchQuantitySelection");
static_assert(sizeof(FortItemManagementScreen_STW_HandleMulchQuantitySelection) == 0x000008, "Wrong size on FortItemManagementScreen_STW_HandleMulchQuantitySelection");
static_assert(offsetof(FortItemManagementScreen_STW_HandleMulchQuantitySelection, Item) == 0x000000, "Member 'FortItemManagementScreen_STW_HandleMulchQuantitySelection::Item' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.HandleOpenCraftingOptionsBP
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_HandleOpenCraftingOptionsBP final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_HandleOpenCraftingOptionsBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_HandleOpenCraftingOptionsBP");
static_assert(sizeof(FortItemManagementScreen_STW_HandleOpenCraftingOptionsBP) == 0x000008, "Wrong size on FortItemManagementScreen_STW_HandleOpenCraftingOptionsBP");
static_assert(offsetof(FortItemManagementScreen_STW_HandleOpenCraftingOptionsBP, SchematicItem) == 0x000000, "Member 'FortItemManagementScreen_STW_HandleOpenCraftingOptionsBP::SchematicItem' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.HandleTransferItemBP
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_HandleTransferItemBP final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_HandleTransferItemBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_HandleTransferItemBP");
static_assert(sizeof(FortItemManagementScreen_STW_HandleTransferItemBP) == 0x000008, "Wrong size on FortItemManagementScreen_STW_HandleTransferItemBP");
static_assert(offsetof(FortItemManagementScreen_STW_HandleTransferItemBP, Item) == 0x000000, "Member 'FortItemManagementScreen_STW_HandleTransferItemBP::Item' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.InspectItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_InspectItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_InspectItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_InspectItem");
static_assert(sizeof(FortItemManagementScreen_STW_InspectItem) == 0x000008, "Wrong size on FortItemManagementScreen_STW_InspectItem");
static_assert(offsetof(FortItemManagementScreen_STW_InspectItem, Item) == 0x000000, "Member 'FortItemManagementScreen_STW_InspectItem::Item' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.OpenCraftingOptions
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_OpenCraftingOptions final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_OpenCraftingOptions) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_OpenCraftingOptions");
static_assert(sizeof(FortItemManagementScreen_STW_OpenCraftingOptions) == 0x000008, "Wrong size on FortItemManagementScreen_STW_OpenCraftingOptions");
static_assert(offsetof(FortItemManagementScreen_STW_OpenCraftingOptions, SchematicItem) == 0x000000, "Member 'FortItemManagementScreen_STW_OpenCraftingOptions::SchematicItem' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.SetConsumeItemRequestInProgress
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_STW_SetConsumeItemRequestInProgress final
{
public:
	bool                                          InProgress;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_SetConsumeItemRequestInProgress) == 0x000001, "Wrong alignment on FortItemManagementScreen_STW_SetConsumeItemRequestInProgress");
static_assert(sizeof(FortItemManagementScreen_STW_SetConsumeItemRequestInProgress) == 0x000001, "Wrong size on FortItemManagementScreen_STW_SetConsumeItemRequestInProgress");
static_assert(offsetof(FortItemManagementScreen_STW_SetConsumeItemRequestInProgress, InProgress) == 0x000000, "Member 'FortItemManagementScreen_STW_SetConsumeItemRequestInProgress::InProgress' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.SetFrontendInventoryFilter
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_STW_SetFrontendInventoryFilter final
{
public:
	EFortFrontendInventoryFilter                  FrontendInventoryFilter_0;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_SetFrontendInventoryFilter) == 0x000001, "Wrong alignment on FortItemManagementScreen_STW_SetFrontendInventoryFilter");
static_assert(sizeof(FortItemManagementScreen_STW_SetFrontendInventoryFilter) == 0x000001, "Wrong size on FortItemManagementScreen_STW_SetFrontendInventoryFilter");
static_assert(offsetof(FortItemManagementScreen_STW_SetFrontendInventoryFilter, FrontendInventoryFilter_0) == 0x000000, "Member 'FortItemManagementScreen_STW_SetFrontendInventoryFilter::FrontendInventoryFilter_0' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.ShowWarningReadOnlyWIFE
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_STW_ShowWarningReadOnlyWIFE final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_ShowWarningReadOnlyWIFE) == 0x000001, "Wrong alignment on FortItemManagementScreen_STW_ShowWarningReadOnlyWIFE");
static_assert(sizeof(FortItemManagementScreen_STW_ShowWarningReadOnlyWIFE) == 0x000001, "Wrong size on FortItemManagementScreen_STW_ShowWarningReadOnlyWIFE");
static_assert(offsetof(FortItemManagementScreen_STW_ShowWarningReadOnlyWIFE, Force) == 0x000000, "Member 'FortItemManagementScreen_STW_ShowWarningReadOnlyWIFE::Force' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.TransferItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_TransferItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_TransferItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_TransferItem");
static_assert(sizeof(FortItemManagementScreen_STW_TransferItem) == 0x000008, "Wrong size on FortItemManagementScreen_STW_TransferItem");
static_assert(offsetof(FortItemManagementScreen_STW_TransferItem, Item) == 0x000000, "Member 'FortItemManagementScreen_STW_TransferItem::Item' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.CanEquipItem
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementScreen_STW_CanEquipItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemManagementScreen_STW_CanEquipItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_CanEquipItem");
static_assert(sizeof(FortItemManagementScreen_STW_CanEquipItem) == 0x000010, "Wrong size on FortItemManagementScreen_STW_CanEquipItem");
static_assert(offsetof(FortItemManagementScreen_STW_CanEquipItem, Item) == 0x000000, "Member 'FortItemManagementScreen_STW_CanEquipItem::Item' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_STW_CanEquipItem, ReturnValue) == 0x000008, "Member 'FortItemManagementScreen_STW_CanEquipItem::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.GetItemToCompareDetailsWith
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_GetItemToCompareDetailsWith final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_GetItemToCompareDetailsWith) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_GetItemToCompareDetailsWith");
static_assert(sizeof(FortItemManagementScreen_STW_GetItemToCompareDetailsWith) == 0x000008, "Wrong size on FortItemManagementScreen_STW_GetItemToCompareDetailsWith");
static_assert(offsetof(FortItemManagementScreen_STW_GetItemToCompareDetailsWith, ReturnValue) == 0x000000, "Member 'FortItemManagementScreen_STW_GetItemToCompareDetailsWith::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.GetItemToDetail
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_STW_GetItemToDetail final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_GetItemToDetail) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_GetItemToDetail");
static_assert(sizeof(FortItemManagementScreen_STW_GetItemToDetail) == 0x000008, "Wrong size on FortItemManagementScreen_STW_GetItemToDetail");
static_assert(offsetof(FortItemManagementScreen_STW_GetItemToDetail, ReturnValue) == 0x000000, "Member 'FortItemManagementScreen_STW_GetItemToDetail::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.GetShouldShowCollectionBookIndicator
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_STW_GetShouldShowCollectionBookIndicator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_GetShouldShowCollectionBookIndicator) == 0x000001, "Wrong alignment on FortItemManagementScreen_STW_GetShouldShowCollectionBookIndicator");
static_assert(sizeof(FortItemManagementScreen_STW_GetShouldShowCollectionBookIndicator) == 0x000001, "Wrong size on FortItemManagementScreen_STW_GetShouldShowCollectionBookIndicator");
static_assert(offsetof(FortItemManagementScreen_STW_GetShouldShowCollectionBookIndicator, ReturnValue) == 0x000000, "Member 'FortItemManagementScreen_STW_GetShouldShowCollectionBookIndicator::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.GetShouldShowRefundIndicator
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_STW_GetShouldShowRefundIndicator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_GetShouldShowRefundIndicator) == 0x000001, "Wrong alignment on FortItemManagementScreen_STW_GetShouldShowRefundIndicator");
static_assert(sizeof(FortItemManagementScreen_STW_GetShouldShowRefundIndicator) == 0x000001, "Wrong size on FortItemManagementScreen_STW_GetShouldShowRefundIndicator");
static_assert(offsetof(FortItemManagementScreen_STW_GetShouldShowRefundIndicator, ReturnValue) == 0x000000, "Member 'FortItemManagementScreen_STW_GetShouldShowRefundIndicator::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.HasDefaultItemsToMulch
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_STW_HasDefaultItemsToMulch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_HasDefaultItemsToMulch) == 0x000001, "Wrong alignment on FortItemManagementScreen_STW_HasDefaultItemsToMulch");
static_assert(sizeof(FortItemManagementScreen_STW_HasDefaultItemsToMulch) == 0x000001, "Wrong size on FortItemManagementScreen_STW_HasDefaultItemsToMulch");
static_assert(offsetof(FortItemManagementScreen_STW_HasDefaultItemsToMulch, ReturnValue) == 0x000000, "Member 'FortItemManagementScreen_STW_HasDefaultItemsToMulch::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.HasItemBeenSeen
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementScreen_STW_HasItemBeenSeen final
{
public:
	class UFortAccountItem*                       AccountItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemManagementScreen_STW_HasItemBeenSeen) == 0x000008, "Wrong alignment on FortItemManagementScreen_STW_HasItemBeenSeen");
static_assert(sizeof(FortItemManagementScreen_STW_HasItemBeenSeen) == 0x000010, "Wrong size on FortItemManagementScreen_STW_HasItemBeenSeen");
static_assert(offsetof(FortItemManagementScreen_STW_HasItemBeenSeen, AccountItem) == 0x000000, "Member 'FortItemManagementScreen_STW_HasItemBeenSeen::AccountItem' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_STW_HasItemBeenSeen, ReturnValue) == 0x000008, "Member 'FortItemManagementScreen_STW_HasItemBeenSeen::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemManagementScreen_STW.IsScreenWIFE
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_STW_IsScreenWIFE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_STW_IsScreenWIFE) == 0x000001, "Wrong alignment on FortItemManagementScreen_STW_IsScreenWIFE");
static_assert(sizeof(FortItemManagementScreen_STW_IsScreenWIFE) == 0x000001, "Wrong size on FortItemManagementScreen_STW_IsScreenWIFE");
static_assert(offsetof(FortItemManagementScreen_STW_IsScreenWIFE, ReturnValue) == 0x000000, "Member 'FortItemManagementScreen_STW_IsScreenWIFE::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.MainMenu_STW.TryShowModal
// 0x0028 (0x0028 - 0x0000)
struct MainMenu_STW_TryShowModal final
{
public:
	TSoftClassPtr<class UClass>                   ModalWidgetClass;                                  // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenu_STW_TryShowModal) == 0x000008, "Wrong alignment on MainMenu_STW_TryShowModal");
static_assert(sizeof(MainMenu_STW_TryShowModal) == 0x000028, "Wrong size on MainMenu_STW_TryShowModal");
static_assert(offsetof(MainMenu_STW_TryShowModal, ModalWidgetClass) == 0x000000, "Member 'MainMenu_STW_TryShowModal::ModalWidgetClass' has a wrong offset!");

// Function SaveTheWorldUI.MainMenu_STW.TryShowPrimaryContent
// 0x0028 (0x0028 - 0x0000)
struct MainMenu_STW_TryShowPrimaryContent final
{
public:
	TSoftClassPtr<class UClass>                   ContentWidgetClass;                                // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenu_STW_TryShowPrimaryContent) == 0x000008, "Wrong alignment on MainMenu_STW_TryShowPrimaryContent");
static_assert(sizeof(MainMenu_STW_TryShowPrimaryContent) == 0x000028, "Wrong size on MainMenu_STW_TryShowPrimaryContent");
static_assert(offsetof(MainMenu_STW_TryShowPrimaryContent, ContentWidgetClass) == 0x000000, "Member 'MainMenu_STW_TryShowPrimaryContent::ContentWidgetClass' has a wrong offset!");

// Function SaveTheWorldUI.MainMenu_STW.IsActiveTabMainShop
// 0x0001 (0x0001 - 0x0000)
struct MainMenu_STW_IsActiveTabMainShop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenu_STW_IsActiveTabMainShop) == 0x000001, "Wrong alignment on MainMenu_STW_IsActiveTabMainShop");
static_assert(sizeof(MainMenu_STW_IsActiveTabMainShop) == 0x000001, "Wrong size on MainMenu_STW_IsActiveTabMainShop");
static_assert(offsetof(MainMenu_STW_IsActiveTabMainShop, ReturnValue) == 0x000000, "Member 'MainMenu_STW_IsActiveTabMainShop::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.MainMenu_STW.ShouldShowLeaveExperienceButton
// 0x0001 (0x0001 - 0x0000)
struct MainMenu_STW_ShouldShowLeaveExperienceButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenu_STW_ShouldShowLeaveExperienceButton) == 0x000001, "Wrong alignment on MainMenu_STW_ShouldShowLeaveExperienceButton");
static_assert(sizeof(MainMenu_STW_ShouldShowLeaveExperienceButton) == 0x000001, "Wrong size on MainMenu_STW_ShouldShowLeaveExperienceButton");
static_assert(offsetof(MainMenu_STW_ShouldShowLeaveExperienceButton, ReturnValue) == 0x000000, "Member 'MainMenu_STW_ShouldShowLeaveExperienceButton::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUIStateWidget_STWJoinServer.HandleLobbyTimeUpdated
// 0x0004 (0x0004 - 0x0000)
struct FortUIStateWidget_STWJoinServer_HandleLobbyTimeUpdated final
{
public:
	int32                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_STWJoinServer_HandleLobbyTimeUpdated) == 0x000004, "Wrong alignment on FortUIStateWidget_STWJoinServer_HandleLobbyTimeUpdated");
static_assert(sizeof(FortUIStateWidget_STWJoinServer_HandleLobbyTimeUpdated) == 0x000004, "Wrong size on FortUIStateWidget_STWJoinServer_HandleLobbyTimeUpdated");
static_assert(offsetof(FortUIStateWidget_STWJoinServer_HandleLobbyTimeUpdated, TimeRemaining) == 0x000000, "Member 'FortUIStateWidget_STWJoinServer_HandleLobbyTimeUpdated::TimeRemaining' has a wrong offset!");

// Function SaveTheWorldUI.FortUIStateWidget_STWJoinServer.HandleMatchmakingComplete
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_STWJoinServer_HandleMatchmakingComplete final
{
public:
	EMatchmakingCompleteResult                    MatchmakingResult;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_STWJoinServer_HandleMatchmakingComplete) == 0x000001, "Wrong alignment on FortUIStateWidget_STWJoinServer_HandleMatchmakingComplete");
static_assert(sizeof(FortUIStateWidget_STWJoinServer_HandleMatchmakingComplete) == 0x000001, "Wrong size on FortUIStateWidget_STWJoinServer_HandleMatchmakingComplete");
static_assert(offsetof(FortUIStateWidget_STWJoinServer_HandleMatchmakingComplete, MatchmakingResult) == 0x000000, "Member 'FortUIStateWidget_STWJoinServer_HandleMatchmakingComplete::MatchmakingResult' has a wrong offset!");

// Function SaveTheWorldUI.FortUIStateWidget_STWJoinServer.HandleMatchmakingStateChange
// 0x0002 (0x0002 - 0x0000)
struct FortUIStateWidget_STWJoinServer_HandleMatchmakingStateChange final
{
public:
	EMatchmakingState                             OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingState                             NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_STWJoinServer_HandleMatchmakingStateChange) == 0x000001, "Wrong alignment on FortUIStateWidget_STWJoinServer_HandleMatchmakingStateChange");
static_assert(sizeof(FortUIStateWidget_STWJoinServer_HandleMatchmakingStateChange) == 0x000002, "Wrong size on FortUIStateWidget_STWJoinServer_HandleMatchmakingStateChange");
static_assert(offsetof(FortUIStateWidget_STWJoinServer_HandleMatchmakingStateChange, OldState) == 0x000000, "Member 'FortUIStateWidget_STWJoinServer_HandleMatchmakingStateChange::OldState' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_STWJoinServer_HandleMatchmakingStateChange, NewState) == 0x000001, "Member 'FortUIStateWidget_STWJoinServer_HandleMatchmakingStateChange::NewState' has a wrong offset!");

// Function SaveTheWorldUI.TopBar_STW.OnShouldShowPhoenixDisplay
// 0x0010 (0x0010 - 0x0000)
struct TopBar_STW_OnShouldShowPhoenixDisplay final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortPhoenixSeasonDisplayInfo*          PhoenixDisplayInfo;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TopBar_STW_OnShouldShowPhoenixDisplay) == 0x000008, "Wrong alignment on TopBar_STW_OnShouldShowPhoenixDisplay");
static_assert(sizeof(TopBar_STW_OnShouldShowPhoenixDisplay) == 0x000010, "Wrong size on TopBar_STW_OnShouldShowPhoenixDisplay");
static_assert(offsetof(TopBar_STW_OnShouldShowPhoenixDisplay, bShow) == 0x000000, "Member 'TopBar_STW_OnShouldShowPhoenixDisplay::bShow' has a wrong offset!");
static_assert(offsetof(TopBar_STW_OnShouldShowPhoenixDisplay, PhoenixDisplayInfo) == 0x000008, "Member 'TopBar_STW_OnShouldShowPhoenixDisplay::PhoenixDisplayInfo' has a wrong offset!");

// Function SaveTheWorldUI.TopBar_STW.SetOnlineFriendsCount
// 0x0004 (0x0004 - 0x0000)
struct TopBar_STW_SetOnlineFriendsCount final
{
public:
	int32                                         NewOnlineFriendsCount;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TopBar_STW_SetOnlineFriendsCount) == 0x000004, "Wrong alignment on TopBar_STW_SetOnlineFriendsCount");
static_assert(sizeof(TopBar_STW_SetOnlineFriendsCount) == 0x000004, "Wrong size on TopBar_STW_SetOnlineFriendsCount");
static_assert(offsetof(TopBar_STW_SetOnlineFriendsCount, NewOnlineFriendsCount) == 0x000000, "Member 'TopBar_STW_SetOnlineFriendsCount::NewOnlineFriendsCount' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutGadgetPicker.SetTargetLoadoutSlot
// 0x0010 (0x0010 - 0x0000)
struct FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot final
{
public:
	const class UFortCampaignHeroLoadoutItem*     LoadoutItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot) == 0x000008, "Wrong alignment on FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot");
static_assert(sizeof(FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot) == 0x000010, "Wrong size on FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot");
static_assert(offsetof(FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot, LoadoutItem) == 0x000000, "Member 'FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot::LoadoutItem' has a wrong offset!");
static_assert(offsetof(FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot, SlotIndex) == 0x000008, "Member 'FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot::SlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutHeroPicker.AssociateFilterTabList
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutHeroPicker_AssociateFilterTabList final
{
public:
	const class UFortTabListWidgetBase_Legacy*    ExternalFilterTabList_0;                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutHeroPicker_AssociateFilterTabList) == 0x000008, "Wrong alignment on FortHeroLoadoutHeroPicker_AssociateFilterTabList");
static_assert(sizeof(FortHeroLoadoutHeroPicker_AssociateFilterTabList) == 0x000008, "Wrong size on FortHeroLoadoutHeroPicker_AssociateFilterTabList");
static_assert(offsetof(FortHeroLoadoutHeroPicker_AssociateFilterTabList, ExternalFilterTabList_0) == 0x000000, "Member 'FortHeroLoadoutHeroPicker_AssociateFilterTabList::ExternalFilterTabList_0' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutHeroPicker.GetCurrentlySelectedTab
// 0x0004 (0x0004 - 0x0000)
struct FortHeroLoadoutHeroPicker_GetCurrentlySelectedTab final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutHeroPicker_GetCurrentlySelectedTab) == 0x000004, "Wrong alignment on FortHeroLoadoutHeroPicker_GetCurrentlySelectedTab");
static_assert(sizeof(FortHeroLoadoutHeroPicker_GetCurrentlySelectedTab) == 0x000004, "Wrong size on FortHeroLoadoutHeroPicker_GetCurrentlySelectedTab");
static_assert(offsetof(FortHeroLoadoutHeroPicker_GetCurrentlySelectedTab, ReturnValue) == 0x000000, "Member 'FortHeroLoadoutHeroPicker_GetCurrentlySelectedTab::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutHeroPicker.HandleFilterTabSelected
// 0x0004 (0x0004 - 0x0000)
struct FortHeroLoadoutHeroPicker_HandleFilterTabSelected final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutHeroPicker_HandleFilterTabSelected) == 0x000004, "Wrong alignment on FortHeroLoadoutHeroPicker_HandleFilterTabSelected");
static_assert(sizeof(FortHeroLoadoutHeroPicker_HandleFilterTabSelected) == 0x000004, "Wrong size on FortHeroLoadoutHeroPicker_HandleFilterTabSelected");
static_assert(offsetof(FortHeroLoadoutHeroPicker_HandleFilterTabSelected, TabId) == 0x000000, "Member 'FortHeroLoadoutHeroPicker_HandleFilterTabSelected::TabId' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutHeroPicker.HandleFilterTabSelectedBP
// 0x0004 (0x0004 - 0x0000)
struct FortHeroLoadoutHeroPicker_HandleFilterTabSelectedBP final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutHeroPicker_HandleFilterTabSelectedBP) == 0x000004, "Wrong alignment on FortHeroLoadoutHeroPicker_HandleFilterTabSelectedBP");
static_assert(sizeof(FortHeroLoadoutHeroPicker_HandleFilterTabSelectedBP) == 0x000004, "Wrong size on FortHeroLoadoutHeroPicker_HandleFilterTabSelectedBP");
static_assert(offsetof(FortHeroLoadoutHeroPicker_HandleFilterTabSelectedBP, TabId) == 0x000000, "Member 'FortHeroLoadoutHeroPicker_HandleFilterTabSelectedBP::TabId' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutHeroPicker.SetTargetLoadoutSlot
// 0x0010 (0x0010 - 0x0000)
struct FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot final
{
public:
	const class UFortCampaignHeroLoadoutItem*     LoadoutItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot) == 0x000008, "Wrong alignment on FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot");
static_assert(sizeof(FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot) == 0x000010, "Wrong size on FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot");
static_assert(offsetof(FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot, LoadoutItem) == 0x000000, "Member 'FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot::LoadoutItem' has a wrong offset!");
static_assert(offsetof(FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot, SlotName) == 0x000008, "Member 'FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot::SlotName' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutHeroPicker.UpdateFilterTabList
// 0x0004 (0x0004 - 0x0000)
struct FortHeroLoadoutHeroPicker_UpdateFilterTabList final
{
public:
	class FName                                   PreviouslySelectedTab;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutHeroPicker_UpdateFilterTabList) == 0x000004, "Wrong alignment on FortHeroLoadoutHeroPicker_UpdateFilterTabList");
static_assert(sizeof(FortHeroLoadoutHeroPicker_UpdateFilterTabList) == 0x000004, "Wrong size on FortHeroLoadoutHeroPicker_UpdateFilterTabList");
static_assert(offsetof(FortHeroLoadoutHeroPicker_UpdateFilterTabList, PreviouslySelectedTab) == 0x000000, "Member 'FortHeroLoadoutHeroPicker_UpdateFilterTabList::PreviouslySelectedTab' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutScreenBase.SetHeroLoadout
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutScreenBase_SetHeroLoadout final
{
public:
	const class UFortCampaignHeroLoadoutItem*     HeroLoadout;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutScreenBase_SetHeroLoadout) == 0x000008, "Wrong alignment on FortHeroLoadoutScreenBase_SetHeroLoadout");
static_assert(sizeof(FortHeroLoadoutScreenBase_SetHeroLoadout) == 0x000008, "Wrong size on FortHeroLoadoutScreenBase_SetHeroLoadout");
static_assert(offsetof(FortHeroLoadoutScreenBase_SetHeroLoadout, HeroLoadout) == 0x000000, "Member 'FortHeroLoadoutScreenBase_SetHeroLoadout::HeroLoadout' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutScreenBase.GetIsReadOnly
// 0x0001 (0x0001 - 0x0000)
struct FortHeroLoadoutScreenBase_GetIsReadOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutScreenBase_GetIsReadOnly) == 0x000001, "Wrong alignment on FortHeroLoadoutScreenBase_GetIsReadOnly");
static_assert(sizeof(FortHeroLoadoutScreenBase_GetIsReadOnly) == 0x000001, "Wrong size on FortHeroLoadoutScreenBase_GetIsReadOnly");
static_assert(offsetof(FortHeroLoadoutScreenBase_GetIsReadOnly, ReturnValue) == 0x000000, "Member 'FortHeroLoadoutScreenBase_GetIsReadOnly::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutScreenBase.IsLoadoutSwitchingAllowed
// 0x0001 (0x0001 - 0x0000)
struct FortHeroLoadoutScreenBase_IsLoadoutSwitchingAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutScreenBase_IsLoadoutSwitchingAllowed) == 0x000001, "Wrong alignment on FortHeroLoadoutScreenBase_IsLoadoutSwitchingAllowed");
static_assert(sizeof(FortHeroLoadoutScreenBase_IsLoadoutSwitchingAllowed) == 0x000001, "Wrong size on FortHeroLoadoutScreenBase_IsLoadoutSwitchingAllowed");
static_assert(offsetof(FortHeroLoadoutScreenBase_IsLoadoutSwitchingAllowed, ReturnValue) == 0x000000, "Member 'FortHeroLoadoutScreenBase_IsLoadoutSwitchingAllowed::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutSlotButton.HandleMenuOpenChanged
// 0x0001 (0x0001 - 0x0000)
struct FortHeroLoadoutSlotButton_HandleMenuOpenChanged final
{
public:
	bool                                          bIsMenuOpen;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutSlotButton_HandleMenuOpenChanged) == 0x000001, "Wrong alignment on FortHeroLoadoutSlotButton_HandleMenuOpenChanged");
static_assert(sizeof(FortHeroLoadoutSlotButton_HandleMenuOpenChanged) == 0x000001, "Wrong size on FortHeroLoadoutSlotButton_HandleMenuOpenChanged");
static_assert(offsetof(FortHeroLoadoutSlotButton_HandleMenuOpenChanged, bIsMenuOpen) == 0x000000, "Member 'FortHeroLoadoutSlotButton_HandleMenuOpenChanged::bIsMenuOpen' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutSlotButton.IsContextMenuOpen
// 0x0001 (0x0001 - 0x0000)
struct FortHeroLoadoutSlotButton_IsContextMenuOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutSlotButton_IsContextMenuOpen) == 0x000001, "Wrong alignment on FortHeroLoadoutSlotButton_IsContextMenuOpen");
static_assert(sizeof(FortHeroLoadoutSlotButton_IsContextMenuOpen) == 0x000001, "Wrong size on FortHeroLoadoutSlotButton_IsContextMenuOpen");
static_assert(offsetof(FortHeroLoadoutSlotButton_IsContextMenuOpen, ReturnValue) == 0x000000, "Member 'FortHeroLoadoutSlotButton_IsContextMenuOpen::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutTeamPerkPicker.SetTargetLoadout
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutTeamPerkPicker_SetTargetLoadout final
{
public:
	const class UFortCampaignHeroLoadoutItem*     LoadoutItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutTeamPerkPicker_SetTargetLoadout) == 0x000008, "Wrong alignment on FortHeroLoadoutTeamPerkPicker_SetTargetLoadout");
static_assert(sizeof(FortHeroLoadoutTeamPerkPicker_SetTargetLoadout) == 0x000008, "Wrong size on FortHeroLoadoutTeamPerkPicker_SetTargetLoadout");
static_assert(offsetof(FortHeroLoadoutTeamPerkPicker_SetTargetLoadout, LoadoutItem) == 0x000000, "Member 'FortHeroLoadoutTeamPerkPicker_SetTargetLoadout::LoadoutItem' has a wrong offset!");

// Function SaveTheWorldUI.FortCampaignTabsScreenBase.HandleFeatureStateChanged
// 0x0003 (0x0003 - 0x0000)
struct FortCampaignTabsScreenBase_HandleFeatureStateChanged final
{
public:
	EFortUIFeature                                ChangedFeature;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeatureState                           NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeatureStateReason                     Reason;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTabsScreenBase_HandleFeatureStateChanged) == 0x000001, "Wrong alignment on FortCampaignTabsScreenBase_HandleFeatureStateChanged");
static_assert(sizeof(FortCampaignTabsScreenBase_HandleFeatureStateChanged) == 0x000003, "Wrong size on FortCampaignTabsScreenBase_HandleFeatureStateChanged");
static_assert(offsetof(FortCampaignTabsScreenBase_HandleFeatureStateChanged, ChangedFeature) == 0x000000, "Member 'FortCampaignTabsScreenBase_HandleFeatureStateChanged::ChangedFeature' has a wrong offset!");
static_assert(offsetof(FortCampaignTabsScreenBase_HandleFeatureStateChanged, NewState) == 0x000001, "Member 'FortCampaignTabsScreenBase_HandleFeatureStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(FortCampaignTabsScreenBase_HandleFeatureStateChanged, Reason) == 0x000002, "Member 'FortCampaignTabsScreenBase_HandleFeatureStateChanged::Reason' has a wrong offset!");

// Function SaveTheWorldUI.FortCampaignTabsScreenBase.HandleMainTabCreated
// 0x0010 (0x0010 - 0x0000)
struct FortCampaignTabsScreenBase_HandleMainTabCreated final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      TabButton;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTabsScreenBase_HandleMainTabCreated) == 0x000008, "Wrong alignment on FortCampaignTabsScreenBase_HandleMainTabCreated");
static_assert(sizeof(FortCampaignTabsScreenBase_HandleMainTabCreated) == 0x000010, "Wrong size on FortCampaignTabsScreenBase_HandleMainTabCreated");
static_assert(offsetof(FortCampaignTabsScreenBase_HandleMainTabCreated, TabNameID) == 0x000000, "Member 'FortCampaignTabsScreenBase_HandleMainTabCreated::TabNameID' has a wrong offset!");
static_assert(offsetof(FortCampaignTabsScreenBase_HandleMainTabCreated, TabButton) == 0x000008, "Member 'FortCampaignTabsScreenBase_HandleMainTabCreated::TabButton' has a wrong offset!");

// Function SaveTheWorldUI.FortCampaignTabsScreenBase.HandleMainTabSelected
// 0x0004 (0x0004 - 0x0000)
struct FortCampaignTabsScreenBase_HandleMainTabSelected final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTabsScreenBase_HandleMainTabSelected) == 0x000004, "Wrong alignment on FortCampaignTabsScreenBase_HandleMainTabSelected");
static_assert(sizeof(FortCampaignTabsScreenBase_HandleMainTabSelected) == 0x000004, "Wrong size on FortCampaignTabsScreenBase_HandleMainTabSelected");
static_assert(offsetof(FortCampaignTabsScreenBase_HandleMainTabSelected, TabNameID) == 0x000000, "Member 'FortCampaignTabsScreenBase_HandleMainTabSelected::TabNameID' has a wrong offset!");

// Function SaveTheWorldUI.FortCampaignTabsScreenBase.UpdateItemShopButtonBang
// 0x0004 (0x0004 - 0x0000)
struct FortCampaignTabsScreenBase_UpdateItemShopButtonBang final
{
public:
	class FName                                   Tab;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTabsScreenBase_UpdateItemShopButtonBang) == 0x000004, "Wrong alignment on FortCampaignTabsScreenBase_UpdateItemShopButtonBang");
static_assert(sizeof(FortCampaignTabsScreenBase_UpdateItemShopButtonBang) == 0x000004, "Wrong size on FortCampaignTabsScreenBase_UpdateItemShopButtonBang");
static_assert(offsetof(FortCampaignTabsScreenBase_UpdateItemShopButtonBang, Tab) == 0x000000, "Member 'FortCampaignTabsScreenBase_UpdateItemShopButtonBang::Tab' has a wrong offset!");

// Function SaveTheWorldUI.FortCampaignTabsScreenBase.ShouldShowItemShopBang
// 0x0001 (0x0001 - 0x0000)
struct FortCampaignTabsScreenBase_ShouldShowItemShopBang final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTabsScreenBase_ShouldShowItemShopBang) == 0x000001, "Wrong alignment on FortCampaignTabsScreenBase_ShouldShowItemShopBang");
static_assert(sizeof(FortCampaignTabsScreenBase_ShouldShowItemShopBang) == 0x000001, "Wrong size on FortCampaignTabsScreenBase_ShouldShowItemShopBang");
static_assert(offsetof(FortCampaignTabsScreenBase_ShouldShowItemShopBang, ReturnValue) == 0x000000, "Member 'FortCampaignTabsScreenBase_ShouldShowItemShopBang::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortCampaignTabsScreenBase_Legacy.HandleFeatureNavigateRequest
// 0x0001 (0x0001 - 0x0000)
struct FortCampaignTabsScreenBase_Legacy_HandleFeatureNavigateRequest final
{
public:
	EFortUIFeature                                Feature;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTabsScreenBase_Legacy_HandleFeatureNavigateRequest) == 0x000001, "Wrong alignment on FortCampaignTabsScreenBase_Legacy_HandleFeatureNavigateRequest");
static_assert(sizeof(FortCampaignTabsScreenBase_Legacy_HandleFeatureNavigateRequest) == 0x000001, "Wrong size on FortCampaignTabsScreenBase_Legacy_HandleFeatureNavigateRequest");
static_assert(offsetof(FortCampaignTabsScreenBase_Legacy_HandleFeatureNavigateRequest, Feature) == 0x000000, "Member 'FortCampaignTabsScreenBase_Legacy_HandleFeatureNavigateRequest::Feature' has a wrong offset!");

// Function SaveTheWorldUI.FortCampaignTabsScreenBase_Legacy.HandleFeatureStateChanged
// 0x0003 (0x0003 - 0x0000)
struct FortCampaignTabsScreenBase_Legacy_HandleFeatureStateChanged final
{
public:
	EFortUIFeature                                ChangedFeature;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeatureState                           NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeatureStateReason                     Reason;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTabsScreenBase_Legacy_HandleFeatureStateChanged) == 0x000001, "Wrong alignment on FortCampaignTabsScreenBase_Legacy_HandleFeatureStateChanged");
static_assert(sizeof(FortCampaignTabsScreenBase_Legacy_HandleFeatureStateChanged) == 0x000003, "Wrong size on FortCampaignTabsScreenBase_Legacy_HandleFeatureStateChanged");
static_assert(offsetof(FortCampaignTabsScreenBase_Legacy_HandleFeatureStateChanged, ChangedFeature) == 0x000000, "Member 'FortCampaignTabsScreenBase_Legacy_HandleFeatureStateChanged::ChangedFeature' has a wrong offset!");
static_assert(offsetof(FortCampaignTabsScreenBase_Legacy_HandleFeatureStateChanged, NewState) == 0x000001, "Member 'FortCampaignTabsScreenBase_Legacy_HandleFeatureStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(FortCampaignTabsScreenBase_Legacy_HandleFeatureStateChanged, Reason) == 0x000002, "Member 'FortCampaignTabsScreenBase_Legacy_HandleFeatureStateChanged::Reason' has a wrong offset!");

// Function SaveTheWorldUI.FortCampaignTabsScreenBase_Legacy.HandleMainTabCreated
// 0x0010 (0x0010 - 0x0000)
struct FortCampaignTabsScreenBase_Legacy_HandleMainTabCreated final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      TabButton;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTabsScreenBase_Legacy_HandleMainTabCreated) == 0x000008, "Wrong alignment on FortCampaignTabsScreenBase_Legacy_HandleMainTabCreated");
static_assert(sizeof(FortCampaignTabsScreenBase_Legacy_HandleMainTabCreated) == 0x000010, "Wrong size on FortCampaignTabsScreenBase_Legacy_HandleMainTabCreated");
static_assert(offsetof(FortCampaignTabsScreenBase_Legacy_HandleMainTabCreated, TabNameID) == 0x000000, "Member 'FortCampaignTabsScreenBase_Legacy_HandleMainTabCreated::TabNameID' has a wrong offset!");
static_assert(offsetof(FortCampaignTabsScreenBase_Legacy_HandleMainTabCreated, TabButton) == 0x000008, "Member 'FortCampaignTabsScreenBase_Legacy_HandleMainTabCreated::TabButton' has a wrong offset!");

// Function SaveTheWorldUI.FortCampaignTabsScreenBase_Legacy.HandleMainTabSelected
// 0x0004 (0x0004 - 0x0000)
struct FortCampaignTabsScreenBase_Legacy_HandleMainTabSelected final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTabsScreenBase_Legacy_HandleMainTabSelected) == 0x000004, "Wrong alignment on FortCampaignTabsScreenBase_Legacy_HandleMainTabSelected");
static_assert(sizeof(FortCampaignTabsScreenBase_Legacy_HandleMainTabSelected) == 0x000004, "Wrong size on FortCampaignTabsScreenBase_Legacy_HandleMainTabSelected");
static_assert(offsetof(FortCampaignTabsScreenBase_Legacy_HandleMainTabSelected, TabNameID) == 0x000000, "Member 'FortCampaignTabsScreenBase_Legacy_HandleMainTabSelected::TabNameID' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummary.HandleContextMenuOpenChanged
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummary_HandleContextMenuOpenChanged final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummary_HandleContextMenuOpenChanged) == 0x000001, "Wrong alignment on FortStoreSummary_HandleContextMenuOpenChanged");
static_assert(sizeof(FortStoreSummary_HandleContextMenuOpenChanged) == 0x000001, "Wrong size on FortStoreSummary_HandleContextMenuOpenChanged");
static_assert(offsetof(FortStoreSummary_HandleContextMenuOpenChanged, bIsOpen) == 0x000000, "Member 'FortStoreSummary_HandleContextMenuOpenChanged::bIsOpen' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummary.HandleContextMenuOpenChangedBP
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummary_HandleContextMenuOpenChangedBP final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummary_HandleContextMenuOpenChangedBP) == 0x000001, "Wrong alignment on FortStoreSummary_HandleContextMenuOpenChangedBP");
static_assert(sizeof(FortStoreSummary_HandleContextMenuOpenChangedBP) == 0x000001, "Wrong size on FortStoreSummary_HandleContextMenuOpenChangedBP");
static_assert(offsetof(FortStoreSummary_HandleContextMenuOpenChangedBP, bIsOpen) == 0x000000, "Member 'FortStoreSummary_HandleContextMenuOpenChangedBP::bIsOpen' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummary.SetCards
// 0x0010 (0x0010 - 0x0000)
struct FortStoreSummary_SetCards final
{
public:
	TArray<struct FCard>                          Cards;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummary_SetCards) == 0x000008, "Wrong alignment on FortStoreSummary_SetCards");
static_assert(sizeof(FortStoreSummary_SetCards) == 0x000010, "Wrong size on FortStoreSummary_SetCards");
static_assert(offsetof(FortStoreSummary_SetCards, Cards) == 0x000000, "Member 'FortStoreSummary_SetCards::Cards' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummary.SetIsInChoiceSelectionMode
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummary_SetIsInChoiceSelectionMode final
{
public:
	bool                                          InIsInChoiceSelectionMode;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummary_SetIsInChoiceSelectionMode) == 0x000001, "Wrong alignment on FortStoreSummary_SetIsInChoiceSelectionMode");
static_assert(sizeof(FortStoreSummary_SetIsInChoiceSelectionMode) == 0x000001, "Wrong size on FortStoreSummary_SetIsInChoiceSelectionMode");
static_assert(offsetof(FortStoreSummary_SetIsInChoiceSelectionMode, InIsInChoiceSelectionMode) == 0x000000, "Member 'FortStoreSummary_SetIsInChoiceSelectionMode::InIsInChoiceSelectionMode' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummary.GetIsInChoiceSelectionMode
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummary_GetIsInChoiceSelectionMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummary_GetIsInChoiceSelectionMode) == 0x000001, "Wrong alignment on FortStoreSummary_GetIsInChoiceSelectionMode");
static_assert(sizeof(FortStoreSummary_GetIsInChoiceSelectionMode) == 0x000001, "Wrong size on FortStoreSummary_GetIsInChoiceSelectionMode");
static_assert(offsetof(FortStoreSummary_GetIsInChoiceSelectionMode, ReturnValue) == 0x000000, "Member 'FortStoreSummary_GetIsInChoiceSelectionMode::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummaryItemButton.GetPopupMenu
// 0x0008 (0x0008 - 0x0000)
struct FortStoreSummaryItemButton_GetPopupMenu final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemButton_GetPopupMenu) == 0x000008, "Wrong alignment on FortStoreSummaryItemButton_GetPopupMenu");
static_assert(sizeof(FortStoreSummaryItemButton_GetPopupMenu) == 0x000008, "Wrong size on FortStoreSummaryItemButton_GetPopupMenu");
static_assert(offsetof(FortStoreSummaryItemButton_GetPopupMenu, ReturnValue) == 0x000000, "Member 'FortStoreSummaryItemButton_GetPopupMenu::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummaryItemButton.HandleMenuOpenChanged
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummaryItemButton_HandleMenuOpenChanged final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemButton_HandleMenuOpenChanged) == 0x000001, "Wrong alignment on FortStoreSummaryItemButton_HandleMenuOpenChanged");
static_assert(sizeof(FortStoreSummaryItemButton_HandleMenuOpenChanged) == 0x000001, "Wrong size on FortStoreSummaryItemButton_HandleMenuOpenChanged");
static_assert(offsetof(FortStoreSummaryItemButton_HandleMenuOpenChanged, bIsOpen) == 0x000000, "Member 'FortStoreSummaryItemButton_HandleMenuOpenChanged::bIsOpen' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummaryItemButton.SetStoreCardObject
// 0x0008 (0x0008 - 0x0000)
struct FortStoreSummaryItemButton_SetStoreCardObject final
{
public:
	class UStoreCardObject*                       CardObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemButton_SetStoreCardObject) == 0x000008, "Wrong alignment on FortStoreSummaryItemButton_SetStoreCardObject");
static_assert(sizeof(FortStoreSummaryItemButton_SetStoreCardObject) == 0x000008, "Wrong size on FortStoreSummaryItemButton_SetStoreCardObject");
static_assert(offsetof(FortStoreSummaryItemButton_SetStoreCardObject, CardObject) == 0x000000, "Member 'FortStoreSummaryItemButton_SetStoreCardObject::CardObject' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummaryItemButton.UpdateMulchListWithItem
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummaryItemButton_UpdateMulchListWithItem final
{
public:
	bool                                          bAddingItem;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemButton_UpdateMulchListWithItem) == 0x000001, "Wrong alignment on FortStoreSummaryItemButton_UpdateMulchListWithItem");
static_assert(sizeof(FortStoreSummaryItemButton_UpdateMulchListWithItem) == 0x000001, "Wrong size on FortStoreSummaryItemButton_UpdateMulchListWithItem");
static_assert(offsetof(FortStoreSummaryItemButton_UpdateMulchListWithItem, bAddingItem) == 0x000000, "Member 'FortStoreSummaryItemButton_UpdateMulchListWithItem::bAddingItem' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummaryItemButton.GetStoreCardObject
// 0x0008 (0x0008 - 0x0000)
struct FortStoreSummaryItemButton_GetStoreCardObject final
{
public:
	class UStoreCardObject*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemButton_GetStoreCardObject) == 0x000008, "Wrong alignment on FortStoreSummaryItemButton_GetStoreCardObject");
static_assert(sizeof(FortStoreSummaryItemButton_GetStoreCardObject) == 0x000008, "Wrong size on FortStoreSummaryItemButton_GetStoreCardObject");
static_assert(offsetof(FortStoreSummaryItemButton_GetStoreCardObject, ReturnValue) == 0x000000, "Member 'FortStoreSummaryItemButton_GetStoreCardObject::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummaryItemButton_Legacy.GetPopupMenu
// 0x0008 (0x0008 - 0x0000)
struct FortStoreSummaryItemButton_Legacy_GetPopupMenu final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemButton_Legacy_GetPopupMenu) == 0x000008, "Wrong alignment on FortStoreSummaryItemButton_Legacy_GetPopupMenu");
static_assert(sizeof(FortStoreSummaryItemButton_Legacy_GetPopupMenu) == 0x000008, "Wrong size on FortStoreSummaryItemButton_Legacy_GetPopupMenu");
static_assert(offsetof(FortStoreSummaryItemButton_Legacy_GetPopupMenu, ReturnValue) == 0x000000, "Member 'FortStoreSummaryItemButton_Legacy_GetPopupMenu::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummaryItemButton_Legacy.HandleMenuOpenChanged
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummaryItemButton_Legacy_HandleMenuOpenChanged final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemButton_Legacy_HandleMenuOpenChanged) == 0x000001, "Wrong alignment on FortStoreSummaryItemButton_Legacy_HandleMenuOpenChanged");
static_assert(sizeof(FortStoreSummaryItemButton_Legacy_HandleMenuOpenChanged) == 0x000001, "Wrong size on FortStoreSummaryItemButton_Legacy_HandleMenuOpenChanged");
static_assert(offsetof(FortStoreSummaryItemButton_Legacy_HandleMenuOpenChanged, bIsOpen) == 0x000000, "Member 'FortStoreSummaryItemButton_Legacy_HandleMenuOpenChanged::bIsOpen' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummaryItemButton_Legacy.SetStoreCardObject
// 0x0008 (0x0008 - 0x0000)
struct FortStoreSummaryItemButton_Legacy_SetStoreCardObject final
{
public:
	class UStoreCardObject*                       CardObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemButton_Legacy_SetStoreCardObject) == 0x000008, "Wrong alignment on FortStoreSummaryItemButton_Legacy_SetStoreCardObject");
static_assert(sizeof(FortStoreSummaryItemButton_Legacy_SetStoreCardObject) == 0x000008, "Wrong size on FortStoreSummaryItemButton_Legacy_SetStoreCardObject");
static_assert(offsetof(FortStoreSummaryItemButton_Legacy_SetStoreCardObject, CardObject) == 0x000000, "Member 'FortStoreSummaryItemButton_Legacy_SetStoreCardObject::CardObject' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummaryItemButton_Legacy.UpdateMulchListWithItem
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummaryItemButton_Legacy_UpdateMulchListWithItem final
{
public:
	bool                                          bAddingItem;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemButton_Legacy_UpdateMulchListWithItem) == 0x000001, "Wrong alignment on FortStoreSummaryItemButton_Legacy_UpdateMulchListWithItem");
static_assert(sizeof(FortStoreSummaryItemButton_Legacy_UpdateMulchListWithItem) == 0x000001, "Wrong size on FortStoreSummaryItemButton_Legacy_UpdateMulchListWithItem");
static_assert(offsetof(FortStoreSummaryItemButton_Legacy_UpdateMulchListWithItem, bAddingItem) == 0x000000, "Member 'FortStoreSummaryItemButton_Legacy_UpdateMulchListWithItem::bAddingItem' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummaryItemButton_Legacy.GetStoreCardObject
// 0x0008 (0x0008 - 0x0000)
struct FortStoreSummaryItemButton_Legacy_GetStoreCardObject final
{
public:
	class UStoreCardObject*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemButton_Legacy_GetStoreCardObject) == 0x000008, "Wrong alignment on FortStoreSummaryItemButton_Legacy_GetStoreCardObject");
static_assert(sizeof(FortStoreSummaryItemButton_Legacy_GetStoreCardObject) == 0x000008, "Wrong size on FortStoreSummaryItemButton_Legacy_GetStoreCardObject");
static_assert(offsetof(FortStoreSummaryItemButton_Legacy_GetStoreCardObject, ReturnValue) == 0x000000, "Member 'FortStoreSummaryItemButton_Legacy_GetStoreCardObject::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummaryItemPopupMenu.HandleItemChanged
// 0x0003 (0x0003 - 0x0000)
struct FortStoreSummaryItemPopupMenu_HandleItemChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemPopupMenu_HandleItemChanged) == 0x000001, "Wrong alignment on FortStoreSummaryItemPopupMenu_HandleItemChanged");
static_assert(sizeof(FortStoreSummaryItemPopupMenu_HandleItemChanged) == 0x000003, "Wrong size on FortStoreSummaryItemPopupMenu_HandleItemChanged");
static_assert(offsetof(FortStoreSummaryItemPopupMenu_HandleItemChanged, bItemChanged) == 0x000000, "Member 'FortStoreSummaryItemPopupMenu_HandleItemChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortStoreSummaryItemPopupMenu_HandleItemChanged, bAmmoChanged) == 0x000001, "Member 'FortStoreSummaryItemPopupMenu_HandleItemChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortStoreSummaryItemPopupMenu_HandleItemChanged, bIngredientsChanged) == 0x000002, "Member 'FortStoreSummaryItemPopupMenu_HandleItemChanged::bIngredientsChanged' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummaryItemPopupMenu.GetHostButton
// 0x0008 (0x0008 - 0x0000)
struct FortStoreSummaryItemPopupMenu_GetHostButton final
{
public:
	class UFortStoreSummaryItemButton*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemPopupMenu_GetHostButton) == 0x000008, "Wrong alignment on FortStoreSummaryItemPopupMenu_GetHostButton");
static_assert(sizeof(FortStoreSummaryItemPopupMenu_GetHostButton) == 0x000008, "Wrong size on FortStoreSummaryItemPopupMenu_GetHostButton");
static_assert(offsetof(FortStoreSummaryItemPopupMenu_GetHostButton, ReturnValue) == 0x000000, "Member 'FortStoreSummaryItemPopupMenu_GetHostButton::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummaryItemPopupMenu_Legacy.HandleItemChanged
// 0x0003 (0x0003 - 0x0000)
struct FortStoreSummaryItemPopupMenu_Legacy_HandleItemChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemPopupMenu_Legacy_HandleItemChanged) == 0x000001, "Wrong alignment on FortStoreSummaryItemPopupMenu_Legacy_HandleItemChanged");
static_assert(sizeof(FortStoreSummaryItemPopupMenu_Legacy_HandleItemChanged) == 0x000003, "Wrong size on FortStoreSummaryItemPopupMenu_Legacy_HandleItemChanged");
static_assert(offsetof(FortStoreSummaryItemPopupMenu_Legacy_HandleItemChanged, bItemChanged) == 0x000000, "Member 'FortStoreSummaryItemPopupMenu_Legacy_HandleItemChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortStoreSummaryItemPopupMenu_Legacy_HandleItemChanged, bAmmoChanged) == 0x000001, "Member 'FortStoreSummaryItemPopupMenu_Legacy_HandleItemChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortStoreSummaryItemPopupMenu_Legacy_HandleItemChanged, bIngredientsChanged) == 0x000002, "Member 'FortStoreSummaryItemPopupMenu_Legacy_HandleItemChanged::bIngredientsChanged' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummaryItemPopupMenu_Legacy.GetHostButton
// 0x0008 (0x0008 - 0x0000)
struct FortStoreSummaryItemPopupMenu_Legacy_GetHostButton final
{
public:
	class UFortStoreSummaryItemButton_Legacy*     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemPopupMenu_Legacy_GetHostButton) == 0x000008, "Wrong alignment on FortStoreSummaryItemPopupMenu_Legacy_GetHostButton");
static_assert(sizeof(FortStoreSummaryItemPopupMenu_Legacy_GetHostButton) == 0x000008, "Wrong size on FortStoreSummaryItemPopupMenu_Legacy_GetHostButton");
static_assert(offsetof(FortStoreSummaryItemPopupMenu_Legacy_GetHostButton, ReturnValue) == 0x000000, "Member 'FortStoreSummaryItemPopupMenu_Legacy_GetHostButton::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummary_Legacy.HandleContextMenuOpenChanged
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummary_Legacy_HandleContextMenuOpenChanged final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummary_Legacy_HandleContextMenuOpenChanged) == 0x000001, "Wrong alignment on FortStoreSummary_Legacy_HandleContextMenuOpenChanged");
static_assert(sizeof(FortStoreSummary_Legacy_HandleContextMenuOpenChanged) == 0x000001, "Wrong size on FortStoreSummary_Legacy_HandleContextMenuOpenChanged");
static_assert(offsetof(FortStoreSummary_Legacy_HandleContextMenuOpenChanged, bIsOpen) == 0x000000, "Member 'FortStoreSummary_Legacy_HandleContextMenuOpenChanged::bIsOpen' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummary_Legacy.HandleContextMenuOpenChangedBP
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummary_Legacy_HandleContextMenuOpenChangedBP final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummary_Legacy_HandleContextMenuOpenChangedBP) == 0x000001, "Wrong alignment on FortStoreSummary_Legacy_HandleContextMenuOpenChangedBP");
static_assert(sizeof(FortStoreSummary_Legacy_HandleContextMenuOpenChangedBP) == 0x000001, "Wrong size on FortStoreSummary_Legacy_HandleContextMenuOpenChangedBP");
static_assert(offsetof(FortStoreSummary_Legacy_HandleContextMenuOpenChangedBP, bIsOpen) == 0x000000, "Member 'FortStoreSummary_Legacy_HandleContextMenuOpenChangedBP::bIsOpen' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummary_Legacy.SetCards
// 0x0010 (0x0010 - 0x0000)
struct FortStoreSummary_Legacy_SetCards final
{
public:
	TArray<struct FCard>                          Cards;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummary_Legacy_SetCards) == 0x000008, "Wrong alignment on FortStoreSummary_Legacy_SetCards");
static_assert(sizeof(FortStoreSummary_Legacy_SetCards) == 0x000010, "Wrong size on FortStoreSummary_Legacy_SetCards");
static_assert(offsetof(FortStoreSummary_Legacy_SetCards, Cards) == 0x000000, "Member 'FortStoreSummary_Legacy_SetCards::Cards' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummary_Legacy.SetIsInChoiceSelectionMode
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummary_Legacy_SetIsInChoiceSelectionMode final
{
public:
	bool                                          InIsInChoiceSelectionMode;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummary_Legacy_SetIsInChoiceSelectionMode) == 0x000001, "Wrong alignment on FortStoreSummary_Legacy_SetIsInChoiceSelectionMode");
static_assert(sizeof(FortStoreSummary_Legacy_SetIsInChoiceSelectionMode) == 0x000001, "Wrong size on FortStoreSummary_Legacy_SetIsInChoiceSelectionMode");
static_assert(offsetof(FortStoreSummary_Legacy_SetIsInChoiceSelectionMode, InIsInChoiceSelectionMode) == 0x000000, "Member 'FortStoreSummary_Legacy_SetIsInChoiceSelectionMode::InIsInChoiceSelectionMode' has a wrong offset!");

// Function SaveTheWorldUI.FortStoreSummary_Legacy.GetIsInChoiceSelectionMode
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummary_Legacy_GetIsInChoiceSelectionMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummary_Legacy_GetIsInChoiceSelectionMode) == 0x000001, "Wrong alignment on FortStoreSummary_Legacy_GetIsInChoiceSelectionMode");
static_assert(sizeof(FortStoreSummary_Legacy_GetIsInChoiceSelectionMode) == 0x000001, "Wrong size on FortStoreSummary_Legacy_GetIsInChoiceSelectionMode");
static_assert(offsetof(FortStoreSummary_Legacy_GetIsInChoiceSelectionMode, ReturnValue) == 0x000000, "Member 'FortStoreSummary_Legacy_GetIsInChoiceSelectionMode::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutGadgetTileBase.OnGadgetUpdated
// 0x0001 (0x0001 - 0x0000)
struct FortHeroLoadoutGadgetTileBase_OnGadgetUpdated final
{
public:
	bool                                          bIsValidGadget;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutGadgetTileBase_OnGadgetUpdated) == 0x000001, "Wrong alignment on FortHeroLoadoutGadgetTileBase_OnGadgetUpdated");
static_assert(sizeof(FortHeroLoadoutGadgetTileBase_OnGadgetUpdated) == 0x000001, "Wrong size on FortHeroLoadoutGadgetTileBase_OnGadgetUpdated");
static_assert(offsetof(FortHeroLoadoutGadgetTileBase_OnGadgetUpdated, bIsValidGadget) == 0x000000, "Member 'FortHeroLoadoutGadgetTileBase_OnGadgetUpdated::bIsValidGadget' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutGadgetTileBase.SetGadgetToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutGadgetTileBase_SetGadgetToRepresent final
{
public:
	const class UFortGadgetItemDefinition*        GadgetItemDefinition;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutGadgetTileBase_SetGadgetToRepresent) == 0x000008, "Wrong alignment on FortHeroLoadoutGadgetTileBase_SetGadgetToRepresent");
static_assert(sizeof(FortHeroLoadoutGadgetTileBase_SetGadgetToRepresent) == 0x000008, "Wrong size on FortHeroLoadoutGadgetTileBase_SetGadgetToRepresent");
static_assert(offsetof(FortHeroLoadoutGadgetTileBase_SetGadgetToRepresent, GadgetItemDefinition) == 0x000000, "Member 'FortHeroLoadoutGadgetTileBase_SetGadgetToRepresent::GadgetItemDefinition' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutInGameScreenBase.OnPerkWidgetAdded
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutInGameScreenBase_OnPerkWidgetAdded final
{
public:
	class UGridSlot*                              GridSlot;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutInGameScreenBase_OnPerkWidgetAdded) == 0x000008, "Wrong alignment on FortHeroLoadoutInGameScreenBase_OnPerkWidgetAdded");
static_assert(sizeof(FortHeroLoadoutInGameScreenBase_OnPerkWidgetAdded) == 0x000008, "Wrong size on FortHeroLoadoutInGameScreenBase_OnPerkWidgetAdded");
static_assert(offsetof(FortHeroLoadoutInGameScreenBase_OnPerkWidgetAdded, GridSlot) == 0x000000, "Member 'FortHeroLoadoutInGameScreenBase_OnPerkWidgetAdded::GridSlot' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutInGameScreenBase.GetGadgetDefinitionBySlot
// 0x0010 (0x0010 - 0x0000)
struct FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGadgetItemDefinition*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot) == 0x000008, "Wrong alignment on FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot");
static_assert(sizeof(FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot) == 0x000010, "Wrong size on FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot");
static_assert(offsetof(FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot, SlotIndex) == 0x000000, "Member 'FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot, ReturnValue) == 0x000008, "Member 'FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroLoadoutPerkTileBase.OnPerkInitialized
// 0x0003 (0x0003 - 0x0000)
struct FortHeroLoadoutPerkTileBase_OnPerkInitialized final
{
public:
	EFortHeroPerkDisplayType                      InPerkType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowWarning;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutPerkTileBase_OnPerkInitialized) == 0x000001, "Wrong alignment on FortHeroLoadoutPerkTileBase_OnPerkInitialized");
static_assert(sizeof(FortHeroLoadoutPerkTileBase_OnPerkInitialized) == 0x000003, "Wrong size on FortHeroLoadoutPerkTileBase_OnPerkInitialized");
static_assert(offsetof(FortHeroLoadoutPerkTileBase_OnPerkInitialized, InPerkType) == 0x000000, "Member 'FortHeroLoadoutPerkTileBase_OnPerkInitialized::InPerkType' has a wrong offset!");
static_assert(offsetof(FortHeroLoadoutPerkTileBase_OnPerkInitialized, bActive) == 0x000001, "Member 'FortHeroLoadoutPerkTileBase_OnPerkInitialized::bActive' has a wrong offset!");
static_assert(offsetof(FortHeroLoadoutPerkTileBase_OnPerkInitialized, bShowWarning) == 0x000002, "Member 'FortHeroLoadoutPerkTileBase_OnPerkInitialized::bShowWarning' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationModOptinScreenBase.RequestClose
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationModOptinScreenBase_RequestClose final
{
public:
	bool                                          bCancelled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationModOptinScreenBase_RequestClose) == 0x000001, "Wrong alignment on FortAlterationModOptinScreenBase_RequestClose");
static_assert(sizeof(FortAlterationModOptinScreenBase_RequestClose) == 0x000001, "Wrong size on FortAlterationModOptinScreenBase_RequestClose");
static_assert(offsetof(FortAlterationModOptinScreenBase_RequestClose, bCancelled) == 0x000000, "Member 'FortAlterationModOptinScreenBase_RequestClose::bCancelled' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationModOptinScreenBase.SetupItem
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationModOptinScreenBase_SetupItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationModOptinScreenBase_SetupItem) == 0x000008, "Wrong alignment on FortAlterationModOptinScreenBase_SetupItem");
static_assert(sizeof(FortAlterationModOptinScreenBase_SetupItem) == 0x000008, "Wrong size on FortAlterationModOptinScreenBase_SetupItem");
static_assert(offsetof(FortAlterationModOptinScreenBase_SetupItem, Item) == 0x000000, "Member 'FortAlterationModOptinScreenBase_SetupItem::Item' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationModScreenBase.AreIngredientRequirementsMent
// 0x0018 (0x0018 - 0x0000)
struct FortAlterationModScreenBase_AreIngredientRequirementsMent final
{
public:
	TArray<struct FFortItemQuantityPair>          RequiredIngredients;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAlterationModScreenBase_AreIngredientRequirementsMent) == 0x000008, "Wrong alignment on FortAlterationModScreenBase_AreIngredientRequirementsMent");
static_assert(sizeof(FortAlterationModScreenBase_AreIngredientRequirementsMent) == 0x000018, "Wrong size on FortAlterationModScreenBase_AreIngredientRequirementsMent");
static_assert(offsetof(FortAlterationModScreenBase_AreIngredientRequirementsMent, RequiredIngredients) == 0x000000, "Member 'FortAlterationModScreenBase_AreIngredientRequirementsMent::RequiredIngredients' has a wrong offset!");
static_assert(offsetof(FortAlterationModScreenBase_AreIngredientRequirementsMent, ReturnValue) == 0x000010, "Member 'FortAlterationModScreenBase_AreIngredientRequirementsMent::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationModScreenBase.HandleBackAction
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationModScreenBase_HandleBackAction final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationModScreenBase_HandleBackAction) == 0x000001, "Wrong alignment on FortAlterationModScreenBase_HandleBackAction");
static_assert(sizeof(FortAlterationModScreenBase_HandleBackAction) == 0x000001, "Wrong size on FortAlterationModScreenBase_HandleBackAction");
static_assert(offsetof(FortAlterationModScreenBase_HandleBackAction, bPassThrough) == 0x000000, "Member 'FortAlterationModScreenBase_HandleBackAction::bPassThrough' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationModScreenBase.OnAlterationModificationSucess
// 0x0004 (0x0004 - 0x0000)
struct FortAlterationModScreenBase_OnAlterationModificationSucess final
{
public:
	int32                                         ModifiedSlotIndex;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationModScreenBase_OnAlterationModificationSucess) == 0x000004, "Wrong alignment on FortAlterationModScreenBase_OnAlterationModificationSucess");
static_assert(sizeof(FortAlterationModScreenBase_OnAlterationModificationSucess) == 0x000004, "Wrong size on FortAlterationModScreenBase_OnAlterationModificationSucess");
static_assert(offsetof(FortAlterationModScreenBase_OnAlterationModificationSucess, ModifiedSlotIndex) == 0x000000, "Member 'FortAlterationModScreenBase_OnAlterationModificationSucess::ModifiedSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationModScreenBase.OnAlterationOptionChanged
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationModScreenBase_OnAlterationOptionChanged final
{
public:
	class UFortAlterationOption*                  CurrentAlterationOption;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationModScreenBase_OnAlterationOptionChanged) == 0x000008, "Wrong alignment on FortAlterationModScreenBase_OnAlterationOptionChanged");
static_assert(sizeof(FortAlterationModScreenBase_OnAlterationOptionChanged) == 0x000008, "Wrong size on FortAlterationModScreenBase_OnAlterationOptionChanged");
static_assert(offsetof(FortAlterationModScreenBase_OnAlterationOptionChanged, CurrentAlterationOption) == 0x000000, "Member 'FortAlterationModScreenBase_OnAlterationOptionChanged::CurrentAlterationOption' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationModScreenBase.OnItemSlotChanged
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationModScreenBase_OnItemSlotChanged final
{
public:
	bool                                          SelectedSlot;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationModScreenBase_OnItemSlotChanged) == 0x000001, "Wrong alignment on FortAlterationModScreenBase_OnItemSlotChanged");
static_assert(sizeof(FortAlterationModScreenBase_OnItemSlotChanged) == 0x000001, "Wrong size on FortAlterationModScreenBase_OnItemSlotChanged");
static_assert(offsetof(FortAlterationModScreenBase_OnItemSlotChanged, SelectedSlot) == 0x000000, "Member 'FortAlterationModScreenBase_OnItemSlotChanged::SelectedSlot' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationModScreenBase.SetItemForAlterationsModding
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationModScreenBase_SetItemForAlterationsModding final
{
public:
	class UFortAlterableItem*                     InAlterableItem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationModScreenBase_SetItemForAlterationsModding) == 0x000008, "Wrong alignment on FortAlterationModScreenBase_SetItemForAlterationsModding");
static_assert(sizeof(FortAlterationModScreenBase_SetItemForAlterationsModding) == 0x000008, "Wrong size on FortAlterationModScreenBase_SetItemForAlterationsModding");
static_assert(offsetof(FortAlterationModScreenBase_SetItemForAlterationsModding, InAlterableItem) == 0x000000, "Member 'FortAlterationModScreenBase_SetItemForAlterationsModding::InAlterableItem' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectionScreen.GetCycleWidget
// 0x0008 (0x0008 - 0x0000)
struct FortItemInspectionScreen_GetCycleWidget final
{
public:
	class UFortItemInspectCycleWidget*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_GetCycleWidget) == 0x000008, "Wrong alignment on FortItemInspectionScreen_GetCycleWidget");
static_assert(sizeof(FortItemInspectionScreen_GetCycleWidget) == 0x000008, "Wrong size on FortItemInspectionScreen_GetCycleWidget");
static_assert(offsetof(FortItemInspectionScreen_GetCycleWidget, ReturnValue) == 0x000000, "Member 'FortItemInspectionScreen_GetCycleWidget::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectionScreen.HandleItemToInspectChanged
// 0x0003 (0x0003 - 0x0000)
struct FortItemInspectionScreen_HandleItemToInspectChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_HandleItemToInspectChanged) == 0x000001, "Wrong alignment on FortItemInspectionScreen_HandleItemToInspectChanged");
static_assert(sizeof(FortItemInspectionScreen_HandleItemToInspectChanged) == 0x000003, "Wrong size on FortItemInspectionScreen_HandleItemToInspectChanged");
static_assert(offsetof(FortItemInspectionScreen_HandleItemToInspectChanged, bItemChanged) == 0x000000, "Member 'FortItemInspectionScreen_HandleItemToInspectChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_HandleItemToInspectChanged, bAmmoChanged) == 0x000001, "Member 'FortItemInspectionScreen_HandleItemToInspectChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_HandleItemToInspectChanged, bIngredientsChanged) == 0x000002, "Member 'FortItemInspectionScreen_HandleItemToInspectChanged::bIngredientsChanged' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectionScreen.HandleItemToInspectChangedBP
// 0x0001 (0x0001 - 0x0000)
struct FortItemInspectionScreen_HandleItemToInspectChangedBP final
{
public:
	bool                                          bWasFavoritedChanged;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_HandleItemToInspectChangedBP) == 0x000001, "Wrong alignment on FortItemInspectionScreen_HandleItemToInspectChangedBP");
static_assert(sizeof(FortItemInspectionScreen_HandleItemToInspectChangedBP) == 0x000001, "Wrong size on FortItemInspectionScreen_HandleItemToInspectChangedBP");
static_assert(offsetof(FortItemInspectionScreen_HandleItemToInspectChangedBP, bWasFavoritedChanged) == 0x000000, "Member 'FortItemInspectionScreen_HandleItemToInspectChangedBP::bWasFavoritedChanged' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectionScreen.OpenItemInspect
// 0x0018 (0x0018 - 0x0000)
struct FortItemInspectionScreen_OpenItemInspect final
{
public:
	class UFortItem*                              ItemToInspect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemInspectionMode                       Mode;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldAllowUpgrading;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldAllowEvolution;                              // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldAllowFavorite;                               // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTemporaryItem;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRarityUpgrading;                             // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuantityOverride;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemInspectionScreen_OpenItemInspect) == 0x000008, "Wrong alignment on FortItemInspectionScreen_OpenItemInspect");
static_assert(sizeof(FortItemInspectionScreen_OpenItemInspect) == 0x000018, "Wrong size on FortItemInspectionScreen_OpenItemInspect");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, ItemToInspect) == 0x000000, "Member 'FortItemInspectionScreen_OpenItemInspect::ItemToInspect' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, Mode) == 0x000008, "Member 'FortItemInspectionScreen_OpenItemInspect::Mode' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, ShouldAllowUpgrading) == 0x000009, "Member 'FortItemInspectionScreen_OpenItemInspect::ShouldAllowUpgrading' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, ShouldAllowEvolution) == 0x00000A, "Member 'FortItemInspectionScreen_OpenItemInspect::ShouldAllowEvolution' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, ShouldAllowFavorite) == 0x00000B, "Member 'FortItemInspectionScreen_OpenItemInspect::ShouldAllowFavorite' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, IsTemporaryItem) == 0x00000C, "Member 'FortItemInspectionScreen_OpenItemInspect::IsTemporaryItem' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, bAllowRarityUpgrading) == 0x00000D, "Member 'FortItemInspectionScreen_OpenItemInspect::bAllowRarityUpgrading' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, QuantityOverride) == 0x000010, "Member 'FortItemInspectionScreen_OpenItemInspect::QuantityOverride' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectionScreen.SetAttemptingConversion
// 0x0001 (0x0001 - 0x0000)
struct FortItemInspectionScreen_SetAttemptingConversion final
{
public:
	bool                                          bIsAttemptingConversion;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_SetAttemptingConversion) == 0x000001, "Wrong alignment on FortItemInspectionScreen_SetAttemptingConversion");
static_assert(sizeof(FortItemInspectionScreen_SetAttemptingConversion) == 0x000001, "Wrong size on FortItemInspectionScreen_SetAttemptingConversion");
static_assert(offsetof(FortItemInspectionScreen_SetAttemptingConversion, bIsAttemptingConversion) == 0x000000, "Member 'FortItemInspectionScreen_SetAttemptingConversion::bIsAttemptingConversion' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectionScreen.SetInspectionMode
// 0x0001 (0x0001 - 0x0000)
struct FortItemInspectionScreen_SetInspectionMode final
{
public:
	EFortItemInspectionMode                       NewInspectMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_SetInspectionMode) == 0x000001, "Wrong alignment on FortItemInspectionScreen_SetInspectionMode");
static_assert(sizeof(FortItemInspectionScreen_SetInspectionMode) == 0x000001, "Wrong size on FortItemInspectionScreen_SetInspectionMode");
static_assert(offsetof(FortItemInspectionScreen_SetInspectionMode, NewInspectMode) == 0x000000, "Member 'FortItemInspectionScreen_SetInspectionMode::NewInspectMode' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectionScreen.SetItemToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortItemInspectionScreen_SetItemToRepresent final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_SetItemToRepresent) == 0x000008, "Wrong alignment on FortItemInspectionScreen_SetItemToRepresent");
static_assert(sizeof(FortItemInspectionScreen_SetItemToRepresent) == 0x000008, "Wrong size on FortItemInspectionScreen_SetItemToRepresent");
static_assert(offsetof(FortItemInspectionScreen_SetItemToRepresent, Item) == 0x000000, "Member 'FortItemInspectionScreen_SetItemToRepresent::Item' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectionScreen.DoesItemHaveLegacyAlterations
// 0x0001 (0x0001 - 0x0000)
struct FortItemInspectionScreen_DoesItemHaveLegacyAlterations final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_DoesItemHaveLegacyAlterations) == 0x000001, "Wrong alignment on FortItemInspectionScreen_DoesItemHaveLegacyAlterations");
static_assert(sizeof(FortItemInspectionScreen_DoesItemHaveLegacyAlterations) == 0x000001, "Wrong size on FortItemInspectionScreen_DoesItemHaveLegacyAlterations");
static_assert(offsetof(FortItemInspectionScreen_DoesItemHaveLegacyAlterations, ReturnValue) == 0x000000, "Member 'FortItemInspectionScreen_DoesItemHaveLegacyAlterations::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectionScreen.GetItemQuantityOverride
// 0x0004 (0x0004 - 0x0000)
struct FortItemInspectionScreen_GetItemQuantityOverride final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_GetItemQuantityOverride) == 0x000004, "Wrong alignment on FortItemInspectionScreen_GetItemQuantityOverride");
static_assert(sizeof(FortItemInspectionScreen_GetItemQuantityOverride) == 0x000004, "Wrong size on FortItemInspectionScreen_GetItemQuantityOverride");
static_assert(offsetof(FortItemInspectionScreen_GetItemQuantityOverride, ReturnValue) == 0x000000, "Member 'FortItemInspectionScreen_GetItemQuantityOverride::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectionScreen.GetRefundDescriptionText
// 0x0018 (0x0018 - 0x0000)
struct FortItemInspectionScreen_GetRefundDescriptionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_GetRefundDescriptionText) == 0x000008, "Wrong alignment on FortItemInspectionScreen_GetRefundDescriptionText");
static_assert(sizeof(FortItemInspectionScreen_GetRefundDescriptionText) == 0x000018, "Wrong size on FortItemInspectionScreen_GetRefundDescriptionText");
static_assert(offsetof(FortItemInspectionScreen_GetRefundDescriptionText, ReturnValue) == 0x000000, "Member 'FortItemInspectionScreen_GetRefundDescriptionText::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectionScreen.GetRefundResultItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemInspectionScreen_GetRefundResultItem final
{
public:
	class UFortAccountItem*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_GetRefundResultItem) == 0x000008, "Wrong alignment on FortItemInspectionScreen_GetRefundResultItem");
static_assert(sizeof(FortItemInspectionScreen_GetRefundResultItem) == 0x000008, "Wrong size on FortItemInspectionScreen_GetRefundResultItem");
static_assert(offsetof(FortItemInspectionScreen_GetRefundResultItem, ReturnValue) == 0x000000, "Member 'FortItemInspectionScreen_GetRefundResultItem::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectionScreen.IsItemSlottedInCollectionBook
// 0x0010 (0x0010 - 0x0000)
struct FortItemInspectionScreen_IsItemSlottedInCollectionBook final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemInspectionScreen_IsItemSlottedInCollectionBook) == 0x000008, "Wrong alignment on FortItemInspectionScreen_IsItemSlottedInCollectionBook");
static_assert(sizeof(FortItemInspectionScreen_IsItemSlottedInCollectionBook) == 0x000010, "Wrong size on FortItemInspectionScreen_IsItemSlottedInCollectionBook");
static_assert(offsetof(FortItemInspectionScreen_IsItemSlottedInCollectionBook, Item) == 0x000000, "Member 'FortItemInspectionScreen_IsItemSlottedInCollectionBook::Item' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_IsItemSlottedInCollectionBook, ReturnValue) == 0x000008, "Member 'FortItemInspectionScreen_IsItemSlottedInCollectionBook::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectCycleWidget.OnItemCycled
// 0x0018 (0x0018 - 0x0000)
struct FortItemInspectCycleWidget_OnItemCycled final
{
public:
	class UFortItem*                              OldItem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              NewItem;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetFromPreviousItem;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemInspectCycleWidget_OnItemCycled) == 0x000008, "Wrong alignment on FortItemInspectCycleWidget_OnItemCycled");
static_assert(sizeof(FortItemInspectCycleWidget_OnItemCycled) == 0x000018, "Wrong size on FortItemInspectCycleWidget_OnItemCycled");
static_assert(offsetof(FortItemInspectCycleWidget_OnItemCycled, OldItem) == 0x000000, "Member 'FortItemInspectCycleWidget_OnItemCycled::OldItem' has a wrong offset!");
static_assert(offsetof(FortItemInspectCycleWidget_OnItemCycled, NewItem) == 0x000008, "Member 'FortItemInspectCycleWidget_OnItemCycled::NewItem' has a wrong offset!");
static_assert(offsetof(FortItemInspectCycleWidget_OnItemCycled, OffsetFromPreviousItem) == 0x000010, "Member 'FortItemInspectCycleWidget_OnItemCycled::OffsetFromPreviousItem' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectCycleWidget.SelectItemWithOffset
// 0x0004 (0x0004 - 0x0000)
struct FortItemInspectCycleWidget_SelectItemWithOffset final
{
public:
	int32                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectCycleWidget_SelectItemWithOffset) == 0x000004, "Wrong alignment on FortItemInspectCycleWidget_SelectItemWithOffset");
static_assert(sizeof(FortItemInspectCycleWidget_SelectItemWithOffset) == 0x000004, "Wrong size on FortItemInspectCycleWidget_SelectItemWithOffset");
static_assert(offsetof(FortItemInspectCycleWidget_SelectItemWithOffset, Offset) == 0x000000, "Member 'FortItemInspectCycleWidget_SelectItemWithOffset::Offset' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectCycleWidget.SetItemToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortItemInspectCycleWidget_SetItemToRepresent final
{
public:
	const class UFortItem*                        NewItemToRepresent;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectCycleWidget_SetItemToRepresent) == 0x000008, "Wrong alignment on FortItemInspectCycleWidget_SetItemToRepresent");
static_assert(sizeof(FortItemInspectCycleWidget_SetItemToRepresent) == 0x000008, "Wrong size on FortItemInspectCycleWidget_SetItemToRepresent");
static_assert(offsetof(FortItemInspectCycleWidget_SetItemToRepresent, NewItemToRepresent) == 0x000000, "Member 'FortItemInspectCycleWidget_SetItemToRepresent::NewItemToRepresent' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectCycleWidget.SetOwningItemInspectScreen
// 0x0008 (0x0008 - 0x0000)
struct FortItemInspectCycleWidget_SetOwningItemInspectScreen final
{
public:
	class UFortItemInspectionScreen*              ItemInspect;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectCycleWidget_SetOwningItemInspectScreen) == 0x000008, "Wrong alignment on FortItemInspectCycleWidget_SetOwningItemInspectScreen");
static_assert(sizeof(FortItemInspectCycleWidget_SetOwningItemInspectScreen) == 0x000008, "Wrong size on FortItemInspectCycleWidget_SetOwningItemInspectScreen");
static_assert(offsetof(FortItemInspectCycleWidget_SetOwningItemInspectScreen, ItemInspect) == 0x000000, "Member 'FortItemInspectCycleWidget_SetOwningItemInspectScreen::ItemInspect' has a wrong offset!");

// Function SaveTheWorldUI.FortItemInspectCycleWidget.GetItemWithOffset_BP
// 0x0010 (0x0010 - 0x0000)
struct FortItemInspectCycleWidget_GetItemWithOffset_BP final
{
public:
	int32                                         IndexOffset;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectCycleWidget_GetItemWithOffset_BP) == 0x000008, "Wrong alignment on FortItemInspectCycleWidget_GetItemWithOffset_BP");
static_assert(sizeof(FortItemInspectCycleWidget_GetItemWithOffset_BP) == 0x000010, "Wrong size on FortItemInspectCycleWidget_GetItemWithOffset_BP");
static_assert(offsetof(FortItemInspectCycleWidget_GetItemWithOffset_BP, IndexOffset) == 0x000000, "Member 'FortItemInspectCycleWidget_GetItemWithOffset_BP::IndexOffset' has a wrong offset!");
static_assert(offsetof(FortItemInspectCycleWidget_GetItemWithOffset_BP, ReturnValue) == 0x000008, "Member 'FortItemInspectCycleWidget_GetItemWithOffset_BP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationOption.Setup
// 0x0040 (0x0040 - 0x0000)
struct FortAlterationOption_Setup final
{
public:
	struct FAlterationOption                      InAlterationOption;                                // 0x0000(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	EFortAlterationOptionType                     InAlterationOptionType;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAlterationOption_Setup) == 0x000008, "Wrong alignment on FortAlterationOption_Setup");
static_assert(sizeof(FortAlterationOption_Setup) == 0x000040, "Wrong size on FortAlterationOption_Setup");
static_assert(offsetof(FortAlterationOption_Setup, InAlterationOption) == 0x000000, "Member 'FortAlterationOption_Setup::InAlterationOption' has a wrong offset!");
static_assert(offsetof(FortAlterationOption_Setup, InAlterationOptionType) == 0x000038, "Member 'FortAlterationOption_Setup::InAlterationOptionType' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationOption.GetAlterationDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationOption_GetAlterationDefinition final
{
public:
	class UFortAlterationItemDefinition*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOption_GetAlterationDefinition) == 0x000008, "Wrong alignment on FortAlterationOption_GetAlterationDefinition");
static_assert(sizeof(FortAlterationOption_GetAlterationDefinition) == 0x000008, "Wrong size on FortAlterationOption_GetAlterationDefinition");
static_assert(offsetof(FortAlterationOption_GetAlterationDefinition, ReturnValue) == 0x000000, "Member 'FortAlterationOption_GetAlterationDefinition::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationOption.GetAlterationOptionType
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationOption_GetAlterationOptionType final
{
public:
	EFortAlterationOptionType                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOption_GetAlterationOptionType) == 0x000001, "Wrong alignment on FortAlterationOption_GetAlterationOptionType");
static_assert(sizeof(FortAlterationOption_GetAlterationOptionType) == 0x000001, "Wrong size on FortAlterationOption_GetAlterationOptionType");
static_assert(offsetof(FortAlterationOption_GetAlterationOptionType, ReturnValue) == 0x000000, "Member 'FortAlterationOption_GetAlterationOptionType::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationOption.GetCurrentPipCount
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationOption_GetCurrentPipCount final
{
public:
	float                                         MaxPipCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOption_GetCurrentPipCount) == 0x000004, "Wrong alignment on FortAlterationOption_GetCurrentPipCount");
static_assert(sizeof(FortAlterationOption_GetCurrentPipCount) == 0x000008, "Wrong size on FortAlterationOption_GetCurrentPipCount");
static_assert(offsetof(FortAlterationOption_GetCurrentPipCount, MaxPipCount) == 0x000000, "Member 'FortAlterationOption_GetCurrentPipCount::MaxPipCount' has a wrong offset!");
static_assert(offsetof(FortAlterationOption_GetCurrentPipCount, ReturnValue) == 0x000004, "Member 'FortAlterationOption_GetCurrentPipCount::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationOption.GetNextPipCount
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationOption_GetNextPipCount final
{
public:
	float                                         MaxPipCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOption_GetNextPipCount) == 0x000004, "Wrong alignment on FortAlterationOption_GetNextPipCount");
static_assert(sizeof(FortAlterationOption_GetNextPipCount) == 0x000008, "Wrong size on FortAlterationOption_GetNextPipCount");
static_assert(offsetof(FortAlterationOption_GetNextPipCount, MaxPipCount) == 0x000000, "Member 'FortAlterationOption_GetNextPipCount::MaxPipCount' has a wrong offset!");
static_assert(offsetof(FortAlterationOption_GetNextPipCount, ReturnValue) == 0x000004, "Member 'FortAlterationOption_GetNextPipCount::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationOption.GetRequiredIngredients
// 0x0010 (0x0010 - 0x0000)
struct FortAlterationOption_GetRequiredIngredients final
{
public:
	TArray<struct FFortItemQuantityPair>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOption_GetRequiredIngredients) == 0x000008, "Wrong alignment on FortAlterationOption_GetRequiredIngredients");
static_assert(sizeof(FortAlterationOption_GetRequiredIngredients) == 0x000010, "Wrong size on FortAlterationOption_GetRequiredIngredients");
static_assert(offsetof(FortAlterationOption_GetRequiredIngredients, ReturnValue) == 0x000000, "Member 'FortAlterationOption_GetRequiredIngredients::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationOptionsBase.HandleAlterationsOptionHovered
// 0x0010 (0x0010 - 0x0000)
struct FortAlterationOptionsBase_HandleAlterationsOptionHovered final
{
public:
	class UCommonButtonLegacy*                    AlterationOptionButton;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAlterationOptionsBase_HandleAlterationsOptionHovered) == 0x000008, "Wrong alignment on FortAlterationOptionsBase_HandleAlterationsOptionHovered");
static_assert(sizeof(FortAlterationOptionsBase_HandleAlterationsOptionHovered) == 0x000010, "Wrong size on FortAlterationOptionsBase_HandleAlterationsOptionHovered");
static_assert(offsetof(FortAlterationOptionsBase_HandleAlterationsOptionHovered, AlterationOptionButton) == 0x000000, "Member 'FortAlterationOptionsBase_HandleAlterationsOptionHovered::AlterationOptionButton' has a wrong offset!");
static_assert(offsetof(FortAlterationOptionsBase_HandleAlterationsOptionHovered, GroupIndex) == 0x000008, "Member 'FortAlterationOptionsBase_HandleAlterationsOptionHovered::GroupIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationOptionsBase.HandleAlterationsOptionSelected
// 0x0010 (0x0010 - 0x0000)
struct FortAlterationOptionsBase_HandleAlterationsOptionSelected final
{
public:
	class UCommonButtonLegacy*                    AlterationOptionButton;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAlterationOptionsBase_HandleAlterationsOptionSelected) == 0x000008, "Wrong alignment on FortAlterationOptionsBase_HandleAlterationsOptionSelected");
static_assert(sizeof(FortAlterationOptionsBase_HandleAlterationsOptionSelected) == 0x000010, "Wrong size on FortAlterationOptionsBase_HandleAlterationsOptionSelected");
static_assert(offsetof(FortAlterationOptionsBase_HandleAlterationsOptionSelected, AlterationOptionButton) == 0x000000, "Member 'FortAlterationOptionsBase_HandleAlterationsOptionSelected::AlterationOptionButton' has a wrong offset!");
static_assert(offsetof(FortAlterationOptionsBase_HandleAlterationsOptionSelected, GroupIndex) == 0x000008, "Member 'FortAlterationOptionsBase_HandleAlterationsOptionSelected::GroupIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationOptionsBase.OnGenerateOption
// 0x0010 (0x0010 - 0x0000)
struct FortAlterationOptionsBase_OnGenerateOption final
{
public:
	EFortAlterationOptionType                     OptionType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAlterationOption*                  OptionWidget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOptionsBase_OnGenerateOption) == 0x000008, "Wrong alignment on FortAlterationOptionsBase_OnGenerateOption");
static_assert(sizeof(FortAlterationOptionsBase_OnGenerateOption) == 0x000010, "Wrong size on FortAlterationOptionsBase_OnGenerateOption");
static_assert(offsetof(FortAlterationOptionsBase_OnGenerateOption, OptionType) == 0x000000, "Member 'FortAlterationOptionsBase_OnGenerateOption::OptionType' has a wrong offset!");
static_assert(offsetof(FortAlterationOptionsBase_OnGenerateOption, OptionWidget) == 0x000008, "Member 'FortAlterationOptionsBase_OnGenerateOption::OptionWidget' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationOptionsBase.OnItemChanged
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationOptionsBase_OnItemChanged final
{
public:
	bool                                          bIntroAlterations;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOptionsBase_OnItemChanged) == 0x000001, "Wrong alignment on FortAlterationOptionsBase_OnItemChanged");
static_assert(sizeof(FortAlterationOptionsBase_OnItemChanged) == 0x000001, "Wrong size on FortAlterationOptionsBase_OnItemChanged");
static_assert(offsetof(FortAlterationOptionsBase_OnItemChanged, bIntroAlterations) == 0x000000, "Member 'FortAlterationOptionsBase_OnItemChanged::bIntroAlterations' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationOptionsBase.ProcessAlterationOptions
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationOptionsBase_ProcessAlterationOptions final
{
public:
	bool                                          bIntroAlterations;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOptionsBase_ProcessAlterationOptions) == 0x000001, "Wrong alignment on FortAlterationOptionsBase_ProcessAlterationOptions");
static_assert(sizeof(FortAlterationOptionsBase_ProcessAlterationOptions) == 0x000001, "Wrong size on FortAlterationOptionsBase_ProcessAlterationOptions");
static_assert(offsetof(FortAlterationOptionsBase_ProcessAlterationOptions, bIntroAlterations) == 0x000000, "Member 'FortAlterationOptionsBase_ProcessAlterationOptions::bIntroAlterations' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationOptionsBase.DoAlterationOptionsExist
// 0x0002 (0x0002 - 0x0000)
struct FortAlterationOptionsBase_DoAlterationOptionsExist final
{
public:
	EFortAlterationOptionType                     OptionType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOptionsBase_DoAlterationOptionsExist) == 0x000001, "Wrong alignment on FortAlterationOptionsBase_DoAlterationOptionsExist");
static_assert(sizeof(FortAlterationOptionsBase_DoAlterationOptionsExist) == 0x000002, "Wrong size on FortAlterationOptionsBase_DoAlterationOptionsExist");
static_assert(offsetof(FortAlterationOptionsBase_DoAlterationOptionsExist, OptionType) == 0x000000, "Member 'FortAlterationOptionsBase_DoAlterationOptionsExist::OptionType' has a wrong offset!");
static_assert(offsetof(FortAlterationOptionsBase_DoAlterationOptionsExist, ReturnValue) == 0x000001, "Member 'FortAlterationOptionsBase_DoAlterationOptionsExist::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortAlterationOptionsBase.IsValidAlterationSlot
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationOptionsBase_IsValidAlterationSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOptionsBase_IsValidAlterationSlot) == 0x000001, "Wrong alignment on FortAlterationOptionsBase_IsValidAlterationSlot");
static_assert(sizeof(FortAlterationOptionsBase_IsValidAlterationSlot) == 0x000001, "Wrong size on FortAlterationOptionsBase_IsValidAlterationSlot");
static_assert(offsetof(FortAlterationOptionsBase_IsValidAlterationSlot, ReturnValue) == 0x000000, "Member 'FortAlterationOptionsBase_IsValidAlterationSlot::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.GetArbitratorType
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationInfoSTW_GetArbitratorType final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortVoteArbitratorType                       ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_GetArbitratorType) == 0x000001, "Wrong alignment on FortMissionActivationInfoSTW_GetArbitratorType");
static_assert(sizeof(FortMissionActivationInfoSTW_GetArbitratorType) == 0x000002, "Wrong size on FortMissionActivationInfoSTW_GetArbitratorType");
static_assert(offsetof(FortMissionActivationInfoSTW_GetArbitratorType, VoteType) == 0x000000, "Member 'FortMissionActivationInfoSTW_GetArbitratorType::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_GetArbitratorType, ReturnValue) == 0x000001, "Member 'FortMissionActivationInfoSTW_GetArbitratorType::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.GetVoteCounts
// 0x000C (0x000C - 0x0000)
struct FortMissionActivationInfoSTW_GetVoteCounts final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutYesVoteCount;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutNoVoteCount;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_GetVoteCounts) == 0x000004, "Wrong alignment on FortMissionActivationInfoSTW_GetVoteCounts");
static_assert(sizeof(FortMissionActivationInfoSTW_GetVoteCounts) == 0x00000C, "Wrong size on FortMissionActivationInfoSTW_GetVoteCounts");
static_assert(offsetof(FortMissionActivationInfoSTW_GetVoteCounts, VoteType) == 0x000000, "Member 'FortMissionActivationInfoSTW_GetVoteCounts::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_GetVoteCounts, OutYesVoteCount) == 0x000004, "Member 'FortMissionActivationInfoSTW_GetVoteCounts::OutYesVoteCount' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_GetVoteCounts, OutNoVoteCount) == 0x000008, "Member 'FortMissionActivationInfoSTW_GetVoteCounts::OutNoVoteCount' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.GetVoters
// 0x0018 (0x0018 - 0x0000)
struct FortMissionActivationInfoSTW_GetVoters final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVoter>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_GetVoters) == 0x000008, "Wrong alignment on FortMissionActivationInfoSTW_GetVoters");
static_assert(sizeof(FortMissionActivationInfoSTW_GetVoters) == 0x000018, "Wrong size on FortMissionActivationInfoSTW_GetVoters");
static_assert(offsetof(FortMissionActivationInfoSTW_GetVoters, VoteType) == 0x000000, "Member 'FortMissionActivationInfoSTW_GetVoters::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_GetVoters, ReturnValue) == 0x000008, "Member 'FortMissionActivationInfoSTW_GetVoters::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.HandleGameplayVoteUpdated
// 0x0018 (0x0018 - 0x0000)
struct FortMissionActivationInfoSTW_HandleGameplayVoteUpdated final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortVoteStatus                               VoteStatus;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoteResult;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoter>                         Voters;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_HandleGameplayVoteUpdated) == 0x000008, "Wrong alignment on FortMissionActivationInfoSTW_HandleGameplayVoteUpdated");
static_assert(sizeof(FortMissionActivationInfoSTW_HandleGameplayVoteUpdated) == 0x000018, "Wrong size on FortMissionActivationInfoSTW_HandleGameplayVoteUpdated");
static_assert(offsetof(FortMissionActivationInfoSTW_HandleGameplayVoteUpdated, VoteType) == 0x000000, "Member 'FortMissionActivationInfoSTW_HandleGameplayVoteUpdated::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_HandleGameplayVoteUpdated, VoteStatus) == 0x000001, "Member 'FortMissionActivationInfoSTW_HandleGameplayVoteUpdated::VoteStatus' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_HandleGameplayVoteUpdated, VoteResult) == 0x000004, "Member 'FortMissionActivationInfoSTW_HandleGameplayVoteUpdated::VoteResult' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_HandleGameplayVoteUpdated, Voters) == 0x000008, "Member 'FortMissionActivationInfoSTW_HandleGameplayVoteUpdated::Voters' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.HandleTeamMemberAdded
// 0x0250 (0x0250 - 0x0000)
struct FortMissionActivationInfoSTW_HandleTeamMemberAdded final
{
public:
	struct FFortTeamMemberInfo                    NewInfo;                                           // 0x0000(0x0250)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_HandleTeamMemberAdded) == 0x000010, "Wrong alignment on FortMissionActivationInfoSTW_HandleTeamMemberAdded");
static_assert(sizeof(FortMissionActivationInfoSTW_HandleTeamMemberAdded) == 0x000250, "Wrong size on FortMissionActivationInfoSTW_HandleTeamMemberAdded");
static_assert(offsetof(FortMissionActivationInfoSTW_HandleTeamMemberAdded, NewInfo) == 0x000000, "Member 'FortMissionActivationInfoSTW_HandleTeamMemberAdded::NewInfo' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.HandleTeamMemberRemoved
// 0x0004 (0x0004 - 0x0000)
struct FortMissionActivationInfoSTW_HandleTeamMemberRemoved final
{
public:
	int32                                         RemovedIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_HandleTeamMemberRemoved) == 0x000004, "Wrong alignment on FortMissionActivationInfoSTW_HandleTeamMemberRemoved");
static_assert(sizeof(FortMissionActivationInfoSTW_HandleTeamMemberRemoved) == 0x000004, "Wrong size on FortMissionActivationInfoSTW_HandleTeamMemberRemoved");
static_assert(offsetof(FortMissionActivationInfoSTW_HandleTeamMemberRemoved, RemovedIndex) == 0x000000, "Member 'FortMissionActivationInfoSTW_HandleTeamMemberRemoved::RemovedIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.HasPlayerVoted
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationInfoSTW_HasPlayerVoted final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_HasPlayerVoted) == 0x000001, "Wrong alignment on FortMissionActivationInfoSTW_HasPlayerVoted");
static_assert(sizeof(FortMissionActivationInfoSTW_HasPlayerVoted) == 0x000002, "Wrong size on FortMissionActivationInfoSTW_HasPlayerVoted");
static_assert(offsetof(FortMissionActivationInfoSTW_HasPlayerVoted, VoteType) == 0x000000, "Member 'FortMissionActivationInfoSTW_HasPlayerVoted::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_HasPlayerVoted, ReturnValue) == 0x000001, "Member 'FortMissionActivationInfoSTW_HasPlayerVoted::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.RequestVote
// 0x0010 (0x0010 - 0x0000)
struct FortMissionActivationInfoSTW_RequestVote final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VoteDuration;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FailedVoteLockOutDuration;                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortVoteArbitratorType                       ArbitratorType;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionActivationInfoSTW_RequestVote) == 0x000004, "Wrong alignment on FortMissionActivationInfoSTW_RequestVote");
static_assert(sizeof(FortMissionActivationInfoSTW_RequestVote) == 0x000010, "Wrong size on FortMissionActivationInfoSTW_RequestVote");
static_assert(offsetof(FortMissionActivationInfoSTW_RequestVote, VoteType) == 0x000000, "Member 'FortMissionActivationInfoSTW_RequestVote::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_RequestVote, VoteDuration) == 0x000004, "Member 'FortMissionActivationInfoSTW_RequestVote::VoteDuration' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_RequestVote, FailedVoteLockOutDuration) == 0x000008, "Member 'FortMissionActivationInfoSTW_RequestVote::FailedVoteLockOutDuration' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_RequestVote, ArbitratorType) == 0x00000C, "Member 'FortMissionActivationInfoSTW_RequestVote::ArbitratorType' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.SubmitVote
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationInfoSTW_SubmitVote final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApprove;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_SubmitVote) == 0x000001, "Wrong alignment on FortMissionActivationInfoSTW_SubmitVote");
static_assert(sizeof(FortMissionActivationInfoSTW_SubmitVote) == 0x000002, "Wrong size on FortMissionActivationInfoSTW_SubmitVote");
static_assert(offsetof(FortMissionActivationInfoSTW_SubmitVote, VoteType) == 0x000000, "Member 'FortMissionActivationInfoSTW_SubmitVote::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_SubmitVote, bApprove) == 0x000001, "Member 'FortMissionActivationInfoSTW_SubmitVote::bApprove' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.CanRequestVote
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationInfoSTW_CanRequestVote final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_CanRequestVote) == 0x000001, "Wrong alignment on FortMissionActivationInfoSTW_CanRequestVote");
static_assert(sizeof(FortMissionActivationInfoSTW_CanRequestVote) == 0x000002, "Wrong size on FortMissionActivationInfoSTW_CanRequestVote");
static_assert(offsetof(FortMissionActivationInfoSTW_CanRequestVote, VoteType) == 0x000000, "Member 'FortMissionActivationInfoSTW_CanRequestVote::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_CanRequestVote, ReturnValue) == 0x000001, "Member 'FortMissionActivationInfoSTW_CanRequestVote::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.DoesPrimaryMissionContainTags
// 0x0028 (0x0028 - 0x0000)
struct FortMissionActivationInfoSTW_DoesPrimaryMissionContainTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionActivationInfoSTW_DoesPrimaryMissionContainTags) == 0x000008, "Wrong alignment on FortMissionActivationInfoSTW_DoesPrimaryMissionContainTags");
static_assert(sizeof(FortMissionActivationInfoSTW_DoesPrimaryMissionContainTags) == 0x000028, "Wrong size on FortMissionActivationInfoSTW_DoesPrimaryMissionContainTags");
static_assert(offsetof(FortMissionActivationInfoSTW_DoesPrimaryMissionContainTags, Tags) == 0x000000, "Member 'FortMissionActivationInfoSTW_DoesPrimaryMissionContainTags::Tags' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_DoesPrimaryMissionContainTags, ReturnValue) == 0x000020, "Member 'FortMissionActivationInfoSTW_DoesPrimaryMissionContainTags::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.GetAvailableBluGloCount
// 0x0004 (0x0004 - 0x0000)
struct FortMissionActivationInfoSTW_GetAvailableBluGloCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_GetAvailableBluGloCount) == 0x000004, "Wrong alignment on FortMissionActivationInfoSTW_GetAvailableBluGloCount");
static_assert(sizeof(FortMissionActivationInfoSTW_GetAvailableBluGloCount) == 0x000004, "Wrong size on FortMissionActivationInfoSTW_GetAvailableBluGloCount");
static_assert(offsetof(FortMissionActivationInfoSTW_GetAvailableBluGloCount, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfoSTW_GetAvailableBluGloCount::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.GetDeltaRewards
// 0x0018 (0x0018 - 0x0000)
struct FortMissionActivationInfoSTW_GetDeltaRewards final
{
public:
	int32                                         BaseDifficultyIncreaseTier;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComparedDifficultyIncreaseTier;                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemDelta>                 DeltaRewards;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_GetDeltaRewards) == 0x000008, "Wrong alignment on FortMissionActivationInfoSTW_GetDeltaRewards");
static_assert(sizeof(FortMissionActivationInfoSTW_GetDeltaRewards) == 0x000018, "Wrong size on FortMissionActivationInfoSTW_GetDeltaRewards");
static_assert(offsetof(FortMissionActivationInfoSTW_GetDeltaRewards, BaseDifficultyIncreaseTier) == 0x000000, "Member 'FortMissionActivationInfoSTW_GetDeltaRewards::BaseDifficultyIncreaseTier' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_GetDeltaRewards, ComparedDifficultyIncreaseTier) == 0x000004, "Member 'FortMissionActivationInfoSTW_GetDeltaRewards::ComparedDifficultyIncreaseTier' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_GetDeltaRewards, DeltaRewards) == 0x000008, "Member 'FortMissionActivationInfoSTW_GetDeltaRewards::DeltaRewards' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.GetIncreaseDifficultyBluGloRequirement
// 0x0004 (0x0004 - 0x0000)
struct FortMissionActivationInfoSTW_GetIncreaseDifficultyBluGloRequirement final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_GetIncreaseDifficultyBluGloRequirement) == 0x000004, "Wrong alignment on FortMissionActivationInfoSTW_GetIncreaseDifficultyBluGloRequirement");
static_assert(sizeof(FortMissionActivationInfoSTW_GetIncreaseDifficultyBluGloRequirement) == 0x000004, "Wrong size on FortMissionActivationInfoSTW_GetIncreaseDifficultyBluGloRequirement");
static_assert(offsetof(FortMissionActivationInfoSTW_GetIncreaseDifficultyBluGloRequirement, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfoSTW_GetIncreaseDifficultyBluGloRequirement::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.GetInstigatorId
// 0x0038 (0x0038 - 0x0000)
struct FortMissionActivationInfoSTW_GetInstigatorId final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_GetInstigatorId) == 0x000008, "Wrong alignment on FortMissionActivationInfoSTW_GetInstigatorId");
static_assert(sizeof(FortMissionActivationInfoSTW_GetInstigatorId) == 0x000038, "Wrong size on FortMissionActivationInfoSTW_GetInstigatorId");
static_assert(offsetof(FortMissionActivationInfoSTW_GetInstigatorId, VoteType) == 0x000000, "Member 'FortMissionActivationInfoSTW_GetInstigatorId::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_GetInstigatorId, ReturnValue) == 0x000008, "Member 'FortMissionActivationInfoSTW_GetInstigatorId::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.GetLockoutTimeRemaining
// 0x0020 (0x0020 - 0x0000)
struct FortMissionActivationInfoSTW_GetLockoutTimeRemaining final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_GetLockoutTimeRemaining) == 0x000008, "Wrong alignment on FortMissionActivationInfoSTW_GetLockoutTimeRemaining");
static_assert(sizeof(FortMissionActivationInfoSTW_GetLockoutTimeRemaining) == 0x000020, "Wrong size on FortMissionActivationInfoSTW_GetLockoutTimeRemaining");
static_assert(offsetof(FortMissionActivationInfoSTW_GetLockoutTimeRemaining, VoteType) == 0x000000, "Member 'FortMissionActivationInfoSTW_GetLockoutTimeRemaining::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_GetLockoutTimeRemaining, ReturnValue) == 0x000008, "Member 'FortMissionActivationInfoSTW_GetLockoutTimeRemaining::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.GetMissionObjectiveTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct FortMissionActivationInfoSTW_GetMissionObjectiveTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_GetMissionObjectiveTimeRemaining) == 0x000004, "Wrong alignment on FortMissionActivationInfoSTW_GetMissionObjectiveTimeRemaining");
static_assert(sizeof(FortMissionActivationInfoSTW_GetMissionObjectiveTimeRemaining) == 0x000004, "Wrong size on FortMissionActivationInfoSTW_GetMissionObjectiveTimeRemaining");
static_assert(offsetof(FortMissionActivationInfoSTW_GetMissionObjectiveTimeRemaining, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfoSTW_GetMissionObjectiveTimeRemaining::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.GetMissionVoteType
// 0x0001 (0x0001 - 0x0000)
struct FortMissionActivationInfoSTW_GetMissionVoteType final
{
public:
	EFortVoteType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_GetMissionVoteType) == 0x000001, "Wrong alignment on FortMissionActivationInfoSTW_GetMissionVoteType");
static_assert(sizeof(FortMissionActivationInfoSTW_GetMissionVoteType) == 0x000001, "Wrong size on FortMissionActivationInfoSTW_GetMissionVoteType");
static_assert(offsetof(FortMissionActivationInfoSTW_GetMissionVoteType, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfoSTW_GetMissionVoteType::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.GetPrimaryMission
// 0x0008 (0x0008 - 0x0000)
struct FortMissionActivationInfoSTW_GetPrimaryMission final
{
public:
	class AFortMission*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_GetPrimaryMission) == 0x000008, "Wrong alignment on FortMissionActivationInfoSTW_GetPrimaryMission");
static_assert(sizeof(FortMissionActivationInfoSTW_GetPrimaryMission) == 0x000008, "Wrong size on FortMissionActivationInfoSTW_GetPrimaryMission");
static_assert(offsetof(FortMissionActivationInfoSTW_GetPrimaryMission, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfoSTW_GetPrimaryMission::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.GetPrimaryMissionInfo
// 0x0008 (0x0008 - 0x0000)
struct FortMissionActivationInfoSTW_GetPrimaryMissionInfo final
{
public:
	class UFortMissionInfo*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_GetPrimaryMissionInfo) == 0x000008, "Wrong alignment on FortMissionActivationInfoSTW_GetPrimaryMissionInfo");
static_assert(sizeof(FortMissionActivationInfoSTW_GetPrimaryMissionInfo) == 0x000008, "Wrong size on FortMissionActivationInfoSTW_GetPrimaryMissionInfo");
static_assert(offsetof(FortMissionActivationInfoSTW_GetPrimaryMissionInfo, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfoSTW_GetPrimaryMissionInfo::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.GetStartObjectiveBluGloRequirement
// 0x0004 (0x0004 - 0x0000)
struct FortMissionActivationInfoSTW_GetStartObjectiveBluGloRequirement final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_GetStartObjectiveBluGloRequirement) == 0x000004, "Wrong alignment on FortMissionActivationInfoSTW_GetStartObjectiveBluGloRequirement");
static_assert(sizeof(FortMissionActivationInfoSTW_GetStartObjectiveBluGloRequirement) == 0x000004, "Wrong size on FortMissionActivationInfoSTW_GetStartObjectiveBluGloRequirement");
static_assert(offsetof(FortMissionActivationInfoSTW_GetStartObjectiveBluGloRequirement, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfoSTW_GetStartObjectiveBluGloRequirement::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.GetVoteTimeRemaining
// 0x0008 (0x0008 - 0x0000)
struct FortMissionActivationInfoSTW_GetVoteTimeRemaining final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_GetVoteTimeRemaining) == 0x000004, "Wrong alignment on FortMissionActivationInfoSTW_GetVoteTimeRemaining");
static_assert(sizeof(FortMissionActivationInfoSTW_GetVoteTimeRemaining) == 0x000008, "Wrong size on FortMissionActivationInfoSTW_GetVoteTimeRemaining");
static_assert(offsetof(FortMissionActivationInfoSTW_GetVoteTimeRemaining, VoteType) == 0x000000, "Member 'FortMissionActivationInfoSTW_GetVoteTimeRemaining::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_GetVoteTimeRemaining, ReturnValue) == 0x000004, "Member 'FortMissionActivationInfoSTW_GetVoteTimeRemaining::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.IsAnyVoteActive
// 0x0001 (0x0001 - 0x0000)
struct FortMissionActivationInfoSTW_IsAnyVoteActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_IsAnyVoteActive) == 0x000001, "Wrong alignment on FortMissionActivationInfoSTW_IsAnyVoteActive");
static_assert(sizeof(FortMissionActivationInfoSTW_IsAnyVoteActive) == 0x000001, "Wrong size on FortMissionActivationInfoSTW_IsAnyVoteActive");
static_assert(offsetof(FortMissionActivationInfoSTW_IsAnyVoteActive, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfoSTW_IsAnyVoteActive::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.IsPlayerVoteInstigator
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationInfoSTW_IsPlayerVoteInstigator final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_IsPlayerVoteInstigator) == 0x000001, "Wrong alignment on FortMissionActivationInfoSTW_IsPlayerVoteInstigator");
static_assert(sizeof(FortMissionActivationInfoSTW_IsPlayerVoteInstigator) == 0x000002, "Wrong size on FortMissionActivationInfoSTW_IsPlayerVoteInstigator");
static_assert(offsetof(FortMissionActivationInfoSTW_IsPlayerVoteInstigator, VoteType) == 0x000000, "Member 'FortMissionActivationInfoSTW_IsPlayerVoteInstigator::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_IsPlayerVoteInstigator, ReturnValue) == 0x000001, "Member 'FortMissionActivationInfoSTW_IsPlayerVoteInstigator::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.IsVoteActive
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationInfoSTW_IsVoteActive final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_IsVoteActive) == 0x000001, "Wrong alignment on FortMissionActivationInfoSTW_IsVoteActive");
static_assert(sizeof(FortMissionActivationInfoSTW_IsVoteActive) == 0x000002, "Wrong size on FortMissionActivationInfoSTW_IsVoteActive");
static_assert(offsetof(FortMissionActivationInfoSTW_IsVoteActive, VoteType) == 0x000000, "Member 'FortMissionActivationInfoSTW_IsVoteActive::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_IsVoteActive, ReturnValue) == 0x000001, "Member 'FortMissionActivationInfoSTW_IsVoteActive::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.IsVoteLocked
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationInfoSTW_IsVoteLocked final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_IsVoteLocked) == 0x000001, "Wrong alignment on FortMissionActivationInfoSTW_IsVoteLocked");
static_assert(sizeof(FortMissionActivationInfoSTW_IsVoteLocked) == 0x000002, "Wrong size on FortMissionActivationInfoSTW_IsVoteLocked");
static_assert(offsetof(FortMissionActivationInfoSTW_IsVoteLocked, VoteType) == 0x000000, "Member 'FortMissionActivationInfoSTW_IsVoteLocked::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_IsVoteLocked, ReturnValue) == 0x000001, "Member 'FortMissionActivationInfoSTW_IsVoteLocked::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationInfoSTW.TimeSecondsToText
// 0x0020 (0x0020 - 0x0000)
struct FortMissionActivationInfoSTW_TimeSecondsToText final
{
public:
	float                                         InSeconds;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfoSTW_TimeSecondsToText) == 0x000008, "Wrong alignment on FortMissionActivationInfoSTW_TimeSecondsToText");
static_assert(sizeof(FortMissionActivationInfoSTW_TimeSecondsToText) == 0x000020, "Wrong size on FortMissionActivationInfoSTW_TimeSecondsToText");
static_assert(offsetof(FortMissionActivationInfoSTW_TimeSecondsToText, InSeconds) == 0x000000, "Member 'FortMissionActivationInfoSTW_TimeSecondsToText::InSeconds' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfoSTW_TimeSecondsToText, ReturnValue) == 0x000008, "Member 'FortMissionActivationInfoSTW_TimeSecondsToText::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationWidgetSTWPanel.OnActiveVoteChangedBP
// 0x0008 (0x0008 - 0x0000)
struct FortMissionActivationWidgetSTWPanel_OnActiveVoteChangedBP final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVoteActive;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoteResult;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidgetSTWPanel_OnActiveVoteChangedBP) == 0x000004, "Wrong alignment on FortMissionActivationWidgetSTWPanel_OnActiveVoteChangedBP");
static_assert(sizeof(FortMissionActivationWidgetSTWPanel_OnActiveVoteChangedBP) == 0x000008, "Wrong size on FortMissionActivationWidgetSTWPanel_OnActiveVoteChangedBP");
static_assert(offsetof(FortMissionActivationWidgetSTWPanel_OnActiveVoteChangedBP, VoteType) == 0x000000, "Member 'FortMissionActivationWidgetSTWPanel_OnActiveVoteChangedBP::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationWidgetSTWPanel_OnActiveVoteChangedBP, bIsVoteActive) == 0x000001, "Member 'FortMissionActivationWidgetSTWPanel_OnActiveVoteChangedBP::bIsVoteActive' has a wrong offset!");
static_assert(offsetof(FortMissionActivationWidgetSTWPanel_OnActiveVoteChangedBP, VoteResult) == 0x000004, "Member 'FortMissionActivationWidgetSTWPanel_OnActiveVoteChangedBP::VoteResult' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationWidgetSTWPanel.OnMultiplayerChangedBP
// 0x0001 (0x0001 - 0x0000)
struct FortMissionActivationWidgetSTWPanel_OnMultiplayerChangedBP final
{
public:
	bool                                          bIsMultiplayer;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidgetSTWPanel_OnMultiplayerChangedBP) == 0x000001, "Wrong alignment on FortMissionActivationWidgetSTWPanel_OnMultiplayerChangedBP");
static_assert(sizeof(FortMissionActivationWidgetSTWPanel_OnMultiplayerChangedBP) == 0x000001, "Wrong size on FortMissionActivationWidgetSTWPanel_OnMultiplayerChangedBP");
static_assert(offsetof(FortMissionActivationWidgetSTWPanel_OnMultiplayerChangedBP, bIsMultiplayer) == 0x000000, "Member 'FortMissionActivationWidgetSTWPanel_OnMultiplayerChangedBP::bIsMultiplayer' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationWidgetSTWPanel.OnVoteLockoutChangedBP
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationWidgetSTWPanel_OnVoteLockoutChangedBP final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocked;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidgetSTWPanel_OnVoteLockoutChangedBP) == 0x000001, "Wrong alignment on FortMissionActivationWidgetSTWPanel_OnVoteLockoutChangedBP");
static_assert(sizeof(FortMissionActivationWidgetSTWPanel_OnVoteLockoutChangedBP) == 0x000002, "Wrong size on FortMissionActivationWidgetSTWPanel_OnVoteLockoutChangedBP");
static_assert(offsetof(FortMissionActivationWidgetSTWPanel_OnVoteLockoutChangedBP, VoteType) == 0x000000, "Member 'FortMissionActivationWidgetSTWPanel_OnVoteLockoutChangedBP::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationWidgetSTWPanel_OnVoteLockoutChangedBP, bIsLocked) == 0x000001, "Member 'FortMissionActivationWidgetSTWPanel_OnVoteLockoutChangedBP::bIsLocked' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationWidgetSTWPanel.OnVoteUpdatedBP
// 0x0001 (0x0001 - 0x0000)
struct FortMissionActivationWidgetSTWPanel_OnVoteUpdatedBP final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidgetSTWPanel_OnVoteUpdatedBP) == 0x000001, "Wrong alignment on FortMissionActivationWidgetSTWPanel_OnVoteUpdatedBP");
static_assert(sizeof(FortMissionActivationWidgetSTWPanel_OnVoteUpdatedBP) == 0x000001, "Wrong size on FortMissionActivationWidgetSTWPanel_OnVoteUpdatedBP");
static_assert(offsetof(FortMissionActivationWidgetSTWPanel_OnVoteUpdatedBP, VoteType) == 0x000000, "Member 'FortMissionActivationWidgetSTWPanel_OnVoteUpdatedBP::VoteType' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationWidgetSTWPanel.SetInfoObject
// 0x0008 (0x0008 - 0x0000)
struct FortMissionActivationWidgetSTWPanel_SetInfoObject final
{
public:
	class UFortMissionActivationInfoSTW*          NewInfoObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidgetSTWPanel_SetInfoObject) == 0x000008, "Wrong alignment on FortMissionActivationWidgetSTWPanel_SetInfoObject");
static_assert(sizeof(FortMissionActivationWidgetSTWPanel_SetInfoObject) == 0x000008, "Wrong size on FortMissionActivationWidgetSTWPanel_SetInfoObject");
static_assert(offsetof(FortMissionActivationWidgetSTWPanel_SetInfoObject, NewInfoObject) == 0x000000, "Member 'FortMissionActivationWidgetSTWPanel_SetInfoObject::NewInfoObject' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationWidgetSTW.OnActiveVoteChangedBP
// 0x0008 (0x0008 - 0x0000)
struct FortMissionActivationWidgetSTW_OnActiveVoteChangedBP final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVoteActive;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoteResult;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidgetSTW_OnActiveVoteChangedBP) == 0x000004, "Wrong alignment on FortMissionActivationWidgetSTW_OnActiveVoteChangedBP");
static_assert(sizeof(FortMissionActivationWidgetSTW_OnActiveVoteChangedBP) == 0x000008, "Wrong size on FortMissionActivationWidgetSTW_OnActiveVoteChangedBP");
static_assert(offsetof(FortMissionActivationWidgetSTW_OnActiveVoteChangedBP, VoteType) == 0x000000, "Member 'FortMissionActivationWidgetSTW_OnActiveVoteChangedBP::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationWidgetSTW_OnActiveVoteChangedBP, bIsVoteActive) == 0x000001, "Member 'FortMissionActivationWidgetSTW_OnActiveVoteChangedBP::bIsVoteActive' has a wrong offset!");
static_assert(offsetof(FortMissionActivationWidgetSTW_OnActiveVoteChangedBP, VoteResult) == 0x000004, "Member 'FortMissionActivationWidgetSTW_OnActiveVoteChangedBP::VoteResult' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationWidgetSTW.OnMultiplayerChangedBP
// 0x0001 (0x0001 - 0x0000)
struct FortMissionActivationWidgetSTW_OnMultiplayerChangedBP final
{
public:
	bool                                          bIsMultiplayer;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidgetSTW_OnMultiplayerChangedBP) == 0x000001, "Wrong alignment on FortMissionActivationWidgetSTW_OnMultiplayerChangedBP");
static_assert(sizeof(FortMissionActivationWidgetSTW_OnMultiplayerChangedBP) == 0x000001, "Wrong size on FortMissionActivationWidgetSTW_OnMultiplayerChangedBP");
static_assert(offsetof(FortMissionActivationWidgetSTW_OnMultiplayerChangedBP, bIsMultiplayer) == 0x000000, "Member 'FortMissionActivationWidgetSTW_OnMultiplayerChangedBP::bIsMultiplayer' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationWidgetSTW.OnStateUpdated
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationWidgetSTW_OnStateUpdated final
{
public:
	EFortMissionActivationWidgetSTWState          ActiveState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMissionActivationWidgetSTWState          PreviousState;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidgetSTW_OnStateUpdated) == 0x000001, "Wrong alignment on FortMissionActivationWidgetSTW_OnStateUpdated");
static_assert(sizeof(FortMissionActivationWidgetSTW_OnStateUpdated) == 0x000002, "Wrong size on FortMissionActivationWidgetSTW_OnStateUpdated");
static_assert(offsetof(FortMissionActivationWidgetSTW_OnStateUpdated, ActiveState) == 0x000000, "Member 'FortMissionActivationWidgetSTW_OnStateUpdated::ActiveState' has a wrong offset!");
static_assert(offsetof(FortMissionActivationWidgetSTW_OnStateUpdated, PreviousState) == 0x000001, "Member 'FortMissionActivationWidgetSTW_OnStateUpdated::PreviousState' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationWidgetSTW.OnVoteLockoutChangedBP
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationWidgetSTW_OnVoteLockoutChangedBP final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocked;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidgetSTW_OnVoteLockoutChangedBP) == 0x000001, "Wrong alignment on FortMissionActivationWidgetSTW_OnVoteLockoutChangedBP");
static_assert(sizeof(FortMissionActivationWidgetSTW_OnVoteLockoutChangedBP) == 0x000002, "Wrong size on FortMissionActivationWidgetSTW_OnVoteLockoutChangedBP");
static_assert(offsetof(FortMissionActivationWidgetSTW_OnVoteLockoutChangedBP, VoteType) == 0x000000, "Member 'FortMissionActivationWidgetSTW_OnVoteLockoutChangedBP::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationWidgetSTW_OnVoteLockoutChangedBP, bIsLocked) == 0x000001, "Member 'FortMissionActivationWidgetSTW_OnVoteLockoutChangedBP::bIsLocked' has a wrong offset!");

// Function SaveTheWorldUI.FortMissionActivationWidgetSTW.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct FortMissionActivationWidgetSTW_GetCurrentState final
{
public:
	EFortMissionActivationWidgetSTWState          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidgetSTW_GetCurrentState) == 0x000001, "Wrong alignment on FortMissionActivationWidgetSTW_GetCurrentState");
static_assert(sizeof(FortMissionActivationWidgetSTW_GetCurrentState) == 0x000001, "Wrong size on FortMissionActivationWidgetSTW_GetCurrentState");
static_assert(offsetof(FortMissionActivationWidgetSTW_GetCurrentState, ReturnValue) == 0x000000, "Member 'FortMissionActivationWidgetSTW_GetCurrentState::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortOutpostScreen.SetInputReflectorBoxVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortOutpostScreen_SetInputReflectorBoxVisibility final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostScreen_SetInputReflectorBoxVisibility) == 0x000001, "Wrong alignment on FortOutpostScreen_SetInputReflectorBoxVisibility");
static_assert(sizeof(FortOutpostScreen_SetInputReflectorBoxVisibility) == 0x000001, "Wrong size on FortOutpostScreen_SetInputReflectorBoxVisibility");
static_assert(offsetof(FortOutpostScreen_SetInputReflectorBoxVisibility, bShow) == 0x000000, "Member 'FortOutpostScreen_SetInputReflectorBoxVisibility::bShow' has a wrong offset!");

// Function SaveTheWorldUI.FortJournalQuestDetails.CanGotoQuest
// 0x0001 (0x0001 - 0x0000)
struct FortJournalQuestDetails_CanGotoQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_CanGotoQuest) == 0x000001, "Wrong alignment on FortJournalQuestDetails_CanGotoQuest");
static_assert(sizeof(FortJournalQuestDetails_CanGotoQuest) == 0x000001, "Wrong size on FortJournalQuestDetails_CanGotoQuest");
static_assert(offsetof(FortJournalQuestDetails_CanGotoQuest, ReturnValue) == 0x000000, "Member 'FortJournalQuestDetails_CanGotoQuest::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortJournalQuestDetails.CanPartyLeaderPlayQuest
// 0x0001 (0x0001 - 0x0000)
struct FortJournalQuestDetails_CanPartyLeaderPlayQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_CanPartyLeaderPlayQuest) == 0x000001, "Wrong alignment on FortJournalQuestDetails_CanPartyLeaderPlayQuest");
static_assert(sizeof(FortJournalQuestDetails_CanPartyLeaderPlayQuest) == 0x000001, "Wrong size on FortJournalQuestDetails_CanPartyLeaderPlayQuest");
static_assert(offsetof(FortJournalQuestDetails_CanPartyLeaderPlayQuest, ReturnValue) == 0x000000, "Member 'FortJournalQuestDetails_CanPartyLeaderPlayQuest::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortJournalQuestDetails.CanPlayQuest
// 0x0001 (0x0001 - 0x0000)
struct FortJournalQuestDetails_CanPlayQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_CanPlayQuest) == 0x000001, "Wrong alignment on FortJournalQuestDetails_CanPlayQuest");
static_assert(sizeof(FortJournalQuestDetails_CanPlayQuest) == 0x000001, "Wrong size on FortJournalQuestDetails_CanPlayQuest");
static_assert(offsetof(FortJournalQuestDetails_CanPlayQuest, ReturnValue) == 0x000000, "Member 'FortJournalQuestDetails_CanPlayQuest::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortJournalQuestDetails.GetActiveMissionTileType
// 0x0001 (0x0001 - 0x0000)
struct FortJournalQuestDetails_GetActiveMissionTileType final
{
public:
	EFortTheaterMapTileType                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_GetActiveMissionTileType) == 0x000001, "Wrong alignment on FortJournalQuestDetails_GetActiveMissionTileType");
static_assert(sizeof(FortJournalQuestDetails_GetActiveMissionTileType) == 0x000001, "Wrong size on FortJournalQuestDetails_GetActiveMissionTileType");
static_assert(offsetof(FortJournalQuestDetails_GetActiveMissionTileType, ReturnValue) == 0x000000, "Member 'FortJournalQuestDetails_GetActiveMissionTileType::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortJournalQuestDetails.GetFutureObjectives
// 0x0010 (0x0010 - 0x0000)
struct FortJournalQuestDetails_GetFutureObjectives final
{
public:
	TArray<class UFortQuestObjectiveInfo*>        FutureObjectives;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_GetFutureObjectives) == 0x000008, "Wrong alignment on FortJournalQuestDetails_GetFutureObjectives");
static_assert(sizeof(FortJournalQuestDetails_GetFutureObjectives) == 0x000010, "Wrong size on FortJournalQuestDetails_GetFutureObjectives");
static_assert(offsetof(FortJournalQuestDetails_GetFutureObjectives, FutureObjectives) == 0x000000, "Member 'FortJournalQuestDetails_GetFutureObjectives::FutureObjectives' has a wrong offset!");

// Function SaveTheWorldUI.FortJournalQuestDetails.GetRewards
// 0x0020 (0x0020 - 0x0000)
struct FortJournalQuestDetails_GetRewards final
{
public:
	TArray<struct FFortItemInstanceQuantityPair>  OutRewards;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemInstanceQuantityPair>  OutSelectableRewards;                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_GetRewards) == 0x000008, "Wrong alignment on FortJournalQuestDetails_GetRewards");
static_assert(sizeof(FortJournalQuestDetails_GetRewards) == 0x000020, "Wrong size on FortJournalQuestDetails_GetRewards");
static_assert(offsetof(FortJournalQuestDetails_GetRewards, OutRewards) == 0x000000, "Member 'FortJournalQuestDetails_GetRewards::OutRewards' has a wrong offset!");
static_assert(offsetof(FortJournalQuestDetails_GetRewards, OutSelectableRewards) == 0x000010, "Member 'FortJournalQuestDetails_GetRewards::OutSelectableRewards' has a wrong offset!");

// Function SaveTheWorldUI.FortJournalQuestDetails.GetVisibleObjectives
// 0x0010 (0x0010 - 0x0000)
struct FortJournalQuestDetails_GetVisibleObjectives final
{
public:
	TArray<class UFortQuestObjectiveInfo*>        VisibleObjectives;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_GetVisibleObjectives) == 0x000008, "Wrong alignment on FortJournalQuestDetails_GetVisibleObjectives");
static_assert(sizeof(FortJournalQuestDetails_GetVisibleObjectives) == 0x000010, "Wrong size on FortJournalQuestDetails_GetVisibleObjectives");
static_assert(offsetof(FortJournalQuestDetails_GetVisibleObjectives, VisibleObjectives) == 0x000000, "Member 'FortJournalQuestDetails_GetVisibleObjectives::VisibleObjectives' has a wrong offset!");

// Function SaveTheWorldUI.FortJournalQuestDetails.SetCurrentQuest
// 0x0008 (0x0008 - 0x0000)
struct FortJournalQuestDetails_SetCurrentQuest final
{
public:
	class UFortQuestItem*                         InCurrentQuest;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_SetCurrentQuest) == 0x000008, "Wrong alignment on FortJournalQuestDetails_SetCurrentQuest");
static_assert(sizeof(FortJournalQuestDetails_SetCurrentQuest) == 0x000008, "Wrong size on FortJournalQuestDetails_SetCurrentQuest");
static_assert(offsetof(FortJournalQuestDetails_SetCurrentQuest, InCurrentQuest) == 0x000000, "Member 'FortJournalQuestDetails_SetCurrentQuest::InCurrentQuest' has a wrong offset!");

// Function SaveTheWorldUI.FortJournalQuestProgressBar.GetProgressDetails
// 0x0038 (0x0038 - 0x0000)
struct FortJournalQuestProgressBar_GetProgressDetails final
{
public:
	class FText                                   OutNumerator;                                      // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   OutDenominator;                                    // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	float                                         OutFraction;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortJournalQuestProgressBar_GetProgressDetails) == 0x000008, "Wrong alignment on FortJournalQuestProgressBar_GetProgressDetails");
static_assert(sizeof(FortJournalQuestProgressBar_GetProgressDetails) == 0x000038, "Wrong size on FortJournalQuestProgressBar_GetProgressDetails");
static_assert(offsetof(FortJournalQuestProgressBar_GetProgressDetails, OutNumerator) == 0x000000, "Member 'FortJournalQuestProgressBar_GetProgressDetails::OutNumerator' has a wrong offset!");
static_assert(offsetof(FortJournalQuestProgressBar_GetProgressDetails, OutDenominator) == 0x000018, "Member 'FortJournalQuestProgressBar_GetProgressDetails::OutDenominator' has a wrong offset!");
static_assert(offsetof(FortJournalQuestProgressBar_GetProgressDetails, OutFraction) == 0x000030, "Member 'FortJournalQuestProgressBar_GetProgressDetails::OutFraction' has a wrong offset!");

// Function SaveTheWorldUI.FortProgressArrowButton.OnIsInteractiveSet
// 0x0001 (0x0001 - 0x0000)
struct FortProgressArrowButton_OnIsInteractiveSet final
{
public:
	bool                                          bIsInteractive;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressArrowButton_OnIsInteractiveSet) == 0x000001, "Wrong alignment on FortProgressArrowButton_OnIsInteractiveSet");
static_assert(sizeof(FortProgressArrowButton_OnIsInteractiveSet) == 0x000001, "Wrong size on FortProgressArrowButton_OnIsInteractiveSet");
static_assert(offsetof(FortProgressArrowButton_OnIsInteractiveSet, bIsInteractive) == 0x000000, "Member 'FortProgressArrowButton_OnIsInteractiveSet::bIsInteractive' has a wrong offset!");

// Function SaveTheWorldUI.FortProgressArrowButton.UpdateArrowColor
// 0x0028 (0x0028 - 0x0000)
struct FortProgressArrowButton_UpdateArrowColor final
{
public:
	struct FSlateColor                            Color;                                             // 0x0000(0x0014)(Parm, NativeAccessSpecifierPublic)
	struct FSlateColor                            HoverColor_0;                                      // 0x0014(0x0014)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressArrowButton_UpdateArrowColor) == 0x000004, "Wrong alignment on FortProgressArrowButton_UpdateArrowColor");
static_assert(sizeof(FortProgressArrowButton_UpdateArrowColor) == 0x000028, "Wrong size on FortProgressArrowButton_UpdateArrowColor");
static_assert(offsetof(FortProgressArrowButton_UpdateArrowColor, Color) == 0x000000, "Member 'FortProgressArrowButton_UpdateArrowColor::Color' has a wrong offset!");
static_assert(offsetof(FortProgressArrowButton_UpdateArrowColor, HoverColor_0) == 0x000014, "Member 'FortProgressArrowButton_UpdateArrowColor::HoverColor_0' has a wrong offset!");

// Function SaveTheWorldUI.FortProgressArrowButton_Legacy.OnIsInteractiveSet
// 0x0001 (0x0001 - 0x0000)
struct FortProgressArrowButton_Legacy_OnIsInteractiveSet final
{
public:
	bool                                          bIsInteractive;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressArrowButton_Legacy_OnIsInteractiveSet) == 0x000001, "Wrong alignment on FortProgressArrowButton_Legacy_OnIsInteractiveSet");
static_assert(sizeof(FortProgressArrowButton_Legacy_OnIsInteractiveSet) == 0x000001, "Wrong size on FortProgressArrowButton_Legacy_OnIsInteractiveSet");
static_assert(offsetof(FortProgressArrowButton_Legacy_OnIsInteractiveSet, bIsInteractive) == 0x000000, "Member 'FortProgressArrowButton_Legacy_OnIsInteractiveSet::bIsInteractive' has a wrong offset!");

// Function SaveTheWorldUI.FortProgressArrowButton_Legacy.UpdateArrowColor
// 0x0028 (0x0028 - 0x0000)
struct FortProgressArrowButton_Legacy_UpdateArrowColor final
{
public:
	struct FSlateColor                            Color;                                             // 0x0000(0x0014)(Parm, NativeAccessSpecifierPublic)
	struct FSlateColor                            HoverColor_0;                                      // 0x0014(0x0014)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressArrowButton_Legacy_UpdateArrowColor) == 0x000004, "Wrong alignment on FortProgressArrowButton_Legacy_UpdateArrowColor");
static_assert(sizeof(FortProgressArrowButton_Legacy_UpdateArrowColor) == 0x000028, "Wrong size on FortProgressArrowButton_Legacy_UpdateArrowColor");
static_assert(offsetof(FortProgressArrowButton_Legacy_UpdateArrowColor, Color) == 0x000000, "Member 'FortProgressArrowButton_Legacy_UpdateArrowColor::Color' has a wrong offset!");
static_assert(offsetof(FortProgressArrowButton_Legacy_UpdateArrowColor, HoverColor_0) == 0x000014, "Member 'FortProgressArrowButton_Legacy_UpdateArrowColor::HoverColor_0' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestExpiresWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct FortQuestExpiresWidget_SetData final
{
public:
	class UFortQuestItem*                         InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestExpiresWidget_SetData) == 0x000008, "Wrong alignment on FortQuestExpiresWidget_SetData");
static_assert(sizeof(FortQuestExpiresWidget_SetData) == 0x000008, "Wrong size on FortQuestExpiresWidget_SetData");
static_assert(offsetof(FortQuestExpiresWidget_SetData, InItem) == 0x000000, "Member 'FortQuestExpiresWidget_SetData::InItem' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapCosmeticListWidget.GetDisplayItemDefs
// 0x0010 (0x0010 - 0x0000)
struct FortQuestMapCosmeticListWidget_GetDisplayItemDefs final
{
public:
	TArray<class UFortItemDefinition*>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapCosmeticListWidget_GetDisplayItemDefs) == 0x000008, "Wrong alignment on FortQuestMapCosmeticListWidget_GetDisplayItemDefs");
static_assert(sizeof(FortQuestMapCosmeticListWidget_GetDisplayItemDefs) == 0x000010, "Wrong size on FortQuestMapCosmeticListWidget_GetDisplayItemDefs");
static_assert(offsetof(FortQuestMapCosmeticListWidget_GetDisplayItemDefs, ReturnValue) == 0x000000, "Member 'FortQuestMapCosmeticListWidget_GetDisplayItemDefs::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapDetailsPanelBase.SetQuestToDisplay
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapDetailsPanelBase_SetQuestToDisplay final
{
public:
	class UFortQuestItemDefinition*               QuestDef;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapDetailsPanelBase_SetQuestToDisplay) == 0x000008, "Wrong alignment on FortQuestMapDetailsPanelBase_SetQuestToDisplay");
static_assert(sizeof(FortQuestMapDetailsPanelBase_SetQuestToDisplay) == 0x000008, "Wrong size on FortQuestMapDetailsPanelBase_SetQuestToDisplay");
static_assert(offsetof(FortQuestMapDetailsPanelBase_SetQuestToDisplay, QuestDef) == 0x000000, "Member 'FortQuestMapDetailsPanelBase_SetQuestToDisplay::QuestDef' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout.OnPlayFadeAnimation
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_OnPlayFadeAnimation final
{
public:
	bool                                          bIsFadeOut;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_OnPlayFadeAnimation) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_OnPlayFadeAnimation");
static_assert(sizeof(FortQuestMapEventCallout_OnPlayFadeAnimation) == 0x000001, "Wrong size on FortQuestMapEventCallout_OnPlayFadeAnimation");
static_assert(offsetof(FortQuestMapEventCallout_OnPlayFadeAnimation, bIsFadeOut) == 0x000000, "Member 'FortQuestMapEventCallout_OnPlayFadeAnimation::bIsFadeOut' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout.SetIsExpanded
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_SetIsExpanded final
{
public:
	bool                                          Expanded;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_SetIsExpanded) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_SetIsExpanded");
static_assert(sizeof(FortQuestMapEventCallout_SetIsExpanded) == 0x000001, "Wrong size on FortQuestMapEventCallout_SetIsExpanded");
static_assert(offsetof(FortQuestMapEventCallout_SetIsExpanded, Expanded) == 0x000000, "Member 'FortQuestMapEventCallout_SetIsExpanded::Expanded' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout.SetIsFaded
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_SetIsFaded final
{
public:
	bool                                          Faded;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_SetIsFaded) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_SetIsFaded");
static_assert(sizeof(FortQuestMapEventCallout_SetIsFaded) == 0x000001, "Wrong size on FortQuestMapEventCallout_SetIsFaded");
static_assert(offsetof(FortQuestMapEventCallout_SetIsFaded, Faded) == 0x000000, "Member 'FortQuestMapEventCallout_SetIsFaded::Faded' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout.UpdateGoButtonBangState
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_UpdateGoButtonBangState final
{
public:
	bool                                          bClear;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_UpdateGoButtonBangState) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_UpdateGoButtonBangState");
static_assert(sizeof(FortQuestMapEventCallout_UpdateGoButtonBangState) == 0x000001, "Wrong size on FortQuestMapEventCallout_UpdateGoButtonBangState");
static_assert(offsetof(FortQuestMapEventCallout_UpdateGoButtonBangState, bClear) == 0x000000, "Member 'FortQuestMapEventCallout_UpdateGoButtonBangState::bClear' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout.GetEventCount
// 0x0004 (0x0004 - 0x0000)
struct FortQuestMapEventCallout_GetEventCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_GetEventCount) == 0x000004, "Wrong alignment on FortQuestMapEventCallout_GetEventCount");
static_assert(sizeof(FortQuestMapEventCallout_GetEventCount) == 0x000004, "Wrong size on FortQuestMapEventCallout_GetEventCount");
static_assert(offsetof(FortQuestMapEventCallout_GetEventCount, ReturnValue) == 0x000000, "Member 'FortQuestMapEventCallout_GetEventCount::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout.GetIsExpanded
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_GetIsExpanded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_GetIsExpanded) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_GetIsExpanded");
static_assert(sizeof(FortQuestMapEventCallout_GetIsExpanded) == 0x000001, "Wrong size on FortQuestMapEventCallout_GetIsExpanded");
static_assert(offsetof(FortQuestMapEventCallout_GetIsExpanded, ReturnValue) == 0x000000, "Member 'FortQuestMapEventCallout_GetIsExpanded::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout.GetIsFaded
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_GetIsFaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_GetIsFaded) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_GetIsFaded");
static_assert(sizeof(FortQuestMapEventCallout_GetIsFaded) == 0x000001, "Wrong size on FortQuestMapEventCallout_GetIsFaded");
static_assert(offsetof(FortQuestMapEventCallout_GetIsFaded, ReturnValue) == 0x000000, "Member 'FortQuestMapEventCallout_GetIsFaded::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout.GetRequiredQuestForCurrentEvent
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapEventCallout_GetRequiredQuestForCurrentEvent final
{
public:
	class UFortQuestItemDefinition*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_GetRequiredQuestForCurrentEvent) == 0x000008, "Wrong alignment on FortQuestMapEventCallout_GetRequiredQuestForCurrentEvent");
static_assert(sizeof(FortQuestMapEventCallout_GetRequiredQuestForCurrentEvent) == 0x000008, "Wrong size on FortQuestMapEventCallout_GetRequiredQuestForCurrentEvent");
static_assert(offsetof(FortQuestMapEventCallout_GetRequiredQuestForCurrentEvent, ReturnValue) == 0x000000, "Member 'FortQuestMapEventCallout_GetRequiredQuestForCurrentEvent::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout.IsCurrentEventUnlocked
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_IsCurrentEventUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_IsCurrentEventUnlocked) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_IsCurrentEventUnlocked");
static_assert(sizeof(FortQuestMapEventCallout_IsCurrentEventUnlocked) == 0x000001, "Wrong size on FortQuestMapEventCallout_IsCurrentEventUnlocked");
static_assert(offsetof(FortQuestMapEventCallout_IsCurrentEventUnlocked, ReturnValue) == 0x000000, "Member 'FortQuestMapEventCallout_IsCurrentEventUnlocked::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout_Legacy.OnPlayFadeAnimation
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_Legacy_OnPlayFadeAnimation final
{
public:
	bool                                          bIsFadeOut;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_Legacy_OnPlayFadeAnimation) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_Legacy_OnPlayFadeAnimation");
static_assert(sizeof(FortQuestMapEventCallout_Legacy_OnPlayFadeAnimation) == 0x000001, "Wrong size on FortQuestMapEventCallout_Legacy_OnPlayFadeAnimation");
static_assert(offsetof(FortQuestMapEventCallout_Legacy_OnPlayFadeAnimation, bIsFadeOut) == 0x000000, "Member 'FortQuestMapEventCallout_Legacy_OnPlayFadeAnimation::bIsFadeOut' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout_Legacy.SetIsExpanded
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_Legacy_SetIsExpanded final
{
public:
	bool                                          Expanded;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_Legacy_SetIsExpanded) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_Legacy_SetIsExpanded");
static_assert(sizeof(FortQuestMapEventCallout_Legacy_SetIsExpanded) == 0x000001, "Wrong size on FortQuestMapEventCallout_Legacy_SetIsExpanded");
static_assert(offsetof(FortQuestMapEventCallout_Legacy_SetIsExpanded, Expanded) == 0x000000, "Member 'FortQuestMapEventCallout_Legacy_SetIsExpanded::Expanded' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout_Legacy.SetIsFaded
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_Legacy_SetIsFaded final
{
public:
	bool                                          Faded;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_Legacy_SetIsFaded) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_Legacy_SetIsFaded");
static_assert(sizeof(FortQuestMapEventCallout_Legacy_SetIsFaded) == 0x000001, "Wrong size on FortQuestMapEventCallout_Legacy_SetIsFaded");
static_assert(offsetof(FortQuestMapEventCallout_Legacy_SetIsFaded, Faded) == 0x000000, "Member 'FortQuestMapEventCallout_Legacy_SetIsFaded::Faded' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout_Legacy.UpdateGoButtonBangState
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_Legacy_UpdateGoButtonBangState final
{
public:
	bool                                          bClear;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_Legacy_UpdateGoButtonBangState) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_Legacy_UpdateGoButtonBangState");
static_assert(sizeof(FortQuestMapEventCallout_Legacy_UpdateGoButtonBangState) == 0x000001, "Wrong size on FortQuestMapEventCallout_Legacy_UpdateGoButtonBangState");
static_assert(offsetof(FortQuestMapEventCallout_Legacy_UpdateGoButtonBangState, bClear) == 0x000000, "Member 'FortQuestMapEventCallout_Legacy_UpdateGoButtonBangState::bClear' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout_Legacy.GetEventCount
// 0x0004 (0x0004 - 0x0000)
struct FortQuestMapEventCallout_Legacy_GetEventCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_Legacy_GetEventCount) == 0x000004, "Wrong alignment on FortQuestMapEventCallout_Legacy_GetEventCount");
static_assert(sizeof(FortQuestMapEventCallout_Legacy_GetEventCount) == 0x000004, "Wrong size on FortQuestMapEventCallout_Legacy_GetEventCount");
static_assert(offsetof(FortQuestMapEventCallout_Legacy_GetEventCount, ReturnValue) == 0x000000, "Member 'FortQuestMapEventCallout_Legacy_GetEventCount::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout_Legacy.GetIsExpanded
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_Legacy_GetIsExpanded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_Legacy_GetIsExpanded) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_Legacy_GetIsExpanded");
static_assert(sizeof(FortQuestMapEventCallout_Legacy_GetIsExpanded) == 0x000001, "Wrong size on FortQuestMapEventCallout_Legacy_GetIsExpanded");
static_assert(offsetof(FortQuestMapEventCallout_Legacy_GetIsExpanded, ReturnValue) == 0x000000, "Member 'FortQuestMapEventCallout_Legacy_GetIsExpanded::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout_Legacy.GetIsFaded
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_Legacy_GetIsFaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_Legacy_GetIsFaded) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_Legacy_GetIsFaded");
static_assert(sizeof(FortQuestMapEventCallout_Legacy_GetIsFaded) == 0x000001, "Wrong size on FortQuestMapEventCallout_Legacy_GetIsFaded");
static_assert(offsetof(FortQuestMapEventCallout_Legacy_GetIsFaded, ReturnValue) == 0x000000, "Member 'FortQuestMapEventCallout_Legacy_GetIsFaded::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout_Legacy.GetRequiredQuestForCurrentEvent
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapEventCallout_Legacy_GetRequiredQuestForCurrentEvent final
{
public:
	class UFortQuestItemDefinition*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_Legacy_GetRequiredQuestForCurrentEvent) == 0x000008, "Wrong alignment on FortQuestMapEventCallout_Legacy_GetRequiredQuestForCurrentEvent");
static_assert(sizeof(FortQuestMapEventCallout_Legacy_GetRequiredQuestForCurrentEvent) == 0x000008, "Wrong size on FortQuestMapEventCallout_Legacy_GetRequiredQuestForCurrentEvent");
static_assert(offsetof(FortQuestMapEventCallout_Legacy_GetRequiredQuestForCurrentEvent, ReturnValue) == 0x000000, "Member 'FortQuestMapEventCallout_Legacy_GetRequiredQuestForCurrentEvent::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapEventCallout_Legacy.IsCurrentEventUnlocked
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_Legacy_IsCurrentEventUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_Legacy_IsCurrentEventUnlocked) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_Legacy_IsCurrentEventUnlocked");
static_assert(sizeof(FortQuestMapEventCallout_Legacy_IsCurrentEventUnlocked) == 0x000001, "Wrong size on FortQuestMapEventCallout_Legacy_IsCurrentEventUnlocked");
static_assert(offsetof(FortQuestMapEventCallout_Legacy_IsCurrentEventUnlocked, ReturnValue) == 0x000000, "Member 'FortQuestMapEventCallout_Legacy_IsCurrentEventUnlocked::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapNodeLayout.HandleQuestButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct FortQuestMapNodeLayout_HandleQuestButtonSelected final
{
public:
	class UCommonButtonBase*                      SelectedQuestButton;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestMapNodeLayout_HandleQuestButtonSelected) == 0x000008, "Wrong alignment on FortQuestMapNodeLayout_HandleQuestButtonSelected");
static_assert(sizeof(FortQuestMapNodeLayout_HandleQuestButtonSelected) == 0x000010, "Wrong size on FortQuestMapNodeLayout_HandleQuestButtonSelected");
static_assert(offsetof(FortQuestMapNodeLayout_HandleQuestButtonSelected, SelectedQuestButton) == 0x000000, "Member 'FortQuestMapNodeLayout_HandleQuestButtonSelected::SelectedQuestButton' has a wrong offset!");
static_assert(offsetof(FortQuestMapNodeLayout_HandleQuestButtonSelected, ButtonIndex) == 0x000008, "Member 'FortQuestMapNodeLayout_HandleQuestButtonSelected::ButtonIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapNodeLayout.HandleQuestIndexSelectionModelIndexChanged
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapNodeLayout_HandleQuestIndexSelectionModelIndexChanged final
{
public:
	bool                                          bUpdateButtonSelection;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapNodeLayout_HandleQuestIndexSelectionModelIndexChanged) == 0x000001, "Wrong alignment on FortQuestMapNodeLayout_HandleQuestIndexSelectionModelIndexChanged");
static_assert(sizeof(FortQuestMapNodeLayout_HandleQuestIndexSelectionModelIndexChanged) == 0x000001, "Wrong size on FortQuestMapNodeLayout_HandleQuestIndexSelectionModelIndexChanged");
static_assert(offsetof(FortQuestMapNodeLayout_HandleQuestIndexSelectionModelIndexChanged, bUpdateButtonSelection) == 0x000000, "Member 'FortQuestMapNodeLayout_HandleQuestIndexSelectionModelIndexChanged::bUpdateButtonSelection' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapNodeLayout_Legacy.HandleQuestButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct FortQuestMapNodeLayout_Legacy_HandleQuestButtonSelected final
{
public:
	class UCommonButtonLegacy*                    SelectedQuestButton;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestMapNodeLayout_Legacy_HandleQuestButtonSelected) == 0x000008, "Wrong alignment on FortQuestMapNodeLayout_Legacy_HandleQuestButtonSelected");
static_assert(sizeof(FortQuestMapNodeLayout_Legacy_HandleQuestButtonSelected) == 0x000010, "Wrong size on FortQuestMapNodeLayout_Legacy_HandleQuestButtonSelected");
static_assert(offsetof(FortQuestMapNodeLayout_Legacy_HandleQuestButtonSelected, SelectedQuestButton) == 0x000000, "Member 'FortQuestMapNodeLayout_Legacy_HandleQuestButtonSelected::SelectedQuestButton' has a wrong offset!");
static_assert(offsetof(FortQuestMapNodeLayout_Legacy_HandleQuestButtonSelected, ButtonIndex) == 0x000008, "Member 'FortQuestMapNodeLayout_Legacy_HandleQuestButtonSelected::ButtonIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapNodeLayout_Legacy.HandleQuestIndexSelectionModelIndexChanged
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapNodeLayout_Legacy_HandleQuestIndexSelectionModelIndexChanged final
{
public:
	bool                                          bUpdateButtonSelection;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapNodeLayout_Legacy_HandleQuestIndexSelectionModelIndexChanged) == 0x000001, "Wrong alignment on FortQuestMapNodeLayout_Legacy_HandleQuestIndexSelectionModelIndexChanged");
static_assert(sizeof(FortQuestMapNodeLayout_Legacy_HandleQuestIndexSelectionModelIndexChanged) == 0x000001, "Wrong size on FortQuestMapNodeLayout_Legacy_HandleQuestIndexSelectionModelIndexChanged");
static_assert(offsetof(FortQuestMapNodeLayout_Legacy_HandleQuestIndexSelectionModelIndexChanged, bUpdateButtonSelection) == 0x000000, "Member 'FortQuestMapNodeLayout_Legacy_HandleQuestIndexSelectionModelIndexChanged::bUpdateButtonSelection' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapQuestTile.HandleSelectedChange
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapQuestTile_HandleSelectedChange final
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapQuestTile_HandleSelectedChange) == 0x000001, "Wrong alignment on FortQuestMapQuestTile_HandleSelectedChange");
static_assert(sizeof(FortQuestMapQuestTile_HandleSelectedChange) == 0x000001, "Wrong size on FortQuestMapQuestTile_HandleSelectedChange");
static_assert(offsetof(FortQuestMapQuestTile_HandleSelectedChange, Selected) == 0x000000, "Member 'FortQuestMapQuestTile_HandleSelectedChange::Selected' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapQuestTile.GetQuestNodeData
// 0x0020 (0x0020 - 0x0000)
struct FortQuestMapQuestTile_GetQuestNodeData final
{
public:
	class UFortQuestItemDefinition*               QuestItemDefinition;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortQuestMapNode                      NodeData;                                          // 0x0008(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapQuestTile_GetQuestNodeData) == 0x000008, "Wrong alignment on FortQuestMapQuestTile_GetQuestNodeData");
static_assert(sizeof(FortQuestMapQuestTile_GetQuestNodeData) == 0x000020, "Wrong size on FortQuestMapQuestTile_GetQuestNodeData");
static_assert(offsetof(FortQuestMapQuestTile_GetQuestNodeData, QuestItemDefinition) == 0x000000, "Member 'FortQuestMapQuestTile_GetQuestNodeData::QuestItemDefinition' has a wrong offset!");
static_assert(offsetof(FortQuestMapQuestTile_GetQuestNodeData, NodeData) == 0x000008, "Member 'FortQuestMapQuestTile_GetQuestNodeData::NodeData' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapQuestTile_Legacy.HandleSelectedChange
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapQuestTile_Legacy_HandleSelectedChange final
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapQuestTile_Legacy_HandleSelectedChange) == 0x000001, "Wrong alignment on FortQuestMapQuestTile_Legacy_HandleSelectedChange");
static_assert(sizeof(FortQuestMapQuestTile_Legacy_HandleSelectedChange) == 0x000001, "Wrong size on FortQuestMapQuestTile_Legacy_HandleSelectedChange");
static_assert(offsetof(FortQuestMapQuestTile_Legacy_HandleSelectedChange, Selected) == 0x000000, "Member 'FortQuestMapQuestTile_Legacy_HandleSelectedChange::Selected' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapQuestTile_Legacy.GetQuestNodeData
// 0x0020 (0x0020 - 0x0000)
struct FortQuestMapQuestTile_Legacy_GetQuestNodeData final
{
public:
	class UFortQuestItemDefinition*               QuestItemDefinition;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortQuestMapNode                      NodeData;                                          // 0x0008(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapQuestTile_Legacy_GetQuestNodeData) == 0x000008, "Wrong alignment on FortQuestMapQuestTile_Legacy_GetQuestNodeData");
static_assert(sizeof(FortQuestMapQuestTile_Legacy_GetQuestNodeData) == 0x000020, "Wrong size on FortQuestMapQuestTile_Legacy_GetQuestNodeData");
static_assert(offsetof(FortQuestMapQuestTile_Legacy_GetQuestNodeData, QuestItemDefinition) == 0x000000, "Member 'FortQuestMapQuestTile_Legacy_GetQuestNodeData::QuestItemDefinition' has a wrong offset!");
static_assert(offsetof(FortQuestMapQuestTile_Legacy_GetQuestNodeData, NodeData) == 0x000008, "Member 'FortQuestMapQuestTile_Legacy_GetQuestNodeData::NodeData' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen.ClaimQuestRewards
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapScreen_ClaimQuestRewards final
{
public:
	const class UFortQuestItem*                   QuestItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_ClaimQuestRewards) == 0x000008, "Wrong alignment on FortQuestMapScreen_ClaimQuestRewards");
static_assert(sizeof(FortQuestMapScreen_ClaimQuestRewards) == 0x000008, "Wrong size on FortQuestMapScreen_ClaimQuestRewards");
static_assert(offsetof(FortQuestMapScreen_ClaimQuestRewards, QuestItem) == 0x000000, "Member 'FortQuestMapScreen_ClaimQuestRewards::QuestItem' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen.HandleMapViewerNavigationRequest
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_HandleMapViewerNavigationRequest final
{
public:
	EViewerNavigationDirection                    Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_HandleMapViewerNavigationRequest) == 0x000001, "Wrong alignment on FortQuestMapScreen_HandleMapViewerNavigationRequest");
static_assert(sizeof(FortQuestMapScreen_HandleMapViewerNavigationRequest) == 0x000001, "Wrong size on FortQuestMapScreen_HandleMapViewerNavigationRequest");
static_assert(offsetof(FortQuestMapScreen_HandleMapViewerNavigationRequest, Direction) == 0x000000, "Member 'FortQuestMapScreen_HandleMapViewerNavigationRequest::Direction' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen.HandleQuestDetailsUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapScreen_HandleQuestDetailsUpdated final
{
public:
	class UFortQuestItem*                         QuestDefinition;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_HandleQuestDetailsUpdated) == 0x000008, "Wrong alignment on FortQuestMapScreen_HandleQuestDetailsUpdated");
static_assert(sizeof(FortQuestMapScreen_HandleQuestDetailsUpdated) == 0x000008, "Wrong size on FortQuestMapScreen_HandleQuestDetailsUpdated");
static_assert(offsetof(FortQuestMapScreen_HandleQuestDetailsUpdated, QuestDefinition) == 0x000000, "Member 'FortQuestMapScreen_HandleQuestDetailsUpdated::QuestDefinition' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen.HandleQuestIndexSelectionModelChanged
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_HandleQuestIndexSelectionModelChanged final
{
public:
	bool                                          bUpdateButtonSelection;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_HandleQuestIndexSelectionModelChanged) == 0x000001, "Wrong alignment on FortQuestMapScreen_HandleQuestIndexSelectionModelChanged");
static_assert(sizeof(FortQuestMapScreen_HandleQuestIndexSelectionModelChanged) == 0x000001, "Wrong size on FortQuestMapScreen_HandleQuestIndexSelectionModelChanged");
static_assert(offsetof(FortQuestMapScreen_HandleQuestIndexSelectionModelChanged, bUpdateButtonSelection) == 0x000000, "Member 'FortQuestMapScreen_HandleQuestIndexSelectionModelChanged::bUpdateButtonSelection' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen.IsEventFlagActive
// 0x0018 (0x0018 - 0x0000)
struct FortQuestMapScreen_IsEventFlagActive final
{
public:
	class FString                                 EventFlag;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestMapScreen_IsEventFlagActive) == 0x000008, "Wrong alignment on FortQuestMapScreen_IsEventFlagActive");
static_assert(sizeof(FortQuestMapScreen_IsEventFlagActive) == 0x000018, "Wrong size on FortQuestMapScreen_IsEventFlagActive");
static_assert(offsetof(FortQuestMapScreen_IsEventFlagActive, EventFlag) == 0x000000, "Member 'FortQuestMapScreen_IsEventFlagActive::EventFlag' has a wrong offset!");
static_assert(offsetof(FortQuestMapScreen_IsEventFlagActive, ReturnValue) == 0x000010, "Member 'FortQuestMapScreen_IsEventFlagActive::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen.SetBeyondCutoffQuest
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_SetBeyondCutoffQuest final
{
public:
	bool                                          bBeyondCutoff;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_SetBeyondCutoffQuest) == 0x000001, "Wrong alignment on FortQuestMapScreen_SetBeyondCutoffQuest");
static_assert(sizeof(FortQuestMapScreen_SetBeyondCutoffQuest) == 0x000001, "Wrong size on FortQuestMapScreen_SetBeyondCutoffQuest");
static_assert(offsetof(FortQuestMapScreen_SetBeyondCutoffQuest, bBeyondCutoff) == 0x000000, "Member 'FortQuestMapScreen_SetBeyondCutoffQuest::bBeyondCutoff' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen.SetIgnorePageNavigation
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_SetIgnorePageNavigation final
{
public:
	bool                                          bIgnoreNavigation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_SetIgnorePageNavigation) == 0x000001, "Wrong alignment on FortQuestMapScreen_SetIgnorePageNavigation");
static_assert(sizeof(FortQuestMapScreen_SetIgnorePageNavigation) == 0x000001, "Wrong size on FortQuestMapScreen_SetIgnorePageNavigation");
static_assert(offsetof(FortQuestMapScreen_SetIgnorePageNavigation, bIgnoreNavigation) == 0x000000, "Member 'FortQuestMapScreen_SetIgnorePageNavigation::bIgnoreNavigation' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen.SetQuestMapViewer
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapScreen_SetQuestMapViewer final
{
public:
	class UFortQuestMapViewer*                    Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_SetQuestMapViewer) == 0x000008, "Wrong alignment on FortQuestMapScreen_SetQuestMapViewer");
static_assert(sizeof(FortQuestMapScreen_SetQuestMapViewer) == 0x000008, "Wrong size on FortQuestMapScreen_SetQuestMapViewer");
static_assert(offsetof(FortQuestMapScreen_SetQuestMapViewer, Value) == 0x000000, "Member 'FortQuestMapScreen_SetQuestMapViewer::Value' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen.ShowQuestLog
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapScreen_ShowQuestLog final
{
public:
	class UFortQuestItem*                         QuestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_ShowQuestLog) == 0x000008, "Wrong alignment on FortQuestMapScreen_ShowQuestLog");
static_assert(sizeof(FortQuestMapScreen_ShowQuestLog) == 0x000008, "Wrong size on FortQuestMapScreen_ShowQuestLog");
static_assert(offsetof(FortQuestMapScreen_ShowQuestLog, QuestItem) == 0x000000, "Member 'FortQuestMapScreen_ShowQuestLog::QuestItem' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen.UpdateInputActionStates
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_UpdateInputActionStates final
{
public:
	bool                                          bShowingCallout;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_UpdateInputActionStates) == 0x000001, "Wrong alignment on FortQuestMapScreen_UpdateInputActionStates");
static_assert(sizeof(FortQuestMapScreen_UpdateInputActionStates) == 0x000001, "Wrong size on FortQuestMapScreen_UpdateInputActionStates");
static_assert(offsetof(FortQuestMapScreen_UpdateInputActionStates, bShowingCallout) == 0x000000, "Member 'FortQuestMapScreen_UpdateInputActionStates::bShowingCallout' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen.UpdateQuestMapMode
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_UpdateQuestMapMode final
{
public:
	EQuestMapScreenMode                           QuestMapMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_UpdateQuestMapMode) == 0x000001, "Wrong alignment on FortQuestMapScreen_UpdateQuestMapMode");
static_assert(sizeof(FortQuestMapScreen_UpdateQuestMapMode) == 0x000001, "Wrong size on FortQuestMapScreen_UpdateQuestMapMode");
static_assert(offsetof(FortQuestMapScreen_UpdateQuestMapMode, QuestMapMode) == 0x000000, "Member 'FortQuestMapScreen_UpdateQuestMapMode::QuestMapMode' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen.GetBeyondCutoffQuest
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_GetBeyondCutoffQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_GetBeyondCutoffQuest) == 0x000001, "Wrong alignment on FortQuestMapScreen_GetBeyondCutoffQuest");
static_assert(sizeof(FortQuestMapScreen_GetBeyondCutoffQuest) == 0x000001, "Wrong size on FortQuestMapScreen_GetBeyondCutoffQuest");
static_assert(offsetof(FortQuestMapScreen_GetBeyondCutoffQuest, ReturnValue) == 0x000000, "Member 'FortQuestMapScreen_GetBeyondCutoffQuest::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen.GetCurrentPageCameraMode
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_GetCurrentPageCameraMode final
{
public:
	EFrontEndCamera                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_GetCurrentPageCameraMode) == 0x000001, "Wrong alignment on FortQuestMapScreen_GetCurrentPageCameraMode");
static_assert(sizeof(FortQuestMapScreen_GetCurrentPageCameraMode) == 0x000001, "Wrong size on FortQuestMapScreen_GetCurrentPageCameraMode");
static_assert(offsetof(FortQuestMapScreen_GetCurrentPageCameraMode, ReturnValue) == 0x000000, "Member 'FortQuestMapScreen_GetCurrentPageCameraMode::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen.IsBeyondQuest
// 0x0010 (0x0010 - 0x0000)
struct FortQuestMapScreen_IsBeyondQuest final
{
public:
	class UFortQuestItemDefinition*               QuestDef;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestMapScreen_IsBeyondQuest) == 0x000008, "Wrong alignment on FortQuestMapScreen_IsBeyondQuest");
static_assert(sizeof(FortQuestMapScreen_IsBeyondQuest) == 0x000010, "Wrong size on FortQuestMapScreen_IsBeyondQuest");
static_assert(offsetof(FortQuestMapScreen_IsBeyondQuest, QuestDef) == 0x000000, "Member 'FortQuestMapScreen_IsBeyondQuest::QuestDef' has a wrong offset!");
static_assert(offsetof(FortQuestMapScreen_IsBeyondQuest, ReturnValue) == 0x000008, "Member 'FortQuestMapScreen_IsBeyondQuest::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen_Legacy.HandleMapViewerNavigationRequest
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_Legacy_HandleMapViewerNavigationRequest final
{
public:
	EViewerNavigationDirection                    Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_Legacy_HandleMapViewerNavigationRequest) == 0x000001, "Wrong alignment on FortQuestMapScreen_Legacy_HandleMapViewerNavigationRequest");
static_assert(sizeof(FortQuestMapScreen_Legacy_HandleMapViewerNavigationRequest) == 0x000001, "Wrong size on FortQuestMapScreen_Legacy_HandleMapViewerNavigationRequest");
static_assert(offsetof(FortQuestMapScreen_Legacy_HandleMapViewerNavigationRequest, Direction) == 0x000000, "Member 'FortQuestMapScreen_Legacy_HandleMapViewerNavigationRequest::Direction' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen_Legacy.HandleQuestDetailsUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapScreen_Legacy_HandleQuestDetailsUpdated final
{
public:
	class UFortQuestItem*                         QuestDefinition;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_Legacy_HandleQuestDetailsUpdated) == 0x000008, "Wrong alignment on FortQuestMapScreen_Legacy_HandleQuestDetailsUpdated");
static_assert(sizeof(FortQuestMapScreen_Legacy_HandleQuestDetailsUpdated) == 0x000008, "Wrong size on FortQuestMapScreen_Legacy_HandleQuestDetailsUpdated");
static_assert(offsetof(FortQuestMapScreen_Legacy_HandleQuestDetailsUpdated, QuestDefinition) == 0x000000, "Member 'FortQuestMapScreen_Legacy_HandleQuestDetailsUpdated::QuestDefinition' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen_Legacy.HandleQuestIndexSelectionModelChanged
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_Legacy_HandleQuestIndexSelectionModelChanged final
{
public:
	bool                                          bUpdateButtonSelection;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_Legacy_HandleQuestIndexSelectionModelChanged) == 0x000001, "Wrong alignment on FortQuestMapScreen_Legacy_HandleQuestIndexSelectionModelChanged");
static_assert(sizeof(FortQuestMapScreen_Legacy_HandleQuestIndexSelectionModelChanged) == 0x000001, "Wrong size on FortQuestMapScreen_Legacy_HandleQuestIndexSelectionModelChanged");
static_assert(offsetof(FortQuestMapScreen_Legacy_HandleQuestIndexSelectionModelChanged, bUpdateButtonSelection) == 0x000000, "Member 'FortQuestMapScreen_Legacy_HandleQuestIndexSelectionModelChanged::bUpdateButtonSelection' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen_Legacy.IsEventFlagActive
// 0x0018 (0x0018 - 0x0000)
struct FortQuestMapScreen_Legacy_IsEventFlagActive final
{
public:
	class FString                                 EventFlag;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestMapScreen_Legacy_IsEventFlagActive) == 0x000008, "Wrong alignment on FortQuestMapScreen_Legacy_IsEventFlagActive");
static_assert(sizeof(FortQuestMapScreen_Legacy_IsEventFlagActive) == 0x000018, "Wrong size on FortQuestMapScreen_Legacy_IsEventFlagActive");
static_assert(offsetof(FortQuestMapScreen_Legacy_IsEventFlagActive, EventFlag) == 0x000000, "Member 'FortQuestMapScreen_Legacy_IsEventFlagActive::EventFlag' has a wrong offset!");
static_assert(offsetof(FortQuestMapScreen_Legacy_IsEventFlagActive, ReturnValue) == 0x000010, "Member 'FortQuestMapScreen_Legacy_IsEventFlagActive::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen_Legacy.SetBeyondCutoffQuest
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_Legacy_SetBeyondCutoffQuest final
{
public:
	bool                                          bBeyondCutoff;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_Legacy_SetBeyondCutoffQuest) == 0x000001, "Wrong alignment on FortQuestMapScreen_Legacy_SetBeyondCutoffQuest");
static_assert(sizeof(FortQuestMapScreen_Legacy_SetBeyondCutoffQuest) == 0x000001, "Wrong size on FortQuestMapScreen_Legacy_SetBeyondCutoffQuest");
static_assert(offsetof(FortQuestMapScreen_Legacy_SetBeyondCutoffQuest, bBeyondCutoff) == 0x000000, "Member 'FortQuestMapScreen_Legacy_SetBeyondCutoffQuest::bBeyondCutoff' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen_Legacy.SetFindCurrentActionVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_Legacy_SetFindCurrentActionVisibility final
{
public:
	EInputActionState                             ActionVisibility;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_Legacy_SetFindCurrentActionVisibility) == 0x000001, "Wrong alignment on FortQuestMapScreen_Legacy_SetFindCurrentActionVisibility");
static_assert(sizeof(FortQuestMapScreen_Legacy_SetFindCurrentActionVisibility) == 0x000001, "Wrong size on FortQuestMapScreen_Legacy_SetFindCurrentActionVisibility");
static_assert(offsetof(FortQuestMapScreen_Legacy_SetFindCurrentActionVisibility, ActionVisibility) == 0x000000, "Member 'FortQuestMapScreen_Legacy_SetFindCurrentActionVisibility::ActionVisibility' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen_Legacy.SetIgnorePageNavigation
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_Legacy_SetIgnorePageNavigation final
{
public:
	bool                                          bIgnoreNavigation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_Legacy_SetIgnorePageNavigation) == 0x000001, "Wrong alignment on FortQuestMapScreen_Legacy_SetIgnorePageNavigation");
static_assert(sizeof(FortQuestMapScreen_Legacy_SetIgnorePageNavigation) == 0x000001, "Wrong size on FortQuestMapScreen_Legacy_SetIgnorePageNavigation");
static_assert(offsetof(FortQuestMapScreen_Legacy_SetIgnorePageNavigation, bIgnoreNavigation) == 0x000000, "Member 'FortQuestMapScreen_Legacy_SetIgnorePageNavigation::bIgnoreNavigation' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen_Legacy.SetQuestMapViewer
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapScreen_Legacy_SetQuestMapViewer final
{
public:
	class UFortQuestMapViewer_Legacy*             Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_Legacy_SetQuestMapViewer) == 0x000008, "Wrong alignment on FortQuestMapScreen_Legacy_SetQuestMapViewer");
static_assert(sizeof(FortQuestMapScreen_Legacy_SetQuestMapViewer) == 0x000008, "Wrong size on FortQuestMapScreen_Legacy_SetQuestMapViewer");
static_assert(offsetof(FortQuestMapScreen_Legacy_SetQuestMapViewer, Value) == 0x000000, "Member 'FortQuestMapScreen_Legacy_SetQuestMapViewer::Value' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen_Legacy.UpdateQuestMapMode
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_Legacy_UpdateQuestMapMode final
{
public:
	EQuestMapScreenMode                           QuestMapMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_Legacy_UpdateQuestMapMode) == 0x000001, "Wrong alignment on FortQuestMapScreen_Legacy_UpdateQuestMapMode");
static_assert(sizeof(FortQuestMapScreen_Legacy_UpdateQuestMapMode) == 0x000001, "Wrong size on FortQuestMapScreen_Legacy_UpdateQuestMapMode");
static_assert(offsetof(FortQuestMapScreen_Legacy_UpdateQuestMapMode, QuestMapMode) == 0x000000, "Member 'FortQuestMapScreen_Legacy_UpdateQuestMapMode::QuestMapMode' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen_Legacy.GetBeyondCutoffQuest
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_Legacy_GetBeyondCutoffQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_Legacy_GetBeyondCutoffQuest) == 0x000001, "Wrong alignment on FortQuestMapScreen_Legacy_GetBeyondCutoffQuest");
static_assert(sizeof(FortQuestMapScreen_Legacy_GetBeyondCutoffQuest) == 0x000001, "Wrong size on FortQuestMapScreen_Legacy_GetBeyondCutoffQuest");
static_assert(offsetof(FortQuestMapScreen_Legacy_GetBeyondCutoffQuest, ReturnValue) == 0x000000, "Member 'FortQuestMapScreen_Legacy_GetBeyondCutoffQuest::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen_Legacy.GetCurrentPageCameraMode
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_Legacy_GetCurrentPageCameraMode final
{
public:
	EFrontEndCamera                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_Legacy_GetCurrentPageCameraMode) == 0x000001, "Wrong alignment on FortQuestMapScreen_Legacy_GetCurrentPageCameraMode");
static_assert(sizeof(FortQuestMapScreen_Legacy_GetCurrentPageCameraMode) == 0x000001, "Wrong size on FortQuestMapScreen_Legacy_GetCurrentPageCameraMode");
static_assert(offsetof(FortQuestMapScreen_Legacy_GetCurrentPageCameraMode, ReturnValue) == 0x000000, "Member 'FortQuestMapScreen_Legacy_GetCurrentPageCameraMode::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapScreen_Legacy.IsBeyondQuest
// 0x0010 (0x0010 - 0x0000)
struct FortQuestMapScreen_Legacy_IsBeyondQuest final
{
public:
	class UFortQuestItemDefinition*               QuestDef;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestMapScreen_Legacy_IsBeyondQuest) == 0x000008, "Wrong alignment on FortQuestMapScreen_Legacy_IsBeyondQuest");
static_assert(sizeof(FortQuestMapScreen_Legacy_IsBeyondQuest) == 0x000010, "Wrong size on FortQuestMapScreen_Legacy_IsBeyondQuest");
static_assert(offsetof(FortQuestMapScreen_Legacy_IsBeyondQuest, QuestDef) == 0x000000, "Member 'FortQuestMapScreen_Legacy_IsBeyondQuest::QuestDef' has a wrong offset!");
static_assert(offsetof(FortQuestMapScreen_Legacy_IsBeyondQuest, ReturnValue) == 0x000008, "Member 'FortQuestMapScreen_Legacy_IsBeyondQuest::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapViewer_Legacy.OnPlayLayoutOutroAnimation
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapViewer_Legacy_OnPlayLayoutOutroAnimation final
{
public:
	EViewerNavigationDirection                    TravelDirection;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapViewer_Legacy_OnPlayLayoutOutroAnimation) == 0x000001, "Wrong alignment on FortQuestMapViewer_Legacy_OnPlayLayoutOutroAnimation");
static_assert(sizeof(FortQuestMapViewer_Legacy_OnPlayLayoutOutroAnimation) == 0x000001, "Wrong size on FortQuestMapViewer_Legacy_OnPlayLayoutOutroAnimation");
static_assert(offsetof(FortQuestMapViewer_Legacy_OnPlayLayoutOutroAnimation, TravelDirection) == 0x000000, "Member 'FortQuestMapViewer_Legacy_OnPlayLayoutOutroAnimation::TravelDirection' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestMapViewer_Legacy.OnTryUpdateUserWidgetColor
// 0x0020 (0x0020 - 0x0000)
struct FortQuestMapViewer_Legacy_OnTryUpdateUserWidgetColor final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            OverrideColor;                                     // 0x0008(0x0014)(Parm, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestMapViewer_Legacy_OnTryUpdateUserWidgetColor) == 0x000008, "Wrong alignment on FortQuestMapViewer_Legacy_OnTryUpdateUserWidgetColor");
static_assert(sizeof(FortQuestMapViewer_Legacy_OnTryUpdateUserWidgetColor) == 0x000020, "Wrong size on FortQuestMapViewer_Legacy_OnTryUpdateUserWidgetColor");
static_assert(offsetof(FortQuestMapViewer_Legacy_OnTryUpdateUserWidgetColor, Widget) == 0x000000, "Member 'FortQuestMapViewer_Legacy_OnTryUpdateUserWidgetColor::Widget' has a wrong offset!");
static_assert(offsetof(FortQuestMapViewer_Legacy_OnTryUpdateUserWidgetColor, OverrideColor) == 0x000008, "Member 'FortQuestMapViewer_Legacy_OnTryUpdateUserWidgetColor::OverrideColor' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestPlayButton.HandleMatchmakingComplete
// 0x0001 (0x0001 - 0x0000)
struct FortQuestPlayButton_HandleMatchmakingComplete final
{
public:
	EMatchmakingCompleteResult                    Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestPlayButton_HandleMatchmakingComplete) == 0x000001, "Wrong alignment on FortQuestPlayButton_HandleMatchmakingComplete");
static_assert(sizeof(FortQuestPlayButton_HandleMatchmakingComplete) == 0x000001, "Wrong size on FortQuestPlayButton_HandleMatchmakingComplete");
static_assert(offsetof(FortQuestPlayButton_HandleMatchmakingComplete, Result) == 0x000000, "Member 'FortQuestPlayButton_HandleMatchmakingComplete::Result' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestPlayButton.CanPlayQuest
// 0x0001 (0x0001 - 0x0000)
struct FortQuestPlayButton_CanPlayQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestPlayButton_CanPlayQuest) == 0x000001, "Wrong alignment on FortQuestPlayButton_CanPlayQuest");
static_assert(sizeof(FortQuestPlayButton_CanPlayQuest) == 0x000001, "Wrong size on FortQuestPlayButton_CanPlayQuest");
static_assert(offsetof(FortQuestPlayButton_CanPlayQuest, ReturnValue) == 0x000000, "Member 'FortQuestPlayButton_CanPlayQuest::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestTreeItemWidget.SetupAsCategory
// 0x0008 (0x0008 - 0x0000)
struct FortQuestTreeItemWidget_SetupAsCategory final
{
public:
	class UFortQuestCategory*                     category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestTreeItemWidget_SetupAsCategory) == 0x000008, "Wrong alignment on FortQuestTreeItemWidget_SetupAsCategory");
static_assert(sizeof(FortQuestTreeItemWidget_SetupAsCategory) == 0x000008, "Wrong size on FortQuestTreeItemWidget_SetupAsCategory");
static_assert(offsetof(FortQuestTreeItemWidget_SetupAsCategory, category) == 0x000000, "Member 'FortQuestTreeItemWidget_SetupAsCategory::category' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestTreeItemWidget.SetupAsQuest
// 0x0008 (0x0008 - 0x0000)
struct FortQuestTreeItemWidget_SetupAsQuest final
{
public:
	class UFortQuestItem*                         category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestTreeItemWidget_SetupAsQuest) == 0x000008, "Wrong alignment on FortQuestTreeItemWidget_SetupAsQuest");
static_assert(sizeof(FortQuestTreeItemWidget_SetupAsQuest) == 0x000008, "Wrong size on FortQuestTreeItemWidget_SetupAsQuest");
static_assert(offsetof(FortQuestTreeItemWidget_SetupAsQuest, category) == 0x000000, "Member 'FortQuestTreeItemWidget_SetupAsQuest::category' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestTreeItemWidget_Legacy.SetupAsCategory
// 0x0008 (0x0008 - 0x0000)
struct FortQuestTreeItemWidget_Legacy_SetupAsCategory final
{
public:
	class UFortQuestCategory*                     category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestTreeItemWidget_Legacy_SetupAsCategory) == 0x000008, "Wrong alignment on FortQuestTreeItemWidget_Legacy_SetupAsCategory");
static_assert(sizeof(FortQuestTreeItemWidget_Legacy_SetupAsCategory) == 0x000008, "Wrong size on FortQuestTreeItemWidget_Legacy_SetupAsCategory");
static_assert(offsetof(FortQuestTreeItemWidget_Legacy_SetupAsCategory, category) == 0x000000, "Member 'FortQuestTreeItemWidget_Legacy_SetupAsCategory::category' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestTreeItemWidget_Legacy.SetupAsQuest
// 0x0008 (0x0008 - 0x0000)
struct FortQuestTreeItemWidget_Legacy_SetupAsQuest final
{
public:
	class UFortQuestItem*                         category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestTreeItemWidget_Legacy_SetupAsQuest) == 0x000008, "Wrong alignment on FortQuestTreeItemWidget_Legacy_SetupAsQuest");
static_assert(sizeof(FortQuestTreeItemWidget_Legacy_SetupAsQuest) == 0x000008, "Wrong size on FortQuestTreeItemWidget_Legacy_SetupAsQuest");
static_assert(offsetof(FortQuestTreeItemWidget_Legacy_SetupAsQuest, category) == 0x000000, "Member 'FortQuestTreeItemWidget_Legacy_SetupAsQuest::category' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestScreen.AttemptToPlayQuest
// 0x0008 (0x0008 - 0x0000)
struct FortQuestScreen_AttemptToPlayQuest final
{
public:
	class UFortQuestItem*                         QuestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestScreen_AttemptToPlayQuest) == 0x000008, "Wrong alignment on FortQuestScreen_AttemptToPlayQuest");
static_assert(sizeof(FortQuestScreen_AttemptToPlayQuest) == 0x000008, "Wrong size on FortQuestScreen_AttemptToPlayQuest");
static_assert(offsetof(FortQuestScreen_AttemptToPlayQuest, QuestItem) == 0x000000, "Member 'FortQuestScreen_AttemptToPlayQuest::QuestItem' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestScreen.BP_SetInitialQuestToSelect
// 0x0008 (0x0008 - 0x0000)
struct FortQuestScreen_BP_SetInitialQuestToSelect final
{
public:
	class UFortQuestItem*                         QuestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestScreen_BP_SetInitialQuestToSelect) == 0x000008, "Wrong alignment on FortQuestScreen_BP_SetInitialQuestToSelect");
static_assert(sizeof(FortQuestScreen_BP_SetInitialQuestToSelect) == 0x000008, "Wrong size on FortQuestScreen_BP_SetInitialQuestToSelect");
static_assert(offsetof(FortQuestScreen_BP_SetInitialQuestToSelect, QuestItem) == 0x000000, "Member 'FortQuestScreen_BP_SetInitialQuestToSelect::QuestItem' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestScreen.SetDisableClaimRewardButton
// 0x0001 (0x0001 - 0x0000)
struct FortQuestScreen_SetDisableClaimRewardButton final
{
public:
	bool                                          bToDisable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestScreen_SetDisableClaimRewardButton) == 0x000001, "Wrong alignment on FortQuestScreen_SetDisableClaimRewardButton");
static_assert(sizeof(FortQuestScreen_SetDisableClaimRewardButton) == 0x000001, "Wrong size on FortQuestScreen_SetDisableClaimRewardButton");
static_assert(offsetof(FortQuestScreen_SetDisableClaimRewardButton, bToDisable) == 0x000000, "Member 'FortQuestScreen_SetDisableClaimRewardButton::bToDisable' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestScreen.SetInputActionStates
// 0x0010 (0x0010 - 0x0000)
struct FortQuestScreen_SetInputActionStates final
{
public:
	const class UFortQuestItem*                   QuestItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsQuestAudioPlaying;                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldShowPlayQuest;                              // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAreQuestItemsDifferent;                           // 0x000A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestScreen_SetInputActionStates) == 0x000008, "Wrong alignment on FortQuestScreen_SetInputActionStates");
static_assert(sizeof(FortQuestScreen_SetInputActionStates) == 0x000010, "Wrong size on FortQuestScreen_SetInputActionStates");
static_assert(offsetof(FortQuestScreen_SetInputActionStates, QuestItem) == 0x000000, "Member 'FortQuestScreen_SetInputActionStates::QuestItem' has a wrong offset!");
static_assert(offsetof(FortQuestScreen_SetInputActionStates, bIsQuestAudioPlaying) == 0x000008, "Member 'FortQuestScreen_SetInputActionStates::bIsQuestAudioPlaying' has a wrong offset!");
static_assert(offsetof(FortQuestScreen_SetInputActionStates, bShouldShowPlayQuest) == 0x000009, "Member 'FortQuestScreen_SetInputActionStates::bShouldShowPlayQuest' has a wrong offset!");
static_assert(offsetof(FortQuestScreen_SetInputActionStates, bAreQuestItemsDifferent) == 0x00000A, "Member 'FortQuestScreen_SetInputActionStates::bAreQuestItemsDifferent' has a wrong offset!");

// Function SaveTheWorldUI.FortQuestScreen.TriggerClaimRewardEvent
// 0x0008 (0x0008 - 0x0000)
struct FortQuestScreen_TriggerClaimRewardEvent final
{
public:
	const class UFortQuestItem*                   QuestItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestScreen_TriggerClaimRewardEvent) == 0x000008, "Wrong alignment on FortQuestScreen_TriggerClaimRewardEvent");
static_assert(sizeof(FortQuestScreen_TriggerClaimRewardEvent) == 0x000008, "Wrong size on FortQuestScreen_TriggerClaimRewardEvent");
static_assert(offsetof(FortQuestScreen_TriggerClaimRewardEvent, QuestItem) == 0x000000, "Member 'FortQuestScreen_TriggerClaimRewardEvent::QuestItem' has a wrong offset!");

// Function SaveTheWorldUI.FortResearchMenuBase.GetClaimableResearchPointEstimate
// 0x0004 (0x0004 - 0x0000)
struct FortResearchMenuBase_GetClaimableResearchPointEstimate final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchMenuBase_GetClaimableResearchPointEstimate) == 0x000004, "Wrong alignment on FortResearchMenuBase_GetClaimableResearchPointEstimate");
static_assert(sizeof(FortResearchMenuBase_GetClaimableResearchPointEstimate) == 0x000004, "Wrong size on FortResearchMenuBase_GetClaimableResearchPointEstimate");
static_assert(offsetof(FortResearchMenuBase_GetClaimableResearchPointEstimate, ReturnValue) == 0x000000, "Member 'FortResearchMenuBase_GetClaimableResearchPointEstimate::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResearchMenuBase.RequestPurchaseResearchLevel
// 0x0010 (0x0010 - 0x0000)
struct FortResearchMenuBase_RequestPurchaseResearchLevel final
{
public:
	class FString                                 StatId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchMenuBase_RequestPurchaseResearchLevel) == 0x000008, "Wrong alignment on FortResearchMenuBase_RequestPurchaseResearchLevel");
static_assert(sizeof(FortResearchMenuBase_RequestPurchaseResearchLevel) == 0x000010, "Wrong size on FortResearchMenuBase_RequestPurchaseResearchLevel");
static_assert(offsetof(FortResearchMenuBase_RequestPurchaseResearchLevel, StatId) == 0x000000, "Member 'FortResearchMenuBase_RequestPurchaseResearchLevel::StatId' has a wrong offset!");

// Function SaveTheWorldUI.FortResearchMenuBase.AreResearchRespecTokensAvailable
// 0x0001 (0x0001 - 0x0000)
struct FortResearchMenuBase_AreResearchRespecTokensAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchMenuBase_AreResearchRespecTokensAvailable) == 0x000001, "Wrong alignment on FortResearchMenuBase_AreResearchRespecTokensAvailable");
static_assert(sizeof(FortResearchMenuBase_AreResearchRespecTokensAvailable) == 0x000001, "Wrong size on FortResearchMenuBase_AreResearchRespecTokensAvailable");
static_assert(offsetof(FortResearchMenuBase_AreResearchRespecTokensAvailable, ReturnValue) == 0x000000, "Member 'FortResearchMenuBase_AreResearchRespecTokensAvailable::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResearchMenuBase.GetResearchRespecTokenCount
// 0x0004 (0x0004 - 0x0000)
struct FortResearchMenuBase_GetResearchRespecTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchMenuBase_GetResearchRespecTokenCount) == 0x000004, "Wrong alignment on FortResearchMenuBase_GetResearchRespecTokenCount");
static_assert(sizeof(FortResearchMenuBase_GetResearchRespecTokenCount) == 0x000004, "Wrong size on FortResearchMenuBase_GetResearchRespecTokenCount");
static_assert(offsetof(FortResearchMenuBase_GetResearchRespecTokenCount, ReturnValue) == 0x000000, "Member 'FortResearchMenuBase_GetResearchRespecTokenCount::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResearchStatTileWidget.GetCostToIncreaseStat
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetCostToIncreaseStat final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetCostToIncreaseStat) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetCostToIncreaseStat");
static_assert(sizeof(FortResearchStatTileWidget_GetCostToIncreaseStat) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetCostToIncreaseStat");
static_assert(offsetof(FortResearchStatTileWidget_GetCostToIncreaseStat, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetCostToIncreaseStat::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResearchStatTileWidget.GetCurrentCombinedStatValue
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetCurrentCombinedStatValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetCurrentCombinedStatValue) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetCurrentCombinedStatValue");
static_assert(sizeof(FortResearchStatTileWidget_GetCurrentCombinedStatValue) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetCurrentCombinedStatValue");
static_assert(offsetof(FortResearchStatTileWidget_GetCurrentCombinedStatValue, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetCurrentCombinedStatValue::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResearchStatTileWidget.GetCurrentPersonalStatValue
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetCurrentPersonalStatValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetCurrentPersonalStatValue) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetCurrentPersonalStatValue");
static_assert(sizeof(FortResearchStatTileWidget_GetCurrentPersonalStatValue) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetCurrentPersonalStatValue");
static_assert(offsetof(FortResearchStatTileWidget_GetCurrentPersonalStatValue, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetCurrentPersonalStatValue::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResearchStatTileWidget.GetCurrentResearchLevel
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetCurrentResearchLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetCurrentResearchLevel) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetCurrentResearchLevel");
static_assert(sizeof(FortResearchStatTileWidget_GetCurrentResearchLevel) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetCurrentResearchLevel");
static_assert(offsetof(FortResearchStatTileWidget_GetCurrentResearchLevel, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetCurrentResearchLevel::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResearchStatTileWidget.GetCurrentTeamStatValue
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetCurrentTeamStatValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetCurrentTeamStatValue) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetCurrentTeamStatValue");
static_assert(sizeof(FortResearchStatTileWidget_GetCurrentTeamStatValue) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetCurrentTeamStatValue");
static_assert(offsetof(FortResearchStatTileWidget_GetCurrentTeamStatValue, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetCurrentTeamStatValue::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResearchStatTileWidget.GetNextCombinedStatValueDelta
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetNextCombinedStatValueDelta final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetNextCombinedStatValueDelta) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetNextCombinedStatValueDelta");
static_assert(sizeof(FortResearchStatTileWidget_GetNextCombinedStatValueDelta) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetNextCombinedStatValueDelta");
static_assert(offsetof(FortResearchStatTileWidget_GetNextCombinedStatValueDelta, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetNextCombinedStatValueDelta::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResearchStatTileWidget.GetNextPersonalStatValueDelta
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetNextPersonalStatValueDelta final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetNextPersonalStatValueDelta) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetNextPersonalStatValueDelta");
static_assert(sizeof(FortResearchStatTileWidget_GetNextPersonalStatValueDelta) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetNextPersonalStatValueDelta");
static_assert(offsetof(FortResearchStatTileWidget_GetNextPersonalStatValueDelta, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetNextPersonalStatValueDelta::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResearchStatTileWidget.GetNextTeamStatValueDelta
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetNextTeamStatValueDelta final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetNextTeamStatValueDelta) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetNextTeamStatValueDelta");
static_assert(sizeof(FortResearchStatTileWidget_GetNextTeamStatValueDelta) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetNextTeamStatValueDelta");
static_assert(offsetof(FortResearchStatTileWidget_GetNextTeamStatValueDelta, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetNextTeamStatValueDelta::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResearchStatTileWidget.GetPersonalStatType
// 0x0001 (0x0001 - 0x0000)
struct FortResearchStatTileWidget_GetPersonalStatType final
{
public:
	EFortStatType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetPersonalStatType) == 0x000001, "Wrong alignment on FortResearchStatTileWidget_GetPersonalStatType");
static_assert(sizeof(FortResearchStatTileWidget_GetPersonalStatType) == 0x000001, "Wrong size on FortResearchStatTileWidget_GetPersonalStatType");
static_assert(offsetof(FortResearchStatTileWidget_GetPersonalStatType, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetPersonalStatType::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResearchStatTileWidget.GetStatIdName
// 0x0010 (0x0010 - 0x0000)
struct FortResearchStatTileWidget_GetStatIdName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetStatIdName) == 0x000008, "Wrong alignment on FortResearchStatTileWidget_GetStatIdName");
static_assert(sizeof(FortResearchStatTileWidget_GetStatIdName) == 0x000010, "Wrong size on FortResearchStatTileWidget_GetStatIdName");
static_assert(offsetof(FortResearchStatTileWidget_GetStatIdName, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetStatIdName::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortResearchStatTileWidget.IsAtMaxResearchLevel
// 0x0001 (0x0001 - 0x0000)
struct FortResearchStatTileWidget_IsAtMaxResearchLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_IsAtMaxResearchLevel) == 0x000001, "Wrong alignment on FortResearchStatTileWidget_IsAtMaxResearchLevel");
static_assert(sizeof(FortResearchStatTileWidget_IsAtMaxResearchLevel) == 0x000001, "Wrong size on FortResearchStatTileWidget_IsAtMaxResearchLevel");
static_assert(offsetof(FortResearchStatTileWidget_IsAtMaxResearchLevel, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_IsAtMaxResearchLevel::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortDailyRewards.TryClaimDailyRewards
// 0x0001 (0x0001 - 0x0000)
struct FortDailyRewards_TryClaimDailyRewards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDailyRewards_TryClaimDailyRewards) == 0x000001, "Wrong alignment on FortDailyRewards_TryClaimDailyRewards");
static_assert(sizeof(FortDailyRewards_TryClaimDailyRewards) == 0x000001, "Wrong size on FortDailyRewards_TryClaimDailyRewards");
static_assert(offsetof(FortDailyRewards_TryClaimDailyRewards, ReturnValue) == 0x000000, "Member 'FortDailyRewards_TryClaimDailyRewards::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortDailyRewards.TryGetDailyRewardsData
// 0x0028 (0x0028 - 0x0000)
struct FortDailyRewards_TryGetDailyRewardsData final
{
public:
	struct FFortDailyRewardsData                  OutDailyRewardsData;                               // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         ItemCardsPerSchedule;                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinEpicRewards;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDailyRewards_TryGetDailyRewardsData) == 0x000008, "Wrong alignment on FortDailyRewards_TryGetDailyRewardsData");
static_assert(sizeof(FortDailyRewards_TryGetDailyRewardsData) == 0x000028, "Wrong size on FortDailyRewards_TryGetDailyRewardsData");
static_assert(offsetof(FortDailyRewards_TryGetDailyRewardsData, OutDailyRewardsData) == 0x000000, "Member 'FortDailyRewards_TryGetDailyRewardsData::OutDailyRewardsData' has a wrong offset!");
static_assert(offsetof(FortDailyRewards_TryGetDailyRewardsData, ItemCardsPerSchedule) == 0x000018, "Member 'FortDailyRewards_TryGetDailyRewardsData::ItemCardsPerSchedule' has a wrong offset!");
static_assert(offsetof(FortDailyRewards_TryGetDailyRewardsData, MinEpicRewards) == 0x00001C, "Member 'FortDailyRewards_TryGetDailyRewardsData::MinEpicRewards' has a wrong offset!");
static_assert(offsetof(FortDailyRewards_TryGetDailyRewardsData, ReturnValue) == 0x000020, "Member 'FortDailyRewards_TryGetDailyRewardsData::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationData.GetIconBrush
// 0x00D0 (0x00D0 - 0x0000)
struct FortRewardNotificationData_GetIconBrush final
{
public:
	struct FSlateBrush                            IconBrush;                                         // 0x0000(0x00C0)(Parm, OutParm, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x00C0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C1(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0xE];                                       // 0x00C2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRewardNotificationData_GetIconBrush) == 0x000010, "Wrong alignment on FortRewardNotificationData_GetIconBrush");
static_assert(sizeof(FortRewardNotificationData_GetIconBrush) == 0x0000D0, "Wrong size on FortRewardNotificationData_GetIconBrush");
static_assert(offsetof(FortRewardNotificationData_GetIconBrush, IconBrush) == 0x000000, "Member 'FortRewardNotificationData_GetIconBrush::IconBrush' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationData_GetIconBrush, BrushSize) == 0x0000C0, "Member 'FortRewardNotificationData_GetIconBrush::BrushSize' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationData_GetIconBrush, ReturnValue) == 0x0000C1, "Member 'FortRewardNotificationData_GetIconBrush::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationSubWidget.AddInputActionHandler
// 0x0018 (0x0018 - 0x0000)
struct FortRewardNotificationSubWidget_AddInputActionHandler final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowName;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool* bPassThrough)>           CommittedEvent;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationSubWidget_AddInputActionHandler) == 0x000008, "Wrong alignment on FortRewardNotificationSubWidget_AddInputActionHandler");
static_assert(sizeof(FortRewardNotificationSubWidget_AddInputActionHandler) == 0x000018, "Wrong size on FortRewardNotificationSubWidget_AddInputActionHandler");
static_assert(offsetof(FortRewardNotificationSubWidget_AddInputActionHandler, DataTable) == 0x000000, "Member 'FortRewardNotificationSubWidget_AddInputActionHandler::DataTable' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationSubWidget_AddInputActionHandler, RowName) == 0x000008, "Member 'FortRewardNotificationSubWidget_AddInputActionHandler::RowName' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationSubWidget_AddInputActionHandler, CommittedEvent) == 0x00000C, "Member 'FortRewardNotificationSubWidget_AddInputActionHandler::CommittedEvent' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationSubWidget.Init
// 0x0008 (0x0008 - 0x0000)
struct FortRewardNotificationSubWidget_Init final
{
public:
	class UFortRewardNotificationWidget*          MainWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationSubWidget_Init) == 0x000008, "Wrong alignment on FortRewardNotificationSubWidget_Init");
static_assert(sizeof(FortRewardNotificationSubWidget_Init) == 0x000008, "Wrong size on FortRewardNotificationSubWidget_Init");
static_assert(offsetof(FortRewardNotificationSubWidget_Init, MainWidget) == 0x000000, "Member 'FortRewardNotificationSubWidget_Init::MainWidget' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationSubWidget.InspectItem
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNotificationSubWidget_InspectItem final
{
public:
	class UFortItem*                              ItemToInspect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantityOverride;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRewardNotificationSubWidget_InspectItem) == 0x000008, "Wrong alignment on FortRewardNotificationSubWidget_InspectItem");
static_assert(sizeof(FortRewardNotificationSubWidget_InspectItem) == 0x000010, "Wrong size on FortRewardNotificationSubWidget_InspectItem");
static_assert(offsetof(FortRewardNotificationSubWidget_InspectItem, ItemToInspect) == 0x000000, "Member 'FortRewardNotificationSubWidget_InspectItem::ItemToInspect' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationSubWidget_InspectItem, QuantityOverride) == 0x000008, "Member 'FortRewardNotificationSubWidget_InspectItem::QuantityOverride' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationSubWidget.IsPrimaryActionEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortRewardNotificationSubWidget_IsPrimaryActionEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationSubWidget_IsPrimaryActionEnabled) == 0x000001, "Wrong alignment on FortRewardNotificationSubWidget_IsPrimaryActionEnabled");
static_assert(sizeof(FortRewardNotificationSubWidget_IsPrimaryActionEnabled) == 0x000001, "Wrong size on FortRewardNotificationSubWidget_IsPrimaryActionEnabled");
static_assert(offsetof(FortRewardNotificationSubWidget_IsPrimaryActionEnabled, bEnabled) == 0x000000, "Member 'FortRewardNotificationSubWidget_IsPrimaryActionEnabled::bEnabled' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationSubWidget.IsPrimaryActionHidden
// 0x0001 (0x0001 - 0x0000)
struct FortRewardNotificationSubWidget_IsPrimaryActionHidden final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationSubWidget_IsPrimaryActionHidden) == 0x000001, "Wrong alignment on FortRewardNotificationSubWidget_IsPrimaryActionHidden");
static_assert(sizeof(FortRewardNotificationSubWidget_IsPrimaryActionHidden) == 0x000001, "Wrong size on FortRewardNotificationSubWidget_IsPrimaryActionHidden");
static_assert(offsetof(FortRewardNotificationSubWidget_IsPrimaryActionHidden, bHidden) == 0x000000, "Member 'FortRewardNotificationSubWidget_IsPrimaryActionHidden::bHidden' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationSubWidget.RemoveInputActionHandler
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNotificationSubWidget_RemoveInputActionHandler final
{
public:
	struct FDataTableRowHandle                    InputActionRow;                                    // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationSubWidget_RemoveInputActionHandler) == 0x000008, "Wrong alignment on FortRewardNotificationSubWidget_RemoveInputActionHandler");
static_assert(sizeof(FortRewardNotificationSubWidget_RemoveInputActionHandler) == 0x000010, "Wrong size on FortRewardNotificationSubWidget_RemoveInputActionHandler");
static_assert(offsetof(FortRewardNotificationSubWidget_RemoveInputActionHandler, InputActionRow) == 0x000000, "Member 'FortRewardNotificationSubWidget_RemoveInputActionHandler::InputActionRow' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationSubWidget.SetInputActionHandlerState
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNotificationSubWidget_SetInputActionHandlerState final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowName;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputActionState                             State;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRewardNotificationSubWidget_SetInputActionHandlerState) == 0x000008, "Wrong alignment on FortRewardNotificationSubWidget_SetInputActionHandlerState");
static_assert(sizeof(FortRewardNotificationSubWidget_SetInputActionHandlerState) == 0x000010, "Wrong size on FortRewardNotificationSubWidget_SetInputActionHandlerState");
static_assert(offsetof(FortRewardNotificationSubWidget_SetInputActionHandlerState, DataTable) == 0x000000, "Member 'FortRewardNotificationSubWidget_SetInputActionHandlerState::DataTable' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationSubWidget_SetInputActionHandlerState, RowName) == 0x000008, "Member 'FortRewardNotificationSubWidget_SetInputActionHandlerState::RowName' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationSubWidget_SetInputActionHandlerState, State) == 0x00000C, "Member 'FortRewardNotificationSubWidget_SetInputActionHandlerState::State' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationSubWidget.SetPrimaryActionEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortRewardNotificationSubWidget_SetPrimaryActionEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationSubWidget_SetPrimaryActionEnabled) == 0x000001, "Wrong alignment on FortRewardNotificationSubWidget_SetPrimaryActionEnabled");
static_assert(sizeof(FortRewardNotificationSubWidget_SetPrimaryActionEnabled) == 0x000001, "Wrong size on FortRewardNotificationSubWidget_SetPrimaryActionEnabled");
static_assert(offsetof(FortRewardNotificationSubWidget_SetPrimaryActionEnabled, bEnabled) == 0x000000, "Member 'FortRewardNotificationSubWidget_SetPrimaryActionEnabled::bEnabled' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationSubWidget.SetPrimaryActionText
// 0x0018 (0x0018 - 0x0000)
struct FortRewardNotificationSubWidget_SetPrimaryActionText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationSubWidget_SetPrimaryActionText) == 0x000008, "Wrong alignment on FortRewardNotificationSubWidget_SetPrimaryActionText");
static_assert(sizeof(FortRewardNotificationSubWidget_SetPrimaryActionText) == 0x000018, "Wrong size on FortRewardNotificationSubWidget_SetPrimaryActionText");
static_assert(offsetof(FortRewardNotificationSubWidget_SetPrimaryActionText, Text) == 0x000000, "Member 'FortRewardNotificationSubWidget_SetPrimaryActionText::Text' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardConversationWidget.GetDataFromSentence
// 0x00E0 (0x00E0 - 0x0000)
struct FortRewardConversationWidget_GetDataFromSentence final
{
public:
	struct FFortConversationSentence              Sentence;                                          // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x00C0(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UTexture2D*                             TalkingHeadTexture;                                // 0x00D8(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardConversationWidget_GetDataFromSentence) == 0x000008, "Wrong alignment on FortRewardConversationWidget_GetDataFromSentence");
static_assert(sizeof(FortRewardConversationWidget_GetDataFromSentence) == 0x0000E0, "Wrong size on FortRewardConversationWidget_GetDataFromSentence");
static_assert(offsetof(FortRewardConversationWidget_GetDataFromSentence, Sentence) == 0x000000, "Member 'FortRewardConversationWidget_GetDataFromSentence::Sentence' has a wrong offset!");
static_assert(offsetof(FortRewardConversationWidget_GetDataFromSentence, Text) == 0x0000C0, "Member 'FortRewardConversationWidget_GetDataFromSentence::Text' has a wrong offset!");
static_assert(offsetof(FortRewardConversationWidget_GetDataFromSentence, TalkingHeadTexture) == 0x0000D8, "Member 'FortRewardConversationWidget_GetDataFromSentence::TalkingHeadTexture' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardConversationWidget.IsValidConversation
// 0x0010 (0x0010 - 0x0000)
struct FortRewardConversationWidget_IsValidConversation final
{
public:
	const class UFortConversation*                Conversation;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRewardConversationWidget_IsValidConversation) == 0x000008, "Wrong alignment on FortRewardConversationWidget_IsValidConversation");
static_assert(sizeof(FortRewardConversationWidget_IsValidConversation) == 0x000010, "Wrong size on FortRewardConversationWidget_IsValidConversation");
static_assert(offsetof(FortRewardConversationWidget_IsValidConversation, Conversation) == 0x000000, "Member 'FortRewardConversationWidget_IsValidConversation::Conversation' has a wrong offset!");
static_assert(offsetof(FortRewardConversationWidget_IsValidConversation, ReturnValue) == 0x000008, "Member 'FortRewardConversationWidget_IsValidConversation::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardExpeditionWidget.CollectExpedition
// 0x0008 (0x0008 - 0x0000)
struct FortRewardExpeditionWidget_CollectExpedition final
{
public:
	class UFortExpeditionItem*                    Expedition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardExpeditionWidget_CollectExpedition) == 0x000008, "Wrong alignment on FortRewardExpeditionWidget_CollectExpedition");
static_assert(sizeof(FortRewardExpeditionWidget_CollectExpedition) == 0x000008, "Wrong size on FortRewardExpeditionWidget_CollectExpedition");
static_assert(offsetof(FortRewardExpeditionWidget_CollectExpedition, Expedition) == 0x000000, "Member 'FortRewardExpeditionWidget_CollectExpedition::Expedition' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardExpeditionWidget.OnCollectExpeditionCompleted
// 0x0020 (0x0020 - 0x0000)
struct FortRewardExpeditionWidget_OnCollectExpeditionCompleted final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSucceeded;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemInstanceQuantityPair>  Rewards;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardExpeditionWidget_OnCollectExpeditionCompleted) == 0x000008, "Wrong alignment on FortRewardExpeditionWidget_OnCollectExpeditionCompleted");
static_assert(sizeof(FortRewardExpeditionWidget_OnCollectExpeditionCompleted) == 0x000020, "Wrong size on FortRewardExpeditionWidget_OnCollectExpeditionCompleted");
static_assert(offsetof(FortRewardExpeditionWidget_OnCollectExpeditionCompleted, Expedition) == 0x000000, "Member 'FortRewardExpeditionWidget_OnCollectExpeditionCompleted::Expedition' has a wrong offset!");
static_assert(offsetof(FortRewardExpeditionWidget_OnCollectExpeditionCompleted, bSucceeded) == 0x000008, "Member 'FortRewardExpeditionWidget_OnCollectExpeditionCompleted::bSucceeded' has a wrong offset!");
static_assert(offsetof(FortRewardExpeditionWidget_OnCollectExpeditionCompleted, Rewards) == 0x000010, "Member 'FortRewardExpeditionWidget_OnCollectExpeditionCompleted::Rewards' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNewQuestWidget.GetDataFromSentence
// 0x00E0 (0x00E0 - 0x0000)
struct FortRewardNewQuestWidget_GetDataFromSentence final
{
public:
	struct FFortConversationSentence              Sentence;                                          // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x00C0(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UTexture2D*                             TalkingHeadTexture;                                // 0x00D8(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNewQuestWidget_GetDataFromSentence) == 0x000008, "Wrong alignment on FortRewardNewQuestWidget_GetDataFromSentence");
static_assert(sizeof(FortRewardNewQuestWidget_GetDataFromSentence) == 0x0000E0, "Wrong size on FortRewardNewQuestWidget_GetDataFromSentence");
static_assert(offsetof(FortRewardNewQuestWidget_GetDataFromSentence, Sentence) == 0x000000, "Member 'FortRewardNewQuestWidget_GetDataFromSentence::Sentence' has a wrong offset!");
static_assert(offsetof(FortRewardNewQuestWidget_GetDataFromSentence, Text) == 0x0000C0, "Member 'FortRewardNewQuestWidget_GetDataFromSentence::Text' has a wrong offset!");
static_assert(offsetof(FortRewardNewQuestWidget_GetDataFromSentence, TalkingHeadTexture) == 0x0000D8, "Member 'FortRewardNewQuestWidget_GetDataFromSentence::TalkingHeadTexture' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNewQuestWidget.IsValidConversation
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNewQuestWidget_IsValidConversation final
{
public:
	const class UFortConversation*                Conversation;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRewardNewQuestWidget_IsValidConversation) == 0x000008, "Wrong alignment on FortRewardNewQuestWidget_IsValidConversation");
static_assert(sizeof(FortRewardNewQuestWidget_IsValidConversation) == 0x000010, "Wrong size on FortRewardNewQuestWidget_IsValidConversation");
static_assert(offsetof(FortRewardNewQuestWidget_IsValidConversation, Conversation) == 0x000000, "Member 'FortRewardNewQuestWidget_IsValidConversation::Conversation' has a wrong offset!");
static_assert(offsetof(FortRewardNewQuestWidget_IsValidConversation, ReturnValue) == 0x000008, "Member 'FortRewardNewQuestWidget_IsValidConversation::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.AddCollectionBookData
// 0x0060 (0x0060 - 0x0000)
struct FortRewardNotificationWidget_AddCollectionBookData final
{
public:
	struct FFortCollectionBookRewards             CollectionBookRewards;                             // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_AddCollectionBookData) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_AddCollectionBookData");
static_assert(sizeof(FortRewardNotificationWidget_AddCollectionBookData) == 0x000060, "Wrong size on FortRewardNotificationWidget_AddCollectionBookData");
static_assert(offsetof(FortRewardNotificationWidget_AddCollectionBookData, CollectionBookRewards) == 0x000000, "Member 'FortRewardNotificationWidget_AddCollectionBookData::CollectionBookRewards' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.AddEpicQuestData
// 0x0008 (0x0008 - 0x0000)
struct FortRewardNotificationWidget_AddEpicQuestData final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_AddEpicQuestData) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_AddEpicQuestData");
static_assert(sizeof(FortRewardNotificationWidget_AddEpicQuestData) == 0x000008, "Wrong size on FortRewardNotificationWidget_AddEpicQuestData");
static_assert(offsetof(FortRewardNotificationWidget_AddEpicQuestData, Quest) == 0x000000, "Member 'FortRewardNotificationWidget_AddEpicQuestData::Quest' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.AddExpeditionData
// 0x0008 (0x0008 - 0x0000)
struct FortRewardNotificationWidget_AddExpeditionData final
{
public:
	class UFortExpeditionItem*                    ExpeditionItem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_AddExpeditionData) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_AddExpeditionData");
static_assert(sizeof(FortRewardNotificationWidget_AddExpeditionData) == 0x000008, "Wrong size on FortRewardNotificationWidget_AddExpeditionData");
static_assert(offsetof(FortRewardNotificationWidget_AddExpeditionData, ExpeditionItem) == 0x000000, "Member 'FortRewardNotificationWidget_AddExpeditionData::ExpeditionItem' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.AddItemCacheRewardData
// 0x0008 (0x0008 - 0x0000)
struct FortRewardNotificationWidget_AddItemCacheRewardData final
{
public:
	class UFortItem*                              ItemCache;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_AddItemCacheRewardData) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_AddItemCacheRewardData");
static_assert(sizeof(FortRewardNotificationWidget_AddItemCacheRewardData) == 0x000008, "Wrong size on FortRewardNotificationWidget_AddItemCacheRewardData");
static_assert(offsetof(FortRewardNotificationWidget_AddItemCacheRewardData, ItemCache) == 0x000000, "Member 'FortRewardNotificationWidget_AddItemCacheRewardData::ItemCache' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.AddQuestData
// 0x0008 (0x0008 - 0x0000)
struct FortRewardNotificationWidget_AddQuestData final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_AddQuestData) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_AddQuestData");
static_assert(sizeof(FortRewardNotificationWidget_AddQuestData) == 0x000008, "Wrong size on FortRewardNotificationWidget_AddQuestData");
static_assert(offsetof(FortRewardNotificationWidget_AddQuestData, Quest) == 0x000000, "Member 'FortRewardNotificationWidget_AddQuestData::Quest' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.HandleOnCollectionBookRewardClaimed
// 0x0078 (0x0078 - 0x0000)
struct FortRewardNotificationWidget_HandleOnCollectionBookRewardClaimed final
{
public:
	struct FFortCollectionBookRewards             RewardClaimed;                                     // 0x0000(0x0060)(Parm, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemInstanceQuantityPair>  ActualRewards;                                     // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_HandleOnCollectionBookRewardClaimed) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_HandleOnCollectionBookRewardClaimed");
static_assert(sizeof(FortRewardNotificationWidget_HandleOnCollectionBookRewardClaimed) == 0x000078, "Wrong size on FortRewardNotificationWidget_HandleOnCollectionBookRewardClaimed");
static_assert(offsetof(FortRewardNotificationWidget_HandleOnCollectionBookRewardClaimed, RewardClaimed) == 0x000000, "Member 'FortRewardNotificationWidget_HandleOnCollectionBookRewardClaimed::RewardClaimed' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationWidget_HandleOnCollectionBookRewardClaimed, bSuccess) == 0x000060, "Member 'FortRewardNotificationWidget_HandleOnCollectionBookRewardClaimed::bSuccess' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationWidget_HandleOnCollectionBookRewardClaimed, ActualRewards) == 0x000068, "Member 'FortRewardNotificationWidget_HandleOnCollectionBookRewardClaimed::ActualRewards' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.HandleOnDifficultyIncreaseRewardsClaimed
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNotificationWidget_HandleOnDifficultyIncreaseRewardsClaimed final
{
public:
	TArray<struct FFortItemInstanceQuantityPair>  DifficultyRewards;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_HandleOnDifficultyIncreaseRewardsClaimed) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_HandleOnDifficultyIncreaseRewardsClaimed");
static_assert(sizeof(FortRewardNotificationWidget_HandleOnDifficultyIncreaseRewardsClaimed) == 0x000010, "Wrong size on FortRewardNotificationWidget_HandleOnDifficultyIncreaseRewardsClaimed");
static_assert(offsetof(FortRewardNotificationWidget_HandleOnDifficultyIncreaseRewardsClaimed, DifficultyRewards) == 0x000000, "Member 'FortRewardNotificationWidget_HandleOnDifficultyIncreaseRewardsClaimed::DifficultyRewards' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.HandleOnItemCacheRewardsClaimed
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNotificationWidget_HandleOnItemCacheRewardsClaimed final
{
public:
	TArray<struct FFortItemInstanceQuantityPair>  ClaimedRewards;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_HandleOnItemCacheRewardsClaimed) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_HandleOnItemCacheRewardsClaimed");
static_assert(sizeof(FortRewardNotificationWidget_HandleOnItemCacheRewardsClaimed) == 0x000010, "Wrong size on FortRewardNotificationWidget_HandleOnItemCacheRewardsClaimed");
static_assert(offsetof(FortRewardNotificationWidget_HandleOnItemCacheRewardsClaimed, ClaimedRewards) == 0x000000, "Member 'FortRewardNotificationWidget_HandleOnItemCacheRewardsClaimed::ClaimedRewards' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.HandleOnMissionAlertRewardsOpened
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNotificationWidget_HandleOnMissionAlertRewardsOpened final
{
public:
	TArray<struct FFortItemInstanceQuantityPair>  AlertRewards;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_HandleOnMissionAlertRewardsOpened) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_HandleOnMissionAlertRewardsOpened");
static_assert(sizeof(FortRewardNotificationWidget_HandleOnMissionAlertRewardsOpened) == 0x000010, "Wrong size on FortRewardNotificationWidget_HandleOnMissionAlertRewardsOpened");
static_assert(offsetof(FortRewardNotificationWidget_HandleOnMissionAlertRewardsOpened, AlertRewards) == 0x000000, "Member 'FortRewardNotificationWidget_HandleOnMissionAlertRewardsOpened::AlertRewards' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.HandleOnMissionRewardsOpened
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNotificationWidget_HandleOnMissionRewardsOpened final
{
public:
	TArray<struct FFortItemInstanceQuantityPair>  MissionRewards;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_HandleOnMissionRewardsOpened) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_HandleOnMissionRewardsOpened");
static_assert(sizeof(FortRewardNotificationWidget_HandleOnMissionRewardsOpened) == 0x000010, "Wrong size on FortRewardNotificationWidget_HandleOnMissionRewardsOpened");
static_assert(offsetof(FortRewardNotificationWidget_HandleOnMissionRewardsOpened, MissionRewards) == 0x000000, "Member 'FortRewardNotificationWidget_HandleOnMissionRewardsOpened::MissionRewards' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.HandleOnQuestRewardClaimed
// 0x0018 (0x0018 - 0x0000)
struct FortRewardNotificationWidget_HandleOnQuestRewardClaimed final
{
public:
	const class UFortQuestItem*                   Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemInstanceQuantityPair>  Rewards;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_HandleOnQuestRewardClaimed) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_HandleOnQuestRewardClaimed");
static_assert(sizeof(FortRewardNotificationWidget_HandleOnQuestRewardClaimed) == 0x000018, "Wrong size on FortRewardNotificationWidget_HandleOnQuestRewardClaimed");
static_assert(offsetof(FortRewardNotificationWidget_HandleOnQuestRewardClaimed, Quest) == 0x000000, "Member 'FortRewardNotificationWidget_HandleOnQuestRewardClaimed::Quest' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationWidget_HandleOnQuestRewardClaimed, Rewards) == 0x000008, "Member 'FortRewardNotificationWidget_HandleOnQuestRewardClaimed::Rewards' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.InspectItem
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNotificationWidget_InspectItem final
{
public:
	class UFortItem*                              ItemToInspect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantityOverride;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRewardNotificationWidget_InspectItem) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_InspectItem");
static_assert(sizeof(FortRewardNotificationWidget_InspectItem) == 0x000010, "Wrong size on FortRewardNotificationWidget_InspectItem");
static_assert(offsetof(FortRewardNotificationWidget_InspectItem, ItemToInspect) == 0x000000, "Member 'FortRewardNotificationWidget_InspectItem::ItemToInspect' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationWidget_InspectItem, QuantityOverride) == 0x000008, "Member 'FortRewardNotificationWidget_InspectItem::QuantityOverride' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.IsPrimaryActionEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortRewardNotificationWidget_IsPrimaryActionEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_IsPrimaryActionEnabled) == 0x000001, "Wrong alignment on FortRewardNotificationWidget_IsPrimaryActionEnabled");
static_assert(sizeof(FortRewardNotificationWidget_IsPrimaryActionEnabled) == 0x000001, "Wrong size on FortRewardNotificationWidget_IsPrimaryActionEnabled");
static_assert(offsetof(FortRewardNotificationWidget_IsPrimaryActionEnabled, bEnabled) == 0x000000, "Member 'FortRewardNotificationWidget_IsPrimaryActionEnabled::bEnabled' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.IsPrimaryActionHidden
// 0x0001 (0x0001 - 0x0000)
struct FortRewardNotificationWidget_IsPrimaryActionHidden final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_IsPrimaryActionHidden) == 0x000001, "Wrong alignment on FortRewardNotificationWidget_IsPrimaryActionHidden");
static_assert(sizeof(FortRewardNotificationWidget_IsPrimaryActionHidden) == 0x000001, "Wrong size on FortRewardNotificationWidget_IsPrimaryActionHidden");
static_assert(offsetof(FortRewardNotificationWidget_IsPrimaryActionHidden, bHidden) == 0x000000, "Member 'FortRewardNotificationWidget_IsPrimaryActionHidden::bHidden' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.MarkDefaultItemsForMulch
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNotificationWidget_MarkDefaultItemsForMulch final
{
public:
	TArray<struct FFortItemInstanceQuantityPair>  ItemList;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_MarkDefaultItemsForMulch) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_MarkDefaultItemsForMulch");
static_assert(sizeof(FortRewardNotificationWidget_MarkDefaultItemsForMulch) == 0x000010, "Wrong size on FortRewardNotificationWidget_MarkDefaultItemsForMulch");
static_assert(offsetof(FortRewardNotificationWidget_MarkDefaultItemsForMulch, ItemList) == 0x000000, "Member 'FortRewardNotificationWidget_MarkDefaultItemsForMulch::ItemList' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.OnPopulateChoiceRewards
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNotificationWidget_OnPopulateChoiceRewards final
{
public:
	TArray<struct FFortItemInstanceQuantityPair>  ItemList;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_OnPopulateChoiceRewards) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_OnPopulateChoiceRewards");
static_assert(sizeof(FortRewardNotificationWidget_OnPopulateChoiceRewards) == 0x000010, "Wrong size on FortRewardNotificationWidget_OnPopulateChoiceRewards");
static_assert(offsetof(FortRewardNotificationWidget_OnPopulateChoiceRewards, ItemList) == 0x000000, "Member 'FortRewardNotificationWidget_OnPopulateChoiceRewards::ItemList' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.OnPopulateExpeditionReward
// 0x0008 (0x0008 - 0x0000)
struct FortRewardNotificationWidget_OnPopulateExpeditionReward final
{
public:
	const class UFortRewardExpeditionData*        ExpeditionReward;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_OnPopulateExpeditionReward) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_OnPopulateExpeditionReward");
static_assert(sizeof(FortRewardNotificationWidget_OnPopulateExpeditionReward) == 0x000008, "Wrong size on FortRewardNotificationWidget_OnPopulateExpeditionReward");
static_assert(offsetof(FortRewardNotificationWidget_OnPopulateExpeditionReward, ExpeditionReward) == 0x000000, "Member 'FortRewardNotificationWidget_OnPopulateExpeditionReward::ExpeditionReward' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.OnPopulateGiftBoxReward
// 0x0008 (0x0008 - 0x0000)
struct FortRewardNotificationWidget_OnPopulateGiftBoxReward final
{
public:
	const class UFortRewardGiftBoxData*           GiftBoxReward;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_OnPopulateGiftBoxReward) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_OnPopulateGiftBoxReward");
static_assert(sizeof(FortRewardNotificationWidget_OnPopulateGiftBoxReward) == 0x000008, "Wrong size on FortRewardNotificationWidget_OnPopulateGiftBoxReward");
static_assert(offsetof(FortRewardNotificationWidget_OnPopulateGiftBoxReward, GiftBoxReward) == 0x000000, "Member 'FortRewardNotificationWidget_OnPopulateGiftBoxReward::GiftBoxReward' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.OnPopulateNewQuestReward
// 0x0008 (0x0008 - 0x0000)
struct FortRewardNotificationWidget_OnPopulateNewQuestReward final
{
public:
	const class UFortRewardEpicQuestData*         QuestReward;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_OnPopulateNewQuestReward) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_OnPopulateNewQuestReward");
static_assert(sizeof(FortRewardNotificationWidget_OnPopulateNewQuestReward) == 0x000008, "Wrong size on FortRewardNotificationWidget_OnPopulateNewQuestReward");
static_assert(offsetof(FortRewardNotificationWidget_OnPopulateNewQuestReward, QuestReward) == 0x000000, "Member 'FortRewardNotificationWidget_OnPopulateNewQuestReward::QuestReward' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.OnPrimaryActionTextChanged
// 0x0018 (0x0018 - 0x0000)
struct FortRewardNotificationWidget_OnPrimaryActionTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_OnPrimaryActionTextChanged) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_OnPrimaryActionTextChanged");
static_assert(sizeof(FortRewardNotificationWidget_OnPrimaryActionTextChanged) == 0x000018, "Wrong size on FortRewardNotificationWidget_OnPrimaryActionTextChanged");
static_assert(offsetof(FortRewardNotificationWidget_OnPrimaryActionTextChanged, Text) == 0x000000, "Member 'FortRewardNotificationWidget_OnPrimaryActionTextChanged::Text' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.OnRewardsClaimed
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNotificationWidget_OnRewardsClaimed final
{
public:
	TArray<struct FFortItemInstanceQuantityPair>  ItemList;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_OnRewardsClaimed) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_OnRewardsClaimed");
static_assert(sizeof(FortRewardNotificationWidget_OnRewardsClaimed) == 0x000010, "Wrong size on FortRewardNotificationWidget_OnRewardsClaimed");
static_assert(offsetof(FortRewardNotificationWidget_OnRewardsClaimed, ItemList) == 0x000000, "Member 'FortRewardNotificationWidget_OnRewardsClaimed::ItemList' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.PopulateReward
// 0x0008 (0x0008 - 0x0000)
struct FortRewardNotificationWidget_PopulateReward final
{
public:
	const class UFortRewardNotificationData*      Reward;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_PopulateReward) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_PopulateReward");
static_assert(sizeof(FortRewardNotificationWidget_PopulateReward) == 0x000008, "Wrong size on FortRewardNotificationWidget_PopulateReward");
static_assert(offsetof(FortRewardNotificationWidget_PopulateReward, Reward) == 0x000000, "Member 'FortRewardNotificationWidget_PopulateReward::Reward' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.SetPrimaryActionEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortRewardNotificationWidget_SetPrimaryActionEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_SetPrimaryActionEnabled) == 0x000001, "Wrong alignment on FortRewardNotificationWidget_SetPrimaryActionEnabled");
static_assert(sizeof(FortRewardNotificationWidget_SetPrimaryActionEnabled) == 0x000001, "Wrong size on FortRewardNotificationWidget_SetPrimaryActionEnabled");
static_assert(offsetof(FortRewardNotificationWidget_SetPrimaryActionEnabled, bEnabled) == 0x000000, "Member 'FortRewardNotificationWidget_SetPrimaryActionEnabled::bEnabled' has a wrong offset!");

// Function SaveTheWorldUI.FortRewardNotificationWidget.SetPrimaryActionText
// 0x0018 (0x0018 - 0x0000)
struct FortRewardNotificationWidget_SetPrimaryActionText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_SetPrimaryActionText) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_SetPrimaryActionText");
static_assert(sizeof(FortRewardNotificationWidget_SetPrimaryActionText) == 0x000018, "Wrong size on FortRewardNotificationWidget_SetPrimaryActionText");
static_assert(offsetof(FortRewardNotificationWidget_SetPrimaryActionText, Text) == 0x000000, "Member 'FortRewardNotificationWidget_SetPrimaryActionText::Text' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSelectorButton.SetIdOfSquadToManageBP
// 0x0004 (0x0004 - 0x0000)
struct FortSquadSelectorButton_SetIdOfSquadToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSelectorButton_SetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSquadSelectorButton_SetIdOfSquadToManageBP");
static_assert(sizeof(FortSquadSelectorButton_SetIdOfSquadToManageBP) == 0x000004, "Wrong size on FortSquadSelectorButton_SetIdOfSquadToManageBP");
static_assert(offsetof(FortSquadSelectorButton_SetIdOfSquadToManageBP, SquadId) == 0x000000, "Member 'FortSquadSelectorButton_SetIdOfSquadToManageBP::SquadId' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSelectorButton.GetIdOfSquadToManageBP
// 0x0004 (0x0004 - 0x0000)
struct FortSquadSelectorButton_GetIdOfSquadToManageBP final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSelectorButton_GetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSquadSelectorButton_GetIdOfSquadToManageBP");
static_assert(sizeof(FortSquadSelectorButton_GetIdOfSquadToManageBP) == 0x000004, "Wrong size on FortSquadSelectorButton_GetIdOfSquadToManageBP");
static_assert(offsetof(FortSquadSelectorButton_GetIdOfSquadToManageBP, ReturnValue) == 0x000000, "Member 'FortSquadSelectorButton_GetIdOfSquadToManageBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSelectorButton.TryGetStaticSquadDataBP
// 0x0088 (0x0088 - 0x0000)
struct FortSquadSelectorButton_TryGetStaticSquadDataBP final
{
public:
	struct FHomebaseSquad                         OutSquadData;                                      // 0x0000(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSelectorButton_TryGetStaticSquadDataBP) == 0x000008, "Wrong alignment on FortSquadSelectorButton_TryGetStaticSquadDataBP");
static_assert(sizeof(FortSquadSelectorButton_TryGetStaticSquadDataBP) == 0x000088, "Wrong size on FortSquadSelectorButton_TryGetStaticSquadDataBP");
static_assert(offsetof(FortSquadSelectorButton_TryGetStaticSquadDataBP, OutSquadData) == 0x000000, "Member 'FortSquadSelectorButton_TryGetStaticSquadDataBP::OutSquadData' has a wrong offset!");
static_assert(offsetof(FortSquadSelectorButton_TryGetStaticSquadDataBP, ReturnValue) == 0x000080, "Member 'FortSquadSelectorButton_TryGetStaticSquadDataBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortDefenderSquadSelectorButton.TryGetPowerLevel
// 0x0008 (0x0008 - 0x0000)
struct FortDefenderSquadSelectorButton_TryGetPowerLevel final
{
public:
	int32                                         OutPowerLevel;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDefenderSquadSelectorButton_TryGetPowerLevel) == 0x000004, "Wrong alignment on FortDefenderSquadSelectorButton_TryGetPowerLevel");
static_assert(sizeof(FortDefenderSquadSelectorButton_TryGetPowerLevel) == 0x000008, "Wrong size on FortDefenderSquadSelectorButton_TryGetPowerLevel");
static_assert(offsetof(FortDefenderSquadSelectorButton_TryGetPowerLevel, OutPowerLevel) == 0x000000, "Member 'FortDefenderSquadSelectorButton_TryGetPowerLevel::OutPowerLevel' has a wrong offset!");
static_assert(offsetof(FortDefenderSquadSelectorButton_TryGetPowerLevel, ReturnValue) == 0x000004, "Member 'FortDefenderSquadSelectorButton_TryGetPowerLevel::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortDefenderSquadSelectorButton.TryGetTheaterUniqueId
// 0x0018 (0x0018 - 0x0000)
struct FortDefenderSquadSelectorButton_TryGetTheaterUniqueId final
{
public:
	class FString                                 OutTheaterUniqueId;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutIsUnlocked;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDefenderSquadSelectorButton_TryGetTheaterUniqueId) == 0x000008, "Wrong alignment on FortDefenderSquadSelectorButton_TryGetTheaterUniqueId");
static_assert(sizeof(FortDefenderSquadSelectorButton_TryGetTheaterUniqueId) == 0x000018, "Wrong size on FortDefenderSquadSelectorButton_TryGetTheaterUniqueId");
static_assert(offsetof(FortDefenderSquadSelectorButton_TryGetTheaterUniqueId, OutTheaterUniqueId) == 0x000000, "Member 'FortDefenderSquadSelectorButton_TryGetTheaterUniqueId::OutTheaterUniqueId' has a wrong offset!");
static_assert(offsetof(FortDefenderSquadSelectorButton_TryGetTheaterUniqueId, OutIsUnlocked) == 0x000010, "Member 'FortDefenderSquadSelectorButton_TryGetTheaterUniqueId::OutIsUnlocked' has a wrong offset!");
static_assert(offsetof(FortDefenderSquadSelectorButton_TryGetTheaterUniqueId, ReturnValue) == 0x000011, "Member 'FortDefenderSquadSelectorButton_TryGetTheaterUniqueId::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.HandleDifferentSquadSlotSelected
// 0x0004 (0x0004 - 0x0000)
struct FortSquadManagementScreenBase_HandleDifferentSquadSlotSelected final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_HandleDifferentSquadSlotSelected) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_HandleDifferentSquadSlotSelected");
static_assert(sizeof(FortSquadManagementScreenBase_HandleDifferentSquadSlotSelected) == 0x000004, "Wrong size on FortSquadManagementScreenBase_HandleDifferentSquadSlotSelected");
static_assert(offsetof(FortSquadManagementScreenBase_HandleDifferentSquadSlotSelected, SquadSlotIndex) == 0x000000, "Member 'FortSquadManagementScreenBase_HandleDifferentSquadSlotSelected::SquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.HandleOpenSquadSlot
// 0x0004 (0x0004 - 0x0000)
struct FortSquadManagementScreenBase_HandleOpenSquadSlot final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_HandleOpenSquadSlot) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_HandleOpenSquadSlot");
static_assert(sizeof(FortSquadManagementScreenBase_HandleOpenSquadSlot) == 0x000004, "Wrong size on FortSquadManagementScreenBase_HandleOpenSquadSlot");
static_assert(offsetof(FortSquadManagementScreenBase_HandleOpenSquadSlot, SquadSlotIndex) == 0x000000, "Member 'FortSquadManagementScreenBase_HandleOpenSquadSlot::SquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.HandlePickerSelectionChanged
// 0x0008 (0x0008 - 0x0000)
struct FortSquadManagementScreenBase_HandlePickerSelectionChanged final
{
public:
	class UFortItem*                              SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_HandlePickerSelectionChanged) == 0x000008, "Wrong alignment on FortSquadManagementScreenBase_HandlePickerSelectionChanged");
static_assert(sizeof(FortSquadManagementScreenBase_HandlePickerSelectionChanged) == 0x000008, "Wrong size on FortSquadManagementScreenBase_HandlePickerSelectionChanged");
static_assert(offsetof(FortSquadManagementScreenBase_HandlePickerSelectionChanged, SelectedItem) == 0x000000, "Member 'FortSquadManagementScreenBase_HandlePickerSelectionChanged::SelectedItem' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.HandlePickerSelectionCommitted
// 0x0008 (0x0008 - 0x0000)
struct FortSquadManagementScreenBase_HandlePickerSelectionCommitted final
{
public:
	class UFortItem*                              CommittedItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_HandlePickerSelectionCommitted) == 0x000008, "Wrong alignment on FortSquadManagementScreenBase_HandlePickerSelectionCommitted");
static_assert(sizeof(FortSquadManagementScreenBase_HandlePickerSelectionCommitted) == 0x000008, "Wrong size on FortSquadManagementScreenBase_HandlePickerSelectionCommitted");
static_assert(offsetof(FortSquadManagementScreenBase_HandlePickerSelectionCommitted, CommittedItem) == 0x000000, "Member 'FortSquadManagementScreenBase_HandlePickerSelectionCommitted::CommittedItem' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.HandleViewInAll
// 0x0004 (0x0004 - 0x0000)
struct FortSquadManagementScreenBase_HandleViewInAll final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_HandleViewInAll) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_HandleViewInAll");
static_assert(sizeof(FortSquadManagementScreenBase_HandleViewInAll) == 0x000004, "Wrong size on FortSquadManagementScreenBase_HandleViewInAll");
static_assert(offsetof(FortSquadManagementScreenBase_HandleViewInAll, SquadSlotIndex) == 0x000000, "Member 'FortSquadManagementScreenBase_HandleViewInAll::SquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.NavigateToSquadSlot
// 0x0004 (0x0004 - 0x0000)
struct FortSquadManagementScreenBase_NavigateToSquadSlot final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_NavigateToSquadSlot) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_NavigateToSquadSlot");
static_assert(sizeof(FortSquadManagementScreenBase_NavigateToSquadSlot) == 0x000004, "Wrong size on FortSquadManagementScreenBase_NavigateToSquadSlot");
static_assert(offsetof(FortSquadManagementScreenBase_NavigateToSquadSlot, SquadSlotIndex) == 0x000000, "Member 'FortSquadManagementScreenBase_NavigateToSquadSlot::SquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.SelectSquadWithOffset
// 0x0004 (0x0004 - 0x0000)
struct FortSquadManagementScreenBase_SelectSquadWithOffset final
{
public:
	int32                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_SelectSquadWithOffset) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_SelectSquadWithOffset");
static_assert(sizeof(FortSquadManagementScreenBase_SelectSquadWithOffset) == 0x000004, "Wrong size on FortSquadManagementScreenBase_SelectSquadWithOffset");
static_assert(offsetof(FortSquadManagementScreenBase_SelectSquadWithOffset, Offset) == 0x000000, "Member 'FortSquadManagementScreenBase_SelectSquadWithOffset::Offset' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.SetIdOfSquadToManageBP
// 0x0004 (0x0004 - 0x0000)
struct FortSquadManagementScreenBase_SetIdOfSquadToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_SetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_SetIdOfSquadToManageBP");
static_assert(sizeof(FortSquadManagementScreenBase_SetIdOfSquadToManageBP) == 0x000004, "Wrong size on FortSquadManagementScreenBase_SetIdOfSquadToManageBP");
static_assert(offsetof(FortSquadManagementScreenBase_SetIdOfSquadToManageBP, SquadId) == 0x000000, "Member 'FortSquadManagementScreenBase_SetIdOfSquadToManageBP::SquadId' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.ShowWarningReadOnlyWIFE
// 0x0001 (0x0001 - 0x0000)
struct FortSquadManagementScreenBase_ShowWarningReadOnlyWIFE final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_ShowWarningReadOnlyWIFE) == 0x000001, "Wrong alignment on FortSquadManagementScreenBase_ShowWarningReadOnlyWIFE");
static_assert(sizeof(FortSquadManagementScreenBase_ShowWarningReadOnlyWIFE) == 0x000001, "Wrong size on FortSquadManagementScreenBase_ShowWarningReadOnlyWIFE");
static_assert(offsetof(FortSquadManagementScreenBase_ShowWarningReadOnlyWIFE, Force) == 0x000000, "Member 'FortSquadManagementScreenBase_ShowWarningReadOnlyWIFE::Force' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.GetIdOfSquadToManageBP
// 0x0004 (0x0004 - 0x0000)
struct FortSquadManagementScreenBase_GetIdOfSquadToManageBP final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_GetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_GetIdOfSquadToManageBP");
static_assert(sizeof(FortSquadManagementScreenBase_GetIdOfSquadToManageBP) == 0x000004, "Wrong size on FortSquadManagementScreenBase_GetIdOfSquadToManageBP");
static_assert(offsetof(FortSquadManagementScreenBase_GetIdOfSquadToManageBP, ReturnValue) == 0x000000, "Member 'FortSquadManagementScreenBase_GetIdOfSquadToManageBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.GetNumUnlockedSquads
// 0x0004 (0x0004 - 0x0000)
struct FortSquadManagementScreenBase_GetNumUnlockedSquads final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_GetNumUnlockedSquads) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_GetNumUnlockedSquads");
static_assert(sizeof(FortSquadManagementScreenBase_GetNumUnlockedSquads) == 0x000004, "Wrong size on FortSquadManagementScreenBase_GetNumUnlockedSquads");
static_assert(offsetof(FortSquadManagementScreenBase_GetNumUnlockedSquads, ReturnValue) == 0x000000, "Member 'FortSquadManagementScreenBase_GetNumUnlockedSquads::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.IsScreenWIFE
// 0x0001 (0x0001 - 0x0000)
struct FortSquadManagementScreenBase_IsScreenWIFE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_IsScreenWIFE) == 0x000001, "Wrong alignment on FortSquadManagementScreenBase_IsScreenWIFE");
static_assert(sizeof(FortSquadManagementScreenBase_IsScreenWIFE) == 0x000001, "Wrong size on FortSquadManagementScreenBase_IsScreenWIFE");
static_assert(offsetof(FortSquadManagementScreenBase_IsScreenWIFE, ReturnValue) == 0x000000, "Member 'FortSquadManagementScreenBase_IsScreenWIFE::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.TryGetAttributeValueFromSquad
// 0x0048 (0x0048 - 0x0000)
struct FortSquadManagementScreenBase_TryGetAttributeValueFromSquad final
{
public:
	float                                         OutValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadManagementScreenBase_TryGetAttributeValueFromSquad) == 0x000008, "Wrong alignment on FortSquadManagementScreenBase_TryGetAttributeValueFromSquad");
static_assert(sizeof(FortSquadManagementScreenBase_TryGetAttributeValueFromSquad) == 0x000048, "Wrong size on FortSquadManagementScreenBase_TryGetAttributeValueFromSquad");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetAttributeValueFromSquad, OutValue) == 0x000000, "Member 'FortSquadManagementScreenBase_TryGetAttributeValueFromSquad::OutValue' has a wrong offset!");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetAttributeValueFromSquad, Attribute) == 0x000008, "Member 'FortSquadManagementScreenBase_TryGetAttributeValueFromSquad::Attribute' has a wrong offset!");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetAttributeValueFromSquad, ReturnValue) == 0x000040, "Member 'FortSquadManagementScreenBase_TryGetAttributeValueFromSquad::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.TryGetSquadMainAttribute
// 0x0040 (0x0040 - 0x0000)
struct FortSquadManagementScreenBase_TryGetSquadMainAttribute final
{
public:
	struct FGameplayAttribute                     OutGameplayAttribute;                              // 0x0000(0x0038)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadManagementScreenBase_TryGetSquadMainAttribute) == 0x000008, "Wrong alignment on FortSquadManagementScreenBase_TryGetSquadMainAttribute");
static_assert(sizeof(FortSquadManagementScreenBase_TryGetSquadMainAttribute) == 0x000040, "Wrong size on FortSquadManagementScreenBase_TryGetSquadMainAttribute");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetSquadMainAttribute, OutGameplayAttribute) == 0x000000, "Member 'FortSquadManagementScreenBase_TryGetSquadMainAttribute::OutGameplayAttribute' has a wrong offset!");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetSquadMainAttribute, ReturnValue) == 0x000038, "Member 'FortSquadManagementScreenBase_TryGetSquadMainAttribute::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.TryGetSquadTeamAttribute
// 0x0040 (0x0040 - 0x0000)
struct FortSquadManagementScreenBase_TryGetSquadTeamAttribute final
{
public:
	struct FGameplayAttribute                     OutGameplayAttribute;                              // 0x0000(0x0038)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadManagementScreenBase_TryGetSquadTeamAttribute) == 0x000008, "Wrong alignment on FortSquadManagementScreenBase_TryGetSquadTeamAttribute");
static_assert(sizeof(FortSquadManagementScreenBase_TryGetSquadTeamAttribute) == 0x000040, "Wrong size on FortSquadManagementScreenBase_TryGetSquadTeamAttribute");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetSquadTeamAttribute, OutGameplayAttribute) == 0x000000, "Member 'FortSquadManagementScreenBase_TryGetSquadTeamAttribute::OutGameplayAttribute' has a wrong offset!");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetSquadTeamAttribute, ReturnValue) == 0x000038, "Member 'FortSquadManagementScreenBase_TryGetSquadTeamAttribute::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadManagementScreenBase.TryGetStaticSquadDataBP
// 0x0088 (0x0088 - 0x0000)
struct FortSquadManagementScreenBase_TryGetStaticSquadDataBP final
{
public:
	struct FHomebaseSquad                         OutSquadData;                                      // 0x0000(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadManagementScreenBase_TryGetStaticSquadDataBP) == 0x000008, "Wrong alignment on FortSquadManagementScreenBase_TryGetStaticSquadDataBP");
static_assert(sizeof(FortSquadManagementScreenBase_TryGetStaticSquadDataBP) == 0x000088, "Wrong size on FortSquadManagementScreenBase_TryGetStaticSquadDataBP");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetStaticSquadDataBP, OutSquadData) == 0x000000, "Member 'FortSquadManagementScreenBase_TryGetStaticSquadDataBP::OutSquadData' has a wrong offset!");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetStaticSquadDataBP, ReturnValue) == 0x000080, "Member 'FortSquadManagementScreenBase_TryGetStaticSquadDataBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortHeroSquadManagementScreen.PlayFeedbackForSlottingPerson
// 0x0010 (0x0010 - 0x0000)
struct FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson final
{
public:
	class UFortCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson) == 0x000008, "Wrong alignment on FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson");
static_assert(sizeof(FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson) == 0x000010, "Wrong size on FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson");
static_assert(offsetof(FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson, Character) == 0x000000, "Member 'FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson::Character' has a wrong offset!");
static_assert(offsetof(FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson, SlotIndex) == 0x000008, "Member 'FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson::SlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadIcon.SetSquad
// 0x0004 (0x0004 - 0x0000)
struct FortSquadIcon_SetSquad final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadIcon_SetSquad) == 0x000004, "Wrong alignment on FortSquadIcon_SetSquad");
static_assert(sizeof(FortSquadIcon_SetSquad) == 0x000004, "Wrong size on FortSquadIcon_SetSquad");
static_assert(offsetof(FortSquadIcon_SetSquad, InName) == 0x000000, "Member 'FortSquadIcon_SetSquad::InName' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadLandingPageDefenderSquadDetails.HandleAddDefenderSquadMemberBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP) == 0x000004, "Wrong alignment on FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP");
static_assert(sizeof(FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP) == 0x000008, "Wrong size on FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP");
static_assert(offsetof(FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP, SquadId) == 0x000000, "Member 'FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP, Index_0) == 0x000004, "Member 'FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP::Index_0' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadLandingPageDefenderSquadDetails.HandleDefenderSquadInfoSetBP
// 0x0030 (0x0030 - 0x0000)
struct FortSquadLandingPageDefenderSquadDetails_HandleDefenderSquadInfoSetBP final
{
public:
	struct FFortLandingPageDefenderSummaryInfo    DefenderSummaryInfo;                               // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadLandingPageDefenderSquadDetails_HandleDefenderSquadInfoSetBP) == 0x000008, "Wrong alignment on FortSquadLandingPageDefenderSquadDetails_HandleDefenderSquadInfoSetBP");
static_assert(sizeof(FortSquadLandingPageDefenderSquadDetails_HandleDefenderSquadInfoSetBP) == 0x000030, "Wrong size on FortSquadLandingPageDefenderSquadDetails_HandleDefenderSquadInfoSetBP");
static_assert(offsetof(FortSquadLandingPageDefenderSquadDetails_HandleDefenderSquadInfoSetBP, DefenderSummaryInfo) == 0x000000, "Member 'FortSquadLandingPageDefenderSquadDetails_HandleDefenderSquadInfoSetBP::DefenderSummaryInfo' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadLandingPageDefenderSquadDetails.SetDefenderSquadInfo
// 0x0030 (0x0030 - 0x0000)
struct FortSquadLandingPageDefenderSquadDetails_SetDefenderSquadInfo final
{
public:
	struct FFortLandingPageDefenderSummaryInfo    DefenderSummaryInfo;                               // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadLandingPageDefenderSquadDetails_SetDefenderSquadInfo) == 0x000008, "Wrong alignment on FortSquadLandingPageDefenderSquadDetails_SetDefenderSquadInfo");
static_assert(sizeof(FortSquadLandingPageDefenderSquadDetails_SetDefenderSquadInfo) == 0x000030, "Wrong size on FortSquadLandingPageDefenderSquadDetails_SetDefenderSquadInfo");
static_assert(offsetof(FortSquadLandingPageDefenderSquadDetails_SetDefenderSquadInfo, DefenderSummaryInfo) == 0x000000, "Member 'FortSquadLandingPageDefenderSquadDetails_SetDefenderSquadInfo::DefenderSummaryInfo' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadLandingPageDefenderSquadDetailsLocked.SetDefenderSquadInfo
// 0x0030 (0x0030 - 0x0000)
struct FortSquadLandingPageDefenderSquadDetailsLocked_SetDefenderSquadInfo final
{
public:
	struct FFortLandingPageDefenderSummaryInfo    DefenderSummaryInfo;                               // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadLandingPageDefenderSquadDetailsLocked_SetDefenderSquadInfo) == 0x000008, "Wrong alignment on FortSquadLandingPageDefenderSquadDetailsLocked_SetDefenderSquadInfo");
static_assert(sizeof(FortSquadLandingPageDefenderSquadDetailsLocked_SetDefenderSquadInfo) == 0x000030, "Wrong size on FortSquadLandingPageDefenderSquadDetailsLocked_SetDefenderSquadInfo");
static_assert(offsetof(FortSquadLandingPageDefenderSquadDetailsLocked_SetDefenderSquadInfo, DefenderSummaryInfo) == 0x000000, "Member 'FortSquadLandingPageDefenderSquadDetailsLocked_SetDefenderSquadInfo::DefenderSummaryInfo' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadLandingPageDefenderSummary.HandleAddDefenderSquadDetailsBP
// 0x0030 (0x0030 - 0x0000)
struct FortSquadLandingPageDefenderSummary_HandleAddDefenderSquadDetailsBP final
{
public:
	struct FFortLandingPageDefenderSummaryInfo    DefenderSummaryInfo;                               // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadLandingPageDefenderSummary_HandleAddDefenderSquadDetailsBP) == 0x000008, "Wrong alignment on FortSquadLandingPageDefenderSummary_HandleAddDefenderSquadDetailsBP");
static_assert(sizeof(FortSquadLandingPageDefenderSummary_HandleAddDefenderSquadDetailsBP) == 0x000030, "Wrong size on FortSquadLandingPageDefenderSummary_HandleAddDefenderSquadDetailsBP");
static_assert(offsetof(FortSquadLandingPageDefenderSummary_HandleAddDefenderSquadDetailsBP, DefenderSummaryInfo) == 0x000000, "Member 'FortSquadLandingPageDefenderSummary_HandleAddDefenderSquadDetailsBP::DefenderSummaryInfo' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadLandingPageDefenderSummary.HandleAddLockedDefenderSquadDetailsBP
// 0x0030 (0x0030 - 0x0000)
struct FortSquadLandingPageDefenderSummary_HandleAddLockedDefenderSquadDetailsBP final
{
public:
	struct FFortLandingPageDefenderSummaryInfo    DefenderSummaryInfo;                               // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadLandingPageDefenderSummary_HandleAddLockedDefenderSquadDetailsBP) == 0x000008, "Wrong alignment on FortSquadLandingPageDefenderSummary_HandleAddLockedDefenderSquadDetailsBP");
static_assert(sizeof(FortSquadLandingPageDefenderSummary_HandleAddLockedDefenderSquadDetailsBP) == 0x000030, "Wrong size on FortSquadLandingPageDefenderSummary_HandleAddLockedDefenderSquadDetailsBP");
static_assert(offsetof(FortSquadLandingPageDefenderSummary_HandleAddLockedDefenderSquadDetailsBP, DefenderSummaryInfo) == 0x000000, "Member 'FortSquadLandingPageDefenderSummary_HandleAddLockedDefenderSquadDetailsBP::DefenderSummaryInfo' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadLandingPageSurvivorSummary.HandleAddSetBonusSummaryLineItemBP
// 0x0048 (0x0048 - 0x0000)
struct FortSquadLandingPageSurvivorSummary_HandleAddSetBonusSummaryLineItemBP final
{
public:
	struct FFortAttributeModifierAccumulation     AttributeModifierAccumulation;                     // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadLandingPageSurvivorSummary_HandleAddSetBonusSummaryLineItemBP) == 0x000008, "Wrong alignment on FortSquadLandingPageSurvivorSummary_HandleAddSetBonusSummaryLineItemBP");
static_assert(sizeof(FortSquadLandingPageSurvivorSummary_HandleAddSetBonusSummaryLineItemBP) == 0x000048, "Wrong size on FortSquadLandingPageSurvivorSummary_HandleAddSetBonusSummaryLineItemBP");
static_assert(offsetof(FortSquadLandingPageSurvivorSummary_HandleAddSetBonusSummaryLineItemBP, AttributeModifierAccumulation) == 0x000000, "Member 'FortSquadLandingPageSurvivorSummary_HandleAddSetBonusSummaryLineItemBP::AttributeModifierAccumulation' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotDetailsPanel.SetIdOfSquadSlotToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP) == 0x000008, "Wrong size on FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP, SquadId) == 0x000000, "Member 'FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP, SquadSlotIndex) == 0x000004, "Member 'FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP::SquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotDetailsPanel.GetIdOfSquadSlotToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   OutSquadId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSquadSlotIndex;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP) == 0x000008, "Wrong size on FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP, OutSquadId) == 0x000000, "Member 'FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP::OutSquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP, OutSquadSlotIndex) == 0x000004, "Member 'FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP::OutSquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotDetailsPanel.GetItemInSquadSlotBP
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotDetailsPanel_GetItemInSquadSlotBP final
{
public:
	const class ULocalPlayer*                     LocalPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotDetailsPanel_GetItemInSquadSlotBP) == 0x000008, "Wrong alignment on FortSquadSlotDetailsPanel_GetItemInSquadSlotBP");
static_assert(sizeof(FortSquadSlotDetailsPanel_GetItemInSquadSlotBP) == 0x000010, "Wrong size on FortSquadSlotDetailsPanel_GetItemInSquadSlotBP");
static_assert(offsetof(FortSquadSlotDetailsPanel_GetItemInSquadSlotBP, LocalPlayer) == 0x000000, "Member 'FortSquadSlotDetailsPanel_GetItemInSquadSlotBP::LocalPlayer' has a wrong offset!");
static_assert(offsetof(FortSquadSlotDetailsPanel_GetItemInSquadSlotBP, ReturnValue) == 0x000008, "Member 'FortSquadSlotDetailsPanel_GetItemInSquadSlotBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotDetailsPanel.GetSlottingRestrictionReasons
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotDetailsPanel_GetSlottingRestrictionReasons final
{
public:
	TArray<EFortSquadSlottingRestrictionReason>   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotDetailsPanel_GetSlottingRestrictionReasons) == 0x000008, "Wrong alignment on FortSquadSlotDetailsPanel_GetSlottingRestrictionReasons");
static_assert(sizeof(FortSquadSlotDetailsPanel_GetSlottingRestrictionReasons) == 0x000010, "Wrong size on FortSquadSlotDetailsPanel_GetSlottingRestrictionReasons");
static_assert(offsetof(FortSquadSlotDetailsPanel_GetSlottingRestrictionReasons, ReturnValue) == 0x000000, "Member 'FortSquadSlotDetailsPanel_GetSlottingRestrictionReasons::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotDetailsPanel.IsSquadSlotLockedBP
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotDetailsPanel_IsSquadSlotLockedBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotDetailsPanel_IsSquadSlotLockedBP) == 0x000001, "Wrong alignment on FortSquadSlotDetailsPanel_IsSquadSlotLockedBP");
static_assert(sizeof(FortSquadSlotDetailsPanel_IsSquadSlotLockedBP) == 0x000001, "Wrong size on FortSquadSlotDetailsPanel_IsSquadSlotLockedBP");
static_assert(offsetof(FortSquadSlotDetailsPanel_IsSquadSlotLockedBP, ReturnValue) == 0x000000, "Member 'FortSquadSlotDetailsPanel_IsSquadSlotLockedBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotDetailsPanel.TryGetItemToPreviewInSlot
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot final
{
public:
	class UFortItem*                              OutItemToPreviewInSlot;                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot) == 0x000008, "Wrong alignment on FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot");
static_assert(sizeof(FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot) == 0x000010, "Wrong size on FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot");
static_assert(offsetof(FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot, OutItemToPreviewInSlot) == 0x000000, "Member 'FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot::OutItemToPreviewInSlot' has a wrong offset!");
static_assert(offsetof(FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot, ReturnValue) == 0x000008, "Member 'FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotItemDetailElementWidget.SetIdOfSquadSlotToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP) == 0x000008, "Wrong size on FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP, SquadId) == 0x000000, "Member 'FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP, SquadSlotIndex) == 0x000004, "Member 'FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP::SquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotItemDetailElementWidget.GetIdOfSquadSlotToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   OutSquadId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSquadSlotIndex;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP) == 0x000008, "Wrong size on FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP, OutSquadId) == 0x000000, "Member 'FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP::OutSquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP, OutSquadSlotIndex) == 0x000004, "Member 'FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP::OutSquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotItemDetailElementWidget.GetItemInSquadSlotBP
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP final
{
public:
	const class ULocalPlayer*                     LocalPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP) == 0x000008, "Wrong alignment on FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP");
static_assert(sizeof(FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP) == 0x000010, "Wrong size on FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP");
static_assert(offsetof(FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP, LocalPlayer) == 0x000000, "Member 'FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP::LocalPlayer' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP, ReturnValue) == 0x000008, "Member 'FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotItemDetailElementWidget.IsSquadSlotLockedBP
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotItemDetailElementWidget_IsSquadSlotLockedBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailElementWidget_IsSquadSlotLockedBP) == 0x000001, "Wrong alignment on FortSquadSlotItemDetailElementWidget_IsSquadSlotLockedBP");
static_assert(sizeof(FortSquadSlotItemDetailElementWidget_IsSquadSlotLockedBP) == 0x000001, "Wrong size on FortSquadSlotItemDetailElementWidget_IsSquadSlotLockedBP");
static_assert(offsetof(FortSquadSlotItemDetailElementWidget_IsSquadSlotLockedBP, ReturnValue) == 0x000000, "Member 'FortSquadSlotItemDetailElementWidget_IsSquadSlotLockedBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotItemDetailsHostPanel.SetIdOfSquadSlotToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP) == 0x000008, "Wrong size on FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP, SquadId) == 0x000000, "Member 'FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP, SquadSlotIndex) == 0x000004, "Member 'FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP::SquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotItemDetailsHostPanel.GetIdOfSquadSlotToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   OutSquadId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSquadSlotIndex;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP) == 0x000008, "Wrong size on FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP, OutSquadId) == 0x000000, "Member 'FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP::OutSquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP, OutSquadSlotIndex) == 0x000004, "Member 'FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP::OutSquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotItemDetailsHostPanel.GetItemInSquadSlotBP
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP final
{
public:
	const class ULocalPlayer*                     LocalPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP) == 0x000008, "Wrong alignment on FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP");
static_assert(sizeof(FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP) == 0x000010, "Wrong size on FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP");
static_assert(offsetof(FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP, LocalPlayer) == 0x000000, "Member 'FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP::LocalPlayer' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP, ReturnValue) == 0x000008, "Member 'FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotItemDetailsHostPanel.IsSquadSlotLockedBP
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotItemDetailsHostPanel_IsSquadSlotLockedBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailsHostPanel_IsSquadSlotLockedBP) == 0x000001, "Wrong alignment on FortSquadSlotItemDetailsHostPanel_IsSquadSlotLockedBP");
static_assert(sizeof(FortSquadSlotItemDetailsHostPanel_IsSquadSlotLockedBP) == 0x000001, "Wrong size on FortSquadSlotItemDetailsHostPanel_IsSquadSlotLockedBP");
static_assert(offsetof(FortSquadSlotItemDetailsHostPanel_IsSquadSlotLockedBP, ReturnValue) == 0x000000, "Member 'FortSquadSlotItemDetailsHostPanel_IsSquadSlotLockedBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotItemPicker.SetIdOfSquadSlotToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP) == 0x000008, "Wrong size on FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP, SquadId) == 0x000000, "Member 'FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP, SquadSlotIndex) == 0x000004, "Member 'FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP::SquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotItemPicker.SetSortTypes
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotItemPicker_SetSortTypes final
{
public:
	struct FSquadSlotSortTypes                    SquadSlotSortTypes;                                // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemPicker_SetSortTypes) == 0x000008, "Wrong alignment on FortSquadSlotItemPicker_SetSortTypes");
static_assert(sizeof(FortSquadSlotItemPicker_SetSortTypes) == 0x000010, "Wrong size on FortSquadSlotItemPicker_SetSortTypes");
static_assert(offsetof(FortSquadSlotItemPicker_SetSortTypes, SquadSlotSortTypes) == 0x000000, "Member 'FortSquadSlotItemPicker_SetSortTypes::SquadSlotSortTypes' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotItemPicker.GetIdOfSquadSlotToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   OutSquadId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSquadSlotIndex;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP) == 0x000008, "Wrong size on FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP, OutSquadId) == 0x000000, "Member 'FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP::OutSquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP, OutSquadSlotIndex) == 0x000004, "Member 'FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP::OutSquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotItemPickerTileButton.HandleItemSlottedToDifferentSquad
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotItemPickerTileButton_HandleItemSlottedToDifferentSquad final
{
public:
	struct FHomebaseSquadSlotId                   SquadSlotId;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemPickerTileButton_HandleItemSlottedToDifferentSquad) == 0x000004, "Wrong alignment on FortSquadSlotItemPickerTileButton_HandleItemSlottedToDifferentSquad");
static_assert(sizeof(FortSquadSlotItemPickerTileButton_HandleItemSlottedToDifferentSquad) == 0x000008, "Wrong size on FortSquadSlotItemPickerTileButton_HandleItemSlottedToDifferentSquad");
static_assert(offsetof(FortSquadSlotItemPickerTileButton_HandleItemSlottedToDifferentSquad, SquadSlotId) == 0x000000, "Member 'FortSquadSlotItemPickerTileButton_HandleItemSlottedToDifferentSquad::SquadSlotId' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotItemPickerTileButton.GetSlottingRestrictionReasons
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotItemPickerTileButton_GetSlottingRestrictionReasons final
{
public:
	TArray<EFortSquadSlottingRestrictionReason>   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemPickerTileButton_GetSlottingRestrictionReasons) == 0x000008, "Wrong alignment on FortSquadSlotItemPickerTileButton_GetSlottingRestrictionReasons");
static_assert(sizeof(FortSquadSlotItemPickerTileButton_GetSlottingRestrictionReasons) == 0x000010, "Wrong size on FortSquadSlotItemPickerTileButton_GetSlottingRestrictionReasons");
static_assert(offsetof(FortSquadSlotItemPickerTileButton_GetSlottingRestrictionReasons, ReturnValue) == 0x000000, "Member 'FortSquadSlotItemPickerTileButton_GetSlottingRestrictionReasons::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotSelectorPopupMenu.GetHostButton
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotSelectorPopupMenu_GetHostButton final
{
public:
	class UFortSquadSlotSelectorButton*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotSelectorPopupMenu_GetHostButton) == 0x000008, "Wrong alignment on FortSquadSlotSelectorPopupMenu_GetHostButton");
static_assert(sizeof(FortSquadSlotSelectorPopupMenu_GetHostButton) == 0x000008, "Wrong size on FortSquadSlotSelectorPopupMenu_GetHostButton");
static_assert(offsetof(FortSquadSlotSelectorPopupMenu_GetHostButton, ReturnValue) == 0x000000, "Member 'FortSquadSlotSelectorPopupMenu_GetHostButton::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotSelectorPopupMenu.IsScreenWIFE
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotSelectorPopupMenu_IsScreenWIFE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotSelectorPopupMenu_IsScreenWIFE) == 0x000001, "Wrong alignment on FortSquadSlotSelectorPopupMenu_IsScreenWIFE");
static_assert(sizeof(FortSquadSlotSelectorPopupMenu_IsScreenWIFE) == 0x000001, "Wrong size on FortSquadSlotSelectorPopupMenu_IsScreenWIFE");
static_assert(offsetof(FortSquadSlotSelectorPopupMenu_IsScreenWIFE, ReturnValue) == 0x000000, "Member 'FortSquadSlotSelectorPopupMenu_IsScreenWIFE::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotSelectorButton.GetPopupMenu
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotSelectorButton_GetPopupMenu final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotSelectorButton_GetPopupMenu) == 0x000008, "Wrong alignment on FortSquadSlotSelectorButton_GetPopupMenu");
static_assert(sizeof(FortSquadSlotSelectorButton_GetPopupMenu) == 0x000008, "Wrong size on FortSquadSlotSelectorButton_GetPopupMenu");
static_assert(offsetof(FortSquadSlotSelectorButton_GetPopupMenu, ReturnValue) == 0x000000, "Member 'FortSquadSlotSelectorButton_GetPopupMenu::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotSelectorButton.SetIdOfSquadSlotToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP) == 0x000008, "Wrong size on FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP, SquadId) == 0x000000, "Member 'FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP, SquadSlotIndex) == 0x000004, "Member 'FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP::SquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotSelectorButton.GetIdOfSquadSlotToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   OutSquadId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSquadSlotIndex;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP) == 0x000008, "Wrong size on FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP, OutSquadId) == 0x000000, "Member 'FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP::OutSquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP, OutSquadSlotIndex) == 0x000004, "Member 'FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP::OutSquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotSelectorButton.GetInPreviewMode
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotSelectorButton_GetInPreviewMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotSelectorButton_GetInPreviewMode) == 0x000001, "Wrong alignment on FortSquadSlotSelectorButton_GetInPreviewMode");
static_assert(sizeof(FortSquadSlotSelectorButton_GetInPreviewMode) == 0x000001, "Wrong size on FortSquadSlotSelectorButton_GetInPreviewMode");
static_assert(offsetof(FortSquadSlotSelectorButton_GetInPreviewMode, ReturnValue) == 0x000000, "Member 'FortSquadSlotSelectorButton_GetInPreviewMode::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotSelectorButton.IsSquadSlotLockedBP
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotSelectorButton_IsSquadSlotLockedBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotSelectorButton_IsSquadSlotLockedBP) == 0x000001, "Wrong alignment on FortSquadSlotSelectorButton_IsSquadSlotLockedBP");
static_assert(sizeof(FortSquadSlotSelectorButton_IsSquadSlotLockedBP) == 0x000001, "Wrong size on FortSquadSlotSelectorButton_IsSquadSlotLockedBP");
static_assert(offsetof(FortSquadSlotSelectorButton_IsSquadSlotLockedBP, ReturnValue) == 0x000000, "Member 'FortSquadSlotSelectorButton_IsSquadSlotLockedBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotsView.CreateAndAddSquadSlotButton
// 0x0080 (0x0080 - 0x0000)
struct FortSquadSlotsView_CreateAndAddSquadSlotButton final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHomebaseSquadSlot                     SquadSlotDefinition;                               // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UWidget*                                OutSquadSlotButtonHost;                            // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSquadSlotSelectorButton*           ReturnValue;                                       // 0x0078(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_CreateAndAddSquadSlotButton) == 0x000008, "Wrong alignment on FortSquadSlotsView_CreateAndAddSquadSlotButton");
static_assert(sizeof(FortSquadSlotsView_CreateAndAddSquadSlotButton) == 0x000080, "Wrong size on FortSquadSlotsView_CreateAndAddSquadSlotButton");
static_assert(offsetof(FortSquadSlotsView_CreateAndAddSquadSlotButton, SquadSlotIndex) == 0x000000, "Member 'FortSquadSlotsView_CreateAndAddSquadSlotButton::SquadSlotIndex' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_CreateAndAddSquadSlotButton, SquadSlotDefinition) == 0x000008, "Member 'FortSquadSlotsView_CreateAndAddSquadSlotButton::SquadSlotDefinition' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_CreateAndAddSquadSlotButton, OutSquadSlotButtonHost) == 0x000070, "Member 'FortSquadSlotsView_CreateAndAddSquadSlotButton::OutSquadSlotButtonHost' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_CreateAndAddSquadSlotButton, ReturnValue) == 0x000078, "Member 'FortSquadSlotsView_CreateAndAddSquadSlotButton::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotsView.HandleButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotsView_HandleButtonClicked final
{
public:
	class UCommonButtonLegacy*                    CommittedButton;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSlotsView_HandleButtonClicked) == 0x000008, "Wrong alignment on FortSquadSlotsView_HandleButtonClicked");
static_assert(sizeof(FortSquadSlotsView_HandleButtonClicked) == 0x000010, "Wrong size on FortSquadSlotsView_HandleButtonClicked");
static_assert(offsetof(FortSquadSlotsView_HandleButtonClicked, CommittedButton) == 0x000000, "Member 'FortSquadSlotsView_HandleButtonClicked::CommittedButton' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_HandleButtonClicked, ButtonIndex) == 0x000008, "Member 'FortSquadSlotsView_HandleButtonClicked::ButtonIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotsView.HandleButtonDoubleClicked
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotsView_HandleButtonDoubleClicked final
{
public:
	class UCommonButtonLegacy*                    CommittedButton;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSlotsView_HandleButtonDoubleClicked) == 0x000008, "Wrong alignment on FortSquadSlotsView_HandleButtonDoubleClicked");
static_assert(sizeof(FortSquadSlotsView_HandleButtonDoubleClicked) == 0x000010, "Wrong size on FortSquadSlotsView_HandleButtonDoubleClicked");
static_assert(offsetof(FortSquadSlotsView_HandleButtonDoubleClicked, CommittedButton) == 0x000000, "Member 'FortSquadSlotsView_HandleButtonDoubleClicked::CommittedButton' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_HandleButtonDoubleClicked, ButtonIndex) == 0x000008, "Member 'FortSquadSlotsView_HandleButtonDoubleClicked::ButtonIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotsView.HandleHoveredButtonChanged
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotsView_HandleHoveredButtonChanged final
{
public:
	class UCommonButtonLegacy*                    HoveredButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSlotsView_HandleHoveredButtonChanged) == 0x000008, "Wrong alignment on FortSquadSlotsView_HandleHoveredButtonChanged");
static_assert(sizeof(FortSquadSlotsView_HandleHoveredButtonChanged) == 0x000010, "Wrong size on FortSquadSlotsView_HandleHoveredButtonChanged");
static_assert(offsetof(FortSquadSlotsView_HandleHoveredButtonChanged, HoveredButton) == 0x000000, "Member 'FortSquadSlotsView_HandleHoveredButtonChanged::HoveredButton' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_HandleHoveredButtonChanged, ButtonIndex) == 0x000008, "Member 'FortSquadSlotsView_HandleHoveredButtonChanged::ButtonIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotsView.HandleRequestOpenSquadSlot
// 0x0004 (0x0004 - 0x0000)
struct FortSquadSlotsView_HandleRequestOpenSquadSlot final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_HandleRequestOpenSquadSlot) == 0x000004, "Wrong alignment on FortSquadSlotsView_HandleRequestOpenSquadSlot");
static_assert(sizeof(FortSquadSlotsView_HandleRequestOpenSquadSlot) == 0x000004, "Wrong size on FortSquadSlotsView_HandleRequestOpenSquadSlot");
static_assert(offsetof(FortSquadSlotsView_HandleRequestOpenSquadSlot, SquadSlotIndex) == 0x000000, "Member 'FortSquadSlotsView_HandleRequestOpenSquadSlot::SquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotsView.HandleRequestViewInAll
// 0x0004 (0x0004 - 0x0000)
struct FortSquadSlotsView_HandleRequestViewInAll final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_HandleRequestViewInAll) == 0x000004, "Wrong alignment on FortSquadSlotsView_HandleRequestViewInAll");
static_assert(sizeof(FortSquadSlotsView_HandleRequestViewInAll) == 0x000004, "Wrong size on FortSquadSlotsView_HandleRequestViewInAll");
static_assert(offsetof(FortSquadSlotsView_HandleRequestViewInAll, SquadSlotIndex) == 0x000000, "Member 'FortSquadSlotsView_HandleRequestViewInAll::SquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotsView.HandleSelectedButtonChanged
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotsView_HandleSelectedButtonChanged final
{
public:
	class UCommonButtonLegacy*                    SelectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSlotsView_HandleSelectedButtonChanged) == 0x000008, "Wrong alignment on FortSquadSlotsView_HandleSelectedButtonChanged");
static_assert(sizeof(FortSquadSlotsView_HandleSelectedButtonChanged) == 0x000010, "Wrong size on FortSquadSlotsView_HandleSelectedButtonChanged");
static_assert(offsetof(FortSquadSlotsView_HandleSelectedButtonChanged, SelectedButton) == 0x000000, "Member 'FortSquadSlotsView_HandleSelectedButtonChanged::SelectedButton' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_HandleSelectedButtonChanged, ButtonIndex) == 0x000008, "Member 'FortSquadSlotsView_HandleSelectedButtonChanged::ButtonIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotsView.SelectSlot
// 0x0004 (0x0004 - 0x0000)
struct FortSquadSlotsView_SelectSlot final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_SelectSlot) == 0x000004, "Wrong alignment on FortSquadSlotsView_SelectSlot");
static_assert(sizeof(FortSquadSlotsView_SelectSlot) == 0x000004, "Wrong size on FortSquadSlotsView_SelectSlot");
static_assert(offsetof(FortSquadSlotsView_SelectSlot, SquadSlotIndex) == 0x000000, "Member 'FortSquadSlotsView_SelectSlot::SquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotsView.SetIdOfSquadToManageBP
// 0x0004 (0x0004 - 0x0000)
struct FortSquadSlotsView_SetIdOfSquadToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_SetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotsView_SetIdOfSquadToManageBP");
static_assert(sizeof(FortSquadSlotsView_SetIdOfSquadToManageBP) == 0x000004, "Wrong size on FortSquadSlotsView_SetIdOfSquadToManageBP");
static_assert(offsetof(FortSquadSlotsView_SetIdOfSquadToManageBP, SquadId) == 0x000000, "Member 'FortSquadSlotsView_SetIdOfSquadToManageBP::SquadId' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotsView.SetInPreviewMode
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotsView_SetInPreviewMode final
{
public:
	bool                                          bPreview;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_SetInPreviewMode) == 0x000001, "Wrong alignment on FortSquadSlotsView_SetInPreviewMode");
static_assert(sizeof(FortSquadSlotsView_SetInPreviewMode) == 0x000001, "Wrong size on FortSquadSlotsView_SetInPreviewMode");
static_assert(offsetof(FortSquadSlotsView_SetInPreviewMode, bPreview) == 0x000000, "Member 'FortSquadSlotsView_SetInPreviewMode::bPreview' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotsView.SetIsSelectionLocked
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotsView_SetIsSelectionLocked final
{
public:
	bool                                          ShouldSelectionBeLocked;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_SetIsSelectionLocked) == 0x000001, "Wrong alignment on FortSquadSlotsView_SetIsSelectionLocked");
static_assert(sizeof(FortSquadSlotsView_SetIsSelectionLocked) == 0x000001, "Wrong size on FortSquadSlotsView_SetIsSelectionLocked");
static_assert(offsetof(FortSquadSlotsView_SetIsSelectionLocked, ShouldSelectionBeLocked) == 0x000000, "Member 'FortSquadSlotsView_SetIsSelectionLocked::ShouldSelectionBeLocked' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotsView.TryGetSelectedSquadSlotSortTypes
// 0x0018 (0x0018 - 0x0000)
struct FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes final
{
public:
	struct FSquadSlotSortTypes                    OutSlotSortTypes;                                  // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes) == 0x000008, "Wrong alignment on FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes");
static_assert(sizeof(FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes) == 0x000018, "Wrong size on FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes");
static_assert(offsetof(FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes, OutSlotSortTypes) == 0x000000, "Member 'FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes::OutSlotSortTypes' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes, ReturnValue) == 0x000010, "Member 'FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotsView.GetIdOfSquadToManageBP
// 0x0004 (0x0004 - 0x0000)
struct FortSquadSlotsView_GetIdOfSquadToManageBP final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_GetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotsView_GetIdOfSquadToManageBP");
static_assert(sizeof(FortSquadSlotsView_GetIdOfSquadToManageBP) == 0x000004, "Wrong size on FortSquadSlotsView_GetIdOfSquadToManageBP");
static_assert(offsetof(FortSquadSlotsView_GetIdOfSquadToManageBP, ReturnValue) == 0x000000, "Member 'FortSquadSlotsView_GetIdOfSquadToManageBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotsView.GetIndexOfSelectedSquadSlot
// 0x0004 (0x0004 - 0x0000)
struct FortSquadSlotsView_GetIndexOfSelectedSquadSlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_GetIndexOfSelectedSquadSlot) == 0x000004, "Wrong alignment on FortSquadSlotsView_GetIndexOfSelectedSquadSlot");
static_assert(sizeof(FortSquadSlotsView_GetIndexOfSelectedSquadSlot) == 0x000004, "Wrong size on FortSquadSlotsView_GetIndexOfSelectedSquadSlot");
static_assert(offsetof(FortSquadSlotsView_GetIndexOfSelectedSquadSlot, ReturnValue) == 0x000000, "Member 'FortSquadSlotsView_GetIndexOfSelectedSquadSlot::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotsView.TryGetStaticSquadDataBP
// 0x0088 (0x0088 - 0x0000)
struct FortSquadSlotsView_TryGetStaticSquadDataBP final
{
public:
	struct FHomebaseSquad                         OutSquadData;                                      // 0x0000(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSlotsView_TryGetStaticSquadDataBP) == 0x000008, "Wrong alignment on FortSquadSlotsView_TryGetStaticSquadDataBP");
static_assert(sizeof(FortSquadSlotsView_TryGetStaticSquadDataBP) == 0x000088, "Wrong size on FortSquadSlotsView_TryGetStaticSquadDataBP");
static_assert(offsetof(FortSquadSlotsView_TryGetStaticSquadDataBP, OutSquadData) == 0x000000, "Member 'FortSquadSlotsView_TryGetStaticSquadDataBP::OutSquadData' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_TryGetStaticSquadDataBP, ReturnValue) == 0x000080, "Member 'FortSquadSlotsView_TryGetStaticSquadDataBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotWidget.SetCardSize
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotWidget_SetCardSize final
{
public:
	EFortItemCardSize                             CardSize;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotWidget_SetCardSize) == 0x000001, "Wrong alignment on FortSquadSlotWidget_SetCardSize");
static_assert(sizeof(FortSquadSlotWidget_SetCardSize) == 0x000001, "Wrong size on FortSquadSlotWidget_SetCardSize");
static_assert(offsetof(FortSquadSlotWidget_SetCardSize, CardSize) == 0x000000, "Member 'FortSquadSlotWidget_SetCardSize::CardSize' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotWidget.SetIdOfSquadSlotToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotWidget_SetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotWidget_SetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotWidget_SetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotWidget_SetIdOfSquadSlotToManageBP) == 0x000008, "Wrong size on FortSquadSlotWidget_SetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotWidget_SetIdOfSquadSlotToManageBP, SquadId) == 0x000000, "Member 'FortSquadSlotWidget_SetIdOfSquadSlotToManageBP::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotWidget_SetIdOfSquadSlotToManageBP, SquadSlotIndex) == 0x000004, "Member 'FortSquadSlotWidget_SetIdOfSquadSlotToManageBP::SquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotWidget.GetIdOfSquadSlotToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotWidget_GetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   OutSquadId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSquadSlotIndex;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotWidget_GetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotWidget_GetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotWidget_GetIdOfSquadSlotToManageBP) == 0x000008, "Wrong size on FortSquadSlotWidget_GetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotWidget_GetIdOfSquadSlotToManageBP, OutSquadId) == 0x000000, "Member 'FortSquadSlotWidget_GetIdOfSquadSlotToManageBP::OutSquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotWidget_GetIdOfSquadSlotToManageBP, OutSquadSlotIndex) == 0x000004, "Member 'FortSquadSlotWidget_GetIdOfSquadSlotToManageBP::OutSquadSlotIndex' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotWidget.GetItemInSquadSlotBP
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotWidget_GetItemInSquadSlotBP final
{
public:
	const class ULocalPlayer*                     LocalPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotWidget_GetItemInSquadSlotBP) == 0x000008, "Wrong alignment on FortSquadSlotWidget_GetItemInSquadSlotBP");
static_assert(sizeof(FortSquadSlotWidget_GetItemInSquadSlotBP) == 0x000010, "Wrong size on FortSquadSlotWidget_GetItemInSquadSlotBP");
static_assert(offsetof(FortSquadSlotWidget_GetItemInSquadSlotBP, LocalPlayer) == 0x000000, "Member 'FortSquadSlotWidget_GetItemInSquadSlotBP::LocalPlayer' has a wrong offset!");
static_assert(offsetof(FortSquadSlotWidget_GetItemInSquadSlotBP, ReturnValue) == 0x000008, "Member 'FortSquadSlotWidget_GetItemInSquadSlotBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadSlotWidget.IsSquadSlotLockedBP
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotWidget_IsSquadSlotLockedBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotWidget_IsSquadSlotLockedBP) == 0x000001, "Wrong alignment on FortSquadSlotWidget_IsSquadSlotLockedBP");
static_assert(sizeof(FortSquadSlotWidget_IsSquadSlotLockedBP) == 0x000001, "Wrong size on FortSquadSlotWidget_IsSquadSlotLockedBP");
static_assert(offsetof(FortSquadSlotWidget_IsSquadSlotLockedBP, ReturnValue) == 0x000000, "Member 'FortSquadSlotWidget_IsSquadSlotLockedBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadStatsWidgetBase.HandlePowerRatingChanged_BP
// 0x0001 (0x0001 - 0x0000)
struct FortSquadStatsWidgetBase_HandlePowerRatingChanged_BP final
{
public:
	bool                                          bHasTeamMebers;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadStatsWidgetBase_HandlePowerRatingChanged_BP) == 0x000001, "Wrong alignment on FortSquadStatsWidgetBase_HandlePowerRatingChanged_BP");
static_assert(sizeof(FortSquadStatsWidgetBase_HandlePowerRatingChanged_BP) == 0x000001, "Wrong size on FortSquadStatsWidgetBase_HandlePowerRatingChanged_BP");
static_assert(offsetof(FortSquadStatsWidgetBase_HandlePowerRatingChanged_BP, bHasTeamMebers) == 0x000000, "Member 'FortSquadStatsWidgetBase_HandlePowerRatingChanged_BP::bHasTeamMebers' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadStatsWidgetBase.GetLocalPlayerId
// 0x0030 (0x0030 - 0x0000)
struct FortSquadStatsWidgetBase_GetLocalPlayerId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadStatsWidgetBase_GetLocalPlayerId) == 0x000008, "Wrong alignment on FortSquadStatsWidgetBase_GetLocalPlayerId");
static_assert(sizeof(FortSquadStatsWidgetBase_GetLocalPlayerId) == 0x000030, "Wrong size on FortSquadStatsWidgetBase_GetLocalPlayerId");
static_assert(offsetof(FortSquadStatsWidgetBase_GetLocalPlayerId, ReturnValue) == 0x000000, "Member 'FortSquadStatsWidgetBase_GetLocalPlayerId::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadTypeLandingPageBase.CreateAndAddSquadButton
// 0x0010 (0x0010 - 0x0000)
struct FortSquadTypeLandingPageBase_CreateAndAddSquadButton final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSquadSelectorButton*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadTypeLandingPageBase_CreateAndAddSquadButton) == 0x000008, "Wrong alignment on FortSquadTypeLandingPageBase_CreateAndAddSquadButton");
static_assert(sizeof(FortSquadTypeLandingPageBase_CreateAndAddSquadButton) == 0x000010, "Wrong size on FortSquadTypeLandingPageBase_CreateAndAddSquadButton");
static_assert(offsetof(FortSquadTypeLandingPageBase_CreateAndAddSquadButton, SquadId) == 0x000000, "Member 'FortSquadTypeLandingPageBase_CreateAndAddSquadButton::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadTypeLandingPageBase_CreateAndAddSquadButton, ReturnValue) == 0x000008, "Member 'FortSquadTypeLandingPageBase_CreateAndAddSquadButton::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadTypeLandingPageBase.HandleBackInputAction
// 0x0001 (0x0001 - 0x0000)
struct FortSquadTypeLandingPageBase_HandleBackInputAction final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadTypeLandingPageBase_HandleBackInputAction) == 0x000001, "Wrong alignment on FortSquadTypeLandingPageBase_HandleBackInputAction");
static_assert(sizeof(FortSquadTypeLandingPageBase_HandleBackInputAction) == 0x000001, "Wrong size on FortSquadTypeLandingPageBase_HandleBackInputAction");
static_assert(offsetof(FortSquadTypeLandingPageBase_HandleBackInputAction, bPassThrough) == 0x000000, "Member 'FortSquadTypeLandingPageBase_HandleBackInputAction::bPassThrough' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadTypeLandingPageBase.ShowWarningReadOnlyWIFE
// 0x0001 (0x0001 - 0x0000)
struct FortSquadTypeLandingPageBase_ShowWarningReadOnlyWIFE final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadTypeLandingPageBase_ShowWarningReadOnlyWIFE) == 0x000001, "Wrong alignment on FortSquadTypeLandingPageBase_ShowWarningReadOnlyWIFE");
static_assert(sizeof(FortSquadTypeLandingPageBase_ShowWarningReadOnlyWIFE) == 0x000001, "Wrong size on FortSquadTypeLandingPageBase_ShowWarningReadOnlyWIFE");
static_assert(offsetof(FortSquadTypeLandingPageBase_ShowWarningReadOnlyWIFE, Force) == 0x000000, "Member 'FortSquadTypeLandingPageBase_ShowWarningReadOnlyWIFE::Force' has a wrong offset!");

// Function SaveTheWorldUI.FortSquadTypeLandingPageBase.IsScreenWIFE
// 0x0001 (0x0001 - 0x0000)
struct FortSquadTypeLandingPageBase_IsScreenWIFE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadTypeLandingPageBase_IsScreenWIFE) == 0x000001, "Wrong alignment on FortSquadTypeLandingPageBase_IsScreenWIFE");
static_assert(sizeof(FortSquadTypeLandingPageBase_IsScreenWIFE) == 0x000001, "Wrong size on FortSquadTypeLandingPageBase_IsScreenWIFE");
static_assert(offsetof(FortSquadTypeLandingPageBase_IsScreenWIFE, ReturnValue) == 0x000000, "Member 'FortSquadTypeLandingPageBase_IsScreenWIFE::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortStatIcon.SetAttribute
// 0x0038 (0x0038 - 0x0000)
struct FortStatIcon_SetAttribute final
{
public:
	struct FGameplayAttribute                     InAttribute;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStatIcon_SetAttribute) == 0x000008, "Wrong alignment on FortStatIcon_SetAttribute");
static_assert(sizeof(FortStatIcon_SetAttribute) == 0x000038, "Wrong size on FortStatIcon_SetAttribute");
static_assert(offsetof(FortStatIcon_SetAttribute, InAttribute) == 0x000000, "Member 'FortStatIcon_SetAttribute::InAttribute' has a wrong offset!");

// Function SaveTheWorldUI.FortSurvivorSquadManagementScreen.PlayFeedbackForSlottingPerson
// 0x00C0 (0x00C0 - 0x0000)
struct FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson final
{
public:
	class UFortWorker*                            Worker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortSurvivorSquadSlottingFeedbackData FeedbackData;                                      // 0x0010(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson) == 0x000008, "Wrong alignment on FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson");
static_assert(sizeof(FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson) == 0x0000C0, "Wrong size on FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson");
static_assert(offsetof(FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson, Worker) == 0x000000, "Member 'FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson::Worker' has a wrong offset!");
static_assert(offsetof(FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson, SlotIndex) == 0x000008, "Member 'FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson::SlotIndex' has a wrong offset!");
static_assert(offsetof(FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson, FeedbackData) == 0x000010, "Member 'FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson::FeedbackData' has a wrong offset!");

// Function SaveTheWorldUI.FortSurvivorSquadSelectorButton.TryGetPersonalityMatches
// 0x04A0 (0x04A0 - 0x0000)
struct FortSurvivorSquadSelectorButton_TryGetPersonalityMatches final
{
public:
	struct FFortSurvivorSquadSelectorButtonPersonalityMatches OutPersonalityMatches;                             // 0x0000(0x0490)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0490(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_491[0xF];                                      // 0x0491(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSurvivorSquadSelectorButton_TryGetPersonalityMatches) == 0x000010, "Wrong alignment on FortSurvivorSquadSelectorButton_TryGetPersonalityMatches");
static_assert(sizeof(FortSurvivorSquadSelectorButton_TryGetPersonalityMatches) == 0x0004A0, "Wrong size on FortSurvivorSquadSelectorButton_TryGetPersonalityMatches");
static_assert(offsetof(FortSurvivorSquadSelectorButton_TryGetPersonalityMatches, OutPersonalityMatches) == 0x000000, "Member 'FortSurvivorSquadSelectorButton_TryGetPersonalityMatches::OutPersonalityMatches' has a wrong offset!");
static_assert(offsetof(FortSurvivorSquadSelectorButton_TryGetPersonalityMatches, ReturnValue) == 0x000490, "Member 'FortSurvivorSquadSelectorButton_TryGetPersonalityMatches::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSurvivorSquadSelectorButton.TryGetSquadMembers
// 0x0018 (0x0018 - 0x0000)
struct FortSurvivorSquadSelectorButton_TryGetSquadMembers final
{
public:
	TArray<class UFortWorker*>                    OutSquadMembers;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSurvivorSquadSelectorButton_TryGetSquadMembers) == 0x000008, "Wrong alignment on FortSurvivorSquadSelectorButton_TryGetSquadMembers");
static_assert(sizeof(FortSurvivorSquadSelectorButton_TryGetSquadMembers) == 0x000018, "Wrong size on FortSurvivorSquadSelectorButton_TryGetSquadMembers");
static_assert(offsetof(FortSurvivorSquadSelectorButton_TryGetSquadMembers, OutSquadMembers) == 0x000000, "Member 'FortSurvivorSquadSelectorButton_TryGetSquadMembers::OutSquadMembers' has a wrong offset!");
static_assert(offsetof(FortSurvivorSquadSelectorButton_TryGetSquadMembers, ReturnValue) == 0x000010, "Member 'FortSurvivorSquadSelectorButton_TryGetSquadMembers::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSurvivorSquadSelectorButton.TryGetSummaryStats
// 0x00A8 (0x00A8 - 0x0000)
struct FortSurvivorSquadSelectorButton_TryGetSummaryStats final
{
public:
	struct FFortSurvivorSquadSelectorButtonSummaryStats OutSummaryStats;                                   // 0x0000(0x00A0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSurvivorSquadSelectorButton_TryGetSummaryStats) == 0x000008, "Wrong alignment on FortSurvivorSquadSelectorButton_TryGetSummaryStats");
static_assert(sizeof(FortSurvivorSquadSelectorButton_TryGetSummaryStats) == 0x0000A8, "Wrong size on FortSurvivorSquadSelectorButton_TryGetSummaryStats");
static_assert(offsetof(FortSurvivorSquadSelectorButton_TryGetSummaryStats, OutSummaryStats) == 0x000000, "Member 'FortSurvivorSquadSelectorButton_TryGetSummaryStats::OutSummaryStats' has a wrong offset!");
static_assert(offsetof(FortSurvivorSquadSelectorButton_TryGetSummaryStats, ReturnValue) == 0x0000A0, "Member 'FortSurvivorSquadSelectorButton_TryGetSummaryStats::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSurvivorSquadStatMatchBase.OnStatMatchUpdated
// 0x04C0 (0x04C0 - 0x0000)
struct FortSurvivorSquadStatMatchBase_OnStatMatchUpdated final
{
public:
	struct FFortUISurvivorSquadStatMatch          UpdatedMatch;                                      // 0x0000(0x04C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSurvivorSquadStatMatchBase_OnStatMatchUpdated) == 0x000010, "Wrong alignment on FortSurvivorSquadStatMatchBase_OnStatMatchUpdated");
static_assert(sizeof(FortSurvivorSquadStatMatchBase_OnStatMatchUpdated) == 0x0004C0, "Wrong size on FortSurvivorSquadStatMatchBase_OnStatMatchUpdated");
static_assert(offsetof(FortSurvivorSquadStatMatchBase_OnStatMatchUpdated, UpdatedMatch) == 0x000000, "Member 'FortSurvivorSquadStatMatchBase_OnStatMatchUpdated::UpdatedMatch' has a wrong offset!");

// Function SaveTheWorldUI.FortSurvivorSquadStatMatchesBase.AddStatMatch
// 0x0008 (0x0008 - 0x0000)
struct FortSurvivorSquadStatMatchesBase_AddStatMatch final
{
public:
	class UFortSurvivorSquadStatMatchBase*        SetBonus;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSurvivorSquadStatMatchesBase_AddStatMatch) == 0x000008, "Wrong alignment on FortSurvivorSquadStatMatchesBase_AddStatMatch");
static_assert(sizeof(FortSurvivorSquadStatMatchesBase_AddStatMatch) == 0x000008, "Wrong size on FortSurvivorSquadStatMatchesBase_AddStatMatch");
static_assert(offsetof(FortSurvivorSquadStatMatchesBase_AddStatMatch, SetBonus) == 0x000000, "Member 'FortSurvivorSquadStatMatchesBase_AddStatMatch::SetBonus' has a wrong offset!");

// Function SaveTheWorldUI.FortSurvivorSquadStatMatchesBase.SetIdOfSquadToManageBP
// 0x0004 (0x0004 - 0x0000)
struct FortSurvivorSquadStatMatchesBase_SetIdOfSquadToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSurvivorSquadStatMatchesBase_SetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSurvivorSquadStatMatchesBase_SetIdOfSquadToManageBP");
static_assert(sizeof(FortSurvivorSquadStatMatchesBase_SetIdOfSquadToManageBP) == 0x000004, "Wrong size on FortSurvivorSquadStatMatchesBase_SetIdOfSquadToManageBP");
static_assert(offsetof(FortSurvivorSquadStatMatchesBase_SetIdOfSquadToManageBP, SquadId) == 0x000000, "Member 'FortSurvivorSquadStatMatchesBase_SetIdOfSquadToManageBP::SquadId' has a wrong offset!");

// Function SaveTheWorldUI.FortSurvivorSquadStatMatchesBase.SetSummaryView
// 0x0001 (0x0001 - 0x0000)
struct FortSurvivorSquadStatMatchesBase_SetSummaryView final
{
public:
	bool                                          bInSummaryView;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSurvivorSquadStatMatchesBase_SetSummaryView) == 0x000001, "Wrong alignment on FortSurvivorSquadStatMatchesBase_SetSummaryView");
static_assert(sizeof(FortSurvivorSquadStatMatchesBase_SetSummaryView) == 0x000001, "Wrong size on FortSurvivorSquadStatMatchesBase_SetSummaryView");
static_assert(offsetof(FortSurvivorSquadStatMatchesBase_SetSummaryView, bInSummaryView) == 0x000000, "Member 'FortSurvivorSquadStatMatchesBase_SetSummaryView::bInSummaryView' has a wrong offset!");

// Function SaveTheWorldUI.FortSurvivorSquadStatMatchesBase.GetIdOfSquadToManageBP
// 0x0004 (0x0004 - 0x0000)
struct FortSurvivorSquadStatMatchesBase_GetIdOfSquadToManageBP final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSurvivorSquadStatMatchesBase_GetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSurvivorSquadStatMatchesBase_GetIdOfSquadToManageBP");
static_assert(sizeof(FortSurvivorSquadStatMatchesBase_GetIdOfSquadToManageBP) == 0x000004, "Wrong size on FortSurvivorSquadStatMatchesBase_GetIdOfSquadToManageBP");
static_assert(offsetof(FortSurvivorSquadStatMatchesBase_GetIdOfSquadToManageBP, ReturnValue) == 0x000000, "Member 'FortSurvivorSquadStatMatchesBase_GetIdOfSquadToManageBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSurvivorSquadStatMatchesBase.TryGetStaticSquadDataBP
// 0x0088 (0x0088 - 0x0000)
struct FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP final
{
public:
	struct FHomebaseSquad                         OutSquadData;                                      // 0x0000(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP) == 0x000008, "Wrong alignment on FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP");
static_assert(sizeof(FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP) == 0x000088, "Wrong size on FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP");
static_assert(offsetof(FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP, OutSquadData) == 0x000000, "Member 'FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP::OutSquadData' has a wrong offset!");
static_assert(offsetof(FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP, ReturnValue) == 0x000080, "Member 'FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortSurvivorSquadSummaryStatItem.SetAttributeModifierAccumulation
// 0x0048 (0x0048 - 0x0000)
struct FortSurvivorSquadSummaryStatItem_SetAttributeModifierAccumulation final
{
public:
	struct FFortAttributeModifierAccumulation     Accumulation;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSurvivorSquadSummaryStatItem_SetAttributeModifierAccumulation) == 0x000008, "Wrong alignment on FortSurvivorSquadSummaryStatItem_SetAttributeModifierAccumulation");
static_assert(sizeof(FortSurvivorSquadSummaryStatItem_SetAttributeModifierAccumulation) == 0x000048, "Wrong size on FortSurvivorSquadSummaryStatItem_SetAttributeModifierAccumulation");
static_assert(offsetof(FortSurvivorSquadSummaryStatItem_SetAttributeModifierAccumulation, Accumulation) == 0x000000, "Member 'FortSurvivorSquadSummaryStatItem_SetAttributeModifierAccumulation::Accumulation' has a wrong offset!");

// Function SaveTheWorldUI.FortWorkerSetBonusIcon.SetGameplayTag
// 0x0004 (0x0004 - 0x0000)
struct FortWorkerSetBonusIcon_SetGameplayTag final
{
public:
	struct FGameplayTag                           InGameplayTag;                                     // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWorkerSetBonusIcon_SetGameplayTag) == 0x000004, "Wrong alignment on FortWorkerSetBonusIcon_SetGameplayTag");
static_assert(sizeof(FortWorkerSetBonusIcon_SetGameplayTag) == 0x000004, "Wrong size on FortWorkerSetBonusIcon_SetGameplayTag");
static_assert(offsetof(FortWorkerSetBonusIcon_SetGameplayTag, InGameplayTag) == 0x000000, "Member 'FortWorkerSetBonusIcon_SetGameplayTag::InGameplayTag' has a wrong offset!");

// Function SaveTheWorldUI.FortStatsOverviewDetailsBase.ListenForChanges
// 0x0001 (0x0001 - 0x0000)
struct FortStatsOverviewDetailsBase_ListenForChanges final
{
public:
	bool                                          bListen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStatsOverviewDetailsBase_ListenForChanges) == 0x000001, "Wrong alignment on FortStatsOverviewDetailsBase_ListenForChanges");
static_assert(sizeof(FortStatsOverviewDetailsBase_ListenForChanges) == 0x000001, "Wrong size on FortStatsOverviewDetailsBase_ListenForChanges");
static_assert(offsetof(FortStatsOverviewDetailsBase_ListenForChanges, bListen) == 0x000000, "Member 'FortStatsOverviewDetailsBase_ListenForChanges::bListen' has a wrong offset!");

// Function SaveTheWorldUI.FortStatsOverviewDetailsBase.GetLocalPlayerId
// 0x0030 (0x0030 - 0x0000)
struct FortStatsOverviewDetailsBase_GetLocalPlayerId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStatsOverviewDetailsBase_GetLocalPlayerId) == 0x000008, "Wrong alignment on FortStatsOverviewDetailsBase_GetLocalPlayerId");
static_assert(sizeof(FortStatsOverviewDetailsBase_GetLocalPlayerId) == 0x000030, "Wrong size on FortStatsOverviewDetailsBase_GetLocalPlayerId");
static_assert(offsetof(FortStatsOverviewDetailsBase_GetLocalPlayerId, ReturnValue) == 0x000000, "Member 'FortStatsOverviewDetailsBase_GetLocalPlayerId::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortLlamaStoreBase.OnStoreStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortLlamaStoreBase_OnStoreStateChanged final
{
public:
	EFortStoreState                               NewStoreState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreBase_OnStoreStateChanged) == 0x000001, "Wrong alignment on FortLlamaStoreBase_OnStoreStateChanged");
static_assert(sizeof(FortLlamaStoreBase_OnStoreStateChanged) == 0x000001, "Wrong size on FortLlamaStoreBase_OnStoreStateChanged");
static_assert(offsetof(FortLlamaStoreBase_OnStoreStateChanged, NewStoreState) == 0x000000, "Member 'FortLlamaStoreBase_OnStoreStateChanged::NewStoreState' has a wrong offset!");

// Function SaveTheWorldUI.FortLlamaStoreBase_Legacy.OnStoreStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortLlamaStoreBase_Legacy_OnStoreStateChanged final
{
public:
	EFortStoreState                               NewStoreState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreBase_Legacy_OnStoreStateChanged) == 0x000001, "Wrong alignment on FortLlamaStoreBase_Legacy_OnStoreStateChanged");
static_assert(sizeof(FortLlamaStoreBase_Legacy_OnStoreStateChanged) == 0x000001, "Wrong size on FortLlamaStoreBase_Legacy_OnStoreStateChanged");
static_assert(offsetof(FortLlamaStoreBase_Legacy_OnStoreStateChanged, NewStoreState) == 0x000000, "Member 'FortLlamaStoreBase_Legacy_OnStoreStateChanged::NewStoreState' has a wrong offset!");

// Function SaveTheWorldUI.FortLlamaStoreDetailsBase.OnOfferInfoChanged
// 0x0004 (0x0004 - 0x0000)
struct FortLlamaStoreDetailsBase_OnOfferInfoChanged final
{
public:
	int32                                         CurrentOfferRarity;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreDetailsBase_OnOfferInfoChanged) == 0x000004, "Wrong alignment on FortLlamaStoreDetailsBase_OnOfferInfoChanged");
static_assert(sizeof(FortLlamaStoreDetailsBase_OnOfferInfoChanged) == 0x000004, "Wrong size on FortLlamaStoreDetailsBase_OnOfferInfoChanged");
static_assert(offsetof(FortLlamaStoreDetailsBase_OnOfferInfoChanged, CurrentOfferRarity) == 0x000000, "Member 'FortLlamaStoreDetailsBase_OnOfferInfoChanged::CurrentOfferRarity' has a wrong offset!");

// Function SaveTheWorldUI.FortLlamaStoreDetailsBase.GetChoiceItemCount
// 0x0004 (0x0004 - 0x0000)
struct FortLlamaStoreDetailsBase_GetChoiceItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreDetailsBase_GetChoiceItemCount) == 0x000004, "Wrong alignment on FortLlamaStoreDetailsBase_GetChoiceItemCount");
static_assert(sizeof(FortLlamaStoreDetailsBase_GetChoiceItemCount) == 0x000004, "Wrong size on FortLlamaStoreDetailsBase_GetChoiceItemCount");
static_assert(offsetof(FortLlamaStoreDetailsBase_GetChoiceItemCount, ReturnValue) == 0x000000, "Member 'FortLlamaStoreDetailsBase_GetChoiceItemCount::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortLlamaStoreDetailsBase.GetNewItemCount
// 0x0004 (0x0004 - 0x0000)
struct FortLlamaStoreDetailsBase_GetNewItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreDetailsBase_GetNewItemCount) == 0x000004, "Wrong alignment on FortLlamaStoreDetailsBase_GetNewItemCount");
static_assert(sizeof(FortLlamaStoreDetailsBase_GetNewItemCount) == 0x000004, "Wrong size on FortLlamaStoreDetailsBase_GetNewItemCount");
static_assert(offsetof(FortLlamaStoreDetailsBase_GetNewItemCount, ReturnValue) == 0x000000, "Member 'FortLlamaStoreDetailsBase_GetNewItemCount::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortLlamaStoreDetailsBase.GetNotInCollectionBookCount
// 0x0004 (0x0004 - 0x0000)
struct FortLlamaStoreDetailsBase_GetNotInCollectionBookCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreDetailsBase_GetNotInCollectionBookCount) == 0x000004, "Wrong alignment on FortLlamaStoreDetailsBase_GetNotInCollectionBookCount");
static_assert(sizeof(FortLlamaStoreDetailsBase_GetNotInCollectionBookCount) == 0x000004, "Wrong size on FortLlamaStoreDetailsBase_GetNotInCollectionBookCount");
static_assert(offsetof(FortLlamaStoreDetailsBase_GetNotInCollectionBookCount, ReturnValue) == 0x000000, "Member 'FortLlamaStoreDetailsBase_GetNotInCollectionBookCount::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortLlamaStoreInspectionScreen.GetInspectChoiceInputState
// 0x0001 (0x0001 - 0x0000)
struct FortLlamaStoreInspectionScreen_GetInspectChoiceInputState final
{
public:
	EInputActionState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreInspectionScreen_GetInspectChoiceInputState) == 0x000001, "Wrong alignment on FortLlamaStoreInspectionScreen_GetInspectChoiceInputState");
static_assert(sizeof(FortLlamaStoreInspectionScreen_GetInspectChoiceInputState) == 0x000001, "Wrong size on FortLlamaStoreInspectionScreen_GetInspectChoiceInputState");
static_assert(offsetof(FortLlamaStoreInspectionScreen_GetInspectChoiceInputState, ReturnValue) == 0x000000, "Member 'FortLlamaStoreInspectionScreen_GetInspectChoiceInputState::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortLlamaStoreInspectionScreen.GetSelectedCardPack
// 0x0008 (0x0008 - 0x0000)
struct FortLlamaStoreInspectionScreen_GetSelectedCardPack final
{
public:
	class UFortCardPackItem*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreInspectionScreen_GetSelectedCardPack) == 0x000008, "Wrong alignment on FortLlamaStoreInspectionScreen_GetSelectedCardPack");
static_assert(sizeof(FortLlamaStoreInspectionScreen_GetSelectedCardPack) == 0x000008, "Wrong size on FortLlamaStoreInspectionScreen_GetSelectedCardPack");
static_assert(offsetof(FortLlamaStoreInspectionScreen_GetSelectedCardPack, ReturnValue) == 0x000000, "Member 'FortLlamaStoreInspectionScreen_GetSelectedCardPack::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortLlamaStoreInspectionScreen.IsItemChoicePack
// 0x0010 (0x0010 - 0x0000)
struct FortLlamaStoreInspectionScreen_IsItemChoicePack final
{
public:
	class UObject*                                ItemToCheck;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortLlamaStoreInspectionScreen_IsItemChoicePack) == 0x000008, "Wrong alignment on FortLlamaStoreInspectionScreen_IsItemChoicePack");
static_assert(sizeof(FortLlamaStoreInspectionScreen_IsItemChoicePack) == 0x000010, "Wrong size on FortLlamaStoreInspectionScreen_IsItemChoicePack");
static_assert(offsetof(FortLlamaStoreInspectionScreen_IsItemChoicePack, ItemToCheck) == 0x000000, "Member 'FortLlamaStoreInspectionScreen_IsItemChoicePack::ItemToCheck' has a wrong offset!");
static_assert(offsetof(FortLlamaStoreInspectionScreen_IsItemChoicePack, ReturnValue) == 0x000008, "Member 'FortLlamaStoreInspectionScreen_IsItemChoicePack::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.StWHUD.HandleCursorModeChanged
// 0x0010 (0x0010 - 0x0000)
struct StWHUD_HandleCursorModeChanged final
{
public:
	bool                                          bCursorModeEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            CursorModeContentWidget;                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StWHUD_HandleCursorModeChanged) == 0x000008, "Wrong alignment on StWHUD_HandleCursorModeChanged");
static_assert(sizeof(StWHUD_HandleCursorModeChanged) == 0x000010, "Wrong size on StWHUD_HandleCursorModeChanged");
static_assert(offsetof(StWHUD_HandleCursorModeChanged, bCursorModeEnabled) == 0x000000, "Member 'StWHUD_HandleCursorModeChanged::bCursorModeEnabled' has a wrong offset!");
static_assert(offsetof(StWHUD_HandleCursorModeChanged, ActionName) == 0x000004, "Member 'StWHUD_HandleCursorModeChanged::ActionName' has a wrong offset!");
static_assert(offsetof(StWHUD_HandleCursorModeChanged, CursorModeContentWidget) == 0x000008, "Member 'StWHUD_HandleCursorModeChanged::CursorModeContentWidget' has a wrong offset!");

// Function SaveTheWorldUI.StWHUD.HandlePickerOpenRequest
// 0x000C (0x000C - 0x0000)
struct StWHUD_HandlePickerOpenRequest final
{
public:
	EFortPickerMode                               Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InitialOption;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreFirstAccept;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StWHUD_HandlePickerOpenRequest) == 0x000004, "Wrong alignment on StWHUD_HandlePickerOpenRequest");
static_assert(sizeof(StWHUD_HandlePickerOpenRequest) == 0x00000C, "Wrong size on StWHUD_HandlePickerOpenRequest");
static_assert(offsetof(StWHUD_HandlePickerOpenRequest, Mode) == 0x000000, "Member 'StWHUD_HandlePickerOpenRequest::Mode' has a wrong offset!");
static_assert(offsetof(StWHUD_HandlePickerOpenRequest, InitialOption) == 0x000004, "Member 'StWHUD_HandlePickerOpenRequest::InitialOption' has a wrong offset!");
static_assert(offsetof(StWHUD_HandlePickerOpenRequest, bIgnoreFirstAccept) == 0x000008, "Member 'StWHUD_HandlePickerOpenRequest::bIgnoreFirstAccept' has a wrong offset!");

// Function SaveTheWorldUI.StWHUD.NativeHandleWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct StWHUD_NativeHandleWeaponEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StWHUD_NativeHandleWeaponEquipped) == 0x000008, "Wrong alignment on StWHUD_NativeHandleWeaponEquipped");
static_assert(sizeof(StWHUD_NativeHandleWeaponEquipped) == 0x000010, "Wrong size on StWHUD_NativeHandleWeaponEquipped");
static_assert(offsetof(StWHUD_NativeHandleWeaponEquipped, NewWeapon) == 0x000000, "Member 'StWHUD_NativeHandleWeaponEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(StWHUD_NativeHandleWeaponEquipped, PrevWeapon) == 0x000008, "Member 'StWHUD_NativeHandleWeaponEquipped::PrevWeapon' has a wrong offset!");

// Function SaveTheWorldUI.FortTheaterSelect.GetTheaterRecommendedRatingRange
// 0x0020 (0x0020 - 0x0000)
struct FortTheaterSelect_GetTheaterRecommendedRatingRange final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minimum;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Maximum;                                           // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTheaterSelect_GetTheaterRecommendedRatingRange) == 0x000008, "Wrong alignment on FortTheaterSelect_GetTheaterRecommendedRatingRange");
static_assert(sizeof(FortTheaterSelect_GetTheaterRecommendedRatingRange) == 0x000020, "Wrong size on FortTheaterSelect_GetTheaterRecommendedRatingRange");
static_assert(offsetof(FortTheaterSelect_GetTheaterRecommendedRatingRange, UniqueId) == 0x000000, "Member 'FortTheaterSelect_GetTheaterRecommendedRatingRange::UniqueId' has a wrong offset!");
static_assert(offsetof(FortTheaterSelect_GetTheaterRecommendedRatingRange, Minimum) == 0x000010, "Member 'FortTheaterSelect_GetTheaterRecommendedRatingRange::Minimum' has a wrong offset!");
static_assert(offsetof(FortTheaterSelect_GetTheaterRecommendedRatingRange, Maximum) == 0x000014, "Member 'FortTheaterSelect_GetTheaterRecommendedRatingRange::Maximum' has a wrong offset!");
static_assert(offsetof(FortTheaterSelect_GetTheaterRecommendedRatingRange, ReturnValue) == 0x000018, "Member 'FortTheaterSelect_GetTheaterRecommendedRatingRange::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeDetailsBase.OnShowIcon
// 0x0008 (0x0008 - 0x0000)
struct FortUpgradeDetailsBase_OnShowIcon final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeDetailsBase_OnShowIcon) == 0x000008, "Wrong alignment on FortUpgradeDetailsBase_OnShowIcon");
static_assert(sizeof(FortUpgradeDetailsBase_OnShowIcon) == 0x000008, "Wrong size on FortUpgradeDetailsBase_OnShowIcon");
static_assert(offsetof(FortUpgradeDetailsBase_OnShowIcon, Icon) == 0x000000, "Member 'FortUpgradeDetailsBase_OnShowIcon::Icon' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.CanAffordUpgrade
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeInfo_CanAffordUpgrade final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_CanAffordUpgrade) == 0x000001, "Wrong alignment on FortUpgradeInfo_CanAffordUpgrade");
static_assert(sizeof(FortUpgradeInfo_CanAffordUpgrade) == 0x000001, "Wrong size on FortUpgradeInfo_CanAffordUpgrade");
static_assert(offsetof(FortUpgradeInfo_CanAffordUpgrade, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_CanAffordUpgrade::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.CanPreview
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeInfo_CanPreview final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_CanPreview) == 0x000001, "Wrong alignment on FortUpgradeInfo_CanPreview");
static_assert(sizeof(FortUpgradeInfo_CanPreview) == 0x000001, "Wrong size on FortUpgradeInfo_CanPreview");
static_assert(offsetof(FortUpgradeInfo_CanPreview, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_CanPreview::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.GetCost
// 0x0004 (0x0004 - 0x0000)
struct FortUpgradeInfo_GetCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetCost) == 0x000004, "Wrong alignment on FortUpgradeInfo_GetCost");
static_assert(sizeof(FortUpgradeInfo_GetCost) == 0x000004, "Wrong size on FortUpgradeInfo_GetCost");
static_assert(offsetof(FortUpgradeInfo_GetCost, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetCost::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.GetCurrentLevel
// 0x0004 (0x0004 - 0x0000)
struct FortUpgradeInfo_GetCurrentLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetCurrentLevel) == 0x000004, "Wrong alignment on FortUpgradeInfo_GetCurrentLevel");
static_assert(sizeof(FortUpgradeInfo_GetCurrentLevel) == 0x000004, "Wrong size on FortUpgradeInfo_GetCurrentLevel");
static_assert(offsetof(FortUpgradeInfo_GetCurrentLevel, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetCurrentLevel::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.GetDescription
// 0x0018 (0x0018 - 0x0000)
struct FortUpgradeInfo_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetDescription) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetDescription");
static_assert(sizeof(FortUpgradeInfo_GetDescription) == 0x000018, "Wrong size on FortUpgradeInfo_GetDescription");
static_assert(offsetof(FortUpgradeInfo_GetDescription, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetDescription::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.GetDisplayAttributes
// 0x0018 (0x0018 - 0x0000)
struct FortUpgradeInfo_GetDisplayAttributes final
{
public:
	TArray<struct FFortDisplayAttribute>          OutDisplayAttributes;                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUpgradeInfo_GetDisplayAttributes) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetDisplayAttributes");
static_assert(sizeof(FortUpgradeInfo_GetDisplayAttributes) == 0x000018, "Wrong size on FortUpgradeInfo_GetDisplayAttributes");
static_assert(offsetof(FortUpgradeInfo_GetDisplayAttributes, OutDisplayAttributes) == 0x000000, "Member 'FortUpgradeInfo_GetDisplayAttributes::OutDisplayAttributes' has a wrong offset!");
static_assert(offsetof(FortUpgradeInfo_GetDisplayAttributes, ReturnValue) == 0x000010, "Member 'FortUpgradeInfo_GetDisplayAttributes::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.GetIcon
// 0x0030 (0x0030 - 0x0000)
struct FortUpgradeInfo_GetIcon final
{
public:
	EUpgradeInfoImageSize                         ImageSize;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetIcon) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetIcon");
static_assert(sizeof(FortUpgradeInfo_GetIcon) == 0x000030, "Wrong size on FortUpgradeInfo_GetIcon");
static_assert(offsetof(FortUpgradeInfo_GetIcon, ImageSize) == 0x000000, "Member 'FortUpgradeInfo_GetIcon::ImageSize' has a wrong offset!");
static_assert(offsetof(FortUpgradeInfo_GetIcon, ReturnValue) == 0x000008, "Member 'FortUpgradeInfo_GetIcon::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.GetItemName
// 0x0018 (0x0018 - 0x0000)
struct FortUpgradeInfo_GetItemName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetItemName) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetItemName");
static_assert(sizeof(FortUpgradeInfo_GetItemName) == 0x000018, "Wrong size on FortUpgradeInfo_GetItemName");
static_assert(offsetof(FortUpgradeInfo_GetItemName, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetItemName::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.GetMaxLevel
// 0x0004 (0x0004 - 0x0000)
struct FortUpgradeInfo_GetMaxLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetMaxLevel) == 0x000004, "Wrong alignment on FortUpgradeInfo_GetMaxLevel");
static_assert(sizeof(FortUpgradeInfo_GetMaxLevel) == 0x000004, "Wrong size on FortUpgradeInfo_GetMaxLevel");
static_assert(offsetof(FortUpgradeInfo_GetMaxLevel, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetMaxLevel::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.GetNextLevel
// 0x0004 (0x0004 - 0x0000)
struct FortUpgradeInfo_GetNextLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetNextLevel) == 0x000004, "Wrong alignment on FortUpgradeInfo_GetNextLevel");
static_assert(sizeof(FortUpgradeInfo_GetNextLevel) == 0x000004, "Wrong size on FortUpgradeInfo_GetNextLevel");
static_assert(offsetof(FortUpgradeInfo_GetNextLevel, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetNextLevel::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.GetNextLevelDescription
// 0x0018 (0x0018 - 0x0000)
struct FortUpgradeInfo_GetNextLevelDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetNextLevelDescription) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetNextLevelDescription");
static_assert(sizeof(FortUpgradeInfo_GetNextLevelDescription) == 0x000018, "Wrong size on FortUpgradeInfo_GetNextLevelDescription");
static_assert(offsetof(FortUpgradeInfo_GetNextLevelDescription, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetNextLevelDescription::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.GetNextLevelTitle
// 0x0018 (0x0018 - 0x0000)
struct FortUpgradeInfo_GetNextLevelTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetNextLevelTitle) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetNextLevelTitle");
static_assert(sizeof(FortUpgradeInfo_GetNextLevelTitle) == 0x000018, "Wrong size on FortUpgradeInfo_GetNextLevelTitle");
static_assert(offsetof(FortUpgradeInfo_GetNextLevelTitle, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetNextLevelTitle::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.GetTitle
// 0x0018 (0x0018 - 0x0000)
struct FortUpgradeInfo_GetTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetTitle) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetTitle");
static_assert(sizeof(FortUpgradeInfo_GetTitle) == 0x000018, "Wrong size on FortUpgradeInfo_GetTitle");
static_assert(offsetof(FortUpgradeInfo_GetTitle, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetTitle::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.GetUpgradeUnlockLevel
// 0x0004 (0x0004 - 0x0000)
struct FortUpgradeInfo_GetUpgradeUnlockLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetUpgradeUnlockLevel) == 0x000004, "Wrong alignment on FortUpgradeInfo_GetUpgradeUnlockLevel");
static_assert(sizeof(FortUpgradeInfo_GetUpgradeUnlockLevel) == 0x000004, "Wrong size on FortUpgradeInfo_GetUpgradeUnlockLevel");
static_assert(offsetof(FortUpgradeInfo_GetUpgradeUnlockLevel, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetUpgradeUnlockLevel::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.GetVideo
// 0x0008 (0x0008 - 0x0000)
struct FortUpgradeInfo_GetVideo final
{
public:
	class UMediaSource*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetVideo) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetVideo");
static_assert(sizeof(FortUpgradeInfo_GetVideo) == 0x000008, "Wrong size on FortUpgradeInfo_GetVideo");
static_assert(offsetof(FortUpgradeInfo_GetVideo, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetVideo::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.IsPreviewing
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeInfo_IsPreviewing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_IsPreviewing) == 0x000001, "Wrong alignment on FortUpgradeInfo_IsPreviewing");
static_assert(sizeof(FortUpgradeInfo_IsPreviewing) == 0x000001, "Wrong size on FortUpgradeInfo_IsPreviewing");
static_assert(offsetof(FortUpgradeInfo_IsPreviewing, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_IsPreviewing::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeInfo.IsUpgradeUnlocked
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeInfo_IsUpgradeUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_IsUpgradeUnlocked) == 0x000001, "Wrong alignment on FortUpgradeInfo_IsUpgradeUnlocked");
static_assert(sizeof(FortUpgradeInfo_IsUpgradeUnlocked) == 0x000001, "Wrong size on FortUpgradeInfo_IsUpgradeUnlocked");
static_assert(offsetof(FortUpgradeInfo_IsUpgradeUnlocked, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_IsUpgradeUnlocked::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeScreenBase.HandleTabSelected
// 0x0004 (0x0004 - 0x0000)
struct FortUpgradeScreenBase_HandleTabSelected final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeScreenBase_HandleTabSelected) == 0x000004, "Wrong alignment on FortUpgradeScreenBase_HandleTabSelected");
static_assert(sizeof(FortUpgradeScreenBase_HandleTabSelected) == 0x000004, "Wrong size on FortUpgradeScreenBase_HandleTabSelected");
static_assert(offsetof(FortUpgradeScreenBase_HandleTabSelected, TabId) == 0x000000, "Member 'FortUpgradeScreenBase_HandleTabSelected::TabId' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeScreenBase.AreUpgradesRespecTokensAvailable
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeScreenBase_AreUpgradesRespecTokensAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeScreenBase_AreUpgradesRespecTokensAvailable) == 0x000001, "Wrong alignment on FortUpgradeScreenBase_AreUpgradesRespecTokensAvailable");
static_assert(sizeof(FortUpgradeScreenBase_AreUpgradesRespecTokensAvailable) == 0x000001, "Wrong size on FortUpgradeScreenBase_AreUpgradesRespecTokensAvailable");
static_assert(offsetof(FortUpgradeScreenBase_AreUpgradesRespecTokensAvailable, ReturnValue) == 0x000000, "Member 'FortUpgradeScreenBase_AreUpgradesRespecTokensAvailable::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeScreenBase.CanPreview
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeScreenBase_CanPreview final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeScreenBase_CanPreview) == 0x000001, "Wrong alignment on FortUpgradeScreenBase_CanPreview");
static_assert(sizeof(FortUpgradeScreenBase_CanPreview) == 0x000001, "Wrong size on FortUpgradeScreenBase_CanPreview");
static_assert(offsetof(FortUpgradeScreenBase_CanPreview, ReturnValue) == 0x000000, "Member 'FortUpgradeScreenBase_CanPreview::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeScreenBase.GetUpgradesRespecTokenCount
// 0x0004 (0x0004 - 0x0000)
struct FortUpgradeScreenBase_GetUpgradesRespecTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeScreenBase_GetUpgradesRespecTokenCount) == 0x000004, "Wrong alignment on FortUpgradeScreenBase_GetUpgradesRespecTokenCount");
static_assert(sizeof(FortUpgradeScreenBase_GetUpgradesRespecTokenCount) == 0x000004, "Wrong size on FortUpgradeScreenBase_GetUpgradesRespecTokenCount");
static_assert(offsetof(FortUpgradeScreenBase_GetUpgradesRespecTokenCount, ReturnValue) == 0x000000, "Member 'FortUpgradeScreenBase_GetUpgradesRespecTokenCount::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeScreenBase.IsPreviewing
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeScreenBase_IsPreviewing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeScreenBase_IsPreviewing) == 0x000001, "Wrong alignment on FortUpgradeScreenBase_IsPreviewing");
static_assert(sizeof(FortUpgradeScreenBase_IsPreviewing) == 0x000001, "Wrong size on FortUpgradeScreenBase_IsPreviewing");
static_assert(offsetof(FortUpgradeScreenBase_IsPreviewing, ReturnValue) == 0x000000, "Member 'FortUpgradeScreenBase_IsPreviewing::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeScreenBase_Legacy.HandleTabSelected
// 0x0004 (0x0004 - 0x0000)
struct FortUpgradeScreenBase_Legacy_HandleTabSelected final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeScreenBase_Legacy_HandleTabSelected) == 0x000004, "Wrong alignment on FortUpgradeScreenBase_Legacy_HandleTabSelected");
static_assert(sizeof(FortUpgradeScreenBase_Legacy_HandleTabSelected) == 0x000004, "Wrong size on FortUpgradeScreenBase_Legacy_HandleTabSelected");
static_assert(offsetof(FortUpgradeScreenBase_Legacy_HandleTabSelected, TabId) == 0x000000, "Member 'FortUpgradeScreenBase_Legacy_HandleTabSelected::TabId' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeScreenBase_Legacy.AreUpgradesRespecTokensAvailable
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeScreenBase_Legacy_AreUpgradesRespecTokensAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeScreenBase_Legacy_AreUpgradesRespecTokensAvailable) == 0x000001, "Wrong alignment on FortUpgradeScreenBase_Legacy_AreUpgradesRespecTokensAvailable");
static_assert(sizeof(FortUpgradeScreenBase_Legacy_AreUpgradesRespecTokensAvailable) == 0x000001, "Wrong size on FortUpgradeScreenBase_Legacy_AreUpgradesRespecTokensAvailable");
static_assert(offsetof(FortUpgradeScreenBase_Legacy_AreUpgradesRespecTokensAvailable, ReturnValue) == 0x000000, "Member 'FortUpgradeScreenBase_Legacy_AreUpgradesRespecTokensAvailable::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeScreenBase_Legacy.CanPreview
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeScreenBase_Legacy_CanPreview final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeScreenBase_Legacy_CanPreview) == 0x000001, "Wrong alignment on FortUpgradeScreenBase_Legacy_CanPreview");
static_assert(sizeof(FortUpgradeScreenBase_Legacy_CanPreview) == 0x000001, "Wrong size on FortUpgradeScreenBase_Legacy_CanPreview");
static_assert(offsetof(FortUpgradeScreenBase_Legacy_CanPreview, ReturnValue) == 0x000000, "Member 'FortUpgradeScreenBase_Legacy_CanPreview::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeScreenBase_Legacy.GetUpgradesRespecTokenCount
// 0x0004 (0x0004 - 0x0000)
struct FortUpgradeScreenBase_Legacy_GetUpgradesRespecTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeScreenBase_Legacy_GetUpgradesRespecTokenCount) == 0x000004, "Wrong alignment on FortUpgradeScreenBase_Legacy_GetUpgradesRespecTokenCount");
static_assert(sizeof(FortUpgradeScreenBase_Legacy_GetUpgradesRespecTokenCount) == 0x000004, "Wrong size on FortUpgradeScreenBase_Legacy_GetUpgradesRespecTokenCount");
static_assert(offsetof(FortUpgradeScreenBase_Legacy_GetUpgradesRespecTokenCount, ReturnValue) == 0x000000, "Member 'FortUpgradeScreenBase_Legacy_GetUpgradesRespecTokenCount::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeScreenBase_Legacy.IsPreviewing
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeScreenBase_Legacy_IsPreviewing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeScreenBase_Legacy_IsPreviewing) == 0x000001, "Wrong alignment on FortUpgradeScreenBase_Legacy_IsPreviewing");
static_assert(sizeof(FortUpgradeScreenBase_Legacy_IsPreviewing) == 0x000001, "Wrong size on FortUpgradeScreenBase_Legacy_IsPreviewing");
static_assert(offsetof(FortUpgradeScreenBase_Legacy_IsPreviewing, ReturnValue) == 0x000000, "Member 'FortUpgradeScreenBase_Legacy_IsPreviewing::ReturnValue' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeTileBase.OnDataRefresh
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeTileBase_OnDataRefresh final
{
public:
	bool                                          bUpgrade;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeTileBase_OnDataRefresh) == 0x000001, "Wrong alignment on FortUpgradeTileBase_OnDataRefresh");
static_assert(sizeof(FortUpgradeTileBase_OnDataRefresh) == 0x000001, "Wrong size on FortUpgradeTileBase_OnDataRefresh");
static_assert(offsetof(FortUpgradeTileBase_OnDataRefresh, bUpgrade) == 0x000000, "Member 'FortUpgradeTileBase_OnDataRefresh::bUpgrade' has a wrong offset!");

// Function SaveTheWorldUI.FortUpgradeTileBase_Legacy.OnDataRefresh
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeTileBase_Legacy_OnDataRefresh final
{
public:
	bool                                          bUpgrade;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeTileBase_Legacy_OnDataRefresh) == 0x000001, "Wrong alignment on FortUpgradeTileBase_Legacy_OnDataRefresh");
static_assert(sizeof(FortUpgradeTileBase_Legacy_OnDataRefresh) == 0x000001, "Wrong size on FortUpgradeTileBase_Legacy_OnDataRefresh");
static_assert(offsetof(FortUpgradeTileBase_Legacy_OnDataRefresh, bUpgrade) == 0x000000, "Member 'FortUpgradeTileBase_Legacy_OnDataRefresh::bUpgrade' has a wrong offset!");

}

