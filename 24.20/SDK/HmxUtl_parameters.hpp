#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HmxUtl

#include "Basic.hpp"


namespace SDK::Params
{

// Function HmxUtl.BehaviorTreeActor.GetBlackboard
// 0x0008 (0x0008 - 0x0000)
struct BehaviorTreeActor_GetBlackboard final
{
public:
	class UBlackboardComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BehaviorTreeActor_GetBlackboard) == 0x000008, "Wrong alignment on BehaviorTreeActor_GetBlackboard");
static_assert(sizeof(BehaviorTreeActor_GetBlackboard) == 0x000008, "Wrong size on BehaviorTreeActor_GetBlackboard");
static_assert(offsetof(BehaviorTreeActor_GetBlackboard, ReturnValue) == 0x000000, "Member 'BehaviorTreeActor_GetBlackboard::ReturnValue' has a wrong offset!");

// Function HmxUtl.BehaviorTreeActor.RunBehaviorTree
// 0x0001 (0x0001 - 0x0000)
struct BehaviorTreeActor_RunBehaviorTree final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BehaviorTreeActor_RunBehaviorTree) == 0x000001, "Wrong alignment on BehaviorTreeActor_RunBehaviorTree");
static_assert(sizeof(BehaviorTreeActor_RunBehaviorTree) == 0x000001, "Wrong size on BehaviorTreeActor_RunBehaviorTree");
static_assert(offsetof(BehaviorTreeActor_RunBehaviorTree, ReturnValue) == 0x000000, "Member 'BehaviorTreeActor_RunBehaviorTree::ReturnValue' has a wrong offset!");

// Function HmxUtl.HmxBPFL.IsNone
// 0x0008 (0x0008 - 0x0000)
struct HmxBPFL_IsNone final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HmxBPFL_IsNone) == 0x000004, "Wrong alignment on HmxBPFL_IsNone");
static_assert(sizeof(HmxBPFL_IsNone) == 0x000008, "Wrong size on HmxBPFL_IsNone");
static_assert(offsetof(HmxBPFL_IsNone, Name_0) == 0x000000, "Member 'HmxBPFL_IsNone::Name_0' has a wrong offset!");
static_assert(offsetof(HmxBPFL_IsNone, ReturnValue) == 0x000004, "Member 'HmxBPFL_IsNone::ReturnValue' has a wrong offset!");

// Function HmxUtl.HmxBPFL.LoopDecrement
// 0x0010 (0x0010 - 0x0000)
struct HmxBPFL_LoopDecrement final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         min_0;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         max_0;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HmxBPFL_LoopDecrement) == 0x000004, "Wrong alignment on HmxBPFL_LoopDecrement");
static_assert(sizeof(HmxBPFL_LoopDecrement) == 0x000010, "Wrong size on HmxBPFL_LoopDecrement");
static_assert(offsetof(HmxBPFL_LoopDecrement, Value) == 0x000000, "Member 'HmxBPFL_LoopDecrement::Value' has a wrong offset!");
static_assert(offsetof(HmxBPFL_LoopDecrement, min_0) == 0x000004, "Member 'HmxBPFL_LoopDecrement::min_0' has a wrong offset!");
static_assert(offsetof(HmxBPFL_LoopDecrement, max_0) == 0x000008, "Member 'HmxBPFL_LoopDecrement::max_0' has a wrong offset!");
static_assert(offsetof(HmxBPFL_LoopDecrement, ReturnValue) == 0x00000C, "Member 'HmxBPFL_LoopDecrement::ReturnValue' has a wrong offset!");

// Function HmxUtl.HmxBPFL.LoopIncrement
// 0x0010 (0x0010 - 0x0000)
struct HmxBPFL_LoopIncrement final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         min_0;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         max_0;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HmxBPFL_LoopIncrement) == 0x000004, "Wrong alignment on HmxBPFL_LoopIncrement");
static_assert(sizeof(HmxBPFL_LoopIncrement) == 0x000010, "Wrong size on HmxBPFL_LoopIncrement");
static_assert(offsetof(HmxBPFL_LoopIncrement, Value) == 0x000000, "Member 'HmxBPFL_LoopIncrement::Value' has a wrong offset!");
static_assert(offsetof(HmxBPFL_LoopIncrement, min_0) == 0x000004, "Member 'HmxBPFL_LoopIncrement::min_0' has a wrong offset!");
static_assert(offsetof(HmxBPFL_LoopIncrement, max_0) == 0x000008, "Member 'HmxBPFL_LoopIncrement::max_0' has a wrong offset!");
static_assert(offsetof(HmxBPFL_LoopIncrement, ReturnValue) == 0x00000C, "Member 'HmxBPFL_LoopIncrement::ReturnValue' has a wrong offset!");

// Function HmxUtl.HmxBPFL.Modulo
// 0x000C (0x000C - 0x0000)
struct HmxBPFL_Modulo final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mod;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HmxBPFL_Modulo) == 0x000004, "Wrong alignment on HmxBPFL_Modulo");
static_assert(sizeof(HmxBPFL_Modulo) == 0x00000C, "Wrong size on HmxBPFL_Modulo");
static_assert(offsetof(HmxBPFL_Modulo, Value) == 0x000000, "Member 'HmxBPFL_Modulo::Value' has a wrong offset!");
static_assert(offsetof(HmxBPFL_Modulo, Mod) == 0x000004, "Member 'HmxBPFL_Modulo::Mod' has a wrong offset!");
static_assert(offsetof(HmxBPFL_Modulo, ReturnValue) == 0x000008, "Member 'HmxBPFL_Modulo::ReturnValue' has a wrong offset!");

}

