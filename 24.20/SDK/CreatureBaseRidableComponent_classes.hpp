#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CreatureBaseRidableComponent

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "RidingCodeRuntime_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CreatureBaseRidableComponent.CreatureBaseRidableComponent_C
// 0x05A8 (0x0B70 - 0x05C8)
class UCreatureBaseRidableComponent_C : public UControllableRidableComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTagContainer                  T_CreatureIsBeingRidden;                           // 0x05D0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_CreatureIsBeingRidden;                          // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_CreatureIsBeingRidden_Passive;                  // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugDisplay;                                     // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DebugTickRate;                                     // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DebugServerRiderLocation;                          // 0x0610(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CapsuleRadiusOffset;                               // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CapsuleHalfHeightOffset;                           // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  T_RidingSpecialAbility;                            // 0x0638(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimSequence*                          IdleAnim_Add;                                      // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          RunAnim_Add;                                       // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace*                            TurnBS;                                            // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MinSpeedToRun;                                     // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Run_RampIntoSpeed;                                 // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Run_RampIntoSpeed_ADS;                             // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Run_PlayRate;                                      // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Run_PlayRate_ADS;                                  // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpringAlpha;                                       // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpringAlpha_ADS;                                   // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Idle_Alpha;                                        // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Idle_Alpha_ADS;                                    // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Run_Alpha;                                         // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Run_Alpha_ADS;                                     // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Turn_Alpha;                                        // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Turn_Alpha_ADS;                                    // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Clamp_AnimPose_LastResort;                         // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Clamp_Foot_R_Adjust;                               // 0x06E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Clamp_Foot_L_Adjust;                               // 0x06F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        CapsuleRadiusOffset_Emote;                         // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CapsuleHalfHeightOffset_Emote;                     // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Clamp_Location_Offset;                             // 0x0720(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Clamp_Rotation_Offset;                             // 0x0738(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Clamp_ScaleAdjust;                                 // 0x0750(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RidableSocketName;                                 // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_76C[0x4];                                      // 0x076C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RidableSocket_Alpha;                               // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            GE_CooldownOverride;                               // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FGameplayTagContainer                  T_CreatureOverrideCooldown;                        // 0x0780(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<ECollisionChannel, ECollisionResponse>   OriginalCollisionResponseMap;                      // 0x07A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSoundIndicatorIconPicker              RidingSoundIndicatorIconOverride;                  // 0x07F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(double JumpPitchInterpSpeed)> AudioOnJump;                                       // 0x0818(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              AudioOnJumpApex;                                   // 0x0828(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	uint8                                         MovementMode;                                      // 0x0838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFalling;                                          // 0x0839(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83A[0x6];                                      // 0x083A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         RidingAbilityEnable_HF;                            // 0x0840(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        JumpAttach_GroundHeightMin;                        // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JumpAttach_GroundHeightBuffer;                     // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAltRidingMessage;                               // 0x0878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_879[0x7];                                      // 0x0879(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Riding_Interaction_Text;                           // 0x0880(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        currentEnergyValue;                                // 0x0898(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UPlayerRiderComponent_C*                PlayerRiderComponentRef;                           // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ANPC_Pawn_Wildlife_Parent_C*            NPCPawnWildlifeRef;                                // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        previousTimeTracked;                               // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        energyTrackingDeltaTime;                           // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldHaveEnergy;                                  // 0x08C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C1[0x7];                                      // 0x08C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        EnergyRateOfDecayStopped;                          // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          allowUpdateEnergyTrackingTick;                     // 0x08D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lastBeingRiddenState;                              // 0x08D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D2[0x6];                                      // 0x08D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   EnergyRateOfDecayMoving;                           // 0x08D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   EnergyRateOfDecaySprinting;                        // 0x08E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentEnergyRateOfRecharge;                       // 0x08F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   ExhaustedEnergyRateOfRecharge;                     // 0x0900(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        EnergyWarningThreshold;                            // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EnergyCriticalThreshold;                           // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          energyWarningActive;                               // 0x0920(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          energyCriticalActive;                              // 0x0921(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_922[0x6];                                      // 0x0922(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        minMovementSpeedTreshold;                          // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsJumping;                                         // 0x0930(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_931[0x7];                                      // 0x0931(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        EnergyRegenThreshold;                              // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysRegenWhenNotRidden;                          // 0x0940(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_941[0x7];                                      // 0x0941(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            GE_EnergyWarning;                                  // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            GE_EnergyCritical;                                 // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            GE_EnergyDepleted;                                 // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FGameplayTagContainer                  T_EnergyWarning;                                   // 0x0960(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  T_EnergyCritical;                                  // 0x0980(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  T_EnergyDepleted;                                  // 0x09A0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  T_CannotRideBucket;                                // 0x09C0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 Gameplay_Effect;                                   // 0x09E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SprintingAbilityTag;                               // 0x09E8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9EC[0x4];                                      // 0x09EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_EatToRefuel;                                    // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F8[0x8];                                      // 0x09F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            IconBrush;                                         // 0x0A00(0x00C0)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_Creature_Sprint;                                // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundLibrary*                          RidingFoleySoundLibrary;                           // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TagsPreventSprinting;                              // 0x0AD0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class FText Name, const struct FSlateBrush& Icon)> RidableUIStart;                                    // 0x0AF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double Energy, bool bIsResting)> RidableUIUpdateEnergy;                             // 0x0B00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FGameplayTag                           OutOfEnergySoundLibTag;                            // 0x0B10(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SprintStartSoundLibTag;                            // 0x0B14(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	ETInteractionType                             Riding_Interaction_Type;                           // 0x0B18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B19[0x7];                                      // 0x0B19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StartInAirTimestamp;                               // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RetryJumpExitTimerHandle;                          // 0x0B28(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           MountLandedCueTag;                                 // 0x0B30(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B34[0x4];                                      // 0x0B34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            GE_BlockCreatureAttackOnDismount;                  // 0x0B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          EnergyRegenActive;                                 // 0x0B40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B41[0x7];                                      // 0x0B41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BlockPetting_TagContainer;                         // 0x0B48(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          infiniteStaminaBuffEnabled;                        // 0x0B68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B69[0x3];                                      // 0x0B69(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           InfiniteStaminaEffect_GameplayCueTag;              // 0x0B6C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Activate_Regen();
	void Added_FBD936634BCC61A726DA279226E2F4BE();
	void ApplyCollisionResponse(TArray<ECollisionChannel>& Channels, ECollisionResponse Response);
	void ApplyGEToSelf(TSubclassOf<class UGameplayEffect> GameplayEffectClass, bool* IsValidClass);
	void CanJumpExit(bool* CanJumpExit_0);
	void CheatSetStaminaPercent(const float StaminaPercent);
	void Check_Regen_on_Started_Riding();
	void Check_Regen_on_Stopped_Riding();
	void CommitEnergyCosts(bool RequireAllEnergy, double EnergyCost, bool* Success);
	void ConvertedDispatcher_Event_0(bool Converted, class AFortPawn* InstigatorPawn);
	void Deactivate_Regen();
	void DetermineRateOfChange(double* rateOfChange);
	void EnergyTrackingStart();
	void EnergyTrackingStop();
	void ExecuteUbergraph_CreatureBaseRidableComponent(int32 EntryPoint);
	void GetRiderLocation(struct FVector* Location);
	void GetRidingInfoFromTarget(double* JumpAttachGroundHeightMin, double* JumpAttachGroundHeightBuffer, bool* UsesAltRidingMessage);
	void HandleAbilityHeld();
	void HandleAbilityStarted();
	void HandleAbilityStopped();
	void HandleCancelSprint(const bool bAbilityInputHeld, const bool bForceCancel);
	void HandleEnemyFoleySoundLibrary(class UActorComponent* Rider, bool bIsRiding);
	void HandleJumpStarted();
	void HandleJumpStopped();
	void HandleRiderStartedRiding(class URiderComponent* Rider);
	void HandleRiderStoppedRiding(class URiderComponent* Rider);
	void KickRiderOffSelf();
	void ManualEnergyDepleted();
	void NPCPawnInteractWithDispatcher_Event_0(class AActor* AIPawn, class AFortPlayerPawn* InteractingPlayerPawn);
	void OnEatToRefuel(double EnergyCost);
	void OnEnergyDepletedClient();
	void OnEnergyUpdate(double Energy, bool bWarningActive);
	void OnJumping(double JumpPitchInterpSpeed);
	void OnJumpingApex();
	void OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void OnPawnHealthChanged_Event_0();
	void OnRep_currentEnergyValue();
	void OnRep_IdleAnim_Add();
	void OnSprintStarted();
	void Propagate_Immunity_Fall_Damage();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Removed_AD51144144164FD235EE5BA4F6E87456();
	void Removed_C4C6E29B4217C014B9DE0E80B7134D6E();
	void RemoveGEByTag(const struct FGameplayTagContainer& Tags);
	void RestoreCollisionResponses();
	void ReTryJumpExit();
	void SetInfiniteStaminaBuff(bool Enabled);
	void SetWildlifeHealth();
	void StopSprinting();
	void TestThreshold(bool isDecaying, double CurrentValue, double testTreshold, bool PreviousState, bool* crossedThreshold);
	void ToggleRiding(class AActor* PlayerPawn, class AActor* Target, bool ShouldRide, bool* bChangedRiding);
	void ToggleRidingAlternative();
	void UpdateAnimInputBool(class AFortPawn* FortPawn, bool IsBeingRidden_0);
	void UpdateDebug();
	void UpdateEnergy();
	void UpdateLootAnimalGlow(double Scale);
	void UpdateValue(double TargetValue, double rateOfChange, double DeltaTime, double* updatedValue, bool* EnergyDepleted);
	void UseEnergyAmountServer(double EnergyCost);

	bool CanBePet(class URiderComponent* Rider) const;
	bool CanRiderPlayEmote(const class URiderComponent* Rider) const;
	void GetRiderCapsuleSize(class URiderComponent* Rider, double* RiderCapsuleRadius, double* RiderCapsuleHH) const;
	void GetRidingCapsuleSize(const class URiderComponent* Rider, float OriginalRadius, float OriginalHalfHeight, float* OutRadius, float* OutHalfHeight) const;
	void GetRidingEmoteCapsuleSize(const class URiderComponent* Rider, float OriginalRadius, float OriginalHalfHeight, float* OutRadius, float* OutHalfHeight) const;
	void IsSwimming(bool* IsSwimming_0) const;
	bool ShouldCameraFocusOnRidable(const class URiderComponent* Rider) const;
	bool ShouldSetAsViewTarget(const class URiderComponent* Rider) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CreatureBaseRidableComponent_C">();
	}
	static class UCreatureBaseRidableComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreatureBaseRidableComponent_C>();
	}
};
static_assert(alignof(UCreatureBaseRidableComponent_C) == 0x000010, "Wrong alignment on UCreatureBaseRidableComponent_C");
static_assert(sizeof(UCreatureBaseRidableComponent_C) == 0x000B70, "Wrong size on UCreatureBaseRidableComponent_C");
static_assert(offsetof(UCreatureBaseRidableComponent_C, UberGraphFrame) == 0x0005C8, "Member 'UCreatureBaseRidableComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, T_CreatureIsBeingRidden) == 0x0005D0, "Member 'UCreatureBaseRidableComponent_C::T_CreatureIsBeingRidden' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_CreatureIsBeingRidden) == 0x0005F0, "Member 'UCreatureBaseRidableComponent_C::GE_CreatureIsBeingRidden' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_CreatureIsBeingRidden_Passive) == 0x0005F8, "Member 'UCreatureBaseRidableComponent_C::GE_CreatureIsBeingRidden_Passive' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, bDebugDisplay) == 0x000600, "Member 'UCreatureBaseRidableComponent_C::bDebugDisplay' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, DebugTickRate) == 0x000608, "Member 'UCreatureBaseRidableComponent_C::DebugTickRate' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, DebugServerRiderLocation) == 0x000610, "Member 'UCreatureBaseRidableComponent_C::DebugServerRiderLocation' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, CapsuleRadiusOffset) == 0x000628, "Member 'UCreatureBaseRidableComponent_C::CapsuleRadiusOffset' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, CapsuleHalfHeightOffset) == 0x000630, "Member 'UCreatureBaseRidableComponent_C::CapsuleHalfHeightOffset' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, T_RidingSpecialAbility) == 0x000638, "Member 'UCreatureBaseRidableComponent_C::T_RidingSpecialAbility' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, IdleAnim_Add) == 0x000658, "Member 'UCreatureBaseRidableComponent_C::IdleAnim_Add' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RunAnim_Add) == 0x000660, "Member 'UCreatureBaseRidableComponent_C::RunAnim_Add' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, TurnBS) == 0x000668, "Member 'UCreatureBaseRidableComponent_C::TurnBS' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, MinSpeedToRun) == 0x000670, "Member 'UCreatureBaseRidableComponent_C::MinSpeedToRun' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Run_RampIntoSpeed) == 0x000678, "Member 'UCreatureBaseRidableComponent_C::Run_RampIntoSpeed' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Run_RampIntoSpeed_ADS) == 0x000680, "Member 'UCreatureBaseRidableComponent_C::Run_RampIntoSpeed_ADS' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Run_PlayRate) == 0x000688, "Member 'UCreatureBaseRidableComponent_C::Run_PlayRate' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Run_PlayRate_ADS) == 0x000690, "Member 'UCreatureBaseRidableComponent_C::Run_PlayRate_ADS' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, SpringAlpha) == 0x000698, "Member 'UCreatureBaseRidableComponent_C::SpringAlpha' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, SpringAlpha_ADS) == 0x0006A0, "Member 'UCreatureBaseRidableComponent_C::SpringAlpha_ADS' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Idle_Alpha) == 0x0006A8, "Member 'UCreatureBaseRidableComponent_C::Idle_Alpha' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Idle_Alpha_ADS) == 0x0006B0, "Member 'UCreatureBaseRidableComponent_C::Idle_Alpha_ADS' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Run_Alpha) == 0x0006B8, "Member 'UCreatureBaseRidableComponent_C::Run_Alpha' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Run_Alpha_ADS) == 0x0006C0, "Member 'UCreatureBaseRidableComponent_C::Run_Alpha_ADS' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Turn_Alpha) == 0x0006C8, "Member 'UCreatureBaseRidableComponent_C::Turn_Alpha' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Turn_Alpha_ADS) == 0x0006D0, "Member 'UCreatureBaseRidableComponent_C::Turn_Alpha_ADS' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Clamp_AnimPose_LastResort) == 0x0006D8, "Member 'UCreatureBaseRidableComponent_C::Clamp_AnimPose_LastResort' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Clamp_Foot_R_Adjust) == 0x0006E0, "Member 'UCreatureBaseRidableComponent_C::Clamp_Foot_R_Adjust' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Clamp_Foot_L_Adjust) == 0x0006F8, "Member 'UCreatureBaseRidableComponent_C::Clamp_Foot_L_Adjust' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, CapsuleRadiusOffset_Emote) == 0x000710, "Member 'UCreatureBaseRidableComponent_C::CapsuleRadiusOffset_Emote' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, CapsuleHalfHeightOffset_Emote) == 0x000718, "Member 'UCreatureBaseRidableComponent_C::CapsuleHalfHeightOffset_Emote' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Clamp_Location_Offset) == 0x000720, "Member 'UCreatureBaseRidableComponent_C::Clamp_Location_Offset' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Clamp_Rotation_Offset) == 0x000738, "Member 'UCreatureBaseRidableComponent_C::Clamp_Rotation_Offset' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Clamp_ScaleAdjust) == 0x000750, "Member 'UCreatureBaseRidableComponent_C::Clamp_ScaleAdjust' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RidableSocketName) == 0x000768, "Member 'UCreatureBaseRidableComponent_C::RidableSocketName' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RidableSocket_Alpha) == 0x000770, "Member 'UCreatureBaseRidableComponent_C::RidableSocket_Alpha' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_CooldownOverride) == 0x000778, "Member 'UCreatureBaseRidableComponent_C::GE_CooldownOverride' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, T_CreatureOverrideCooldown) == 0x000780, "Member 'UCreatureBaseRidableComponent_C::T_CreatureOverrideCooldown' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, OriginalCollisionResponseMap) == 0x0007A0, "Member 'UCreatureBaseRidableComponent_C::OriginalCollisionResponseMap' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RidingSoundIndicatorIconOverride) == 0x0007F0, "Member 'UCreatureBaseRidableComponent_C::RidingSoundIndicatorIconOverride' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, AudioOnJump) == 0x000818, "Member 'UCreatureBaseRidableComponent_C::AudioOnJump' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, AudioOnJumpApex) == 0x000828, "Member 'UCreatureBaseRidableComponent_C::AudioOnJumpApex' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, MovementMode) == 0x000838, "Member 'UCreatureBaseRidableComponent_C::MovementMode' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, bFalling) == 0x000839, "Member 'UCreatureBaseRidableComponent_C::bFalling' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RidingAbilityEnable_HF) == 0x000840, "Member 'UCreatureBaseRidableComponent_C::RidingAbilityEnable_HF' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, JumpAttach_GroundHeightMin) == 0x000868, "Member 'UCreatureBaseRidableComponent_C::JumpAttach_GroundHeightMin' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, JumpAttach_GroundHeightBuffer) == 0x000870, "Member 'UCreatureBaseRidableComponent_C::JumpAttach_GroundHeightBuffer' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, UseAltRidingMessage) == 0x000878, "Member 'UCreatureBaseRidableComponent_C::UseAltRidingMessage' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Riding_Interaction_Text) == 0x000880, "Member 'UCreatureBaseRidableComponent_C::Riding_Interaction_Text' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, currentEnergyValue) == 0x000898, "Member 'UCreatureBaseRidableComponent_C::currentEnergyValue' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, PlayerRiderComponentRef) == 0x0008A0, "Member 'UCreatureBaseRidableComponent_C::PlayerRiderComponentRef' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, NPCPawnWildlifeRef) == 0x0008A8, "Member 'UCreatureBaseRidableComponent_C::NPCPawnWildlifeRef' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, previousTimeTracked) == 0x0008B0, "Member 'UCreatureBaseRidableComponent_C::previousTimeTracked' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, energyTrackingDeltaTime) == 0x0008B8, "Member 'UCreatureBaseRidableComponent_C::energyTrackingDeltaTime' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, ShouldHaveEnergy) == 0x0008C0, "Member 'UCreatureBaseRidableComponent_C::ShouldHaveEnergy' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, EnergyRateOfDecayStopped) == 0x0008C8, "Member 'UCreatureBaseRidableComponent_C::EnergyRateOfDecayStopped' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, allowUpdateEnergyTrackingTick) == 0x0008D0, "Member 'UCreatureBaseRidableComponent_C::allowUpdateEnergyTrackingTick' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, lastBeingRiddenState) == 0x0008D1, "Member 'UCreatureBaseRidableComponent_C::lastBeingRiddenState' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, EnergyRateOfDecayMoving) == 0x0008D8, "Member 'UCreatureBaseRidableComponent_C::EnergyRateOfDecayMoving' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, EnergyRateOfDecaySprinting) == 0x0008E8, "Member 'UCreatureBaseRidableComponent_C::EnergyRateOfDecaySprinting' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, CurrentEnergyRateOfRecharge) == 0x0008F8, "Member 'UCreatureBaseRidableComponent_C::CurrentEnergyRateOfRecharge' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, ExhaustedEnergyRateOfRecharge) == 0x000900, "Member 'UCreatureBaseRidableComponent_C::ExhaustedEnergyRateOfRecharge' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, EnergyWarningThreshold) == 0x000910, "Member 'UCreatureBaseRidableComponent_C::EnergyWarningThreshold' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, EnergyCriticalThreshold) == 0x000918, "Member 'UCreatureBaseRidableComponent_C::EnergyCriticalThreshold' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, energyWarningActive) == 0x000920, "Member 'UCreatureBaseRidableComponent_C::energyWarningActive' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, energyCriticalActive) == 0x000921, "Member 'UCreatureBaseRidableComponent_C::energyCriticalActive' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, minMovementSpeedTreshold) == 0x000928, "Member 'UCreatureBaseRidableComponent_C::minMovementSpeedTreshold' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, IsJumping) == 0x000930, "Member 'UCreatureBaseRidableComponent_C::IsJumping' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, EnergyRegenThreshold) == 0x000938, "Member 'UCreatureBaseRidableComponent_C::EnergyRegenThreshold' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, AlwaysRegenWhenNotRidden) == 0x000940, "Member 'UCreatureBaseRidableComponent_C::AlwaysRegenWhenNotRidden' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_EnergyWarning) == 0x000948, "Member 'UCreatureBaseRidableComponent_C::GE_EnergyWarning' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_EnergyCritical) == 0x000950, "Member 'UCreatureBaseRidableComponent_C::GE_EnergyCritical' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_EnergyDepleted) == 0x000958, "Member 'UCreatureBaseRidableComponent_C::GE_EnergyDepleted' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, T_EnergyWarning) == 0x000960, "Member 'UCreatureBaseRidableComponent_C::T_EnergyWarning' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, T_EnergyCritical) == 0x000980, "Member 'UCreatureBaseRidableComponent_C::T_EnergyCritical' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, T_EnergyDepleted) == 0x0009A0, "Member 'UCreatureBaseRidableComponent_C::T_EnergyDepleted' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, T_CannotRideBucket) == 0x0009C0, "Member 'UCreatureBaseRidableComponent_C::T_CannotRideBucket' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Gameplay_Effect) == 0x0009E0, "Member 'UCreatureBaseRidableComponent_C::Gameplay_Effect' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, SprintingAbilityTag) == 0x0009E8, "Member 'UCreatureBaseRidableComponent_C::SprintingAbilityTag' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_EatToRefuel) == 0x0009F0, "Member 'UCreatureBaseRidableComponent_C::GE_EatToRefuel' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, IconBrush) == 0x000A00, "Member 'UCreatureBaseRidableComponent_C::IconBrush' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_Creature_Sprint) == 0x000AC0, "Member 'UCreatureBaseRidableComponent_C::GE_Creature_Sprint' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RidingFoleySoundLibrary) == 0x000AC8, "Member 'UCreatureBaseRidableComponent_C::RidingFoleySoundLibrary' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, TagsPreventSprinting) == 0x000AD0, "Member 'UCreatureBaseRidableComponent_C::TagsPreventSprinting' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RidableUIStart) == 0x000AF0, "Member 'UCreatureBaseRidableComponent_C::RidableUIStart' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RidableUIUpdateEnergy) == 0x000B00, "Member 'UCreatureBaseRidableComponent_C::RidableUIUpdateEnergy' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, OutOfEnergySoundLibTag) == 0x000B10, "Member 'UCreatureBaseRidableComponent_C::OutOfEnergySoundLibTag' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, SprintStartSoundLibTag) == 0x000B14, "Member 'UCreatureBaseRidableComponent_C::SprintStartSoundLibTag' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Riding_Interaction_Type) == 0x000B18, "Member 'UCreatureBaseRidableComponent_C::Riding_Interaction_Type' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, StartInAirTimestamp) == 0x000B20, "Member 'UCreatureBaseRidableComponent_C::StartInAirTimestamp' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RetryJumpExitTimerHandle) == 0x000B28, "Member 'UCreatureBaseRidableComponent_C::RetryJumpExitTimerHandle' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, MountLandedCueTag) == 0x000B30, "Member 'UCreatureBaseRidableComponent_C::MountLandedCueTag' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_BlockCreatureAttackOnDismount) == 0x000B38, "Member 'UCreatureBaseRidableComponent_C::GE_BlockCreatureAttackOnDismount' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, EnergyRegenActive) == 0x000B40, "Member 'UCreatureBaseRidableComponent_C::EnergyRegenActive' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, BlockPetting_TagContainer) == 0x000B48, "Member 'UCreatureBaseRidableComponent_C::BlockPetting_TagContainer' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, infiniteStaminaBuffEnabled) == 0x000B68, "Member 'UCreatureBaseRidableComponent_C::infiniteStaminaBuffEnabled' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, InfiniteStaminaEffect_GameplayCueTag) == 0x000B6C, "Member 'UCreatureBaseRidableComponent_C::InfiniteStaminaEffect_GameplayCueTag' has a wrong offset!");

}

